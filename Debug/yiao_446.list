
yiao_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014d94  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08014f68  08014f68  00015f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e44  08015e44  000171d0  2**0
                  CONTENTS
  4 .ARM          00000008  08015e44  08015e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e4c  08015e4c  000171d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08015e4c  08015e4c  00016e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015e58  08015e58  00016e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08015e5c  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010dac  200001d0  0801602c  000171d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010f7c  0801602c  00017f7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000243df  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e32  00000000  00000000  0003b5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00040418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012eb  00000000  00000000  00041ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b09a  00000000  00000000  00042f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000208c0  00000000  00000000  0006e025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9e26  00000000  00000000  0008e8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0017870b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c0  00000000  00000000  00178784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017fd44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014f4c 	.word	0x08014f4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08014f4c 	.word	0x08014f4c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3a:	f000 b9b5 	b.w	8000ea8 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eba:	eef0 7ae7 	vabs.f32	s15, s15
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_ZN8DC_motor5setupEv>:
/* DC_motor.cpp */
#include "DC_motor.h"

void DC_motor::setup() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start(this->_enc_htim, TIM_CHANNEL_ALL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	213c      	movs	r1, #60	@ 0x3c
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 faf8 	bl	80054d0 <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(this->_PWM_htim, this->_PWM_TIM_CHANNEL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	f004 f982 	bl	80051f4 <HAL_TIM_PWM_Start>
    this->_arr = __HAL_TIM_GET_AUTORELOAD(this->_PWM_htim);//理論上就是1000，不應該改變
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZN8DC_motor8setspeedEf>:

void DC_motor::setspeed(float goal_speed) {
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	ed87 0a00 	vstr	s0, [r7]
    this->_sp = goal_speed;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	619a      	str	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_ZN8DC_motor7set_pidEff>:

void DC_motor::set_pid(float kp, float ki){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f38:	edc7 0a01 	vstr	s1, [r7, #4]
	this->_kp = kp;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
	this->_ki = ki;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN8DC_motor12update_speedEi>:

void DC_motor::update_speed(int sign) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
    this->_enc = __HAL_TIM_GET_COUNTER(this->_enc_htim);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COUNTER(this->_enc_htim, 0);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    this->_speed = sign * (float)this->_enc / (4.0f * this->_resolution * span * this->_reduction_ratio);// 100.0 *   //每秒圈數
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000f9a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_ZN8DC_motor6PI_runEi>:

void DC_motor::PI_run(int index) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    float bound = 1.0f / this->_ki;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe4:	edc7 7a03 	vstr	s15, [r7, #12]
    this->_error = this->_sp - this->_speed;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edc3 7a08 	vstr	s15, [r3, #32]

    this->_integral += this->_error * span;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edd3 6a08 	vldr	s13, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//    differential = error - pre_error;
    if(this->_integral > bound) this->_integral = bound;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001024:	ed97 7a03 	vldr	s14, [r7, #12]
 8001028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d503      	bpl.n	800103a <_ZN8DC_motor6PI_runEi+0x6e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
 8001038:	e012      	b.n	8001060 <_ZN8DC_motor6PI_runEi+0x94>
    else if(this->_integral < -bound) this->_integral = -bound;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001040:	edd7 7a03 	vldr	s15, [r7, #12]
 8001044:	eef1 7a67 	vneg.f32	s15, s15
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d506      	bpl.n	8001060 <_ZN8DC_motor6PI_runEi+0x94>
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	eef1 7a67 	vneg.f32	s15, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//    else if (fabs(this->_speed) < 0.0005) this->_integral =0;
//    if (ki * integral >= 1) ki * integral =0.01;

    this->_u = this->_kp * this->_error + this->_ki * this->_integral ;//+ kd * differential
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	edd3 7a08 	vldr	s15, [r3, #32]
 800106c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//    pre_error = error;

    if (this->_u > 1) this->_u = 1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	dd04      	ble.n	80010a8 <_ZN8DC_motor6PI_runEi+0xdc>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a6:	e00c      	b.n	80010c2 <_ZN8DC_motor6PI_runEi+0xf6>
    else if (this->_u < -1) this->_u = -1;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010ae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d502      	bpl.n	80010c2 <_ZN8DC_motor6PI_runEi+0xf6>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a34      	ldr	r2, [pc, #208]	@ (8001190 <_ZN8DC_motor6PI_runEi+0x1c4>)
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30

    this->_pulse = fabs(this->_u) * this->_arr;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	f7ff feee 	bl	8000eac <_ZSt4fabsf>
 80010d0:	eeb0 7a40 	vmov.f32	s14, s0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e2:	ee17 2a90 	vmov	r2, s15
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(this->_u > 0) HAL_GPIO_WritePin(this->_dirPort, this->_dirPin, GPIO_PIN_SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	dd08      	ble.n	800110c <_ZN8DC_motor6PI_runEi+0x140>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6898      	ldr	r0, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	899b      	ldrh	r3, [r3, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f003 f9b7 	bl	8004478 <HAL_GPIO_WritePin>
 800110a:	e007      	b.n	800111c <_ZN8DC_motor6PI_runEi+0x150>
    else HAL_GPIO_WritePin(this->_dirPort, this->_dirPin, GPIO_PIN_RESET);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6898      	ldr	r0, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	899b      	ldrh	r3, [r3, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	f003 f9ae 	bl	8004478 <HAL_GPIO_WritePin>

    if(this->_pulse <= range[index]) this->_pulse = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001120:	491c      	ldr	r1, [pc, #112]	@ (8001194 <_ZN8DC_motor6PI_runEi+0x1c8>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001128:	429a      	cmp	r2, r3
 800112a:	dc02      	bgt.n	8001132 <_ZN8DC_motor6PI_runEi+0x166>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	651a      	str	r2, [r3, #80]	@ 0x50
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d107      	bne.n	800114a <_ZN8DC_motor6PI_runEi+0x17e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001148:	e01e      	b.n	8001188 <_ZN8DC_motor6PI_runEi+0x1bc>
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d107      	bne.n	8001162 <_ZN8DC_motor6PI_runEi+0x196>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001160:	e012      	b.n	8001188 <_ZN8DC_motor6PI_runEi+0x1bc>
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b08      	cmp	r3, #8
 8001168:	d107      	bne.n	800117a <_ZN8DC_motor6PI_runEi+0x1ae>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001178:	e006      	b.n	8001188 <_ZN8DC_motor6PI_runEi+0x1bc>
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	bf800000 	.word	0xbf800000
 8001194:	2000002c 	.word	0x2000002c

08001198 <_ZN8DC_motor9get_speedEv>:

float DC_motor::get_speed() {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    return this->_speed;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	ee07 3a90 	vmov	s15, r3
}
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>:
#include "math.h"
#include "chassis.h"//for range

class DC_motor {
public:
    DC_motor(TIM_HandleTypeDef* enc, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* pwm, uint32_t ch)
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	807b      	strh	r3, [r7, #2]
    		: _enc_htim(enc), _dirPort(port), _dirPin(pin), _PWM_htim(pwm), _PWM_TIM_CHANNEL(ch) {}
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xac>)
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	819a      	strh	r2, [r3, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	@ 0x30
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	@ 0x3c
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f04f 4287 	mov.w	r2, #1132462080	@ 0x43800000
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb0>)
 8001246:	649a      	str	r2, [r3, #72]	@ 0x48
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb4>)
 800124c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	651a      	str	r2, [r3, #80]	@ 0x50
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	3a83126f 	.word	0x3a83126f
 8001268:	41c00000 	.word	0x41c00000
 800126c:	447a0000 	.word	0x447a0000

08001270 <_Z13chassis_setupv>:
	wheel_BR.setspeed(try_speed);
	wheel_BR.update_speed(1);
	wheel_BR.PI_run(2);
}

void chassis_setup() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim5);
 8001274:	4822      	ldr	r0, [pc, #136]	@ (8001300 <_Z13chassis_setupv+0x90>)
 8001276:	f003 fefd 	bl	8005074 <HAL_TIM_Base_Start_IT>
    wheel_FR.setup();
 800127a:	4822      	ldr	r0, [pc, #136]	@ (8001304 <_Z13chassis_setupv+0x94>)
 800127c:	f7ff fe26 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_FR.set_pid(kp[0], ki[0]);
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <_Z13chassis_setupv+0x98>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <_Z13chassis_setupv+0x9c>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	eef0 0a47 	vmov.f32	s1, s14
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	481b      	ldr	r0, [pc, #108]	@ (8001304 <_Z13chassis_setupv+0x94>)
 8001296:	f7ff fe49 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
    wheel_FL.setup();
 800129a:	481d      	ldr	r0, [pc, #116]	@ (8001310 <_Z13chassis_setupv+0xa0>)
 800129c:	f7ff fe16 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_FL.set_pid(kp[1], ki[1]);
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <_Z13chassis_setupv+0x98>)
 80012a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <_Z13chassis_setupv+0x9c>)
 80012a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ac:	eef0 0a47 	vmov.f32	s1, s14
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	4816      	ldr	r0, [pc, #88]	@ (8001310 <_Z13chassis_setupv+0xa0>)
 80012b6:	f7ff fe39 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
    wheel_BR.setup();
 80012ba:	4816      	ldr	r0, [pc, #88]	@ (8001314 <_Z13chassis_setupv+0xa4>)
 80012bc:	f7ff fe06 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_BR.set_pid(kp[2], ki[2]);
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <_Z13chassis_setupv+0x98>)
 80012c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <_Z13chassis_setupv+0x9c>)
 80012c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012cc:	eef0 0a47 	vmov.f32	s1, s14
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	480f      	ldr	r0, [pc, #60]	@ (8001314 <_Z13chassis_setupv+0xa4>)
 80012d6:	f7ff fe29 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
    wheel_BL.setup();
 80012da:	480f      	ldr	r0, [pc, #60]	@ (8001318 <_Z13chassis_setupv+0xa8>)
 80012dc:	f7ff fdf6 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_BL.set_pid(kp[3], ki[3]);
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <_Z13chassis_setupv+0x98>)
 80012e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <_Z13chassis_setupv+0x9c>)
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	eef0 0a47 	vmov.f32	s1, s14
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <_Z13chassis_setupv+0xa8>)
 80012f6:	f7ff fe19 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20004894 	.word	0x20004894
 8001304:	20000204 	.word	0x20000204
 8001308:	2000000c 	.word	0x2000000c
 800130c:	2000001c 	.word	0x2000001c
 8001310:	20000258 	.word	0x20000258
 8001314:	200002ac 	.word	0x200002ac
 8001318:	20000300 	.word	0x20000300

0800131c <_Z18mecan_IK_transformfff>:
	wheel_FL.set_pid(kp[1], ki[1]);
	wheel_BR.set_pid(kp[2], ki[2]);
	wheel_BL.set_pid(kp[3], ki[3]);
}

void mecan_IK_transform(float _v_x, float _v_y, float _v_w) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	ed87 0a03 	vstr	s0, [r7, #12]
 8001326:	edc7 0a02 	vstr	s1, [r7, #8]
 800132a:	ed87 1a01 	vstr	s2, [r7, #4]
    float factor = (chassis_width + chassis_length) / (pi * wheel_diameter);//2.0f *
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <_Z18mecan_IK_transformfff+0xe8>)
 8001330:	ed93 7a00 	vldr	s14, [r3]
 8001334:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <_Z18mecan_IK_transformfff+0xec>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <_Z18mecan_IK_transformfff+0xf0>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001410 <_Z18mecan_IK_transformfff+0xf4>
 8001348:	ee27 7a87 	vmul.f32	s14, s15, s14
 800134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v1 = -_v_x + _v_y + _v_w * factor;
 8001354:	ed97 7a02 	vldr	s14, [r7, #8]
 8001358:	edd7 7a03 	vldr	s15, [r7, #12]
 800135c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001360:	edd7 6a01 	vldr	s13, [r7, #4]
 8001364:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a08 	vstr	s15, [r7, #32]
    float v2 = _v_x + _v_y - _v_w * factor;
 8001374:	ed97 7a03 	vldr	s14, [r7, #12]
 8001378:	edd7 7a02 	vldr	s15, [r7, #8]
 800137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001380:	edd7 6a01 	vldr	s13, [r7, #4]
 8001384:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	edc7 7a07 	vstr	s15, [r7, #28]
    float v3 = _v_x + _v_y + _v_w * factor;
 8001394:	ed97 7a03 	vldr	s14, [r7, #12]
 8001398:	edd7 7a02 	vldr	s15, [r7, #8]
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80013a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	edc7 7a06 	vstr	s15, [r7, #24]
    float v4 = -_v_x + _v_y - _v_w * factor;
 80013b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80013b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80013c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel_FR.setspeed(v1);
 80013d4:	ed97 0a08 	vldr	s0, [r7, #32]
 80013d8:	480e      	ldr	r0, [pc, #56]	@ (8001414 <_Z18mecan_IK_transformfff+0xf8>)
 80013da:	f7ff fd98 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
    wheel_FL.setspeed(v2);
 80013de:	ed97 0a07 	vldr	s0, [r7, #28]
 80013e2:	480d      	ldr	r0, [pc, #52]	@ (8001418 <_Z18mecan_IK_transformfff+0xfc>)
 80013e4:	f7ff fd93 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
    wheel_BR.setspeed(v3);
 80013e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80013ec:	480b      	ldr	r0, [pc, #44]	@ (800141c <_Z18mecan_IK_transformfff+0x100>)
 80013ee:	f7ff fd8e 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
    wheel_BL.setspeed(v4);
 80013f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80013f6:	480a      	ldr	r0, [pc, #40]	@ (8001420 <_Z18mecan_IK_transformfff+0x104>)
 80013f8:	f7ff fd89 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004
 800140c:	20000008 	.word	0x20000008
 8001410:	40490fda 	.word	0x40490fda
 8001414:	20000204 	.word	0x20000204
 8001418:	20000258 	.word	0x20000258
 800141c:	200002ac 	.word	0x200002ac
 8001420:	20000300 	.word	0x20000300

08001424 <_Z18mecan_FK_transformv>:

void mecan_FK_transform() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
    float v1 = wheel_FR.get_speed() * wheel_diameter * pi;
 800142a:	4844      	ldr	r0, [pc, #272]	@ (800153c <_Z18mecan_FK_transformv+0x118>)
 800142c:	f7ff feb4 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001430:	eeb0 7a40 	vmov.f32	s14, s0
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	edc7 7a03 	vstr	s15, [r7, #12]
    float v2 = wheel_FL.get_speed() * wheel_diameter * pi;
 800144a:	483f      	ldr	r0, [pc, #252]	@ (8001548 <_Z18mecan_FK_transformv+0x124>)
 800144c:	f7ff fea4 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001450:	eeb0 7a40 	vmov.f32	s14, s0
 8001454:	4b3a      	ldr	r3, [pc, #232]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	edc7 7a02 	vstr	s15, [r7, #8]
    float v3 = wheel_BR.get_speed() * wheel_diameter * pi;
 800146a:	4838      	ldr	r0, [pc, #224]	@ (800154c <_Z18mecan_FK_transformv+0x128>)
 800146c:	f7ff fe94 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001470:	eeb0 7a40 	vmov.f32	s14, s0
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	edc7 7a01 	vstr	s15, [r7, #4]
    float v4 = wheel_BL.get_speed() * wheel_diameter * pi;
 800148a:	4831      	ldr	r0, [pc, #196]	@ (8001550 <_Z18mecan_FK_transformv+0x12c>)
 800148c:	f7ff fe84 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001490:	eeb0 7a40 	vmov.f32	s14, s0
 8001494:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	edc7 7a00 	vstr	s15, [r7]
    v_x = (-v1 + v2 + v3 - v4) / 4.0f;
 80014aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014be:	edd7 7a00 	vldr	s15, [r7]
 80014c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <_Z18mecan_FK_transformv+0x130>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
    v_y = (v1 + v2 + v3 + v4) / 4.0f;
 80014d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	edd7 7a00 	vldr	s15, [r7]
 80014ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <_Z18mecan_FK_transformv+0x134>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]
    v_w = (-v1 +   v2 - v3 + v4) / (chassis_width + chassis_length);
 80014fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001502:	edd7 7a03 	vldr	s15, [r7, #12]
 8001506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150a:	edd7 7a01 	vldr	s15, [r7, #4]
 800150e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	ee77 6a27 	vadd.f32	s13, s14, s15
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_Z18mecan_FK_transformv+0x138>)
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <_Z18mecan_FK_transformv+0x13c>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <_Z18mecan_FK_transformv+0x140>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000204 	.word	0x20000204
 8001540:	20000008 	.word	0x20000008
 8001544:	40490fda 	.word	0x40490fda
 8001548:	20000258 	.word	0x20000258
 800154c:	200002ac 	.word	0x200002ac
 8001550:	20000300 	.word	0x20000300
 8001554:	200001ec 	.word	0x200001ec
 8001558:	200001f0 	.word	0x200001f0
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	200001f4 	.word	0x200001f4

08001568 <_Z12localizationf>:

void localization(float dt) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0a01 	vstr	s0, [r7, #4]
//    x += v_x * dt;
//    y += v_y * dt;
//    theta += v_w * dt;
    float cosT = cosf(theta);
 8001572:	4b32      	ldr	r3, [pc, #200]	@ (800163c <_Z12localizationf+0xd4>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f011 fbf0 	bl	8012d60 <cosf>
 8001580:	ed87 0a05 	vstr	s0, [r7, #20]
    float sinT = sinf(theta);
 8001584:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <_Z12localizationf+0xd4>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	f011 fc2b 	bl	8012de8 <sinf>
 8001592:	ed87 0a04 	vstr	s0, [r7, #16]

    float vx_world =  cosT * v_x - sinT * v_y;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <_Z12localizationf+0xd8>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <_Z12localizationf+0xdc>)
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b6:	edc7 7a03 	vstr	s15, [r7, #12]
    float vy_world =  sinT * v_x + cosT * v_y;
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <_Z12localizationf+0xd8>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <_Z12localizationf+0xdc>)
 80015ca:	edd3 6a00 	vldr	s13, [r3]
 80015ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc7 7a02 	vstr	s15, [r7, #8]

    x     += vx_world * dt;
 80015de:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <_Z12localizationf+0xe0>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <_Z12localizationf+0xe0>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]
    y     += vy_world * dt;
 80015fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80015fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_Z12localizationf+0xe4>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <_Z12localizationf+0xe4>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
    theta += v_w      * dt;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <_Z12localizationf+0xe8>)
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <_Z12localizationf+0xd4>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	4b03      	ldr	r3, [pc, #12]	@ (800163c <_Z12localizationf+0xd4>)
 8001630:	edc3 7a00 	vstr	s15, [r3]
//    if (theta >= 2 * pi)  theta -= 2 * pi;
//    if (theta <  0.0f)    theta += 2 * pi;
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000200 	.word	0x20000200
 8001640:	200001ec 	.word	0x200001ec
 8001644:	200001f0 	.word	0x200001f0
 8001648:	200001f8 	.word	0x200001f8
 800164c:	200001fc 	.word	0x200001fc
 8001650:	200001f4 	.word	0x200001f4

08001654 <_Z20chassis_update_speedfff>:

void chassis_update_speed(float _v_x, float _v_y, float _v_w) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a03 	vstr	s0, [r7, #12]
 800165e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001662:	ed87 1a01 	vstr	s2, [r7, #4]
    wheel_FR.update_speed(1);
 8001666:	2101      	movs	r1, #1
 8001668:	481b      	ldr	r0, [pc, #108]	@ (80016d8 <_Z20chassis_update_speedfff+0x84>)
 800166a:	f7ff fc73 	bl	8000f54 <_ZN8DC_motor12update_speedEi>
    wheel_FL.update_speed(-1);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <_Z20chassis_update_speedfff+0x88>)
 8001674:	f7ff fc6e 	bl	8000f54 <_ZN8DC_motor12update_speedEi>
    wheel_BR.update_speed(-1);
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <_Z20chassis_update_speedfff+0x8c>)
 800167e:	f7ff fc69 	bl	8000f54 <_ZN8DC_motor12update_speedEi>
    wheel_BL.update_speed(-1);//-1，改
 8001682:	f04f 31ff 	mov.w	r1, #4294967295
 8001686:	4817      	ldr	r0, [pc, #92]	@ (80016e4 <_Z20chassis_update_speedfff+0x90>)
 8001688:	f7ff fc64 	bl	8000f54 <_ZN8DC_motor12update_speedEi>

    mecan_IK_transform(_v_x, _v_y, _v_w);
 800168c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001690:	edd7 0a02 	vldr	s1, [r7, #8]
 8001694:	ed97 0a03 	vldr	s0, [r7, #12]
 8001698:	f7ff fe40 	bl	800131c <_Z18mecan_IK_transformfff>

    wheel_FR.PI_run(0);
 800169c:	2100      	movs	r1, #0
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <_Z20chassis_update_speedfff+0x84>)
 80016a0:	f7ff fc94 	bl	8000fcc <_ZN8DC_motor6PI_runEi>
    wheel_FL.PI_run(1);
 80016a4:	2101      	movs	r1, #1
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <_Z20chassis_update_speedfff+0x88>)
 80016a8:	f7ff fc90 	bl	8000fcc <_ZN8DC_motor6PI_runEi>
    wheel_BL.PI_run(3);
 80016ac:	2103      	movs	r1, #3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <_Z20chassis_update_speedfff+0x90>)
 80016b0:	f7ff fc8c 	bl	8000fcc <_ZN8DC_motor6PI_runEi>
    wheel_BR.PI_run(2);
 80016b4:	2102      	movs	r1, #2
 80016b6:	480a      	ldr	r0, [pc, #40]	@ (80016e0 <_Z20chassis_update_speedfff+0x8c>)
 80016b8:	f7ff fc88 	bl	8000fcc <_ZN8DC_motor6PI_runEi>

    mecan_FK_transform();
 80016bc:	f7ff feb2 	bl	8001424 <_Z18mecan_FK_transformv>

    localization(wheel_FL.span);
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <_Z20chassis_update_speedfff+0x88>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f7ff ff4d 	bl	8001568 <_Z12localizationf>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000204 	.word	0x20000204
 80016dc:	20000258 	.word	0x20000258
 80016e0:	200002ac 	.word	0x200002ac
 80016e4:	20000300 	.word	0x20000300

080016e8 <_Z41__static_initialization_and_destruction_0ii>:
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d130      	bne.n	800175a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <_Z41__static_initialization_and_destruction_0ii+0x72>
DC_motor wheel_FR(&htim1, GPIOB, GPIO_PIN_12, &htim8, TIM_CHANNEL_1);//encoder timer, dir port, dir pin, pwm timer, pwm channel
 8001702:	2300      	movs	r3, #0
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170e:	4a16      	ldr	r2, [pc, #88]	@ (8001768 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001712:	4817      	ldr	r0, [pc, #92]	@ (8001770 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001714:	f7ff fd50 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor wheel_FL(&htim2, GPIOA, GPIO_PIN_12, &htim8, TIM_CHANNEL_2);
 8001718:	2304      	movs	r3, #4
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001726:	4914      	ldr	r1, [pc, #80]	@ (8001778 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001728:	4814      	ldr	r0, [pc, #80]	@ (800177c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800172a:	f7ff fd45 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor wheel_BR(&htim3, GPIOB, GPIO_PIN_14, &htim8, TIM_CHANNEL_3);
 800172e:	2308      	movs	r3, #8
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800173a:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800173c:	4910      	ldr	r1, [pc, #64]	@ (8001780 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800173e:	4811      	ldr	r0, [pc, #68]	@ (8001784 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001740:	f7ff fd3a 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor wheel_BL(&htim4, GPIOB, GPIO_PIN_15, &htim8, TIM_CHANNEL_4);
 8001744:	230c      	movs	r3, #12
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001750:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001756:	f7ff fd2f 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200048dc 	.word	0x200048dc
 8001768:	40020400 	.word	0x40020400
 800176c:	20004774 	.word	0x20004774
 8001770:	20000204 	.word	0x20000204
 8001774:	40020000 	.word	0x40020000
 8001778:	200047bc 	.word	0x200047bc
 800177c:	20000258 	.word	0x20000258
 8001780:	20004804 	.word	0x20004804
 8001784:	200002ac 	.word	0x200002ac
 8001788:	2000484c 	.word	0x2000484c
 800178c:	20000300 	.word	0x20000300

08001790 <_GLOBAL__sub_I_v_x>:
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
 8001794:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff ffa5 	bl	80016e8 <_Z41__static_initialization_and_destruction_0ii>
 800179e:	bd80      	pop	{r7, pc}

080017a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017ac:	f007 f982 	bl	8008ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80017b0:	4b5a      	ldr	r3, [pc, #360]	@ (800191c <pvPortMallocMicroROS+0x17c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80017b8:	f000 f986 	bl	8001ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017bc:	4b58      	ldr	r3, [pc, #352]	@ (8001920 <pvPortMallocMicroROS+0x180>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f040 8090 	bne.w	80018ea <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01e      	beq.n	800180e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80017d0:	2208      	movs	r2, #8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d015      	beq.n	800180e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f023 0307 	bic.w	r3, r3, #7
 80017e8:	3308      	adds	r3, #8
 80017ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	e7fd      	b.n	800180a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d06a      	beq.n	80018ea <pvPortMallocMicroROS+0x14a>
 8001814:	4b43      	ldr	r3, [pc, #268]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d865      	bhi.n	80018ea <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <pvPortMallocMicroROS+0x188>)
 8001820:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <pvPortMallocMicroROS+0x188>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001828:	e004      	b.n	8001834 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d903      	bls.n	8001846 <pvPortMallocMicroROS+0xa6>
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f1      	bne.n	800182a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <pvPortMallocMicroROS+0x17c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184c:	429a      	cmp	r2, r3
 800184e:	d04c      	beq.n	80018ea <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	4413      	add	r3, r2
 8001858:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	2308      	movs	r3, #8
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d920      	bls.n	80018b4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001888:	f383 8811 	msr	BASEPRI, r3
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f3bf 8f4f 	dsb	sy
 8001894:	613b      	str	r3, [r7, #16]
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1ad2      	subs	r2, r2, r3
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018ae:	69b8      	ldr	r0, [r7, #24]
 80018b0:	f000 f96c 	bl	8001b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a19      	ldr	r2, [pc, #100]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <pvPortMallocMicroROS+0x18c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d203      	bcs.n	80018d6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a16      	ldr	r2, [pc, #88]	@ (800192c <pvPortMallocMicroROS+0x18c>)
 80018d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <pvPortMallocMicroROS+0x180>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	431a      	orrs	r2, r3
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80018ea:	f007 f8f1 	bl	8008ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80018f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	60fb      	str	r3, [r7, #12]
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001910:	69fb      	ldr	r3, [r7, #28]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20003f5c 	.word	0x20003f5c
 8001920:	20003f68 	.word	0x20003f68
 8001924:	20003f60 	.word	0x20003f60
 8001928:	20003f54 	.word	0x20003f54
 800192c:	20003f64 	.word	0x20003f64

08001930 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04a      	beq.n	80019d8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001942:	2308      	movs	r3, #8
 8001944:	425b      	negs	r3, r3
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <vPortFreeMicroROS+0xb0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10b      	bne.n	8001976 <vPortFreeMicroROS+0x46>
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	60fb      	str	r3, [r7, #12]
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	e7fd      	b.n	8001972 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <vPortFreeMicroROS+0x66>
	__asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	60bb      	str	r3, [r7, #8]
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <vPortFreeMicroROS+0xb0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d019      	beq.n	80019d8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <vPortFreeMicroROS+0xb0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019bc:	f007 f87a 	bl	8008ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <vPortFreeMicroROS+0xb4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <vPortFreeMicroROS+0xb4>)
 80019cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019ce:	6938      	ldr	r0, [r7, #16]
 80019d0:	f000 f8dc 	bl	8001b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80019d4:	f007 f87c 	bl	8008ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20003f68 	.word	0x20003f68
 80019e4:	20003f60 	.word	0x20003f60

080019e8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80019f4:	2308      	movs	r3, #8
 80019f6:	425b      	negs	r3, r3
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4413      	add	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <getBlockSize+0x38>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

	return count;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20003f68 	.word	0x20003f68

08001a24 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a2e:	f007 f841 	bl	8008ab4 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f7ff feb4 	bl	80017a0 <pvPortMallocMicroROS>
 8001a38:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d017      	beq.n	8001a70 <pvPortReallocMicroROS+0x4c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d014      	beq.n	8001a70 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffce 	bl	80019e8 <getBlockSize>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2208      	movs	r2, #8
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d201      	bcs.n	8001a60 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f012 fb82 	bl	801416e <memcpy>

		vPortFreeMicroROS(pv);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff60 	bl	8001930 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001a70:	f007 f82e 	bl	8008ad0 <xTaskResumeAll>

	return newmem;
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a88:	f007 f814 	bl	8008ab4 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff fe82 	bl	80017a0 <pvPortMallocMicroROS>
 8001a9c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001aa2:	e004      	b.n	8001aae <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	613a      	str	r2, [r7, #16]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	617a      	str	r2, [r7, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f5      	bne.n	8001aa4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001ab8:	f007 f80a 	bl	8008ad0 <xTaskResumeAll>
  	return mem;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ace:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <prvHeapInit+0xac>)
 8001ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00c      	beq.n	8001afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <prvHeapInit+0xac>)
 8001af8:	4413      	add	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b00:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <prvHeapInit+0xb0>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <prvHeapInit+0xb0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b14:	2208      	movs	r2, #8
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0307 	bic.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <prvHeapInit+0xb8>)
 8001b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <prvHeapInit+0xbc>)
 8001b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <prvHeapInit+0xc0>)
 8001b62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000354 	.word	0x20000354
 8001b78:	20003f54 	.word	0x20003f54
 8001b7c:	20003f5c 	.word	0x20003f5c
 8001b80:	20003f64 	.word	0x20003f64
 8001b84:	20003f60 	.word	0x20003f60
 8001b88:	20003f68 	.word	0x20003f68

08001b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b94:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <prvInsertBlockIntoFreeList+0xac>)
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e002      	b.n	8001ba0 <prvInsertBlockIntoFreeList+0x14>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d8f7      	bhi.n	8001b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d108      	bne.n	8001bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d118      	bne.n	8001c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <prvInsertBlockIntoFreeList+0xb0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d00d      	beq.n	8001c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e008      	b.n	8001c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <prvInsertBlockIntoFreeList+0xb0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e003      	b.n	8001c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d002      	beq.n	8001c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20003f54 	.word	0x20003f54
 8001c3c:	20003f5c 	.word	0x20003f5c

08001c40 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001c4e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c54:	4904      	ldr	r1, [pc, #16]	@ (8001c68 <cubemx_transport_open+0x28>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f004 fc28 	bl	80064ac <HAL_UART_Receive_DMA>
    return true;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20003f6c 	.word	0x20003f6c

08001c6c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001c7a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f004 fc3a 	bl	80064f6 <HAL_UART_DMAStop>
    return true;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001ca0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d11c      	bne.n	8001ce8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f004 fb88 	bl	80063cc <HAL_UART_Transmit_DMA>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001cc0:	e002      	b.n	8001cc8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f005 feb4 	bl	8007a30 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <cubemx_transport_write+0x4e>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d1f3      	bne.n	8001cc2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <cubemx_transport_write+0x58>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	e002      	b.n	8001cea <cubemx_transport_write+0x5e>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001ce8:	2300      	movs	r3, #0
    }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d08:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0e:	b672      	cpsid	i
}
 8001d10:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <cubemx_transport_read+0x9c>)
 8001d20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d22:	b662      	cpsie	i
}
 8001d24:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f005 fe7f 	bl	8007a30 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <cubemx_transport_read+0x9c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d103      	bne.n	8001d46 <cubemx_transport_read+0x52>
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dbe3      	blt.n	8001d0e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001d4a:	e011      	b.n	8001d70 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	440b      	add	r3, r1
 8001d56:	4910      	ldr	r1, [pc, #64]	@ (8001d98 <cubemx_transport_read+0xa4>)
 8001d58:	5c8a      	ldrb	r2, [r1, r2]
 8001d5a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d66:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d68:	6013      	str	r3, [r2, #0]
        wrote++;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <cubemx_transport_read+0x9c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d003      	beq.n	8001d84 <cubemx_transport_read+0x90>
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3e3      	bcc.n	8001d4c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001d84:	69bb      	ldr	r3, [r7, #24]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20004770 	.word	0x20004770
 8001d94:	2000476c 	.word	0x2000476c
 8001d98:	20003f6c 	.word	0x20003f6c

08001d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da0:	f001 fc74 	bl	800368c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da4:	f000 f828 	bl	8001df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da8:	f000 fb22 	bl	80023f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dac:	f000 faf8 	bl	80023a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001db0:	f000 facc 	bl	800234c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001db4:	f000 f8d8 	bl	8001f68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001db8:	f000 f92a 	bl	8002010 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001dbc:	f000 f97c 	bl	80020b8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001dc0:	f000 f87a 	bl	8001eb8 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001dc4:	f000 f9cc 	bl	8002160 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001dc8:	f000 fa18 	bl	80021fc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001dcc:	f000 fc48 	bl	8002660 <main_function>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001dd0:	f005 fd52 	bl	8007878 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001dd4:	4a05      	ldr	r2, [pc, #20]	@ (8001dec <main+0x50>)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <main+0x54>)
 8001dda:	f005 fd97 	bl	800790c <osThreadNew>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a04      	ldr	r2, [pc, #16]	@ (8001df4 <main+0x58>)
 8001de2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001de4:	f005 fd6c 	bl	80078c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <main+0x4c>
 8001dec:	08015000 	.word	0x08015000
 8001df0:	080024dd 	.word	0x080024dd
 8001df4:	20004a2c 	.word	0x20004a2c

08001df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b094      	sub	sp, #80	@ 0x50
 8001dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	2234      	movs	r2, #52	@ 0x34
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f012 f8e8 	bl	8013fdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <SystemClock_Config+0xb8>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	4a22      	ldr	r2, [pc, #136]	@ (8001eb0 <SystemClock_Config+0xb8>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2c:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <SystemClock_Config+0xb8>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <SystemClock_Config+0xbc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e44:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb4 <SystemClock_Config+0xbc>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <SystemClock_Config+0xbc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e60:	2310      	movs	r3, #16
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 fe13 	bl	8004a98 <HAL_RCC_OscConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001e78:	f000 fbba 	bl	80025f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 fb08 	bl	80044ac <HAL_RCC_ClockConfig>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ea2:	f000 fba5 	bl	80025f0 <Error_Handler>
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	3750      	adds	r7, #80	@ 0x50
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40007000 	.word	0x40007000

08001eb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	@ 0x30
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f012 f888 	bl	8013fdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ed4:	4b22      	ldr	r3, [pc, #136]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001ed6:	4a23      	ldr	r2, [pc, #140]	@ (8001f64 <MX_TIM1_Init+0xac>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001ee8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f00:	2303      	movs	r3, #3
 8001f02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001f2c:	f003 fa2a 	bl	8005384 <HAL_TIM_Encoder_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f36:	f000 fb5b 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <MX_TIM1_Init+0xa8>)
 8001f48:	f004 f90e 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001f52:	f000 fb4d 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3730      	adds	r7, #48	@ 0x30
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20004774 	.word	0x20004774
 8001f64:	40010000 	.word	0x40010000

08001f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	@ 0x30
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	2224      	movs	r2, #36	@ 0x24
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f012 f830 	bl	8013fdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f84:	4b21      	ldr	r3, [pc, #132]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001f86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b1e      	ldr	r3, [pc, #120]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fac:	2303      	movs	r3, #3
 8001fae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001fd8:	f003 f9d4 	bl	8005384 <HAL_TIM_Encoder_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001fe2:	f000 fb05 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4806      	ldr	r0, [pc, #24]	@ (800200c <MX_TIM2_Init+0xa4>)
 8001ff4:	f004 f8b8 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ffe:	f000 faf7 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	@ 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200047bc 	.word	0x200047bc

08002010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	@ 0x30
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	2224      	movs	r2, #36	@ 0x24
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f011 ffdc 	bl	8013fdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800202c:	4b20      	ldr	r3, [pc, #128]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 800202e:	4a21      	ldr	r2, [pc, #132]	@ (80020b4 <MX_TIM3_Init+0xa4>)
 8002030:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002032:	4b1f      	ldr	r3, [pc, #124]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1d      	ldr	r3, [pc, #116]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 8002040:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002044:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b18      	ldr	r3, [pc, #96]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002052:	2303      	movs	r3, #3
 8002054:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800205a:	2301      	movs	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800206a:	2301      	movs	r3, #1
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	4619      	mov	r1, r3
 800207c:	480c      	ldr	r0, [pc, #48]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 800207e:	f003 f981 	bl	8005384 <HAL_TIM_Encoder_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002088:	f000 fab2 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <MX_TIM3_Init+0xa0>)
 800209a:	f004 f865 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020a4:	f000 faa4 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3730      	adds	r7, #48	@ 0x30
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	20004804 	.word	0x20004804
 80020b4:	40000400 	.word	0x40000400

080020b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	@ 0x30
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2224      	movs	r2, #36	@ 0x24
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f011 ff88 	bl	8013fdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020d4:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <MX_TIM4_Init+0xa0>)
 80020d6:	4a21      	ldr	r2, [pc, #132]	@ (800215c <MX_TIM4_Init+0xa4>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020da:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <MX_TIM4_Init+0xa0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <MX_TIM4_Init+0xa0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <MX_TIM4_Init+0xa0>)
 80020e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_TIM4_Init+0xa0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <MX_TIM4_Init+0xa0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020fa:	2303      	movs	r3, #3
 80020fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020fe:	2300      	movs	r3, #0
 8002100:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002102:	2301      	movs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002112:	2301      	movs	r3, #1
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800211e:	f107 030c 	add.w	r3, r7, #12
 8002122:	4619      	mov	r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	@ (8002158 <MX_TIM4_Init+0xa0>)
 8002126:	f003 f92d 	bl	8005384 <HAL_TIM_Encoder_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002130:	f000 fa5e 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_TIM4_Init+0xa0>)
 8002142:	f004 f811 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800214c:	f000 fa50 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	@ 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000484c 	.word	0x2000484c
 800215c:	40000800 	.word	0x40000800

08002160 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	463b      	mov	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <MX_TIM5_Init+0x94>)
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <MX_TIM5_Init+0x98>)
 8002180:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 8002182:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <MX_TIM5_Init+0x94>)
 8002184:	220f      	movs	r2, #15
 8002186:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <MX_TIM5_Init+0x94>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <MX_TIM5_Init+0x94>)
 8002190:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002194:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002196:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <MX_TIM5_Init+0x94>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219c:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <MX_TIM5_Init+0x94>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021a2:	4814      	ldr	r0, [pc, #80]	@ (80021f4 <MX_TIM5_Init+0x94>)
 80021a4:	f002 ff16 	bl	8004fd4 <HAL_TIM_Base_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80021ae:	f000 fa1f 	bl	80025f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	4619      	mov	r1, r3
 80021be:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <MX_TIM5_Init+0x94>)
 80021c0:	f003 fbc6 	bl	8005950 <HAL_TIM_ConfigClockSource>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80021ca:	f000 fa11 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021d6:	463b      	mov	r3, r7
 80021d8:	4619      	mov	r1, r3
 80021da:	4806      	ldr	r0, [pc, #24]	@ (80021f4 <MX_TIM5_Init+0x94>)
 80021dc:	f003 ffc4 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80021e6:	f000 fa03 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20004894 	.word	0x20004894
 80021f8:	40000c00 	.word	0x40000c00

080021fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b092      	sub	sp, #72	@ 0x48
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002202:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2220      	movs	r2, #32
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f011 fed8 	bl	8013fdc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800222c:	4b45      	ldr	r3, [pc, #276]	@ (8002344 <MX_TIM8_Init+0x148>)
 800222e:	4a46      	ldr	r2, [pc, #280]	@ (8002348 <MX_TIM8_Init+0x14c>)
 8002230:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8002232:	4b44      	ldr	r3, [pc, #272]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002234:	220f      	movs	r2, #15
 8002236:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b42      	ldr	r3, [pc, #264]	@ (8002344 <MX_TIM8_Init+0x148>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 800223e:	4b41      	ldr	r3, [pc, #260]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002240:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002244:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b3f      	ldr	r3, [pc, #252]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800224c:	4b3d      	ldr	r3, [pc, #244]	@ (8002344 <MX_TIM8_Init+0x148>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b3c      	ldr	r3, [pc, #240]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002258:	483a      	ldr	r0, [pc, #232]	@ (8002344 <MX_TIM8_Init+0x148>)
 800225a:	f002 ff7b 	bl	8005154 <HAL_TIM_PWM_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002264:	f000 f9c4 	bl	80025f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002270:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002274:	4619      	mov	r1, r3
 8002276:	4833      	ldr	r0, [pc, #204]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002278:	f003 ff76 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002282:	f000 f9b5 	bl	80025f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002286:	2360      	movs	r3, #96	@ 0x60
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002292:	2300      	movs	r3, #0
 8002294:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022a6:	2200      	movs	r2, #0
 80022a8:	4619      	mov	r1, r3
 80022aa:	4826      	ldr	r0, [pc, #152]	@ (8002344 <MX_TIM8_Init+0x148>)
 80022ac:	f003 fa8e 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80022b6:	f000 f99b 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022be:	2204      	movs	r2, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4820      	ldr	r0, [pc, #128]	@ (8002344 <MX_TIM8_Init+0x148>)
 80022c4:	f003 fa82 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80022ce:	f000 f98f 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d6:	2208      	movs	r2, #8
 80022d8:	4619      	mov	r1, r3
 80022da:	481a      	ldr	r0, [pc, #104]	@ (8002344 <MX_TIM8_Init+0x148>)
 80022dc:	f003 fa76 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80022e6:	f000 f983 	bl	80025f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ee:	220c      	movs	r2, #12
 80022f0:	4619      	mov	r1, r3
 80022f2:	4814      	ldr	r0, [pc, #80]	@ (8002344 <MX_TIM8_Init+0x148>)
 80022f4:	f003 fa6a 	bl	80057cc <HAL_TIM_PWM_ConfigChannel>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 80022fe:	f000 f977 	bl	80025f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	4619      	mov	r1, r3
 8002324:	4807      	ldr	r0, [pc, #28]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002326:	f003 ff9b 	bl	8006260 <HAL_TIMEx_ConfigBreakDeadTime>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002330:	f000 f95e 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002334:	4803      	ldr	r0, [pc, #12]	@ (8002344 <MX_TIM8_Init+0x148>)
 8002336:	f000 feaf 	bl	8003098 <HAL_TIM_MspPostInit>

}
 800233a:	bf00      	nop
 800233c:	3748      	adds	r7, #72	@ 0x48
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200048dc 	.word	0x200048dc
 8002348:	40010400 	.word	0x40010400

0800234c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002350:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	@ (800239c <MX_USART2_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002356:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	@ (8002398 <MX_USART2_UART_Init+0x4c>)
 8002384:	f003 ffd2 	bl	800632c <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f000 f92f 	bl	80025f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20004924 	.word	0x20004924
 800239c:	40004400 	.word	0x40004400

080023a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <MX_DMA_Init+0x4c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a0f      	ldr	r2, [pc, #60]	@ (80023ec <MX_DMA_Init+0x4c>)
 80023b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b0d      	ldr	r3, [pc, #52]	@ (80023ec <MX_DMA_Init+0x4c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2105      	movs	r1, #5
 80023c6:	2010      	movs	r0, #16
 80023c8:	f001 fa7e 	bl	80038c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80023cc:	2010      	movs	r0, #16
 80023ce:	f001 fa97 	bl	8003900 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	2105      	movs	r1, #5
 80023d6:	2011      	movs	r0, #17
 80023d8:	f001 fa76 	bl	80038c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023dc:	2011      	movs	r0, #17
 80023de:	f001 fa8f 	bl	8003900 <HAL_NVIC_EnableIRQ>

}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800

080023f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a30      	ldr	r2, [pc, #192]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b2a      	ldr	r3, [pc, #168]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a29      	ldr	r2, [pc, #164]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a22      	ldr	r2, [pc, #136]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <MX_GPIO_Init+0xe0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FR_dir_Pin|BR_dir_Pin|BL_dir_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8002460:	481c      	ldr	r0, [pc, #112]	@ (80024d4 <MX_GPIO_Init+0xe4>)
 8002462:	f002 f809 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL_dir_GPIO_Port, FL_dir_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800246c:	481a      	ldr	r0, [pc, #104]	@ (80024d8 <MX_GPIO_Init+0xe8>)
 800246e:	f002 f803 	bl	8004478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 8002472:	2310      	movs	r3, #16
 8002474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 030c 	add.w	r3, r7, #12
 8002482:	4619      	mov	r1, r3
 8002484:	4814      	ldr	r0, [pc, #80]	@ (80024d8 <MX_GPIO_Init+0xe8>)
 8002486:	f001 fe4b 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : FR_dir_Pin BR_dir_Pin BL_dir_Pin */
  GPIO_InitStruct.Pin = FR_dir_Pin|BR_dir_Pin|BL_dir_Pin;
 800248a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800248e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002490:	2301      	movs	r3, #1
 8002492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4619      	mov	r1, r3
 80024a2:	480c      	ldr	r0, [pc, #48]	@ (80024d4 <MX_GPIO_Init+0xe4>)
 80024a4:	f001 fe3c 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pin : FL_dir_Pin */
  GPIO_InitStruct.Pin = FL_dir_Pin;
 80024a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	2301      	movs	r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FL_dir_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <MX_GPIO_Init+0xe8>)
 80024c2:	f001 fe2d 	bl	8004120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024c6:	bf00      	nop
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020000 	.word	0x40020000

080024dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	b0a6      	sub	sp, #152	@ 0x98
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	rmw_uros_set_custom_transport(
 80024e4:	4b34      	ldr	r3, [pc, #208]	@ (80025b8 <StartDefaultTask+0xdc>)
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <StartDefaultTask+0xe0>)
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4b34      	ldr	r3, [pc, #208]	@ (80025c0 <StartDefaultTask+0xe4>)
 80024ee:	4a35      	ldr	r2, [pc, #212]	@ (80025c4 <StartDefaultTask+0xe8>)
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <StartDefaultTask+0xec>)
 80024f2:	2001      	movs	r0, #1
 80024f4:	f008 f998 	bl	800a828 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80024f8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80024fc:	4618      	mov	r0, r3
 80024fe:	f008 f913 	bl	800a728 <rcutils_get_zero_initialized_allocator>

	freeRTOS_allocator.allocate = microros_allocate;
 8002502:	4b32      	ldr	r3, [pc, #200]	@ (80025cc <StartDefaultTask+0xf0>)
 8002504:	67bb      	str	r3, [r7, #120]	@ 0x78
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002506:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <StartDefaultTask+0xf4>)
 8002508:	67fb      	str	r3, [r7, #124]	@ 0x7c
	freeRTOS_allocator.reallocate = microros_reallocate;
 800250a:	4b32      	ldr	r3, [pc, #200]	@ (80025d4 <StartDefaultTask+0xf8>)
 800250c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002510:	4b31      	ldr	r3, [pc, #196]	@ (80025d8 <StartDefaultTask+0xfc>)
 8002512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002516:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800251a:	4618      	mov	r0, r3
 800251c:	f008 f912 	bl	800a744 <rcutils_set_default_allocator>
 8002520:	4603      	mov	r3, r0
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <StartDefaultTask+0x5a>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 800252c:	f240 21b3 	movw	r1, #691	@ 0x2b3
 8002530:	482a      	ldr	r0, [pc, #168]	@ (80025dc <StartDefaultTask+0x100>)
 8002532:	f011 fc91 	bl	8013e58 <iprintf>
	std_msgs__msg__Int32 msg;
	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 8002536:	463b      	mov	r3, r7
 8002538:	4618      	mov	r0, r3
 800253a:	f008 f921 	bl	800a780 <rcutils_get_default_allocator>
 800253e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002542:	463d      	mov	r5, r7
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 800254c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002550:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002554:	2200      	movs	r2, #0
 8002556:	2100      	movs	r1, #0
 8002558:	f008 f824 	bl	800a5a4 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 800255c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002560:	f107 0020 	add.w	r0, r7, #32
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <StartDefaultTask+0x104>)
 8002566:	491f      	ldr	r1, [pc, #124]	@ (80025e4 <StartDefaultTask+0x108>)
 8002568:	f008 f866 	bl	800a638 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default(
 800256c:	f008 fde2 	bl	800b134 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8002570:	4602      	mov	r2, r0
 8002572:	f107 0120 	add.w	r1, r7, #32
 8002576:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 800257a:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <StartDefaultTask+0x10c>)
 800257c:	f008 f898 	bl	800a6b0 <rclc_publisher_init_default>
	&publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");

	msg.data = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	673b      	str	r3, [r7, #112]	@ 0x70

	for(;;)
	{
	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8002584:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002588:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800258c:	2200      	movs	r2, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f007 ffe4 	bl	800a55c <rcl_publish>
 8002594:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (ret != RCL_RET_OK)
 8002598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <StartDefaultTask+0xce>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 80025a0:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 80025a4:	4811      	ldr	r0, [pc, #68]	@ (80025ec <StartDefaultTask+0x110>)
 80025a6:	f011 fc57 	bl	8013e58 <iprintf>
	}

	msg.data++;
 80025aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ac:	3301      	adds	r3, #1
 80025ae:	673b      	str	r3, [r7, #112]	@ 0x70
	osDelay(10);
 80025b0:	200a      	movs	r0, #10
 80025b2:	f005 fa3d 	bl	8007a30 <osDelay>
	{
 80025b6:	e7e5      	b.n	8002584 <StartDefaultTask+0xa8>
 80025b8:	08001cf5 	.word	0x08001cf5
 80025bc:	08001c8d 	.word	0x08001c8d
 80025c0:	08001c6d 	.word	0x08001c6d
 80025c4:	08001c41 	.word	0x08001c41
 80025c8:	20004924 	.word	0x20004924
 80025cc:	080026a1 	.word	0x080026a1
 80025d0:	080026e5 	.word	0x080026e5
 80025d4:	0800271d 	.word	0x0800271d
 80025d8:	08002789 	.word	0x08002789
 80025dc:	08014f74 	.word	0x08014f74
 80025e0:	08014f9c 	.word	0x08014f9c
 80025e4:	08014fa0 	.word	0x08014fa0
 80025e8:	08014fac 	.word	0x08014fac
 80025ec:	08014fc0 	.word	0x08014fc0

080025f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025f4:	b672      	cpsid	i
}
 80025f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <Error_Handler+0x8>

080025fc <HAL_TIM_PeriodElapsedCallback>:
float try_speed = 1.0;
bool on=0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d113      	bne.n	8002636 <HAL_TIM_PeriodElapsedCallback+0x3a>
        // 每 1ms 呼叫一次底盤更新
    	sec++;
 800260e:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	4a0e      	ldr	r2, [pc, #56]	@ (8002650 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002616:	6013      	str	r3, [r2, #0]
    	if(on)
 8002618:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x2a>
//			else chassis_update_speed(0.0,0.0,0.0);
//    		if(!linear_toward(0.0,0.0,0.0,150.0))chassis_update_speed(cmd_x,cmd_y,0.0);
//			else chassis_update_speed(0.0,0.0,0.0);
//    		mission_one();
//    		mission_four();
    		mission_four_2();
 8002620:	f000 f9a2 	bl	8002968 <_Z14mission_four_2v>
 8002624:	e007      	b.n	8002636 <HAL_TIM_PeriodElapsedCallback+0x3a>
//    		else chassis_update_speed(0.0,0, 0.0);
    	}
    	else
    	{
//    		test_3(0);
    		chassis_update_speed(0.0,0.0,0.0);
 8002626:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8002658 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800262a:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8002658 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800262e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002658 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8002632:	f7ff f80f 	bl	8001654 <_Z20chassis_update_speedfff>
    	}

    }
    if (htim->Instance == TIM6) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_TIM_PeriodElapsedCallback+0x48>
        HAL_IncTick();
 8002640:	f001 f846 	bl	80036d0 <HAL_IncTick>
      }
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40000c00 	.word	0x40000c00
 8002650:	2000796c 	.word	0x2000796c
 8002654:	20007970 	.word	0x20007970
 8002658:	00000000 	.word	0x00000000
 800265c:	40001000 	.word	0x40001000

08002660 <main_function>:

void main_function() {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
    //HAL_Init();
    chassis_setup();  // 初始化四輪的 encoder 與 PWM
 8002664:	f7fe fe04 	bl	8001270 <_Z13chassis_setupv>
    //pid_setup();
    while (1) {
    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET) on = 1;
 8002668:	2110      	movs	r1, #16
 800266a:	480b      	ldr	r0, [pc, #44]	@ (8002698 <main_function+0x38>)
 800266c:	f001 feec 	bl	8004448 <HAL_GPIO_ReadPin>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <main_function+0x28>
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <main_function+0x3c>)
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e002      	b.n	800268e <main_function+0x2e>
    	else on = 0;
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <main_function+0x3c>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
    	HAL_Delay(500);
 800268e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002692:	f001 f83d 	bl	8003710 <HAL_Delay>
    	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET) on = 1;
 8002696:	e7e7      	b.n	8002668 <main_function+0x8>
 8002698:	40020000 	.word	0x40020000
 800269c:	20007970 	.word	0x20007970

080026a0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <microros_allocate+0x3c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <microros_allocate+0x3c>)
 80026b8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <microros_allocate+0x40>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4413      	add	r3, r2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <microros_allocate+0x40>)
 80026c8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff f868 	bl	80017a0 <pvPortMallocMicroROS>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20007974 	.word	0x20007974
 80026e0:	20007978 	.word	0x20007978

080026e4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00c      	beq.n	800270e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff f977 	bl	80019e8 <getBlockSize>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <microros_deallocate+0x34>)
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	461a      	mov	r2, r3
 8002704:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <microros_deallocate+0x34>)
 8002706:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff f911 	bl	8001930 <vPortFreeMicroROS>
  }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20007978 	.word	0x20007978

0800271c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <microros_reallocate+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4413      	add	r3, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <microros_reallocate+0x64>)
 8002736:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002738:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <microros_reallocate+0x68>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4413      	add	r3, r2
 8002742:	461a      	mov	r2, r3
 8002744:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <microros_reallocate+0x68>)
 8002746:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800274e:	68b8      	ldr	r0, [r7, #8]
 8002750:	f7ff f826 	bl	80017a0 <pvPortMallocMicroROS>
 8002754:	4603      	mov	r3, r0
 8002756:	e00e      	b.n	8002776 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f7ff f945 	bl	80019e8 <getBlockSize>
 800275e:	4603      	mov	r3, r0
 8002760:	4a08      	ldr	r2, [pc, #32]	@ (8002784 <microros_reallocate+0x68>)
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	461a      	mov	r2, r3
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <microros_reallocate+0x68>)
 800276a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff f958 	bl	8001a24 <pvPortReallocMicroROS>
 8002774:	4603      	mov	r3, r0
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20007974 	.word	0x20007974
 8002784:	20007978 	.word	0x20007978

08002788 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	fb02 f303 	mul.w	r3, r2, r3
 800279c:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <microros_zero_allocate+0x48>)
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <microros_zero_allocate+0x48>)
 80027a6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	fb02 f303 	mul.w	r3, r2, r3
 80027b0:	4a08      	ldr	r2, [pc, #32]	@ (80027d4 <microros_zero_allocate+0x4c>)
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	461a      	mov	r2, r3
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <microros_zero_allocate+0x4c>)
 80027ba:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff f95d 	bl	8001a7e <pvPortCallocMicroROS>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20007974 	.word	0x20007974
 80027d4:	20007978 	.word	0x20007978

080027d8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80027d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80027ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ee:	a320      	add	r3, pc, #128	@ (adr r3, 8002870 <UTILS_NanosecondsToTimespec+0x98>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fe f992 	bl	8000b1c <__aeabi_ldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002802:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002806:	a31a      	add	r3, pc, #104	@ (adr r3, 8002870 <UTILS_NanosecondsToTimespec+0x98>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fe f986 	bl	8000b1c <__aeabi_ldivmod>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	da20      	bge.n	800285e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a11      	ldr	r2, [pc, #68]	@ (8002868 <UTILS_NanosecondsToTimespec+0x90>)
 8002822:	fb82 1203 	smull	r1, r2, r2, r3
 8002826:	1712      	asrs	r2, r2, #28
 8002828:	17db      	asrs	r3, r3, #31
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	3301      	adds	r3, #1
 800282e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	17c8      	asrs	r0, r1, #31
 800283a:	460c      	mov	r4, r1
 800283c:	4605      	mov	r5, r0
 800283e:	ebb2 0804 	subs.w	r8, r2, r4
 8002842:	eb63 0905 	sbc.w	r9, r3, r5
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4906      	ldr	r1, [pc, #24]	@ (800286c <UTILS_NanosecondsToTimespec+0x94>)
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	609a      	str	r2, [r3, #8]
    }
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002868:	44b82fa1 	.word	0x44b82fa1
 800286c:	3b9aca00 	.word	0x3b9aca00
 8002870:	3b9aca00 	.word	0x3b9aca00
 8002874:	00000000 	.word	0x00000000

08002878 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287c:	b08e      	sub	sp, #56	@ 0x38
 800287e:	af00      	add	r7, sp, #0
 8002880:	6278      	str	r0, [r7, #36]	@ 0x24
 8002882:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002884:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002888:	2300      	movs	r3, #0
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800289a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800289e:	4618      	mov	r0, r3
 80028a0:	f006 fb92 	bl	8008fc8 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80028a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a6:	17da      	asrs	r2, r3, #31
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	61fa      	str	r2, [r7, #28]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	69b9      	ldr	r1, [r7, #24]
 80028b6:	000b      	movs	r3, r1
 80028b8:	2200      	movs	r2, #0
 80028ba:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80028be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028c0:	2200      	movs	r2, #0
 80028c2:	461c      	mov	r4, r3
 80028c4:	4615      	mov	r5, r2
 80028c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028ca:	1911      	adds	r1, r2, r4
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	416b      	adcs	r3, r5
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028d6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80028da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	f04f 0400 	mov.w	r4, #0
 80028e6:	f04f 0500 	mov.w	r5, #0
 80028ea:	015d      	lsls	r5, r3, #5
 80028ec:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80028f0:	0154      	lsls	r4, r2, #5
 80028f2:	4622      	mov	r2, r4
 80028f4:	462b      	mov	r3, r5
 80028f6:	ebb2 0800 	subs.w	r8, r2, r0
 80028fa:	eb63 0901 	sbc.w	r9, r3, r1
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800290a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800290e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002912:	4690      	mov	r8, r2
 8002914:	4699      	mov	r9, r3
 8002916:	eb18 0a00 	adds.w	sl, r8, r0
 800291a:	eb49 0b01 	adc.w	fp, r9, r1
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800292a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800292e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002932:	ebb2 040a 	subs.w	r4, r2, sl
 8002936:	603c      	str	r4, [r7, #0]
 8002938:	eb63 030b 	sbc.w	r3, r3, fp
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002942:	4623      	mov	r3, r4
 8002944:	181b      	adds	r3, r3, r0
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	462b      	mov	r3, r5
 800294a:	eb41 0303 	adc.w	r3, r1, r3
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002956:	f7ff ff3f 	bl	80027d8 <UTILS_NanosecondsToTimespec>

    return 0;
 800295a:	2300      	movs	r3, #0
 800295c:	4618      	mov	r0, r3
 800295e:	3738      	adds	r7, #56	@ 0x38
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002968 <_Z14mission_four_2v>:
		}
	}
	chassis_update_speed(cmd_x,cmd_y,0.0);
}
void mission_four_2()
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	if (linear_toward(cp[i-1][0],cp[i-1][1],cp[i][0],cp[i][1])) i++;
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <_Z14mission_four_2v+0x94>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <_Z14mission_four_2v+0x98>)
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <_Z14mission_four_2v+0x94>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3b01      	subs	r3, #1
 8002982:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <_Z14mission_four_2v+0x98>)
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	ed93 7a00 	vldr	s14, [r3]
 800298e:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <_Z14mission_four_2v+0x94>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1b      	ldr	r2, [pc, #108]	@ (8002a00 <_Z14mission_four_2v+0x98>)
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	edd3 6a00 	vldr	s13, [r3]
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <_Z14mission_four_2v+0x94>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <_Z14mission_four_2v+0x98>)
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	3304      	adds	r3, #4
 80029a8:	ed93 6a00 	vldr	s12, [r3]
 80029ac:	eef0 1a46 	vmov.f32	s3, s12
 80029b0:	eeb0 1a66 	vmov.f32	s2, s13
 80029b4:	eef0 0a47 	vmov.f32	s1, s14
 80029b8:	eeb0 0a67 	vmov.f32	s0, s15
 80029bc:	f000 f83c 	bl	8002a38 <_Z13linear_towardffff>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d004      	beq.n	80029d0 <_Z14mission_four_2v+0x68>
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <_Z14mission_four_2v+0x94>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	4a0b      	ldr	r2, [pc, #44]	@ (80029fc <_Z14mission_four_2v+0x94>)
 80029ce:	6013      	str	r3, [r2, #0]
	if(i==14)stop();
 80029d0:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <_Z14mission_four_2v+0x94>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b0e      	cmp	r3, #14
 80029d6:	d101      	bne.n	80029dc <_Z14mission_four_2v+0x74>
 80029d8:	f000 f81a 	bl	8002a10 <_Z4stopv>
//	if(i==15)
//	{
//		if(theta>-2*pi) clockwise();
//		else stop();
//	}
	chassis_update_speed(cmd_x,cmd_y,0.0);
 80029dc:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <_Z14mission_four_2v+0x9c>)
 80029de:	edd3 7a00 	vldr	s15, [r3]
 80029e2:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <_Z14mission_four_2v+0xa0>)
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8002a0c <_Z14mission_four_2v+0xa4>
 80029ec:	eef0 0a47 	vmov.f32	s1, s14
 80029f0:	eeb0 0a67 	vmov.f32	s0, s15
 80029f4:	f7fe fe2e 	bl	8001654 <_Z20chassis_update_speedfff>
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200000bc 	.word	0x200000bc
 8002a00:	2000004c 	.word	0x2000004c
 8002a04:	2000797c 	.word	0x2000797c
 8002a08:	20007980 	.word	0x20007980
 8002a0c:	00000000 	.word	0x00000000

08002a10 <_Z4stopv>:
{
	cmd_x=std_speed;
	cmd_y=0.0;
}
void stop()
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
	cmd_x=0.0;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <_Z4stopv+0x20>)
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
	cmd_y=0.0;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <_Z4stopv+0x24>)
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	2000797c 	.word	0x2000797c
 8002a34:	20007980 	.word	0x20007980

08002a38 <_Z13linear_towardffff>:
bool linear_toward(float from_x,float from_y,float tar_x,float tar_y)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08a      	sub	sp, #40	@ 0x28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a42:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a46:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a4a:	edc7 1a00 	vstr	s3, [r7]
	float x_error = fabs(x-tar_x),y_error=fabs(y-tar_y),x_moved=fabs(x-from_x),y_moved=fabs(y-from_y);
 8002a4e:	4bc6      	ldr	r3, [pc, #792]	@ (8002d68 <_Z13linear_towardffff+0x330>)
 8002a50:	ed93 7a00 	vldr	s14, [r3]
 8002a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a60:	f7fe fa24 	bl	8000eac <_ZSt4fabsf>
 8002a64:	ed87 0a08 	vstr	s0, [r7, #32]
 8002a68:	4bc0      	ldr	r3, [pc, #768]	@ (8002d6c <_Z13linear_towardffff+0x334>)
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	edd7 7a00 	vldr	s15, [r7]
 8002a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a76:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7a:	f7fe fa17 	bl	8000eac <_ZSt4fabsf>
 8002a7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002a82:	4bb9      	ldr	r3, [pc, #740]	@ (8002d68 <_Z13linear_towardffff+0x330>)
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a90:	eeb0 0a67 	vmov.f32	s0, s15
 8002a94:	f7fe fa0a 	bl	8000eac <_ZSt4fabsf>
 8002a98:	ed87 0a06 	vstr	s0, [r7, #24]
 8002a9c:	4bb3      	ldr	r3, [pc, #716]	@ (8002d6c <_Z13linear_towardffff+0x334>)
 8002a9e:	ed93 7a00 	vldr	s14, [r3]
 8002aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8002aae:	f7fe f9fd 	bl	8000eac <_ZSt4fabsf>
 8002ab2:	ed87 0a05 	vstr	s0, [r7, #20]
	if(x_error<=error_ok && y_error<=error_ok)
 8002ab6:	4bae      	ldr	r3, [pc, #696]	@ (8002d70 <_Z13linear_towardffff+0x338>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d813      	bhi.n	8002af2 <_Z13linear_towardffff+0xba>
 8002aca:	4ba9      	ldr	r3, [pc, #676]	@ (8002d70 <_Z13linear_towardffff+0x338>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002adc:	d809      	bhi.n	8002af2 <_Z13linear_towardffff+0xba>
	{
		cmd_x=0.0;
 8002ade:	4ba5      	ldr	r3, [pc, #660]	@ (8002d74 <_Z13linear_towardffff+0x33c>)
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
		cmd_y=0.0;
 8002ae6:	4ba4      	ldr	r3, [pc, #656]	@ (8002d78 <_Z13linear_towardffff+0x340>)
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
		return 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e132      	b.n	8002d58 <_Z13linear_towardffff+0x320>
	}
	else
	{
		float speed = std_speed;
 8002af2:	4ba2      	ldr	r3, [pc, #648]	@ (8002d7c <_Z13linear_towardffff+0x344>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
		if(x_error>y_error)
 8002af8:	ed97 7a08 	vldr	s14, [r7, #32]
 8002afc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	f340 8093 	ble.w	8002c32 <_Z13linear_towardffff+0x1fa>
		{
			if(x_moved<buffer_dis) speed = (std_speed-min_speed)*x_moved/buffer_dis+min_speed;
 8002b0c:	4b9c      	ldr	r3, [pc, #624]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	d518      	bpl.n	8002b52 <_Z13linear_towardffff+0x11a>
 8002b20:	4b96      	ldr	r3, [pc, #600]	@ (8002d7c <_Z13linear_towardffff+0x344>)
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	4b97      	ldr	r3, [pc, #604]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002b28:	edd3 7a00 	vldr	s15, [r3]
 8002b2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b30:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b34:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b38:	4b91      	ldr	r3, [pc, #580]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b42:	4b90      	ldr	r3, [pc, #576]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002b50:	e021      	b.n	8002b96 <_Z13linear_towardffff+0x15e>
			else if(x_error<buffer_dis) speed = (std_speed-min_speed)*x_error/buffer_dis+min_speed;
 8002b52:	4b8b      	ldr	r3, [pc, #556]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b64:	d517      	bpl.n	8002b96 <_Z13linear_towardffff+0x15e>
 8002b66:	4b85      	ldr	r3, [pc, #532]	@ (8002d7c <_Z13linear_towardffff+0x344>)
 8002b68:	ed93 7a00 	vldr	s14, [r3]
 8002b6c:	4b85      	ldr	r3, [pc, #532]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b76:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b7e:	4b80      	ldr	r3, [pc, #512]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b88:	4b7e      	ldr	r3, [pc, #504]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			if(x>tar_x)
 8002b96:	4b74      	ldr	r3, [pc, #464]	@ (8002d68 <_Z13linear_towardffff+0x330>)
 8002b98:	edd3 7a00 	vldr	s15, [r3]
 8002b9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba8:	d523      	bpl.n	8002bf2 <_Z13linear_towardffff+0x1ba>
			{
				cmd_x=-speed;
 8002baa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002bae:	eef1 7a67 	vneg.f32	s15, s15
 8002bb2:	4b70      	ldr	r3, [pc, #448]	@ (8002d74 <_Z13linear_towardffff+0x33c>)
 8002bb4:	edc3 7a00 	vstr	s15, [r3]
				cmd_y=-1*(y-tar_y)*0.6;
 8002bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d6c <_Z13linear_towardffff+0x334>)
 8002bba:	ed93 7a00 	vldr	s14, [r3]
 8002bbe:	edd7 7a00 	vldr	s15, [r7]
 8002bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bc6:	eef1 7a67 	vneg.f32	s15, s15
 8002bca:	ee17 3a90 	vmov	r3, s15
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcea 	bl	80005a8 <__aeabi_f2d>
 8002bd4:	a362      	add	r3, pc, #392	@ (adr r3, 8002d60 <_Z13linear_towardffff+0x328>)
 8002bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bda:	f7fd fd3d 	bl	8000658 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f7fd ff49 	bl	8000a7c <__aeabi_d2f>
 8002bea:	4603      	mov	r3, r0
 8002bec:	4a62      	ldr	r2, [pc, #392]	@ (8002d78 <_Z13linear_towardffff+0x340>)
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	e0b1      	b.n	8002d56 <_Z13linear_towardffff+0x31e>
			}
			else
			{
				cmd_x=speed;
 8002bf2:	4a60      	ldr	r2, [pc, #384]	@ (8002d74 <_Z13linear_towardffff+0x33c>)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	6013      	str	r3, [r2, #0]
				cmd_y=-1*(y-tar_y)*0.6;
 8002bf8:	4b5c      	ldr	r3, [pc, #368]	@ (8002d6c <_Z13linear_towardffff+0x334>)
 8002bfa:	ed93 7a00 	vldr	s14, [r3]
 8002bfe:	edd7 7a00 	vldr	s15, [r7]
 8002c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c06:	eef1 7a67 	vneg.f32	s15, s15
 8002c0a:	ee17 3a90 	vmov	r3, s15
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fcca 	bl	80005a8 <__aeabi_f2d>
 8002c14:	a352      	add	r3, pc, #328	@ (adr r3, 8002d60 <_Z13linear_towardffff+0x328>)
 8002c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1a:	f7fd fd1d 	bl	8000658 <__aeabi_dmul>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7fd ff29 	bl	8000a7c <__aeabi_d2f>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4a52      	ldr	r2, [pc, #328]	@ (8002d78 <_Z13linear_towardffff+0x340>)
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e091      	b.n	8002d56 <_Z13linear_towardffff+0x31e>
			}
		}
		else
		{
			if(y_moved<buffer_dis) speed = (std_speed-min_speed)*y_moved/buffer_dis+min_speed;
 8002c32:	4b53      	ldr	r3, [pc, #332]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c44:	d518      	bpl.n	8002c78 <_Z13linear_towardffff+0x240>
 8002c46:	4b4d      	ldr	r3, [pc, #308]	@ (8002d7c <_Z13linear_towardffff+0x344>)
 8002c48:	ed93 7a00 	vldr	s14, [r3]
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c5a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c5e:	4b48      	ldr	r3, [pc, #288]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c68:	4b46      	ldr	r3, [pc, #280]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002c6a:	edd3 7a00 	vldr	s15, [r3]
 8002c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c72:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002c76:	e021      	b.n	8002cbc <_Z13linear_towardffff+0x284>
			else if(y_error<buffer_dis) speed = (std_speed-min_speed)*y_error/buffer_dis+min_speed;
 8002c78:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002c7a:	edd3 7a00 	vldr	s15, [r3]
 8002c7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d517      	bpl.n	8002cbc <_Z13linear_towardffff+0x284>
 8002c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d7c <_Z13linear_towardffff+0x344>)
 8002c8e:	ed93 7a00 	vldr	s14, [r3]
 8002c92:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ca0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ca4:	4b36      	ldr	r3, [pc, #216]	@ (8002d80 <_Z13linear_towardffff+0x348>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cae:	4b35      	ldr	r3, [pc, #212]	@ (8002d84 <_Z13linear_towardffff+0x34c>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			if(y>tar_y)
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <_Z13linear_towardffff+0x334>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	ed97 7a00 	vldr	s14, [r7]
 8002cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	d523      	bpl.n	8002d18 <_Z13linear_towardffff+0x2e0>
			{
				cmd_x=-1*(x-tar_x)*0.6;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	@ (8002d68 <_Z13linear_towardffff+0x330>)
 8002cd2:	ed93 7a00 	vldr	s14, [r3]
 8002cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cde:	eef1 7a67 	vneg.f32	s15, s15
 8002ce2:	ee17 3a90 	vmov	r3, s15
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc5e 	bl	80005a8 <__aeabi_f2d>
 8002cec:	a31c      	add	r3, pc, #112	@ (adr r3, 8002d60 <_Z13linear_towardffff+0x328>)
 8002cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf2:	f7fd fcb1 	bl	8000658 <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd febd 	bl	8000a7c <__aeabi_d2f>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <_Z13linear_towardffff+0x33c>)
 8002d06:	6013      	str	r3, [r2, #0]
				cmd_y=-speed;
 8002d08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d0c:	eef1 7a67 	vneg.f32	s15, s15
 8002d10:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <_Z13linear_towardffff+0x340>)
 8002d12:	edc3 7a00 	vstr	s15, [r3]
 8002d16:	e01e      	b.n	8002d56 <_Z13linear_towardffff+0x31e>
			}
			else
			{
				cmd_x=-1*(x-tar_x)*0.6;
 8002d18:	4b13      	ldr	r3, [pc, #76]	@ (8002d68 <_Z13linear_towardffff+0x330>)
 8002d1a:	ed93 7a00 	vldr	s14, [r3]
 8002d1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d26:	eef1 7a67 	vneg.f32	s15, s15
 8002d2a:	ee17 3a90 	vmov	r3, s15
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc3a 	bl	80005a8 <__aeabi_f2d>
 8002d34:	a30a      	add	r3, pc, #40	@ (adr r3, 8002d60 <_Z13linear_towardffff+0x328>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc8d 	bl	8000658 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7fd fe99 	bl	8000a7c <__aeabi_d2f>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a09      	ldr	r2, [pc, #36]	@ (8002d74 <_Z13linear_towardffff+0x33c>)
 8002d4e:	6013      	str	r3, [r2, #0]
				cmd_y=speed;
 8002d50:	4a09      	ldr	r2, [pc, #36]	@ (8002d78 <_Z13linear_towardffff+0x340>)
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	6013      	str	r3, [r2, #0]
			}
		}
		return 0;
 8002d56:	2300      	movs	r3, #0
	}
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3728      	adds	r7, #40	@ 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	33333333 	.word	0x33333333
 8002d64:	3fe33333 	.word	0x3fe33333
 8002d68:	200001f8 	.word	0x200001f8
 8002d6c:	200001fc 	.word	0x200001fc
 8002d70:	20000044 	.word	0x20000044
 8002d74:	2000797c 	.word	0x2000797c
 8002d78:	20007980 	.word	0x20007980
 8002d7c:	2000003c 	.word	0x2000003c
 8002d80:	20000048 	.word	0x20000048
 8002d84:	20000040 	.word	0x20000040

08002d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_MspInit+0x54>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_MspInit+0x54>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <HAL_MspInit+0x54>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <HAL_MspInit+0x54>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ddc <HAL_MspInit+0x54>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_MspInit+0x54>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	210f      	movs	r1, #15
 8002dca:	f06f 0001 	mvn.w	r0, #1
 8002dce:	f000 fd7b 	bl	80038c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800

08002de0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b090      	sub	sp, #64	@ 0x40
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb0 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d13d      	bne.n	8002e7e <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e06:	4b6b      	ldr	r3, [pc, #428]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e12:	4b68      	ldr	r3, [pc, #416]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e22:	4b64      	ldr	r3, [pc, #400]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a63      	ldr	r2, [pc, #396]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b61      	ldr	r3, [pc, #388]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e54:	4619      	mov	r1, r3
 8002e56:	4858      	ldr	r0, [pc, #352]	@ (8002fb8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002e58:	f001 f962 	bl	8004120 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2105      	movs	r1, #5
 8002e60:	2019      	movs	r0, #25
 8002e62:	f000 fd31 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e66:	2019      	movs	r0, #25
 8002e68:	f000 fd4a 	bl	8003900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2105      	movs	r1, #5
 8002e70:	201a      	movs	r0, #26
 8002e72:	f000 fd29 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e76:	201a      	movs	r0, #26
 8002e78:	f000 fd42 	bl	8003900 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e7c:	e094      	b.n	8002fa8 <HAL_TIM_Encoder_MspInit+0x1c8>
  else if(htim_encoder->Instance==TIM2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e86:	d12c      	bne.n	8002ee2 <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	4b49      	ldr	r3, [pc, #292]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	4a48      	ldr	r2, [pc, #288]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e98:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	4b42      	ldr	r3, [pc, #264]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	4a41      	ldr	r2, [pc, #260]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002ec0:	2322      	movs	r3, #34	@ 0x22
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4837      	ldr	r0, [pc, #220]	@ (8002fb8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002edc:	f001 f920 	bl	8004120 <HAL_GPIO_Init>
}
 8002ee0:	e062      	b.n	8002fa8 <HAL_TIM_Encoder_MspInit+0x1c8>
  else if(htim_encoder->Instance==TIM3)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a35      	ldr	r2, [pc, #212]	@ (8002fbc <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d12c      	bne.n	8002f46 <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	4b30      	ldr	r3, [pc, #192]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efc:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	4b29      	ldr	r3, [pc, #164]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f10:	4a28      	ldr	r2, [pc, #160]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f18:	4b26      	ldr	r3, [pc, #152]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f24:	23c0      	movs	r3, #192	@ 0xc0
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f34:	2302      	movs	r3, #2
 8002f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481e      	ldr	r0, [pc, #120]	@ (8002fb8 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002f40:	f001 f8ee 	bl	8004120 <HAL_GPIO_Init>
}
 8002f44:	e030      	b.n	8002fa8 <HAL_TIM_Encoder_MspInit+0x1c8>
  else if(htim_encoder->Instance==TIM4)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc0 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d12b      	bne.n	8002fa8 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	4a16      	ldr	r2, [pc, #88]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f60:	4b14      	ldr	r3, [pc, #80]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f88:	23c0      	movs	r3, #192	@ 0xc0
 8002f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4808      	ldr	r0, [pc, #32]	@ (8002fc4 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002fa4:	f001 f8bc 	bl	8004120 <HAL_GPIO_Init>
}
 8002fa8:	bf00      	nop
 8002faa:	3740      	adds	r7, #64	@ 0x40
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40020400 	.word	0x40020400

08002fc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003010 <HAL_TIM_Base_MspInit+0x48>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d115      	bne.n	8003006 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <HAL_TIM_Base_MspInit+0x4c>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8003014 <HAL_TIM_Base_MspInit+0x4c>)
 8002fe4:	f043 0308 	orr.w	r3, r3, #8
 8002fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_TIM_Base_MspInit+0x4c>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2105      	movs	r1, #5
 8002ffa:	2032      	movs	r0, #50	@ 0x32
 8002ffc:	f000 fc64 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003000:	2032      	movs	r0, #50	@ 0x32
 8003002:	f000 fc7d 	bl	8003900 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40000c00 	.word	0x40000c00
 8003014:	40023800 	.word	0x40023800

08003018 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <HAL_TIM_PWM_MspInit+0x78>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d12d      	bne.n	8003086 <HAL_TIM_PWM_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_TIM_PWM_MspInit+0x7c>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	4a18      	ldr	r2, [pc, #96]	@ (8003094 <HAL_TIM_PWM_MspInit+0x7c>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6453      	str	r3, [r2, #68]	@ 0x44
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_TIM_PWM_MspInit+0x7c>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2105      	movs	r1, #5
 800304a:	202b      	movs	r0, #43	@ 0x2b
 800304c:	f000 fc3c 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003050:	202b      	movs	r0, #43	@ 0x2b
 8003052:	f000 fc55 	bl	8003900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2105      	movs	r1, #5
 800305a:	202c      	movs	r0, #44	@ 0x2c
 800305c:	f000 fc34 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003060:	202c      	movs	r0, #44	@ 0x2c
 8003062:	f000 fc4d 	bl	8003900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2105      	movs	r1, #5
 800306a:	202d      	movs	r0, #45	@ 0x2d
 800306c:	f000 fc2c 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003070:	202d      	movs	r0, #45	@ 0x2d
 8003072:	f000 fc45 	bl	8003900 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2105      	movs	r1, #5
 800307a:	202e      	movs	r0, #46	@ 0x2e
 800307c:	f000 fc24 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003080:	202e      	movs	r0, #46	@ 0x2e
 8003082:	f000 fc3d 	bl	8003900 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40010400 	.word	0x40010400
 8003094:	40023800 	.word	0x40023800

08003098 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a12      	ldr	r2, [pc, #72]	@ (8003100 <HAL_TIM_MspPostInit+0x68>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d11e      	bne.n	80030f8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <HAL_TIM_MspPostInit+0x6c>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c2:	4a10      	ldr	r2, [pc, #64]	@ (8003104 <HAL_TIM_MspPostInit+0x6c>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003104 <HAL_TIM_MspPostInit+0x6c>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80030d6:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80030da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030e8:	2303      	movs	r3, #3
 80030ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	4619      	mov	r1, r3
 80030f2:	4805      	ldr	r0, [pc, #20]	@ (8003108 <HAL_TIM_MspPostInit+0x70>)
 80030f4:	f001 f814 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80030f8:	bf00      	nop
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40010400 	.word	0x40010400
 8003104:	40023800 	.word	0x40023800
 8003108:	40020800 	.word	0x40020800

0800310c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	@ 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a4d      	ldr	r2, [pc, #308]	@ (8003260 <HAL_UART_MspInit+0x154>)
 800312a:	4293      	cmp	r3, r2
 800312c:	f040 8093 	bne.w	8003256 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	4b4b      	ldr	r3, [pc, #300]	@ (8003264 <HAL_UART_MspInit+0x158>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	4a4a      	ldr	r2, [pc, #296]	@ (8003264 <HAL_UART_MspInit+0x158>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800313e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003140:	4b48      	ldr	r3, [pc, #288]	@ (8003264 <HAL_UART_MspInit+0x158>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	4b44      	ldr	r3, [pc, #272]	@ (8003264 <HAL_UART_MspInit+0x158>)
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	4a43      	ldr	r2, [pc, #268]	@ (8003264 <HAL_UART_MspInit+0x158>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6313      	str	r3, [r2, #48]	@ 0x30
 800315c:	4b41      	ldr	r3, [pc, #260]	@ (8003264 <HAL_UART_MspInit+0x158>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003168:	230c      	movs	r3, #12
 800316a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003174:	2303      	movs	r3, #3
 8003176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003178:	2307      	movs	r3, #7
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	4839      	ldr	r0, [pc, #228]	@ (8003268 <HAL_UART_MspInit+0x15c>)
 8003184:	f000 ffcc 	bl	8004120 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003188:	4b38      	ldr	r3, [pc, #224]	@ (800326c <HAL_UART_MspInit+0x160>)
 800318a:	4a39      	ldr	r2, [pc, #228]	@ (8003270 <HAL_UART_MspInit+0x164>)
 800318c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800318e:	4b37      	ldr	r3, [pc, #220]	@ (800326c <HAL_UART_MspInit+0x160>)
 8003190:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003194:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003196:	4b35      	ldr	r3, [pc, #212]	@ (800326c <HAL_UART_MspInit+0x160>)
 8003198:	2200      	movs	r2, #0
 800319a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800319c:	4b33      	ldr	r3, [pc, #204]	@ (800326c <HAL_UART_MspInit+0x160>)
 800319e:	2200      	movs	r2, #0
 80031a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031a2:	4b32      	ldr	r3, [pc, #200]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031aa:	4b30      	ldr	r3, [pc, #192]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031b0:	4b2e      	ldr	r3, [pc, #184]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80031b6:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031be:	4b2b      	ldr	r3, [pc, #172]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c6:	4b29      	ldr	r3, [pc, #164]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031cc:	4827      	ldr	r0, [pc, #156]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031ce:	f000 fba5 	bl	800391c <HAL_DMA_Init>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80031d8:	f7ff fa0a 	bl	80025f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a23      	ldr	r2, [pc, #140]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80031e2:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_UART_MspInit+0x160>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80031e8:	4b22      	ldr	r3, [pc, #136]	@ (8003274 <HAL_UART_MspInit+0x168>)
 80031ea:	4a23      	ldr	r2, [pc, #140]	@ (8003278 <HAL_UART_MspInit+0x16c>)
 80031ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80031ee:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <HAL_UART_MspInit+0x168>)
 80031f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003274 <HAL_UART_MspInit+0x168>)
 80031f8:	2240      	movs	r2, #64	@ 0x40
 80031fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <HAL_UART_MspInit+0x168>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003202:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <HAL_UART_MspInit+0x168>)
 8003204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003208:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800320a:	4b1a      	ldr	r3, [pc, #104]	@ (8003274 <HAL_UART_MspInit+0x168>)
 800320c:	2200      	movs	r2, #0
 800320e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003210:	4b18      	ldr	r3, [pc, #96]	@ (8003274 <HAL_UART_MspInit+0x168>)
 8003212:	2200      	movs	r2, #0
 8003214:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <HAL_UART_MspInit+0x168>)
 8003218:	2200      	movs	r2, #0
 800321a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800321c:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <HAL_UART_MspInit+0x168>)
 800321e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003222:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <HAL_UART_MspInit+0x168>)
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800322a:	4812      	ldr	r0, [pc, #72]	@ (8003274 <HAL_UART_MspInit+0x168>)
 800322c:	f000 fb76 	bl	800391c <HAL_DMA_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003236:	f7ff f9db 	bl	80025f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <HAL_UART_MspInit+0x168>)
 800323e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003240:	4a0c      	ldr	r2, [pc, #48]	@ (8003274 <HAL_UART_MspInit+0x168>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003246:	2200      	movs	r2, #0
 8003248:	2105      	movs	r1, #5
 800324a:	2026      	movs	r0, #38	@ 0x26
 800324c:	f000 fb3c 	bl	80038c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003250:	2026      	movs	r0, #38	@ 0x26
 8003252:	f000 fb55 	bl	8003900 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003256:	bf00      	nop
 8003258:	3728      	adds	r7, #40	@ 0x28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40004400 	.word	0x40004400
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000
 800326c:	2000496c 	.word	0x2000496c
 8003270:	40026088 	.word	0x40026088
 8003274:	200049cc 	.word	0x200049cc
 8003278:	400260a0 	.word	0x400260a0

0800327c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b08e      	sub	sp, #56	@ 0x38
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	4b33      	ldr	r3, [pc, #204]	@ (8003360 <HAL_InitTick+0xe4>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	4a32      	ldr	r2, [pc, #200]	@ (8003360 <HAL_InitTick+0xe4>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	6413      	str	r3, [r2, #64]	@ 0x40
 800329c:	4b30      	ldr	r3, [pc, #192]	@ (8003360 <HAL_InitTick+0xe4>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032a8:	f107 0210 	add.w	r2, r7, #16
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 fa14 	bl	80046e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032c2:	f001 f9e5 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80032c6:	6378      	str	r0, [r7, #52]	@ 0x34
 80032c8:	e004      	b.n	80032d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032ca:	f001 f9e1 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80032ce:	4603      	mov	r3, r0
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d6:	4a23      	ldr	r2, [pc, #140]	@ (8003364 <HAL_InitTick+0xe8>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	0c9b      	lsrs	r3, r3, #18
 80032de:	3b01      	subs	r3, #1
 80032e0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032e2:	4b21      	ldr	r3, [pc, #132]	@ (8003368 <HAL_InitTick+0xec>)
 80032e4:	4a21      	ldr	r2, [pc, #132]	@ (800336c <HAL_InitTick+0xf0>)
 80032e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <HAL_InitTick+0xec>)
 80032ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80032f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003368 <HAL_InitTick+0xec>)
 80032f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003368 <HAL_InitTick+0xec>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_InitTick+0xec>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b19      	ldr	r3, [pc, #100]	@ (8003368 <HAL_InitTick+0xec>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003308:	4817      	ldr	r0, [pc, #92]	@ (8003368 <HAL_InitTick+0xec>)
 800330a:	f001 fe63 	bl	8004fd4 <HAL_TIM_Base_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003318:	2b00      	cmp	r3, #0
 800331a:	d11b      	bne.n	8003354 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800331c:	4812      	ldr	r0, [pc, #72]	@ (8003368 <HAL_InitTick+0xec>)
 800331e:	f001 fea9 	bl	8005074 <HAL_TIM_Base_Start_IT>
 8003322:	4603      	mov	r3, r0
 8003324:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003328:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800332c:	2b00      	cmp	r3, #0
 800332e:	d111      	bne.n	8003354 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003330:	2036      	movs	r0, #54	@ 0x36
 8003332:	f000 fae5 	bl	8003900 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d808      	bhi.n	800334e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800333c:	2200      	movs	r2, #0
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	2036      	movs	r0, #54	@ 0x36
 8003342:	f000 fac1 	bl	80038c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <HAL_InitTick+0xf4>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e002      	b.n	8003354 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003354:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003358:	4618      	mov	r0, r3
 800335a:	3738      	adds	r7, #56	@ 0x38
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	431bde83 	.word	0x431bde83
 8003368:	20007984 	.word	0x20007984
 800336c:	40001000 	.word	0x40001000
 8003370:	200000c8 	.word	0x200000c8

08003374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003378:	bf00      	nop
 800337a:	e7fd      	b.n	8003378 <NMI_Handler+0x4>

0800337c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <HardFault_Handler+0x4>

08003384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <MemManage_Handler+0x4>

0800338c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <BusFault_Handler+0x4>

08003394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003398:	bf00      	nop
 800339a:	e7fd      	b.n	8003398 <UsageFault_Handler+0x4>

0800339c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80033b0:	4802      	ldr	r0, [pc, #8]	@ (80033bc <DMA1_Stream5_IRQHandler+0x10>)
 80033b2:	f000 fc4b 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2000496c 	.word	0x2000496c

080033c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <DMA1_Stream6_IRQHandler+0x10>)
 80033c6:	f000 fc41 	bl	8003c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200049cc 	.word	0x200049cc

080033d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033d8:	4802      	ldr	r0, [pc, #8]	@ (80033e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033da:	f002 f907 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20004774 	.word	0x20004774

080033e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80033ee:	f002 f8fd 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20004774 	.word	0x20004774

080033fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003400:	4802      	ldr	r0, [pc, #8]	@ (800340c <USART2_IRQHandler+0x10>)
 8003402:	f003 f8f7 	bl	80065f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20004924 	.word	0x20004924

08003410 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003414:	4802      	ldr	r0, [pc, #8]	@ (8003420 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003416:	f002 f8e9 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200048dc 	.word	0x200048dc

08003424 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003428:	4802      	ldr	r0, [pc, #8]	@ (8003434 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800342a:	f002 f8df 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200048dc 	.word	0x200048dc

08003438 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800343c:	4802      	ldr	r0, [pc, #8]	@ (8003448 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800343e:	f002 f8d5 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200048dc 	.word	0x200048dc

0800344c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003450:	4802      	ldr	r0, [pc, #8]	@ (800345c <TIM8_CC_IRQHandler+0x10>)
 8003452:	f002 f8cb 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200048dc 	.word	0x200048dc

08003460 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003464:	4802      	ldr	r0, [pc, #8]	@ (8003470 <TIM5_IRQHandler+0x10>)
 8003466:	f002 f8c1 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20004894 	.word	0x20004894

08003474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003478:	4802      	ldr	r0, [pc, #8]	@ (8003484 <TIM6_DAC_IRQHandler+0x10>)
 800347a:	f002 f8b7 	bl	80055ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20007984 	.word	0x20007984

08003488 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return 1;
 800348c:	2301      	movs	r3, #1
}
 800348e:	4618      	mov	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <_kill>:

int _kill(int pid, int sig)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034a2:	f010 fe2f 	bl	8014104 <__errno>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2216      	movs	r2, #22
 80034aa:	601a      	str	r2, [r3, #0]
  return -1;
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_exit>:

void _exit (int status)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ffe7 	bl	8003498 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <_exit+0x12>

080034ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b086      	sub	sp, #24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e00a      	b.n	80034f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034e0:	f3af 8000 	nop.w
 80034e4:	4601      	mov	r1, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	60ba      	str	r2, [r7, #8]
 80034ec:	b2ca      	uxtb	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3301      	adds	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	dbf0      	blt.n	80034e0 <_read+0x12>
  }

  return len;
 80034fe:	687b      	ldr	r3, [r7, #4]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e009      	b.n	800352e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	60ba      	str	r2, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	dbf1      	blt.n	800351a <_write+0x12>
  }
  return len;
 8003536:	687b      	ldr	r3, [r7, #4]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_close>:

int _close(int file)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003568:	605a      	str	r2, [r3, #4]
  return 0;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <_isatty>:

int _isatty(int file)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003580:	2301      	movs	r3, #1
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b0:	4a14      	ldr	r2, [pc, #80]	@ (8003604 <_sbrk+0x5c>)
 80035b2:	4b15      	ldr	r3, [pc, #84]	@ (8003608 <_sbrk+0x60>)
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035bc:	4b13      	ldr	r3, [pc, #76]	@ (800360c <_sbrk+0x64>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c4:	4b11      	ldr	r3, [pc, #68]	@ (800360c <_sbrk+0x64>)
 80035c6:	4a12      	ldr	r2, [pc, #72]	@ (8003610 <_sbrk+0x68>)
 80035c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <_sbrk+0x64>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d207      	bcs.n	80035e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d8:	f010 fd94 	bl	8014104 <__errno>
 80035dc:	4603      	mov	r3, r0
 80035de:	220c      	movs	r2, #12
 80035e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	e009      	b.n	80035fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <_sbrk+0x64>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ee:	4b07      	ldr	r3, [pc, #28]	@ (800360c <_sbrk+0x64>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4413      	add	r3, r2
 80035f6:	4a05      	ldr	r2, [pc, #20]	@ (800360c <_sbrk+0x64>)
 80035f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035fa:	68fb      	ldr	r3, [r7, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20020000 	.word	0x20020000
 8003608:	00000400 	.word	0x00000400
 800360c:	200079d0 	.word	0x200079d0
 8003610:	20010f80 	.word	0x20010f80

08003614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003618:	4b06      	ldr	r3, [pc, #24]	@ (8003634 <SystemInit+0x20>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	4a05      	ldr	r2, [pc, #20]	@ (8003634 <SystemInit+0x20>)
 8003620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003638:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003670 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800363c:	f7ff ffea 	bl	8003614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003640:	480c      	ldr	r0, [pc, #48]	@ (8003674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003642:	490d      	ldr	r1, [pc, #52]	@ (8003678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003644:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003648:	e002      	b.n	8003650 <LoopCopyDataInit>

0800364a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800364a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800364c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800364e:	3304      	adds	r3, #4

08003650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003654:	d3f9      	bcc.n	800364a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003658:	4c0a      	ldr	r4, [pc, #40]	@ (8003684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800365a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800365c:	e001      	b.n	8003662 <LoopFillZerobss>

0800365e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800365e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003660:	3204      	adds	r2, #4

08003662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003664:	d3fb      	bcc.n	800365e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003666:	f010 fd53 	bl	8014110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800366a:	f7fe fb97 	bl	8001d9c <main>
  bx  lr    
 800366e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8003670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003678:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800367c:	08015e5c 	.word	0x08015e5c
  ldr r2, =_sbss
 8003680:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8003684:	20010f7c 	.word	0x20010f7c

08003688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003688:	e7fe      	b.n	8003688 <ADC_IRQHandler>
	...

0800368c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003690:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <HAL_Init+0x40>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a0d      	ldr	r2, [pc, #52]	@ (80036cc <HAL_Init+0x40>)
 8003696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800369a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800369c:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_Init+0x40>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0a      	ldr	r2, [pc, #40]	@ (80036cc <HAL_Init+0x40>)
 80036a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a8:	4b08      	ldr	r3, [pc, #32]	@ (80036cc <HAL_Init+0x40>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a07      	ldr	r2, [pc, #28]	@ (80036cc <HAL_Init+0x40>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b4:	2003      	movs	r0, #3
 80036b6:	f000 f8fc 	bl	80038b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ba:	200f      	movs	r0, #15
 80036bc:	f7ff fdde 	bl	800327c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c0:	f7ff fb62 	bl	8002d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <HAL_IncTick+0x20>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x24>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a04      	ldr	r2, [pc, #16]	@ (80036f4 <HAL_IncTick+0x24>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	200000cc 	.word	0x200000cc
 80036f4:	200079d4 	.word	0x200079d4

080036f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return uwTick;
 80036fc:	4b03      	ldr	r3, [pc, #12]	@ (800370c <HAL_GetTick+0x14>)
 80036fe:	681b      	ldr	r3, [r3, #0]
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	200079d4 	.word	0x200079d4

08003710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff ffee 	bl	80036f8 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d005      	beq.n	8003736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372a:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <HAL_Delay+0x44>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4413      	add	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003736:	bf00      	nop
 8003738:	f7ff ffde 	bl	80036f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	429a      	cmp	r2, r3
 8003746:	d8f7      	bhi.n	8003738 <HAL_Delay+0x28>
  {
  }
}
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200000cc 	.word	0x200000cc

08003758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0c      	ldr	r3, [pc, #48]	@ (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003780:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	@ (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	@ (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	@ (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
         );
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	@ 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b082      	sub	sp, #8
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff4c 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038da:	f7ff ff61 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 80038de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	6978      	ldr	r0, [r7, #20]
 80038e6:	f7ff ffb1 	bl	800384c <NVIC_EncodePriority>
 80038ea:	4602      	mov	r2, r0
 80038ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff80 	bl	80037f8 <__NVIC_SetPriority>
}
 80038f8:	bf00      	nop
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff54 	bl	80037bc <__NVIC_EnableIRQ>
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003928:	f7ff fee6 	bl	80036f8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d101      	bne.n	8003938 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e099      	b.n	8003a6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003958:	e00f      	b.n	800397a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800395a:	f7ff fecd 	bl	80036f8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b05      	cmp	r3, #5
 8003966:	d908      	bls.n	800397a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2203      	movs	r2, #3
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e078      	b.n	8003a6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e8      	bne.n	800395a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_DMA_Init+0x158>)
 8003994:	4013      	ands	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d107      	bne.n	80039e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	4313      	orrs	r3, r2
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f023 0307 	bic.w	r3, r3, #7
 80039fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d117      	bne.n	8003a3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fb01 	bl	8004028 <DMA_CheckFifoParam>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2240      	movs	r2, #64	@ 0x40
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e016      	b.n	8003a6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fab8 	bl	8003fbc <DMA_CalcBaseAndBitshift>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a54:	223f      	movs	r2, #63	@ 0x3f
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	f010803f 	.word	0xf010803f

08003a78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_DMA_Start_IT+0x26>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e040      	b.n	8003b20 <HAL_DMA_Start_IT+0xa8>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d12f      	bne.n	8003b12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fa4a 	bl	8003f60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	223f      	movs	r2, #63	@ 0x3f
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0216 	orr.w	r2, r2, #22
 8003ae6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0208 	orr.w	r2, r2, #8
 8003afe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e005      	b.n	8003b1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b36:	f7ff fddf 	bl	80036f8 <HAL_GetTick>
 8003b3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d008      	beq.n	8003b5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e052      	b.n	8003c00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0216 	bic.w	r2, r2, #22
 8003b68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_DMA_Abort+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003baa:	e013      	b.n	8003bd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bac:	f7ff fda4 	bl	80036f8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d90c      	bls.n	8003bd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e015      	b.n	8003c00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e4      	bne.n	8003bac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be6:	223f      	movs	r2, #63	@ 0x3f
 8003be8:	409a      	lsls	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d004      	beq.n	8003c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2280      	movs	r2, #128	@ 0x80
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e00c      	b.n	8003c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2205      	movs	r2, #5
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0201 	bic.w	r2, r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c58:	4b8e      	ldr	r3, [pc, #568]	@ (8003e94 <HAL_DMA_IRQHandler+0x248>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003e98 <HAL_DMA_IRQHandler+0x24c>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	2208      	movs	r2, #8
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d01a      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0304 	and.w	r3, r3, #4
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	409a      	lsls	r2, r3
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d10:	2204      	movs	r2, #4
 8003d12:	409a      	lsls	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1c:	f043 0204 	orr.w	r2, r3, #4
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d28:	2210      	movs	r2, #16
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d043      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03c      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d46:	2210      	movs	r2, #16
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d018      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d108      	bne.n	8003d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d024      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	e01f      	b.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	4798      	blx	r3
 8003d8c:	e016      	b.n	8003dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d107      	bne.n	8003dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0208 	bic.w	r2, r2, #8
 8003daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 808f 	beq.w	8003eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 8087 	beq.w	8003eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de2:	2220      	movs	r2, #32
 8003de4:	409a      	lsls	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d136      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0216 	bic.w	r2, r2, #22
 8003e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d103      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x1da>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0208 	bic.w	r2, r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	223f      	movs	r2, #63	@ 0x3f
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d07e      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	4798      	blx	r3
        }
        return;
 8003e62:	e079      	b.n	8003f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01d      	beq.n	8003eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d031      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	e02c      	b.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
 8003e92:	bf00      	nop
 8003e94:	200000c4 	.word	0x200000c4
 8003e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e01e      	b.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10f      	bne.n	8003edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0210 	bic.w	r2, r2, #16
 8003eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d032      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2205      	movs	r2, #5
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d307      	bcc.n	8003f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f2      	bne.n	8003f18 <HAL_DMA_IRQHandler+0x2cc>
 8003f32:	e000      	b.n	8003f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
 8003f56:	e000      	b.n	8003f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f58:	bf00      	nop
    }
  }
}
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b40      	cmp	r3, #64	@ 0x40
 8003f8c:	d108      	bne.n	8003fa0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f9e:	e007      	b.n	8003fb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	60da      	str	r2, [r3, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	3b10      	subs	r3, #16
 8003fcc:	4a14      	ldr	r2, [pc, #80]	@ (8004020 <DMA_CalcBaseAndBitshift+0x64>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <DMA_CalcBaseAndBitshift+0x68>)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d909      	bls.n	8003ffe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ffc:	e007      	b.n	800400e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	aaaaaaab 	.word	0xaaaaaaab
 8004024:	0801503c 	.word	0x0801503c

08004028 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d11f      	bne.n	8004082 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b03      	cmp	r3, #3
 8004046:	d856      	bhi.n	80040f6 <DMA_CheckFifoParam+0xce>
 8004048:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <DMA_CheckFifoParam+0x28>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	08004061 	.word	0x08004061
 8004054:	08004073 	.word	0x08004073
 8004058:	08004061 	.word	0x08004061
 800405c:	080040f7 	.word	0x080040f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d046      	beq.n	80040fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004070:	e043      	b.n	80040fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800407a:	d140      	bne.n	80040fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004080:	e03d      	b.n	80040fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800408a:	d121      	bne.n	80040d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d837      	bhi.n	8004102 <DMA_CheckFifoParam+0xda>
 8004092:	a201      	add	r2, pc, #4	@ (adr r2, 8004098 <DMA_CheckFifoParam+0x70>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040a9 	.word	0x080040a9
 800409c:	080040af 	.word	0x080040af
 80040a0:	080040a9 	.word	0x080040a9
 80040a4:	080040c1 	.word	0x080040c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e030      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d025      	beq.n	8004106 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040be:	e022      	b.n	8004106 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040c8:	d11f      	bne.n	800410a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040ce:	e01c      	b.n	800410a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d903      	bls.n	80040de <DMA_CheckFifoParam+0xb6>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d003      	beq.n	80040e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040dc:	e018      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	73fb      	strb	r3, [r7, #15]
      break;
 80040e2:	e015      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00e      	beq.n	800410e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      break;
 80040f4:	e00b      	b.n	800410e <DMA_CheckFifoParam+0xe6>
      break;
 80040f6:	bf00      	nop
 80040f8:	e00a      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e008      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
 8004100:	e006      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004102:	bf00      	nop
 8004104:	e004      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 8004106:	bf00      	nop
 8004108:	e002      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;   
 800410a:	bf00      	nop
 800410c:	e000      	b.n	8004110 <DMA_CheckFifoParam+0xe8>
      break;
 800410e:	bf00      	nop
    }
  } 
  
  return status; 
 8004110:	7bfb      	ldrb	r3, [r7, #15]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	@ 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004136:	2300      	movs	r3, #0
 8004138:	61fb      	str	r3, [r7, #28]
 800413a:	e165      	b.n	8004408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800413c:	2201      	movs	r2, #1
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	f040 8154 	bne.w	8004402 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800416e:	2b02      	cmp	r3, #2
 8004170:	d130      	bne.n	80041d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43db      	mvns	r3, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4013      	ands	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a8:	2201      	movs	r2, #1
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 0201 	and.w	r2, r3, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d017      	beq.n	8004210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2203      	movs	r2, #3
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d123      	bne.n	8004264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	220f      	movs	r2, #15
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4013      	ands	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	08da      	lsrs	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3208      	adds	r2, #8
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0203 	and.w	r2, r3, #3
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4313      	orrs	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80ae 	beq.w	8004402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80042b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80042b6:	4b5a      	ldr	r3, [pc, #360]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042c2:	4a58      	ldr	r2, [pc, #352]	@ (8004424 <HAL_GPIO_Init+0x304>)
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	3302      	adds	r3, #2
 80042ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	220f      	movs	r2, #15
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4f      	ldr	r2, [pc, #316]	@ (8004428 <HAL_GPIO_Init+0x308>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d025      	beq.n	800433a <HAL_GPIO_Init+0x21a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a4e      	ldr	r2, [pc, #312]	@ (800442c <HAL_GPIO_Init+0x30c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01f      	beq.n	8004336 <HAL_GPIO_Init+0x216>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a4d      	ldr	r2, [pc, #308]	@ (8004430 <HAL_GPIO_Init+0x310>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d019      	beq.n	8004332 <HAL_GPIO_Init+0x212>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a4c      	ldr	r2, [pc, #304]	@ (8004434 <HAL_GPIO_Init+0x314>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <HAL_GPIO_Init+0x20e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a4b      	ldr	r2, [pc, #300]	@ (8004438 <HAL_GPIO_Init+0x318>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00d      	beq.n	800432a <HAL_GPIO_Init+0x20a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a4a      	ldr	r2, [pc, #296]	@ (800443c <HAL_GPIO_Init+0x31c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d007      	beq.n	8004326 <HAL_GPIO_Init+0x206>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a49      	ldr	r2, [pc, #292]	@ (8004440 <HAL_GPIO_Init+0x320>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_GPIO_Init+0x202>
 800431e:	2306      	movs	r3, #6
 8004320:	e00c      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004322:	2307      	movs	r3, #7
 8004324:	e00a      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004326:	2305      	movs	r3, #5
 8004328:	e008      	b.n	800433c <HAL_GPIO_Init+0x21c>
 800432a:	2304      	movs	r3, #4
 800432c:	e006      	b.n	800433c <HAL_GPIO_Init+0x21c>
 800432e:	2303      	movs	r3, #3
 8004330:	e004      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004332:	2302      	movs	r3, #2
 8004334:	e002      	b.n	800433c <HAL_GPIO_Init+0x21c>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_GPIO_Init+0x21c>
 800433a:	2300      	movs	r3, #0
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	f002 0203 	and.w	r2, r2, #3
 8004342:	0092      	lsls	r2, r2, #2
 8004344:	4093      	lsls	r3, r2
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800434c:	4935      	ldr	r1, [pc, #212]	@ (8004424 <HAL_GPIO_Init+0x304>)
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	089b      	lsrs	r3, r3, #2
 8004352:	3302      	adds	r3, #2
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435a:	4b3a      	ldr	r3, [pc, #232]	@ (8004444 <HAL_GPIO_Init+0x324>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800437e:	4a31      	ldr	r2, [pc, #196]	@ (8004444 <HAL_GPIO_Init+0x324>)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004384:	4b2f      	ldr	r3, [pc, #188]	@ (8004444 <HAL_GPIO_Init+0x324>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	43db      	mvns	r3, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4013      	ands	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043a8:	4a26      	ldr	r2, [pc, #152]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ae:	4b25      	ldr	r3, [pc, #148]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4013      	ands	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043fc:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <HAL_GPIO_Init+0x324>)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3301      	adds	r3, #1
 8004406:	61fb      	str	r3, [r7, #28]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	f67f ae96 	bls.w	800413c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop
 8004414:	3724      	adds	r7, #36	@ 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	40013800 	.word	0x40013800
 8004428:	40020000 	.word	0x40020000
 800442c:	40020400 	.word	0x40020400
 8004430:	40020800 	.word	0x40020800
 8004434:	40020c00 	.word	0x40020c00
 8004438:	40021000 	.word	0x40021000
 800443c:	40021400 	.word	0x40021400
 8004440:	40021800 	.word	0x40021800
 8004444:	40013c00 	.word	0x40013c00

08004448 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	887b      	ldrh	r3, [r7, #2]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004460:	2301      	movs	r3, #1
 8004462:	73fb      	strb	r3, [r7, #15]
 8004464:	e001      	b.n	800446a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	4613      	mov	r3, r2
 8004486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004488:	787b      	ldrb	r3, [r7, #1]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448e:	887a      	ldrh	r2, [r7, #2]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004494:	e003      	b.n	800449e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004496:	887b      	ldrh	r3, [r7, #2]
 8004498:	041a      	lsls	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	619a      	str	r2, [r3, #24]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0cc      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c0:	4b68      	ldr	r3, [pc, #416]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d90c      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ce:	4b65      	ldr	r3, [pc, #404]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	b2d2      	uxtb	r2, r2
 80044d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a58      	ldr	r2, [pc, #352]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a52      	ldr	r2, [pc, #328]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d119      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d003      	beq.n	800456a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004566:	2b03      	cmp	r3, #3
 8004568:	d107      	bne.n	800457a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456a:	4b3f      	ldr	r3, [pc, #252]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e06f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457a:	4b3b      	ldr	r3, [pc, #236]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e067      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b37      	ldr	r3, [pc, #220]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4934      	ldr	r1, [pc, #208]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7ff f8ac 	bl	80036f8 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7ff f8a8 	bl	80036f8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e04f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b25      	ldr	r3, [pc, #148]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d20c      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b22      	ldr	r3, [pc, #136]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	@ (8004664 <HAL_RCC_ClockConfig+0x1b8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f887 	bl	8004744 <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490a      	ldr	r1, [pc, #40]	@ (800466c <HAL_RCC_ClockConfig+0x1c0>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	@ (8004670 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCC_ClockConfig+0x1c8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fe12 	bl	800327c <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023c00 	.word	0x40023c00
 8004668:	40023800 	.word	0x40023800
 800466c:	08015024 	.word	0x08015024
 8004670:	200000c4 	.word	0x200000c4
 8004674:	200000c8 	.word	0x200000c8

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200000c4 	.word	0x200000c4

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a9b      	lsrs	r3, r3, #10
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	@ (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08015034 	.word	0x08015034

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046bc:	f7ff ffdc 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4903      	ldr	r1, [pc, #12]	@ (80046dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	08015034 	.word	0x08015034

080046e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	220f      	movs	r2, #15
 80046ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046f0:	4b12      	ldr	r3, [pc, #72]	@ (800473c <HAL_RCC_GetClockConfig+0x5c>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 0203 	and.w	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <HAL_RCC_GetClockConfig+0x5c>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004708:	4b0c      	ldr	r3, [pc, #48]	@ (800473c <HAL_RCC_GetClockConfig+0x5c>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004714:	4b09      	ldr	r3, [pc, #36]	@ (800473c <HAL_RCC_GetClockConfig+0x5c>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	08db      	lsrs	r3, r3, #3
 800471a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004722:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <HAL_RCC_GetClockConfig+0x60>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 020f 	and.w	r2, r3, #15
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	601a      	str	r2, [r3, #0]
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40023800 	.word	0x40023800
 8004740:	40023c00 	.word	0x40023c00

08004744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004748:	b0a6      	sub	sp, #152	@ 0x98
 800474a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476a:	4bc8      	ldr	r3, [pc, #800]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b0c      	cmp	r3, #12
 8004774:	f200 817e 	bhi.w	8004a74 <HAL_RCC_GetSysClockFreq+0x330>
 8004778:	a201      	add	r2, pc, #4	@ (adr r2, 8004780 <HAL_RCC_GetSysClockFreq+0x3c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047b5 	.word	0x080047b5
 8004784:	08004a75 	.word	0x08004a75
 8004788:	08004a75 	.word	0x08004a75
 800478c:	08004a75 	.word	0x08004a75
 8004790:	080047bd 	.word	0x080047bd
 8004794:	08004a75 	.word	0x08004a75
 8004798:	08004a75 	.word	0x08004a75
 800479c:	08004a75 	.word	0x08004a75
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	08004a75 	.word	0x08004a75
 80047a8:	08004a75 	.word	0x08004a75
 80047ac:	08004a75 	.word	0x08004a75
 80047b0:	0800492f 	.word	0x0800492f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4bb6      	ldr	r3, [pc, #728]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x34c>)
 80047b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80047ba:	e15f      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047bc:	4bb5      	ldr	r3, [pc, #724]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x350>)
 80047be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80047c2:	e15b      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047c4:	4bb1      	ldr	r3, [pc, #708]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047d0:	4bae      	ldr	r3, [pc, #696]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d031      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047dc:	4bab      	ldr	r3, [pc, #684]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	2200      	movs	r2, #0
 80047e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80047f0:	2300      	movs	r3, #0
 80047f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80047f4:	4ba7      	ldr	r3, [pc, #668]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x350>)
 80047f6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80047fa:	462a      	mov	r2, r5
 80047fc:	fb03 f202 	mul.w	r2, r3, r2
 8004800:	2300      	movs	r3, #0
 8004802:	4621      	mov	r1, r4
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	4413      	add	r3, r2
 800480a:	4aa2      	ldr	r2, [pc, #648]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x350>)
 800480c:	4621      	mov	r1, r4
 800480e:	fba1 1202 	umull	r1, r2, r1, r2
 8004812:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004814:	460a      	mov	r2, r1
 8004816:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004818:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800481a:	4413      	add	r3, r2
 800481c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800481e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004822:	2200      	movs	r2, #0
 8004824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004826:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004828:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800482c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8004830:	f7fc f9c4 	bl	8000bbc <__aeabi_uldivmod>
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4613      	mov	r3, r2
 800483a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800483e:	e064      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004840:	4b92      	ldr	r3, [pc, #584]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	2200      	movs	r2, #0
 8004848:	653b      	str	r3, [r7, #80]	@ 0x50
 800484a:	657a      	str	r2, [r7, #84]	@ 0x54
 800484c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004854:	2300      	movs	r3, #0
 8004856:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004858:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800485c:	4622      	mov	r2, r4
 800485e:	462b      	mov	r3, r5
 8004860:	f04f 0000 	mov.w	r0, #0
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	0159      	lsls	r1, r3, #5
 800486a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800486e:	0150      	lsls	r0, r2, #5
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4621      	mov	r1, r4
 8004876:	1a51      	subs	r1, r2, r1
 8004878:	6139      	str	r1, [r7, #16]
 800487a:	4629      	mov	r1, r5
 800487c:	eb63 0301 	sbc.w	r3, r3, r1
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	f04f 0200 	mov.w	r2, #0
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800488e:	4659      	mov	r1, fp
 8004890:	018b      	lsls	r3, r1, #6
 8004892:	4651      	mov	r1, sl
 8004894:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004898:	4651      	mov	r1, sl
 800489a:	018a      	lsls	r2, r1, #6
 800489c:	4651      	mov	r1, sl
 800489e:	ebb2 0801 	subs.w	r8, r2, r1
 80048a2:	4659      	mov	r1, fp
 80048a4:	eb63 0901 	sbc.w	r9, r3, r1
 80048a8:	f04f 0200 	mov.w	r2, #0
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048bc:	4690      	mov	r8, r2
 80048be:	4699      	mov	r9, r3
 80048c0:	4623      	mov	r3, r4
 80048c2:	eb18 0303 	adds.w	r3, r8, r3
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	462b      	mov	r3, r5
 80048ca:	eb49 0303 	adc.w	r3, r9, r3
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048dc:	4629      	mov	r1, r5
 80048de:	028b      	lsls	r3, r1, #10
 80048e0:	4621      	mov	r1, r4
 80048e2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048e6:	4621      	mov	r1, r4
 80048e8:	028a      	lsls	r2, r1, #10
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048f2:	2200      	movs	r2, #0
 80048f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80048f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048fc:	f7fc f95e 	bl	8000bbc <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800490a:	4b60      	ldr	r3, [pc, #384]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	0c1b      	lsrs	r3, r3, #16
 8004910:	f003 0303 	and.w	r3, r3, #3
 8004914:	3301      	adds	r3, #1
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800491c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800492c:	e0a6      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492e:	4b57      	ldr	r3, [pc, #348]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004936:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800493a:	4b54      	ldr	r3, [pc, #336]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02a      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004946:	4b51      	ldr	r3, [pc, #324]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	099b      	lsrs	r3, r3, #6
 800494c:	2200      	movs	r2, #0
 800494e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004950:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004958:	2100      	movs	r1, #0
 800495a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x350>)
 800495c:	fb03 f201 	mul.w	r2, r3, r1
 8004960:	2300      	movs	r3, #0
 8004962:	fb00 f303 	mul.w	r3, r0, r3
 8004966:	4413      	add	r3, r2
 8004968:	4a4a      	ldr	r2, [pc, #296]	@ (8004a94 <HAL_RCC_GetSysClockFreq+0x350>)
 800496a:	fba0 1202 	umull	r1, r2, r0, r2
 800496e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004970:	460a      	mov	r2, r1
 8004972:	673a      	str	r2, [r7, #112]	@ 0x70
 8004974:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004976:	4413      	add	r3, r2
 8004978:	677b      	str	r3, [r7, #116]	@ 0x74
 800497a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800497e:	2200      	movs	r2, #0
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30
 8004982:	637a      	str	r2, [r7, #52]	@ 0x34
 8004984:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004988:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800498c:	f7fc f916 	bl	8000bbc <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800499a:	e05b      	b.n	8004a54 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	099b      	lsrs	r3, r3, #6
 80049a2:	2200      	movs	r2, #0
 80049a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ae:	623b      	str	r3, [r7, #32]
 80049b0:	2300      	movs	r3, #0
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	f04f 0000 	mov.w	r0, #0
 80049c0:	f04f 0100 	mov.w	r1, #0
 80049c4:	0159      	lsls	r1, r3, #5
 80049c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049ca:	0150      	lsls	r0, r2, #5
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4641      	mov	r1, r8
 80049d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f0:	ebb2 040a 	subs.w	r4, r2, sl
 80049f4:	eb63 050b 	sbc.w	r5, r3, fp
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	00eb      	lsls	r3, r5, #3
 8004a02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a06:	00e2      	lsls	r2, r4, #3
 8004a08:	4614      	mov	r4, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	4643      	mov	r3, r8
 8004a0e:	18e3      	adds	r3, r4, r3
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	464b      	mov	r3, r9
 8004a14:	eb45 0303 	adc.w	r3, r5, r3
 8004a18:	607b      	str	r3, [r7, #4]
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a26:	4629      	mov	r1, r5
 8004a28:	028b      	lsls	r3, r1, #10
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a30:	4621      	mov	r1, r4
 8004a32:	028a      	lsls	r2, r1, #10
 8004a34:	4610      	mov	r0, r2
 8004a36:	4619      	mov	r1, r3
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	61fa      	str	r2, [r7, #28]
 8004a42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a46:	f7fc f8b9 	bl	8000bbc <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4613      	mov	r3, r2
 8004a50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a54:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <HAL_RCC_GetSysClockFreq+0x348>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	0f1b      	lsrs	r3, r3, #28
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8004a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a72:	e003      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <HAL_RCC_GetSysClockFreq+0x34c>)
 8004a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8004a7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3798      	adds	r7, #152	@ 0x98
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	00f42400 	.word	0x00f42400
 8004a94:	017d7840 	.word	0x017d7840

08004a98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e28d      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8083 	beq.w	8004bbe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ab8:	4b94      	ldr	r3, [pc, #592]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d019      	beq.n	8004af8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ac4:	4b91      	ldr	r3, [pc, #580]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
        || \
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d106      	bne.n	8004ade <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004adc:	d00c      	beq.n	8004af8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ade:	4b8b      	ldr	r3, [pc, #556]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d112      	bne.n	8004b10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aea:	4b88      	ldr	r3, [pc, #544]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004af2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004af6:	d10b      	bne.n	8004b10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af8:	4b84      	ldr	r3, [pc, #528]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05b      	beq.n	8004bbc <HAL_RCC_OscConfig+0x124>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d157      	bne.n	8004bbc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e25a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b18:	d106      	bne.n	8004b28 <HAL_RCC_OscConfig+0x90>
 8004b1a:	4b7c      	ldr	r3, [pc, #496]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7b      	ldr	r2, [pc, #492]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e01d      	b.n	8004b64 <HAL_RCC_OscConfig+0xcc>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCC_OscConfig+0xb4>
 8004b32:	4b76      	ldr	r3, [pc, #472]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a75      	ldr	r2, [pc, #468]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4b73      	ldr	r3, [pc, #460]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a72      	ldr	r2, [pc, #456]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e00b      	b.n	8004b64 <HAL_RCC_OscConfig+0xcc>
 8004b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a6e      	ldr	r2, [pc, #440]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	4b6c      	ldr	r3, [pc, #432]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a6b      	ldr	r2, [pc, #428]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d013      	beq.n	8004b94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fdc4 	bl	80036f8 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b74:	f7fe fdc0 	bl	80036f8 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	@ 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e21f      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b61      	ldr	r3, [pc, #388]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xdc>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fe fdb0 	bl	80036f8 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9c:	f7fe fdac 	bl	80036f8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	@ 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e20b      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	4b57      	ldr	r3, [pc, #348]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x104>
 8004bba:	e000      	b.n	8004bbe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d06f      	beq.n	8004caa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bca:	4b50      	ldr	r3, [pc, #320]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d017      	beq.n	8004c06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
        || \
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d105      	bne.n	8004bee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004be2:	4b4a      	ldr	r3, [pc, #296]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00b      	beq.n	8004c06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bee:	4b47      	ldr	r3, [pc, #284]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d11c      	bne.n	8004c34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bfa:	4b44      	ldr	r3, [pc, #272]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d116      	bne.n	8004c34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c06:	4b41      	ldr	r3, [pc, #260]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_RCC_OscConfig+0x186>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e1d3      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4937      	ldr	r1, [pc, #220]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c32:	e03a      	b.n	8004caa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c3c:	4b34      	ldr	r3, [pc, #208]	@ (8004d10 <HAL_RCC_OscConfig+0x278>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c42:	f7fe fd59 	bl	80036f8 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4a:	f7fe fd55 	bl	80036f8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e1b4      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c68:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4925      	ldr	r1, [pc, #148]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	600b      	str	r3, [r1, #0]
 8004c7c:	e015      	b.n	8004caa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c7e:	4b24      	ldr	r3, [pc, #144]	@ (8004d10 <HAL_RCC_OscConfig+0x278>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe fd38 	bl	80036f8 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fe fd34 	bl	80036f8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e193      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d036      	beq.n	8004d24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <HAL_RCC_OscConfig+0x27c>)
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc4:	f7fe fd18 	bl	80036f8 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ccc:	f7fe fd14 	bl	80036f8 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e173      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cde:	4b0b      	ldr	r3, [pc, #44]	@ (8004d0c <HAL_RCC_OscConfig+0x274>)
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x234>
 8004cea:	e01b      	b.n	8004d24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <HAL_RCC_OscConfig+0x27c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fe fd01 	bl	80036f8 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf8:	e00e      	b.n	8004d18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cfa:	f7fe fcfd 	bl	80036f8 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d907      	bls.n	8004d18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e15c      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
 8004d0c:	40023800 	.word	0x40023800
 8004d10:	42470000 	.word	0x42470000
 8004d14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d18:	4b8a      	ldr	r3, [pc, #552]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1ea      	bne.n	8004cfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 8097 	beq.w	8004e60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d32:	2300      	movs	r3, #0
 8004d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d36:	4b83      	ldr	r3, [pc, #524]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	4b7f      	ldr	r3, [pc, #508]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d52:	4b7c      	ldr	r3, [pc, #496]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	4b79      	ldr	r3, [pc, #484]	@ (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d118      	bne.n	8004da0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d6e:	4b76      	ldr	r3, [pc, #472]	@ (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a75      	ldr	r2, [pc, #468]	@ (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7a:	f7fe fcbd 	bl	80036f8 <HAL_GetTick>
 8004d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	e008      	b.n	8004d94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d82:	f7fe fcb9 	bl	80036f8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e118      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d94:	4b6c      	ldr	r3, [pc, #432]	@ (8004f48 <HAL_RCC_OscConfig+0x4b0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <HAL_RCC_OscConfig+0x31e>
 8004da8:	4b66      	ldr	r3, [pc, #408]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a65      	ldr	r2, [pc, #404]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	f043 0301 	orr.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	e01c      	b.n	8004df0 <HAL_RCC_OscConfig+0x358>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b05      	cmp	r3, #5
 8004dbc:	d10c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x340>
 8004dbe:	4b61      	ldr	r3, [pc, #388]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	4a60      	ldr	r2, [pc, #384]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dc4:	f043 0304 	orr.w	r3, r3, #4
 8004dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dca:	4b5e      	ldr	r3, [pc, #376]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dce:	4a5d      	ldr	r2, [pc, #372]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd6:	e00b      	b.n	8004df0 <HAL_RCC_OscConfig+0x358>
 8004dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	4a59      	ldr	r2, [pc, #356]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de4:	4b57      	ldr	r3, [pc, #348]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de8:	4a56      	ldr	r2, [pc, #344]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	f023 0304 	bic.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d015      	beq.n	8004e24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df8:	f7fe fc7e 	bl	80036f8 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fe fc7a 	bl	80036f8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e0d7      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b4b      	ldr	r3, [pc, #300]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCC_OscConfig+0x368>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fe fc68 	bl	80036f8 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2c:	f7fe fc64 	bl	80036f8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0c1      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e42:	4b40      	ldr	r3, [pc, #256]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1ee      	bne.n	8004e2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e54:	4b3b      	ldr	r3, [pc, #236]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	4a3a      	ldr	r2, [pc, #232]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ad 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e6a:	4b36      	ldr	r3, [pc, #216]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 030c 	and.w	r3, r3, #12
 8004e72:	2b08      	cmp	r3, #8
 8004e74:	d060      	beq.n	8004f38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d145      	bne.n	8004f0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b33      	ldr	r3, [pc, #204]	@ (8004f4c <HAL_RCC_OscConfig+0x4b4>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe fc38 	bl	80036f8 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fe fc34 	bl	80036f8 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e093      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b29      	ldr	r3, [pc, #164]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	019b      	lsls	r3, r3, #6
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	491b      	ldr	r1, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f4c <HAL_RCC_OscConfig+0x4b4>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fe fc09 	bl	80036f8 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fe fc05 	bl	80036f8 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e064      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efc:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x452>
 8004f08:	e05c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <HAL_RCC_OscConfig+0x4b4>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe fbf2 	bl	80036f8 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe fbee 	bl	80036f8 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e04d      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x480>
 8004f36:	e045      	b.n	8004fc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e040      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40007000 	.word	0x40007000
 8004f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f50:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd0 <HAL_RCC_OscConfig+0x538>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d030      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d129      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d122      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d119      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f96:	085b      	lsrs	r3, r3, #1
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d10f      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e041      	b.n	800506a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fd ffe4 	bl	8002fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fd8c 	bl	8005b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e04e      	b.n	800512a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a23      	ldr	r2, [pc, #140]	@ (8005138 <HAL_TIM_Base_Start_IT+0xc4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d022      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b6:	d01d      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	@ (800513c <HAL_TIM_Base_Start_IT+0xc8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d018      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <HAL_TIM_Base_Start_IT+0xcc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d013      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <HAL_TIM_Base_Start_IT+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d00e      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	@ (8005148 <HAL_TIM_Base_Start_IT+0xd4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d009      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a19      	ldr	r2, [pc, #100]	@ (800514c <HAL_TIM_Base_Start_IT+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d004      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0x80>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a18      	ldr	r2, [pc, #96]	@ (8005150 <HAL_TIM_Base_Start_IT+0xdc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b06      	cmp	r3, #6
 8005104:	d010      	beq.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	e007      	b.n	8005128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40000c00 	.word	0x40000c00
 8005148:	40010400 	.word	0x40010400
 800514c:	40014000 	.word	0x40014000
 8005150:	40001800 	.word	0x40001800

08005154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e041      	b.n	80051ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd ff4c 	bl	8003018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3304      	adds	r3, #4
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f000 fccc 	bl	8005b30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d109      	bne.n	8005218 <HAL_TIM_PWM_Start+0x24>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e022      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b04      	cmp	r3, #4
 800521c:	d109      	bne.n	8005232 <HAL_TIM_PWM_Start+0x3e>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e015      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d109      	bne.n	800524c <HAL_TIM_PWM_Start+0x58>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e008      	b.n	800525e <HAL_TIM_PWM_Start+0x6a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	bf14      	ite	ne
 8005258:	2301      	movne	r3, #1
 800525a:	2300      	moveq	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e07c      	b.n	8005360 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_TIM_PWM_Start+0x82>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005274:	e013      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b04      	cmp	r3, #4
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0x92>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005284:	e00b      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b08      	cmp	r3, #8
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xa2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005294:	e003      	b.n	800529e <HAL_TIM_PWM_Start+0xaa>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2201      	movs	r2, #1
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 ff38 	bl	800611c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <HAL_TIM_PWM_Start+0x174>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_TIM_PWM_Start+0xcc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2c      	ldr	r2, [pc, #176]	@ (800536c <HAL_TIM_PWM_Start+0x178>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_PWM_Start+0xd0>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_PWM_Start+0xd2>
 80052c4:	2300      	movs	r3, #0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a22      	ldr	r2, [pc, #136]	@ (8005368 <HAL_TIM_PWM_Start+0x174>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d022      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ec:	d01d      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005370 <HAL_TIM_PWM_Start+0x17c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d018      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005374 <HAL_TIM_PWM_Start+0x180>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d013      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1c      	ldr	r2, [pc, #112]	@ (8005378 <HAL_TIM_PWM_Start+0x184>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00e      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <HAL_TIM_PWM_Start+0x178>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d009      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a18      	ldr	r2, [pc, #96]	@ (800537c <HAL_TIM_PWM_Start+0x188>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d004      	beq.n	800532a <HAL_TIM_PWM_Start+0x136>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <HAL_TIM_PWM_Start+0x18c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d111      	bne.n	800534e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b06      	cmp	r3, #6
 800533a:	d010      	beq.n	800535e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534c:	e007      	b.n	800535e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	40010000 	.word	0x40010000
 800536c:	40010400 	.word	0x40010400
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00
 800537c:	40014000 	.word	0x40014000
 8005380:	40001800 	.word	0x40001800

08005384 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e097      	b.n	80054c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fd fd17 	bl	8002de0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053c8:	f023 0307 	bic.w	r3, r3, #7
 80053cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f000 fba9 	bl	8005b30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	4313      	orrs	r3, r2
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005424:	f023 030c 	bic.w	r3, r3, #12
 8005428:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005430:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	4313      	orrs	r3, r2
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	011a      	lsls	r2, r3, #4
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	031b      	lsls	r3, r3, #12
 8005454:	4313      	orrs	r3, r2
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	4313      	orrs	r3, r2
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d110      	bne.n	8005522 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d102      	bne.n	800550c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005506:	7b7b      	ldrb	r3, [r7, #13]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d001      	beq.n	8005510 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e069      	b.n	80055e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005520:	e031      	b.n	8005586 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d110      	bne.n	800554a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d102      	bne.n	8005534 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800552e:	7b3b      	ldrb	r3, [r7, #12]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d001      	beq.n	8005538 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e055      	b.n	80055e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005548:	e01d      	b.n	8005586 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d108      	bne.n	8005562 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d105      	bne.n	8005562 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005556:	7b7b      	ldrb	r3, [r7, #13]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d102      	bne.n	8005562 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800555c:	7b3b      	ldrb	r3, [r7, #12]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d001      	beq.n	8005566 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e03e      	b.n	80055e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_TIM_Encoder_Start+0xc4>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d008      	beq.n	80055a4 <HAL_TIM_Encoder_Start+0xd4>
 8005592:	e00f      	b.n	80055b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	2100      	movs	r1, #0
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fdbd 	bl	800611c <TIM_CCxChannelCmd>
      break;
 80055a2:	e016      	b.n	80055d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2201      	movs	r2, #1
 80055aa:	2104      	movs	r1, #4
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fdb5 	bl	800611c <TIM_CCxChannelCmd>
      break;
 80055b2:	e00e      	b.n	80055d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2201      	movs	r2, #1
 80055ba:	2100      	movs	r1, #0
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fdad 	bl	800611c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	2104      	movs	r1, #4
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fda6 	bl	800611c <TIM_CCxChannelCmd>
      break;
 80055d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 0201 	orr.w	r2, r2, #1
 80055e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0202 	mvn.w	r2, #2
 8005620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fa5b 	bl	8005af2 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fa4d 	bl	8005ade <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa5e 	bl	8005b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d020      	beq.n	800569c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0204 	mvn.w	r2, #4
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2202      	movs	r2, #2
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fa35 	bl	8005af2 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa27 	bl	8005ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa38 	bl	8005b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 0308 	and.w	r3, r3, #8
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d020      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d01b      	beq.n	80056e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0208 	mvn.w	r2, #8
 80056b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2204      	movs	r2, #4
 80056be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fa0f 	bl	8005af2 <HAL_TIM_IC_CaptureCallback>
 80056d4:	e005      	b.n	80056e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fa01 	bl	8005ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fa12 	bl	8005b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f003 0310 	and.w	r3, r3, #16
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d020      	beq.n	8005734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01b      	beq.n	8005734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0210 	mvn.w	r2, #16
 8005704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2208      	movs	r2, #8
 800570a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f9e9 	bl	8005af2 <HAL_TIM_IC_CaptureCallback>
 8005720:	e005      	b.n	800572e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9db 	bl	8005ade <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f9ec 	bl	8005b06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00c      	beq.n	8005758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0201 	mvn.w	r2, #1
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc ff52 	bl	80025fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00c      	beq.n	800577c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fdce 	bl	8006318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00c      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9bd 	bl	8005b1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00c      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0320 	and.w	r3, r3, #32
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0220 	mvn.w	r2, #32
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fda0 	bl	8006304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c4:	bf00      	nop
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e0ae      	b.n	8005948 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	f200 809f 	bhi.w	8005938 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005835 	.word	0x08005835
 8005804:	08005939 	.word	0x08005939
 8005808:	08005939 	.word	0x08005939
 800580c:	08005939 	.word	0x08005939
 8005810:	08005875 	.word	0x08005875
 8005814:	08005939 	.word	0x08005939
 8005818:	08005939 	.word	0x08005939
 800581c:	08005939 	.word	0x08005939
 8005820:	080058b7 	.word	0x080058b7
 8005824:	08005939 	.word	0x08005939
 8005828:	08005939 	.word	0x08005939
 800582c:	08005939 	.word	0x08005939
 8005830:	080058f7 	.word	0x080058f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fa24 	bl	8005c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0204 	bic.w	r2, r2, #4
 800585e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6999      	ldr	r1, [r3, #24]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	619a      	str	r2, [r3, #24]
      break;
 8005872:	e064      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fa74 	bl	8005d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800588e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6999      	ldr	r1, [r3, #24]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	021a      	lsls	r2, r3, #8
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	619a      	str	r2, [r3, #24]
      break;
 80058b4:	e043      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68b9      	ldr	r1, [r7, #8]
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fac9 	bl	8005e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0208 	orr.w	r2, r2, #8
 80058d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0204 	bic.w	r2, r2, #4
 80058e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69d9      	ldr	r1, [r3, #28]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	61da      	str	r2, [r3, #28]
      break;
 80058f4:	e023      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fb1d 	bl	8005f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69d9      	ldr	r1, [r3, #28]
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	021a      	lsls	r2, r3, #8
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	61da      	str	r2, [r3, #28]
      break;
 8005936:	e002      	b.n	800593e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75fb      	strb	r3, [r7, #23]
      break;
 800593c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005946:	7dfb      	ldrb	r3, [r7, #23]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_TIM_ConfigClockSource+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e0b4      	b.n	8005ad6 <HAL_TIM_ConfigClockSource+0x186>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800598a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005992:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a4:	d03e      	beq.n	8005a24 <HAL_TIM_ConfigClockSource+0xd4>
 80059a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059aa:	f200 8087 	bhi.w	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059b2:	f000 8086 	beq.w	8005ac2 <HAL_TIM_ConfigClockSource+0x172>
 80059b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ba:	d87f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b70      	cmp	r3, #112	@ 0x70
 80059be:	d01a      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0xa6>
 80059c0:	2b70      	cmp	r3, #112	@ 0x70
 80059c2:	d87b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059c4:	2b60      	cmp	r3, #96	@ 0x60
 80059c6:	d050      	beq.n	8005a6a <HAL_TIM_ConfigClockSource+0x11a>
 80059c8:	2b60      	cmp	r3, #96	@ 0x60
 80059ca:	d877      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059cc:	2b50      	cmp	r3, #80	@ 0x50
 80059ce:	d03c      	beq.n	8005a4a <HAL_TIM_ConfigClockSource+0xfa>
 80059d0:	2b50      	cmp	r3, #80	@ 0x50
 80059d2:	d873      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059d4:	2b40      	cmp	r3, #64	@ 0x40
 80059d6:	d058      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0x13a>
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d86f      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059dc:	2b30      	cmp	r3, #48	@ 0x30
 80059de:	d064      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e0:	2b30      	cmp	r3, #48	@ 0x30
 80059e2:	d86b      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d060      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d867      	bhi.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05c      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d05a      	beq.n	8005aaa <HAL_TIM_ConfigClockSource+0x15a>
 80059f4:	e062      	b.n	8005abc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a06:	f000 fb69 	bl	80060dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	609a      	str	r2, [r3, #8]
      break;
 8005a22:	e04f      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a34:	f000 fb52 	bl	80060dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689a      	ldr	r2, [r3, #8]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a46:	609a      	str	r2, [r3, #8]
      break;
 8005a48:	e03c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	461a      	mov	r2, r3
 8005a58:	f000 fac6 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2150      	movs	r1, #80	@ 0x50
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fb1f 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005a68:	e02c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a76:	461a      	mov	r2, r3
 8005a78:	f000 fae5 	bl	8006046 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2160      	movs	r1, #96	@ 0x60
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb0f 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a96:	461a      	mov	r2, r3
 8005a98:	f000 faa6 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2140      	movs	r1, #64	@ 0x40
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 faff 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005aa8:	e00c      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f000 faf6 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005aba:	e003      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e000      	b.n	8005ac4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ac2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b22:	bf00      	nop
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a46      	ldr	r2, [pc, #280]	@ (8005c5c <TIM_Base_SetConfig+0x12c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4e:	d00f      	beq.n	8005b70 <TIM_Base_SetConfig+0x40>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a43      	ldr	r2, [pc, #268]	@ (8005c60 <TIM_Base_SetConfig+0x130>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00b      	beq.n	8005b70 <TIM_Base_SetConfig+0x40>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a42      	ldr	r2, [pc, #264]	@ (8005c64 <TIM_Base_SetConfig+0x134>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d007      	beq.n	8005b70 <TIM_Base_SetConfig+0x40>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a41      	ldr	r2, [pc, #260]	@ (8005c68 <TIM_Base_SetConfig+0x138>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_Base_SetConfig+0x40>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a40      	ldr	r2, [pc, #256]	@ (8005c6c <TIM_Base_SetConfig+0x13c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d108      	bne.n	8005b82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a35      	ldr	r2, [pc, #212]	@ (8005c5c <TIM_Base_SetConfig+0x12c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d02b      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b90:	d027      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <TIM_Base_SetConfig+0x130>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d023      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a31      	ldr	r2, [pc, #196]	@ (8005c64 <TIM_Base_SetConfig+0x134>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d01f      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a30      	ldr	r2, [pc, #192]	@ (8005c68 <TIM_Base_SetConfig+0x138>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01b      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2f      	ldr	r2, [pc, #188]	@ (8005c6c <TIM_Base_SetConfig+0x13c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d017      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a2e      	ldr	r2, [pc, #184]	@ (8005c70 <TIM_Base_SetConfig+0x140>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005c74 <TIM_Base_SetConfig+0x144>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c78 <TIM_Base_SetConfig+0x148>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8005c7c <TIM_Base_SetConfig+0x14c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c80 <TIM_Base_SetConfig+0x150>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a29      	ldr	r2, [pc, #164]	@ (8005c84 <TIM_Base_SetConfig+0x154>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a10      	ldr	r2, [pc, #64]	@ (8005c5c <TIM_Base_SetConfig+0x12c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_Base_SetConfig+0xf8>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a12      	ldr	r2, [pc, #72]	@ (8005c6c <TIM_Base_SetConfig+0x13c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d103      	bne.n	8005c30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	611a      	str	r2, [r3, #16]
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3714      	adds	r7, #20
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40000400 	.word	0x40000400
 8005c64:	40000800 	.word	0x40000800
 8005c68:	40000c00 	.word	0x40000c00
 8005c6c:	40010400 	.word	0x40010400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800
 8005c7c:	40001800 	.word	0x40001800
 8005c80:	40001c00 	.word	0x40001c00
 8005c84:	40002000 	.word	0x40002000

08005c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	f023 0201 	bic.w	r2, r3, #1
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0303 	bic.w	r3, r3, #3
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 0302 	bic.w	r3, r3, #2
 8005cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a20      	ldr	r2, [pc, #128]	@ (8005d60 <TIM_OC1_SetConfig+0xd8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC1_SetConfig+0x64>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d64 <TIM_OC1_SetConfig+0xdc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10c      	bne.n	8005d06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0308 	bic.w	r3, r3, #8
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f023 0304 	bic.w	r3, r3, #4
 8005d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a15      	ldr	r2, [pc, #84]	@ (8005d60 <TIM_OC1_SetConfig+0xd8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC1_SetConfig+0x8e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a14      	ldr	r2, [pc, #80]	@ (8005d64 <TIM_OC1_SetConfig+0xdc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d111      	bne.n	8005d3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	693a      	ldr	r2, [r7, #16]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	621a      	str	r2, [r3, #32]
}
 8005d54:	bf00      	nop
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400

08005d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
 8005d7c:	f023 0210 	bic.w	r2, r3, #16
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f023 0320 	bic.w	r3, r3, #32
 8005db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a22      	ldr	r2, [pc, #136]	@ (8005e4c <TIM_OC2_SetConfig+0xe4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x68>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a21      	ldr	r2, [pc, #132]	@ (8005e50 <TIM_OC2_SetConfig+0xe8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10d      	bne.n	8005dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a17      	ldr	r2, [pc, #92]	@ (8005e4c <TIM_OC2_SetConfig+0xe4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_OC2_SetConfig+0x94>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a16      	ldr	r2, [pc, #88]	@ (8005e50 <TIM_OC2_SetConfig+0xe8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d113      	bne.n	8005e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	40010000 	.word	0x40010000
 8005e50:	40010400 	.word	0x40010400

08005e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b087      	sub	sp, #28
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	021b      	lsls	r3, r3, #8
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a21      	ldr	r2, [pc, #132]	@ (8005f34 <TIM_OC3_SetConfig+0xe0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d003      	beq.n	8005eba <TIM_OC3_SetConfig+0x66>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a20      	ldr	r2, [pc, #128]	@ (8005f38 <TIM_OC3_SetConfig+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10d      	bne.n	8005ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	021b      	lsls	r3, r3, #8
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a16      	ldr	r2, [pc, #88]	@ (8005f34 <TIM_OC3_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_OC3_SetConfig+0x92>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a15      	ldr	r2, [pc, #84]	@ (8005f38 <TIM_OC3_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d113      	bne.n	8005f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40010400 	.word	0x40010400

08005f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	031b      	lsls	r3, r3, #12
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a12      	ldr	r2, [pc, #72]	@ (8005fe0 <TIM_OC4_SetConfig+0xa4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC4_SetConfig+0x68>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a11      	ldr	r2, [pc, #68]	@ (8005fe4 <TIM_OC4_SetConfig+0xa8>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d109      	bne.n	8005fb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	019b      	lsls	r3, r3, #6
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	f023 0210 	bic.w	r2, r3, #16
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006082:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2201      	movs	r2, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800617c:	2302      	movs	r3, #2
 800617e:	e05a      	b.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a21      	ldr	r2, [pc, #132]	@ (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061cc:	d01d      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1b      	ldr	r2, [pc, #108]	@ (800624c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a18      	ldr	r2, [pc, #96]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a17      	ldr	r2, [pc, #92]	@ (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a15      	ldr	r2, [pc, #84]	@ (800625c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d10c      	bne.n	8006224 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	4313      	orrs	r3, r2
 800621a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40010000 	.word	0x40010000
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40010400 	.word	0x40010400
 8006258:	40014000 	.word	0x40014000
 800625c:	40001800 	.word	0x40001800

08006260 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006278:	2302      	movs	r3, #2
 800627a:	e03d      	b.n	80062f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	4313      	orrs	r3, r2
 800629e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e042      	b.n	80063c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc feda 	bl	800310c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2224      	movs	r2, #36	@ 0x24
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800636e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 ffc9 	bl	8007308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80063a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08c      	sub	sp, #48	@ 0x30
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	4613      	mov	r3, r2
 80063d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d156      	bne.n	8006494 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_UART_Transmit_DMA+0x26>
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e04f      	b.n	8006496 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2221      	movs	r2, #33	@ 0x21
 8006412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641a:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <HAL_UART_Transmit_DMA+0xd4>)
 800641c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	4a20      	ldr	r2, [pc, #128]	@ (80064a4 <HAL_UART_Transmit_DMA+0xd8>)
 8006424:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	4a1f      	ldr	r2, [pc, #124]	@ (80064a8 <HAL_UART_Transmit_DMA+0xdc>)
 800642c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	2200      	movs	r2, #0
 8006434:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3304      	adds	r3, #4
 800644a:	461a      	mov	r2, r3
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	f7fd fb13 	bl	8003a78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800645a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3314      	adds	r3, #20
 8006462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	617b      	str	r3, [r7, #20]
   return(result);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3314      	adds	r3, #20
 800647a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800647c:	627a      	str	r2, [r7, #36]	@ 0x24
 800647e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6a39      	ldr	r1, [r7, #32]
 8006482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	61fb      	str	r3, [r7, #28]
   return(result);
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3730      	adds	r7, #48	@ 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	08006b95 	.word	0x08006b95
 80064a4:	08006c2f 	.word	0x08006c2f
 80064a8:	08006db3 	.word	0x08006db3

080064ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d112      	bne.n	80064ec <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_Receive_DMA+0x26>
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e00b      	b.n	80064ee <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	461a      	mov	r2, r3
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fcb0 	bl	8006e48 <UART_Start_Receive_DMA>
 80064e8:	4603      	mov	r3, r0
 80064ea:	e000      	b.n	80064ee <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80064ec:	2302      	movs	r3, #2
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b090      	sub	sp, #64	@ 0x40
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b80      	cmp	r3, #128	@ 0x80
 800650e:	bf0c      	ite	eq
 8006510:	2301      	moveq	r3, #1
 8006512:	2300      	movne	r3, #0
 8006514:	b2db      	uxtb	r3, r3
 8006516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b21      	cmp	r3, #33	@ 0x21
 8006522:	d128      	bne.n	8006576 <HAL_UART_DMAStop+0x80>
 8006524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d025      	beq.n	8006576 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3314      	adds	r3, #20
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	623b      	str	r3, [r7, #32]
   return(result);
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006540:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3314      	adds	r3, #20
 8006548:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800654a:	633a      	str	r2, [r7, #48]	@ 0x30
 800654c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656a:	4618      	mov	r0, r3
 800656c:	f7fd fadc 	bl	8003b28 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fd03 	bl	8006f7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006580:	2b40      	cmp	r3, #64	@ 0x40
 8006582:	bf0c      	ite	eq
 8006584:	2301      	moveq	r3, #1
 8006586:	2300      	movne	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b22      	cmp	r3, #34	@ 0x22
 8006596:	d128      	bne.n	80065ea <HAL_UART_DMAStop+0xf4>
 8006598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659a:	2b00      	cmp	r3, #0
 800659c:	d025      	beq.n	80065ea <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3314      	adds	r3, #20
 80065a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3314      	adds	r3, #20
 80065bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065be:	61fa      	str	r2, [r7, #28]
 80065c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	69b9      	ldr	r1, [r7, #24]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	617b      	str	r3, [r7, #20]
   return(result);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d004      	beq.n	80065e4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fd faa2 	bl	8003b28 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fcf1 	bl	8006fcc <UART_EndRxTransfer>
  }

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3740      	adds	r7, #64	@ 0x40
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b0ba      	sub	sp, #232	@ 0xe8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800661a:	2300      	movs	r3, #0
 800661c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006620:	2300      	movs	r3, #0
 8006622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006632:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10f      	bne.n	800665a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d009      	beq.n	800665a <HAL_UART_IRQHandler+0x66>
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fd99 	bl	800718a <UART_Receive_IT>
      return;
 8006658:	e25b      	b.n	8006b12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800665a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80de 	beq.w	8006820 <HAL_UART_IRQHandler+0x22c>
 8006664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006674:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80d1 	beq.w	8006820 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00b      	beq.n	80066a2 <HAL_UART_IRQHandler+0xae>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800669a:	f043 0201 	orr.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a6:	f003 0304 	and.w	r3, r3, #4
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <HAL_UART_IRQHandler+0xd2>
 80066ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066be:	f043 0202 	orr.w	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ca:	f003 0302 	and.w	r3, r3, #2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_UART_IRQHandler+0xf6>
 80066d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d011      	beq.n	800671a <HAL_UART_IRQHandler+0x126>
 80066f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d105      	bne.n	800670e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006712:	f043 0208 	orr.w	r2, r3, #8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671e:	2b00      	cmp	r3, #0
 8006720:	f000 81f2 	beq.w	8006b08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <HAL_UART_IRQHandler+0x14e>
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fd24 	bl	800718a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b40      	cmp	r3, #64	@ 0x40
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d103      	bne.n	800676e <HAL_UART_IRQHandler+0x17a>
 8006766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04f      	beq.n	800680e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fc2c 	bl	8006fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677e:	2b40      	cmp	r3, #64	@ 0x40
 8006780:	d141      	bne.n	8006806 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006790:	e853 3f00 	ldrex	r3, [r3]
 8006794:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006798:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800679c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3314      	adds	r3, #20
 80067aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1d9      	bne.n	8006782 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d013      	beq.n	80067fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067da:	4a7e      	ldr	r2, [pc, #504]	@ (80069d4 <HAL_UART_IRQHandler+0x3e0>)
 80067dc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd fa10 	bl	8003c08 <HAL_DMA_Abort_IT>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	e00e      	b.n	800681c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9b2 	bl	8006b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	e00a      	b.n	800681c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f9ae 	bl	8006b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	e006      	b.n	800681c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9aa 	bl	8006b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800681a:	e175      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	bf00      	nop
    return;
 800681e:	e173      	b.n	8006b08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	2b01      	cmp	r3, #1
 8006826:	f040 814f 	bne.w	8006ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8148 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 8141 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60bb      	str	r3, [r7, #8]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	f040 80b6 	bne.w	80069d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006878:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8145 	beq.w	8006b0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800688a:	429a      	cmp	r2, r3
 800688c:	f080 813e 	bcs.w	8006b0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006896:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068a2:	f000 8088 	beq.w	80069b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	330c      	adds	r3, #12
 80068ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	330c      	adds	r3, #12
 80068ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80068d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80068ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1d9      	bne.n	80068a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3314      	adds	r3, #20
 80068f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006902:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006916:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800691a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800691e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006922:	e841 2300 	strex	r3, r2, [r1]
 8006926:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006928:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1e1      	bne.n	80068f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	3314      	adds	r3, #20
 8006934:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800693e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3314      	adds	r3, #20
 800694e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006952:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006954:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006958:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e3      	bne.n	800692e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006986:	f023 0310 	bic.w	r3, r3, #16
 800698a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006998:	65ba      	str	r2, [r7, #88]	@ 0x58
 800699a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800699e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e3      	bne.n	8006974 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fd f8b9 	bl	8003b28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2202      	movs	r2, #2
 80069ba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8d5 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069d2:	e09b      	b.n	8006b0c <HAL_UART_IRQHandler+0x518>
 80069d4:	08007093 	.word	0x08007093
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 808e 	beq.w	8006b10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80069f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8089 	beq.w	8006b10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a22:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e3      	bne.n	80069fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3314      	adds	r3, #20
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	623b      	str	r3, [r7, #32]
   return(result);
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e3      	bne.n	8006a36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006aa0:	61fa      	str	r2, [r7, #28]
 8006aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	69b9      	ldr	r1, [r7, #24]
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	617b      	str	r3, [r7, #20]
   return(result);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e3      	bne.n	8006a7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f85b 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ac6:	e023      	b.n	8006b10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d009      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x4f4>
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 faea 	bl	80070ba <UART_Transmit_IT>
    return;
 8006ae6:	e014      	b.n	8006b12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00e      	beq.n	8006b12 <HAL_UART_IRQHandler+0x51e>
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fb2a 	bl	800715a <UART_EndTransmit_IT>
    return;
 8006b06:	e004      	b.n	8006b12 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b08:	bf00      	nop
 8006b0a:	e002      	b.n	8006b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b0c:	bf00      	nop
 8006b0e:	e000      	b.n	8006b12 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b10:	bf00      	nop
  }
}
 8006b12:	37e8      	adds	r7, #232	@ 0xe8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b090      	sub	sp, #64	@ 0x40
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d137      	bne.n	8006c20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	3314      	adds	r3, #20
 8006bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3314      	adds	r3, #20
 8006bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bde:	e841 2300 	strex	r3, r2, [r1]
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1e5      	bne.n	8006bb6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c0a:	61fa      	str	r2, [r7, #28]
 8006c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0e:	69b9      	ldr	r1, [r7, #24]
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	e841 2300 	strex	r3, r2, [r1]
 8006c16:	617b      	str	r3, [r7, #20]
   return(result);
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c1e:	e002      	b.n	8006c26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c20:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c22:	f7ff ff79 	bl	8006b18 <HAL_UART_TxCpltCallback>
}
 8006c26:	bf00      	nop
 8006c28:	3740      	adds	r7, #64	@ 0x40
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff ff75 	bl	8006b2c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c42:	bf00      	nop
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b09c      	sub	sp, #112	@ 0x70
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c56:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d172      	bne.n	8006d4c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c68:	2200      	movs	r2, #0
 8006c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	330c      	adds	r3, #12
 8006c8a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006c8c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c8e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e5      	bne.n	8006c6c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8006cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006cc0:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cc2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e5      	bne.n	8006ca0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3314      	adds	r3, #20
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3314      	adds	r3, #20
 8006cf2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006cf4:	633a      	str	r2, [r7, #48]	@ 0x30
 8006cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e5      	bne.n	8006cd4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d119      	bne.n	8006d4c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0310 	bic.w	r3, r3, #16
 8006d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d38:	61fa      	str	r2, [r7, #28]
 8006d3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	69b9      	ldr	r1, [r7, #24]
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	617b      	str	r3, [r7, #20]
   return(result);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e5      	bne.n	8006d18 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4e:	2200      	movs	r2, #0
 8006d50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d106      	bne.n	8006d68 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d62:	f7ff ff0b 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d66:	e002      	b.n	8006d6e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d68:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d6a:	f7ff fee9 	bl	8006b40 <HAL_UART_RxCpltCallback>
}
 8006d6e:	bf00      	nop
 8006d70:	3770      	adds	r7, #112	@ 0x70
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2201      	movs	r2, #1
 8006d88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d108      	bne.n	8006da4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d96:	085b      	lsrs	r3, r3, #1
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f7ff feed 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006da2:	e002      	b.n	8006daa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7ff fed5 	bl	8006b54 <HAL_UART_RxHalfCpltCallback>
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dce:	2b80      	cmp	r3, #128	@ 0x80
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b21      	cmp	r3, #33	@ 0x21
 8006de4:	d108      	bne.n	8006df8 <UART_DMAError+0x46>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2200      	movs	r2, #0
 8006df0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006df2:	68b8      	ldr	r0, [r7, #8]
 8006df4:	f000 f8c2 	bl	8006f7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	bf0c      	ite	eq
 8006e06:	2301      	moveq	r3, #1
 8006e08:	2300      	movne	r3, #0
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b22      	cmp	r3, #34	@ 0x22
 8006e18:	d108      	bne.n	8006e2c <UART_DMAError+0x7a>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d005      	beq.n	8006e2c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e26:	68b8      	ldr	r0, [r7, #8]
 8006e28:	f000 f8d0 	bl	8006fcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e30:	f043 0210 	orr.w	r2, r3, #16
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e38:	68b8      	ldr	r0, [r7, #8]
 8006e3a:	f7ff fe95 	bl	8006b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e3e:	bf00      	nop
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b098      	sub	sp, #96	@ 0x60
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	4613      	mov	r3, r2
 8006e54:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	88fa      	ldrh	r2, [r7, #6]
 8006e60:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2222      	movs	r2, #34	@ 0x22
 8006e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e74:	4a3e      	ldr	r2, [pc, #248]	@ (8006f70 <UART_Start_Receive_DMA+0x128>)
 8006e76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7c:	4a3d      	ldr	r2, [pc, #244]	@ (8006f74 <UART_Start_Receive_DMA+0x12c>)
 8006e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	4a3c      	ldr	r2, [pc, #240]	@ (8006f78 <UART_Start_Receive_DMA+0x130>)
 8006e86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006e90:	f107 0308 	add.w	r3, r7, #8
 8006e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	f7fc fde6 	bl	8003a78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d019      	beq.n	8006efe <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	330c      	adds	r3, #12
 8006ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	330c      	adds	r3, #12
 8006ee8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006eec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006ef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e5      	bne.n	8006eca <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3314      	adds	r3, #20
 8006f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	3314      	adds	r3, #20
 8006f38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	617b      	str	r3, [r7, #20]
   return(result);
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f48:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3314      	adds	r3, #20
 8006f50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f52:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6a39      	ldr	r1, [r7, #32]
 8006f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e5      	bne.n	8006f32 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3760      	adds	r7, #96	@ 0x60
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	08006c4b 	.word	0x08006c4b
 8006f74:	08006d77 	.word	0x08006d77
 8006f78:	08006db3 	.word	0x08006db3

08006f7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	@ 0x24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	330c      	adds	r3, #12
 8006f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	330c      	adds	r3, #12
 8006fa2:	69fa      	ldr	r2, [r7, #28]
 8006fa4:	61ba      	str	r2, [r7, #24]
 8006fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6979      	ldr	r1, [r7, #20]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006fc0:	bf00      	nop
 8006fc2:	3724      	adds	r7, #36	@ 0x24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b095      	sub	sp, #84	@ 0x54
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	330c      	adds	r3, #12
 8006fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	330c      	adds	r3, #12
 8006ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e5      	bne.n	8006fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3314      	adds	r3, #20
 800700e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	61fb      	str	r3, [r7, #28]
   return(result);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3314      	adds	r3, #20
 8007026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800702a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800702e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007040:	2b01      	cmp	r3, #1
 8007042:	d119      	bne.n	8007078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	330c      	adds	r3, #12
 800704a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	e853 3f00 	ldrex	r3, [r3]
 8007052:	60bb      	str	r3, [r7, #8]
   return(result);
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f023 0310 	bic.w	r3, r3, #16
 800705a:	647b      	str	r3, [r7, #68]	@ 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	330c      	adds	r3, #12
 8007062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007064:	61ba      	str	r2, [r7, #24]
 8007066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6979      	ldr	r1, [r7, #20]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	613b      	str	r3, [r7, #16]
   return(result);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e5      	bne.n	8007044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007086:	bf00      	nop
 8007088:	3754      	adds	r7, #84	@ 0x54
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fd5b 	bl	8006b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b085      	sub	sp, #20
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b21      	cmp	r3, #33	@ 0x21
 80070cc:	d13e      	bne.n	800714c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d6:	d114      	bne.n	8007102 <UART_Transmit_IT+0x48>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d110      	bne.n	8007102 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a1b      	ldr	r3, [r3, #32]
 80070e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	1c9a      	adds	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]
 8007100:	e008      	b.n	8007114 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	1c59      	adds	r1, r3, #1
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6211      	str	r1, [r2, #32]
 800710c:	781a      	ldrb	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007118:	b29b      	uxth	r3, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	b29b      	uxth	r3, r3
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	4619      	mov	r1, r3
 8007122:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10f      	bne.n	8007148 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007136:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007146:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	e000      	b.n	800714e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff fccc 	bl	8006b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b08c      	sub	sp, #48	@ 0x30
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b22      	cmp	r3, #34	@ 0x22
 800719c:	f040 80ae 	bne.w	80072fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a8:	d117      	bne.n	80071da <UART_Receive_IT+0x50>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d113      	bne.n	80071da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	1c9a      	adds	r2, r3, #2
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80071d8:	e026      	b.n	8007228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ec:	d007      	beq.n	80071fe <UART_Receive_IT+0x74>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <UART_Receive_IT+0x82>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007208:	701a      	strb	r2, [r3, #0]
 800720a:	e008      	b.n	800721e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007218:	b2da      	uxtb	r2, r3
 800721a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b01      	subs	r3, #1
 8007230:	b29b      	uxth	r3, r3
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4619      	mov	r1, r3
 8007236:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007238:	2b00      	cmp	r3, #0
 800723a:	d15d      	bne.n	80072f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0220 	bic.w	r2, r2, #32
 800724a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800725a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0201 	bic.w	r2, r2, #1
 800726a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2220      	movs	r2, #32
 8007270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727e:	2b01      	cmp	r3, #1
 8007280:	d135      	bne.n	80072ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	613b      	str	r3, [r7, #16]
   return(result);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f023 0310 	bic.w	r3, r3, #16
 800729e:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	330c      	adds	r3, #12
 80072a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a8:	623a      	str	r2, [r7, #32]
 80072aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ac:	69f9      	ldr	r1, [r7, #28]
 80072ae:	6a3a      	ldr	r2, [r7, #32]
 80072b0:	e841 2300 	strex	r3, r2, [r1]
 80072b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e5      	bne.n	8007288 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d10a      	bne.n	80072e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7ff fc48 	bl	8006b7c <HAL_UARTEx_RxEventCallback>
 80072ec:	e002      	b.n	80072f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fc26 	bl	8006b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e002      	b.n	80072fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e000      	b.n	80072fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80072fc:	2302      	movs	r3, #2
  }
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3730      	adds	r7, #48	@ 0x30
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800730c:	b0c0      	sub	sp, #256	@ 0x100
 800730e:	af00      	add	r7, sp, #0
 8007310:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007324:	68d9      	ldr	r1, [r3, #12]
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	ea40 0301 	orr.w	r3, r0, r1
 8007330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	431a      	orrs	r2, r3
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	431a      	orrs	r2, r3
 8007348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	4313      	orrs	r3, r2
 8007350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007360:	f021 010c 	bic.w	r1, r1, #12
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800736e:	430b      	orrs	r3, r1
 8007370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007382:	6999      	ldr	r1, [r3, #24]
 8007384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	ea40 0301 	orr.w	r3, r0, r1
 800738e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	4b8f      	ldr	r3, [pc, #572]	@ (80075d4 <UART_SetConfig+0x2cc>)
 8007398:	429a      	cmp	r2, r3
 800739a:	d005      	beq.n	80073a8 <UART_SetConfig+0xa0>
 800739c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b8d      	ldr	r3, [pc, #564]	@ (80075d8 <UART_SetConfig+0x2d0>)
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d104      	bne.n	80073b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073a8:	f7fd f986 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 80073ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073b0:	e003      	b.n	80073ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073b2:	f7fd f96d 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80073b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c4:	f040 810c 	bne.w	80075e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073cc:	2200      	movs	r2, #0
 80073ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80073d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80073da:	4622      	mov	r2, r4
 80073dc:	462b      	mov	r3, r5
 80073de:	1891      	adds	r1, r2, r2
 80073e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80073e2:	415b      	adcs	r3, r3
 80073e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80073e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80073ea:	4621      	mov	r1, r4
 80073ec:	eb12 0801 	adds.w	r8, r2, r1
 80073f0:	4629      	mov	r1, r5
 80073f2:	eb43 0901 	adc.w	r9, r3, r1
 80073f6:	f04f 0200 	mov.w	r2, #0
 80073fa:	f04f 0300 	mov.w	r3, #0
 80073fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800740a:	4690      	mov	r8, r2
 800740c:	4699      	mov	r9, r3
 800740e:	4623      	mov	r3, r4
 8007410:	eb18 0303 	adds.w	r3, r8, r3
 8007414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007418:	462b      	mov	r3, r5
 800741a:	eb49 0303 	adc.w	r3, r9, r3
 800741e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800742e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007436:	460b      	mov	r3, r1
 8007438:	18db      	adds	r3, r3, r3
 800743a:	653b      	str	r3, [r7, #80]	@ 0x50
 800743c:	4613      	mov	r3, r2
 800743e:	eb42 0303 	adc.w	r3, r2, r3
 8007442:	657b      	str	r3, [r7, #84]	@ 0x54
 8007444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800744c:	f7f9 fbb6 	bl	8000bbc <__aeabi_uldivmod>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4b61      	ldr	r3, [pc, #388]	@ (80075dc <UART_SetConfig+0x2d4>)
 8007456:	fba3 2302 	umull	r2, r3, r3, r2
 800745a:	095b      	lsrs	r3, r3, #5
 800745c:	011c      	lsls	r4, r3, #4
 800745e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007462:	2200      	movs	r2, #0
 8007464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007468:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800746c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007470:	4642      	mov	r2, r8
 8007472:	464b      	mov	r3, r9
 8007474:	1891      	adds	r1, r2, r2
 8007476:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007478:	415b      	adcs	r3, r3
 800747a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800747c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007480:	4641      	mov	r1, r8
 8007482:	eb12 0a01 	adds.w	sl, r2, r1
 8007486:	4649      	mov	r1, r9
 8007488:	eb43 0b01 	adc.w	fp, r3, r1
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	f04f 0300 	mov.w	r3, #0
 8007494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800749c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074a0:	4692      	mov	sl, r2
 80074a2:	469b      	mov	fp, r3
 80074a4:	4643      	mov	r3, r8
 80074a6:	eb1a 0303 	adds.w	r3, sl, r3
 80074aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074ae:	464b      	mov	r3, r9
 80074b0:	eb4b 0303 	adc.w	r3, fp, r3
 80074b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074cc:	460b      	mov	r3, r1
 80074ce:	18db      	adds	r3, r3, r3
 80074d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80074d2:	4613      	mov	r3, r2
 80074d4:	eb42 0303 	adc.w	r3, r2, r3
 80074d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80074de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80074e2:	f7f9 fb6b 	bl	8000bbc <__aeabi_uldivmod>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4611      	mov	r1, r2
 80074ec:	4b3b      	ldr	r3, [pc, #236]	@ (80075dc <UART_SetConfig+0x2d4>)
 80074ee:	fba3 2301 	umull	r2, r3, r3, r1
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	2264      	movs	r2, #100	@ 0x64
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
 80074fa:	1acb      	subs	r3, r1, r3
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007502:	4b36      	ldr	r3, [pc, #216]	@ (80075dc <UART_SetConfig+0x2d4>)
 8007504:	fba3 2302 	umull	r2, r3, r3, r2
 8007508:	095b      	lsrs	r3, r3, #5
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007510:	441c      	add	r4, r3
 8007512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007516:	2200      	movs	r2, #0
 8007518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800751c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	1891      	adds	r1, r2, r2
 800752a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800752c:	415b      	adcs	r3, r3
 800752e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007534:	4641      	mov	r1, r8
 8007536:	1851      	adds	r1, r2, r1
 8007538:	6339      	str	r1, [r7, #48]	@ 0x30
 800753a:	4649      	mov	r1, r9
 800753c:	414b      	adcs	r3, r1
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007540:	f04f 0200 	mov.w	r2, #0
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800754c:	4659      	mov	r1, fp
 800754e:	00cb      	lsls	r3, r1, #3
 8007550:	4651      	mov	r1, sl
 8007552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007556:	4651      	mov	r1, sl
 8007558:	00ca      	lsls	r2, r1, #3
 800755a:	4610      	mov	r0, r2
 800755c:	4619      	mov	r1, r3
 800755e:	4603      	mov	r3, r0
 8007560:	4642      	mov	r2, r8
 8007562:	189b      	adds	r3, r3, r2
 8007564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007568:	464b      	mov	r3, r9
 800756a:	460a      	mov	r2, r1
 800756c:	eb42 0303 	adc.w	r3, r2, r3
 8007570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007580:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007588:	460b      	mov	r3, r1
 800758a:	18db      	adds	r3, r3, r3
 800758c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800758e:	4613      	mov	r3, r2
 8007590:	eb42 0303 	adc.w	r3, r2, r3
 8007594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800759a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800759e:	f7f9 fb0d 	bl	8000bbc <__aeabi_uldivmod>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <UART_SetConfig+0x2d4>)
 80075a8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ac:	095b      	lsrs	r3, r3, #5
 80075ae:	2164      	movs	r1, #100	@ 0x64
 80075b0:	fb01 f303 	mul.w	r3, r1, r3
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	3332      	adds	r3, #50	@ 0x32
 80075ba:	4a08      	ldr	r2, [pc, #32]	@ (80075dc <UART_SetConfig+0x2d4>)
 80075bc:	fba2 2303 	umull	r2, r3, r2, r3
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	f003 0207 	and.w	r2, r3, #7
 80075c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4422      	add	r2, r4
 80075ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075d0:	e106      	b.n	80077e0 <UART_SetConfig+0x4d8>
 80075d2:	bf00      	nop
 80075d4:	40011000 	.word	0x40011000
 80075d8:	40011400 	.word	0x40011400
 80075dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e4:	2200      	movs	r2, #0
 80075e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80075ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80075f2:	4642      	mov	r2, r8
 80075f4:	464b      	mov	r3, r9
 80075f6:	1891      	adds	r1, r2, r2
 80075f8:	6239      	str	r1, [r7, #32]
 80075fa:	415b      	adcs	r3, r3
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80075fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007602:	4641      	mov	r1, r8
 8007604:	1854      	adds	r4, r2, r1
 8007606:	4649      	mov	r1, r9
 8007608:	eb43 0501 	adc.w	r5, r3, r1
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	00eb      	lsls	r3, r5, #3
 8007616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800761a:	00e2      	lsls	r2, r4, #3
 800761c:	4614      	mov	r4, r2
 800761e:	461d      	mov	r5, r3
 8007620:	4643      	mov	r3, r8
 8007622:	18e3      	adds	r3, r4, r3
 8007624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007628:	464b      	mov	r3, r9
 800762a:	eb45 0303 	adc.w	r3, r5, r3
 800762e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800763e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800764e:	4629      	mov	r1, r5
 8007650:	008b      	lsls	r3, r1, #2
 8007652:	4621      	mov	r1, r4
 8007654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007658:	4621      	mov	r1, r4
 800765a:	008a      	lsls	r2, r1, #2
 800765c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007660:	f7f9 faac 	bl	8000bbc <__aeabi_uldivmod>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4b60      	ldr	r3, [pc, #384]	@ (80077ec <UART_SetConfig+0x4e4>)
 800766a:	fba3 2302 	umull	r2, r3, r3, r2
 800766e:	095b      	lsrs	r3, r3, #5
 8007670:	011c      	lsls	r4, r3, #4
 8007672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007676:	2200      	movs	r2, #0
 8007678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800767c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007684:	4642      	mov	r2, r8
 8007686:	464b      	mov	r3, r9
 8007688:	1891      	adds	r1, r2, r2
 800768a:	61b9      	str	r1, [r7, #24]
 800768c:	415b      	adcs	r3, r3
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007694:	4641      	mov	r1, r8
 8007696:	1851      	adds	r1, r2, r1
 8007698:	6139      	str	r1, [r7, #16]
 800769a:	4649      	mov	r1, r9
 800769c:	414b      	adcs	r3, r1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076ac:	4659      	mov	r1, fp
 80076ae:	00cb      	lsls	r3, r1, #3
 80076b0:	4651      	mov	r1, sl
 80076b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076b6:	4651      	mov	r1, sl
 80076b8:	00ca      	lsls	r2, r1, #3
 80076ba:	4610      	mov	r0, r2
 80076bc:	4619      	mov	r1, r3
 80076be:	4603      	mov	r3, r0
 80076c0:	4642      	mov	r2, r8
 80076c2:	189b      	adds	r3, r3, r2
 80076c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076c8:	464b      	mov	r3, r9
 80076ca:	460a      	mov	r2, r1
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80076de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80076ec:	4649      	mov	r1, r9
 80076ee:	008b      	lsls	r3, r1, #2
 80076f0:	4641      	mov	r1, r8
 80076f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076f6:	4641      	mov	r1, r8
 80076f8:	008a      	lsls	r2, r1, #2
 80076fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80076fe:	f7f9 fa5d 	bl	8000bbc <__aeabi_uldivmod>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4611      	mov	r1, r2
 8007708:	4b38      	ldr	r3, [pc, #224]	@ (80077ec <UART_SetConfig+0x4e4>)
 800770a:	fba3 2301 	umull	r2, r3, r3, r1
 800770e:	095b      	lsrs	r3, r3, #5
 8007710:	2264      	movs	r2, #100	@ 0x64
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	1acb      	subs	r3, r1, r3
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	3332      	adds	r3, #50	@ 0x32
 800771c:	4a33      	ldr	r2, [pc, #204]	@ (80077ec <UART_SetConfig+0x4e4>)
 800771e:	fba2 2303 	umull	r2, r3, r2, r3
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007728:	441c      	add	r4, r3
 800772a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800772e:	2200      	movs	r2, #0
 8007730:	673b      	str	r3, [r7, #112]	@ 0x70
 8007732:	677a      	str	r2, [r7, #116]	@ 0x74
 8007734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007738:	4642      	mov	r2, r8
 800773a:	464b      	mov	r3, r9
 800773c:	1891      	adds	r1, r2, r2
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	415b      	adcs	r3, r3
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007748:	4641      	mov	r1, r8
 800774a:	1851      	adds	r1, r2, r1
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	4649      	mov	r1, r9
 8007750:	414b      	adcs	r3, r1
 8007752:	607b      	str	r3, [r7, #4]
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	f04f 0300 	mov.w	r3, #0
 800775c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007760:	4659      	mov	r1, fp
 8007762:	00cb      	lsls	r3, r1, #3
 8007764:	4651      	mov	r1, sl
 8007766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800776a:	4651      	mov	r1, sl
 800776c:	00ca      	lsls	r2, r1, #3
 800776e:	4610      	mov	r0, r2
 8007770:	4619      	mov	r1, r3
 8007772:	4603      	mov	r3, r0
 8007774:	4642      	mov	r2, r8
 8007776:	189b      	adds	r3, r3, r2
 8007778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800777a:	464b      	mov	r3, r9
 800777c:	460a      	mov	r2, r1
 800777e:	eb42 0303 	adc.w	r3, r2, r3
 8007782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	663b      	str	r3, [r7, #96]	@ 0x60
 800778e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800779c:	4649      	mov	r1, r9
 800779e:	008b      	lsls	r3, r1, #2
 80077a0:	4641      	mov	r1, r8
 80077a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a6:	4641      	mov	r1, r8
 80077a8:	008a      	lsls	r2, r1, #2
 80077aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077ae:	f7f9 fa05 	bl	8000bbc <__aeabi_uldivmod>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4b0d      	ldr	r3, [pc, #52]	@ (80077ec <UART_SetConfig+0x4e4>)
 80077b8:	fba3 1302 	umull	r1, r3, r3, r2
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	2164      	movs	r1, #100	@ 0x64
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	3332      	adds	r3, #50	@ 0x32
 80077ca:	4a08      	ldr	r2, [pc, #32]	@ (80077ec <UART_SetConfig+0x4e4>)
 80077cc:	fba2 2303 	umull	r2, r3, r2, r3
 80077d0:	095b      	lsrs	r3, r3, #5
 80077d2:	f003 020f 	and.w	r2, r3, #15
 80077d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4422      	add	r2, r4
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80077e6:	46bd      	mov	sp, r7
 80077e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ec:	51eb851f 	.word	0x51eb851f

080077f0 <__NVIC_SetPriority>:
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007800:	2b00      	cmp	r3, #0
 8007802:	db0a      	blt.n	800781a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b2da      	uxtb	r2, r3
 8007808:	490c      	ldr	r1, [pc, #48]	@ (800783c <__NVIC_SetPriority+0x4c>)
 800780a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780e:	0112      	lsls	r2, r2, #4
 8007810:	b2d2      	uxtb	r2, r2
 8007812:	440b      	add	r3, r1
 8007814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007818:	e00a      	b.n	8007830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	b2da      	uxtb	r2, r3
 800781e:	4908      	ldr	r1, [pc, #32]	@ (8007840 <__NVIC_SetPriority+0x50>)
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	f003 030f 	and.w	r3, r3, #15
 8007826:	3b04      	subs	r3, #4
 8007828:	0112      	lsls	r2, r2, #4
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	440b      	add	r3, r1
 800782e:	761a      	strb	r2, [r3, #24]
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	e000e100 	.word	0xe000e100
 8007840:	e000ed00 	.word	0xe000ed00

08007844 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007848:	4b05      	ldr	r3, [pc, #20]	@ (8007860 <SysTick_Handler+0x1c>)
 800784a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800784c:	f001 fd40 	bl	80092d0 <xTaskGetSchedulerState>
 8007850:	4603      	mov	r3, r0
 8007852:	2b01      	cmp	r3, #1
 8007854:	d001      	beq.n	800785a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007856:	f002 fb37 	bl	8009ec8 <xPortSysTickHandler>
  }
}
 800785a:	bf00      	nop
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	e000e010 	.word	0xe000e010

08007864 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007868:	2100      	movs	r1, #0
 800786a:	f06f 0004 	mvn.w	r0, #4
 800786e:	f7ff ffbf 	bl	80077f0 <__NVIC_SetPriority>
#endif
}
 8007872:	bf00      	nop
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787e:	f3ef 8305 	mrs	r3, IPSR
 8007882:	603b      	str	r3, [r7, #0]
  return(result);
 8007884:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800788a:	f06f 0305 	mvn.w	r3, #5
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	e00c      	b.n	80078ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007892:	4b0a      	ldr	r3, [pc, #40]	@ (80078bc <osKernelInitialize+0x44>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800789a:	4b08      	ldr	r3, [pc, #32]	@ (80078bc <osKernelInitialize+0x44>)
 800789c:	2201      	movs	r2, #1
 800789e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e002      	b.n	80078ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078a6:	f04f 33ff 	mov.w	r3, #4294967295
 80078aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078ac:	687b      	ldr	r3, [r7, #4]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	200079d8 	.word	0x200079d8

080078c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c6:	f3ef 8305 	mrs	r3, IPSR
 80078ca:	603b      	str	r3, [r7, #0]
  return(result);
 80078cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <osKernelStart+0x1a>
    stat = osErrorISR;
 80078d2:	f06f 0305 	mvn.w	r3, #5
 80078d6:	607b      	str	r3, [r7, #4]
 80078d8:	e010      	b.n	80078fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078da:	4b0b      	ldr	r3, [pc, #44]	@ (8007908 <osKernelStart+0x48>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d109      	bne.n	80078f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078e2:	f7ff ffbf 	bl	8007864 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078e6:	4b08      	ldr	r3, [pc, #32]	@ (8007908 <osKernelStart+0x48>)
 80078e8:	2202      	movs	r2, #2
 80078ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078ec:	f001 f87a 	bl	80089e4 <vTaskStartScheduler>
      stat = osOK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	e002      	b.n	80078fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078fc:	687b      	ldr	r3, [r7, #4]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200079d8 	.word	0x200079d8

0800790c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b08e      	sub	sp, #56	@ 0x38
 8007910:	af04      	add	r7, sp, #16
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800791c:	f3ef 8305 	mrs	r3, IPSR
 8007920:	617b      	str	r3, [r7, #20]
  return(result);
 8007922:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007924:	2b00      	cmp	r3, #0
 8007926:	d17e      	bne.n	8007a26 <osThreadNew+0x11a>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d07b      	beq.n	8007a26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800792e:	2380      	movs	r3, #128	@ 0x80
 8007930:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007932:	2318      	movs	r3, #24
 8007934:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800793a:	f04f 33ff 	mov.w	r3, #4294967295
 800793e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d045      	beq.n	80079d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <osThreadNew+0x48>
        name = attr->name;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <osThreadNew+0x6e>
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b38      	cmp	r3, #56	@ 0x38
 800796c:	d805      	bhi.n	800797a <osThreadNew+0x6e>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d001      	beq.n	800797e <osThreadNew+0x72>
        return (NULL);
 800797a:	2300      	movs	r3, #0
 800797c:	e054      	b.n	8007a28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	089b      	lsrs	r3, r3, #2
 800798c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00e      	beq.n	80079b4 <osThreadNew+0xa8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	2b5b      	cmp	r3, #91	@ 0x5b
 800799c:	d90a      	bls.n	80079b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d006      	beq.n	80079b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <osThreadNew+0xa8>
        mem = 1;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e010      	b.n	80079d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10c      	bne.n	80079d6 <osThreadNew+0xca>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d108      	bne.n	80079d6 <osThreadNew+0xca>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d104      	bne.n	80079d6 <osThreadNew+0xca>
          mem = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e001      	b.n	80079d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d110      	bne.n	80079fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079e4:	9202      	str	r2, [sp, #8]
 80079e6:	9301      	str	r3, [sp, #4]
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	6a3a      	ldr	r2, [r7, #32]
 80079f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fe1a 	bl	800862c <xTaskCreateStatic>
 80079f8:	4603      	mov	r3, r0
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	e013      	b.n	8007a26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d110      	bne.n	8007a26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	9300      	str	r3, [sp, #0]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fe68 	bl	80086ec <xTaskCreate>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d001      	beq.n	8007a26 <osThreadNew+0x11a>
            hTask = NULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a26:	693b      	ldr	r3, [r7, #16]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3728      	adds	r7, #40	@ 0x28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <osDelay+0x1c>
    stat = osErrorISR;
 8007a44:	f06f 0305 	mvn.w	r3, #5
 8007a48:	60fb      	str	r3, [r7, #12]
 8007a4a:	e007      	b.n	8007a5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 ff8e 	bl	8008978 <vTaskDelay>
    }
  }

  return (stat);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4a07      	ldr	r2, [pc, #28]	@ (8007a94 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4a06      	ldr	r2, [pc, #24]	@ (8007a98 <vApplicationGetIdleTaskMemory+0x30>)
 8007a7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2280      	movs	r2, #128	@ 0x80
 8007a84:	601a      	str	r2, [r3, #0]
}
 8007a86:	bf00      	nop
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	200079dc 	.word	0x200079dc
 8007a98:	20007a38 	.word	0x20007a38

08007a9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4a07      	ldr	r2, [pc, #28]	@ (8007ac8 <vApplicationGetTimerTaskMemory+0x2c>)
 8007aac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	4a06      	ldr	r2, [pc, #24]	@ (8007acc <vApplicationGetTimerTaskMemory+0x30>)
 8007ab2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aba:	601a      	str	r2, [r3, #0]
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	20007c38 	.word	0x20007c38
 8007acc:	20007c94 	.word	0x20007c94

08007ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f103 0208 	add.w	r2, r3, #8
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f103 0208 	add.w	r2, r3, #8
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 0208 	add.w	r2, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	601a      	str	r2, [r3, #0]
}
 8007b66:	bf00      	nop
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr

08007b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b88:	d103      	bne.n	8007b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e00c      	b.n	8007bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e002      	b.n	8007ba0 <vListInsert+0x2e>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d2f6      	bcs.n	8007b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	683a      	ldr	r2, [r7, #0]
 8007bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	601a      	str	r2, [r3, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6892      	ldr	r2, [r2, #8]
 8007bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	6852      	ldr	r2, [r2, #4]
 8007c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d103      	bne.n	8007c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	1e5a      	subs	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10b      	bne.n	8007c64 <xQueueGenericReset+0x2c>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60bb      	str	r3, [r7, #8]
}
 8007c5e:	bf00      	nop
 8007c60:	bf00      	nop
 8007c62:	e7fd      	b.n	8007c60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c64:	f002 f8a0 	bl	8009da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c70:	68f9      	ldr	r1, [r7, #12]
 8007c72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c74:	fb01 f303 	mul.w	r3, r1, r3
 8007c78:	441a      	add	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c94:	3b01      	subs	r3, #1
 8007c96:	68f9      	ldr	r1, [r7, #12]
 8007c98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007c9a:	fb01 f303 	mul.w	r3, r1, r3
 8007c9e:	441a      	add	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	22ff      	movs	r2, #255	@ 0xff
 8007ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	22ff      	movs	r2, #255	@ 0xff
 8007cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d114      	bne.n	8007ce4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01a      	beq.n	8007cf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 f91a 	bl	8008f00 <xTaskRemoveFromEventList>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d012      	beq.n	8007cf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d08 <xQueueGenericReset+0xd0>)
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	e009      	b.n	8007cf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3310      	adds	r3, #16
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fef1 	bl	8007ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3324      	adds	r3, #36	@ 0x24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff feec 	bl	8007ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cf8:	f002 f888 	bl	8009e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cfc:	2301      	movs	r3, #1
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	@ 0x38
 8007d10:	af02      	add	r7, sp, #8
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
 8007d18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10b      	bne.n	8007d56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <xQueueGenericCreateStatic+0x56>
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <xQueueGenericCreateStatic+0x5a>
 8007d62:	2301      	movs	r3, #1
 8007d64:	e000      	b.n	8007d68 <xQueueGenericCreateStatic+0x5c>
 8007d66:	2300      	movs	r3, #0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	623b      	str	r3, [r7, #32]
}
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <xQueueGenericCreateStatic+0x84>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <xQueueGenericCreateStatic+0x88>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <xQueueGenericCreateStatic+0x8a>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	61fb      	str	r3, [r7, #28]
}
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007db2:	2350      	movs	r3, #80	@ 0x50
 8007db4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b50      	cmp	r3, #80	@ 0x50
 8007dba:	d00b      	beq.n	8007dd4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	61bb      	str	r3, [r7, #24]
}
 8007dce:	bf00      	nop
 8007dd0:	bf00      	nop
 8007dd2:	e7fd      	b.n	8007dd0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007dd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00d      	beq.n	8007dfc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007de8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dee:	9300      	str	r3, [sp, #0]
 8007df0:	4613      	mov	r3, r2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 f805 	bl	8007e06 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3730      	adds	r7, #48	@ 0x30
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b084      	sub	sp, #16
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
 8007e12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	e002      	b.n	8007e28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e34:	2101      	movs	r1, #1
 8007e36:	69b8      	ldr	r0, [r7, #24]
 8007e38:	f7ff fefe 	bl	8007c38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08e      	sub	sp, #56	@ 0x38
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
 8007e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <xQueueGenericSend+0x34>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <xQueueGenericSend+0x42>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <xQueueGenericSend+0x46>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <xQueueGenericSend+0x48>
 8007e92:	2300      	movs	r3, #0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10b      	bne.n	8007eb0 <xQueueGenericSend+0x64>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007eaa:	bf00      	nop
 8007eac:	bf00      	nop
 8007eae:	e7fd      	b.n	8007eac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d103      	bne.n	8007ebe <xQueueGenericSend+0x72>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <xQueueGenericSend+0x76>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e000      	b.n	8007ec4 <xQueueGenericSend+0x78>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10b      	bne.n	8007ee0 <xQueueGenericSend+0x94>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	623b      	str	r3, [r7, #32]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ee0:	f001 f9f6 	bl	80092d0 <xTaskGetSchedulerState>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <xQueueGenericSend+0xa4>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <xQueueGenericSend+0xa8>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <xQueueGenericSend+0xaa>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10b      	bne.n	8007f12 <xQueueGenericSend+0xc6>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	61fb      	str	r3, [r7, #28]
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	e7fd      	b.n	8007f0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f12:	f001 ff49 	bl	8009da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d302      	bcc.n	8007f28 <xQueueGenericSend+0xdc>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d129      	bne.n	8007f7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f2e:	f000 fa0f 	bl	8008350 <prvCopyDataToQueue>
 8007f32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d010      	beq.n	8007f5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	3324      	adds	r3, #36	@ 0x24
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 ffdd 	bl	8008f00 <xTaskRemoveFromEventList>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d013      	beq.n	8007f74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800804c <xQueueGenericSend+0x200>)
 8007f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	f3bf 8f4f 	dsb	sy
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	e00a      	b.n	8007f74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007f64:	4b39      	ldr	r3, [pc, #228]	@ (800804c <xQueueGenericSend+0x200>)
 8007f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007f74:	f001 ff4a 	bl	8009e0c <vPortExitCritical>
				return pdPASS;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e063      	b.n	8008044 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d103      	bne.n	8007f8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f82:	f001 ff43 	bl	8009e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	e05c      	b.n	8008044 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d106      	bne.n	8007f9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f90:	f107 0314 	add.w	r3, r7, #20
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 f83f 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f9e:	f001 ff35 	bl	8009e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fa2:	f000 fd87 	bl	8008ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fa6:	f001 feff 	bl	8009da8 <vPortEnterCritical>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb6:	d103      	bne.n	8007fc0 <xQueueGenericSend+0x174>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fc6:	b25b      	sxtb	r3, r3
 8007fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fcc:	d103      	bne.n	8007fd6 <xQueueGenericSend+0x18a>
 8007fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fd6:	f001 ff19 	bl	8009e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fda:	1d3a      	adds	r2, r7, #4
 8007fdc:	f107 0314 	add.w	r3, r7, #20
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f001 f82e 	bl	8009044 <xTaskCheckForTimeOut>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d124      	bne.n	8008038 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007fee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ff0:	f000 faa6 	bl	8008540 <prvIsQueueFull>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d018      	beq.n	800802c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	3310      	adds	r3, #16
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f000 ff2a 	bl	8008e5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800800a:	f000 fa31 	bl	8008470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800800e:	f000 fd5f 	bl	8008ad0 <xTaskResumeAll>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f af7c 	bne.w	8007f12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800801a:	4b0c      	ldr	r3, [pc, #48]	@ (800804c <xQueueGenericSend+0x200>)
 800801c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	e772      	b.n	8007f12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800802c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800802e:	f000 fa1f 	bl	8008470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008032:	f000 fd4d 	bl	8008ad0 <xTaskResumeAll>
 8008036:	e76c      	b.n	8007f12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800803a:	f000 fa19 	bl	8008470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800803e:	f000 fd47 	bl	8008ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008044:	4618      	mov	r0, r3
 8008046:	3738      	adds	r7, #56	@ 0x38
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b090      	sub	sp, #64	@ 0x40
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10b      	bne.n	8008080 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800807a:	bf00      	nop
 800807c:	bf00      	nop
 800807e:	e7fd      	b.n	800807c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d103      	bne.n	800808e <xQueueGenericSendFromISR+0x3e>
 8008086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <xQueueGenericSendFromISR+0x42>
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <xQueueGenericSendFromISR+0x44>
 8008092:	2300      	movs	r3, #0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d103      	bne.n	80080be <xQueueGenericSendFromISR+0x6e>
 80080b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <xQueueGenericSendFromISR+0x72>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <xQueueGenericSendFromISR+0x74>
 80080c2:	2300      	movs	r3, #0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10b      	bne.n	80080e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	623b      	str	r3, [r7, #32]
}
 80080da:	bf00      	nop
 80080dc:	bf00      	nop
 80080de:	e7fd      	b.n	80080dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080e0:	f001 ff42 	bl	8009f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80080e4:	f3ef 8211 	mrs	r2, BASEPRI
 80080e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	61fa      	str	r2, [r7, #28]
 80080fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80080fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008108:	429a      	cmp	r2, r3
 800810a:	d302      	bcc.n	8008112 <xQueueGenericSendFromISR+0xc2>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d12f      	bne.n	8008172 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800811c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008120:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	68b9      	ldr	r1, [r7, #8]
 8008126:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008128:	f000 f912 	bl	8008350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800812c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d112      	bne.n	800815c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d016      	beq.n	800816c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800813e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008140:	3324      	adds	r3, #36	@ 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f000 fedc 	bl	8008f00 <xTaskRemoveFromEventList>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00e      	beq.n	800816c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e007      	b.n	800816c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800815c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008160:	3301      	adds	r3, #1
 8008162:	b2db      	uxtb	r3, r3
 8008164:	b25a      	sxtb	r2, r3
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800816c:	2301      	movs	r3, #1
 800816e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008170:	e001      	b.n	8008176 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008172:	2300      	movs	r3, #0
 8008174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008178:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008180:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008184:	4618      	mov	r0, r3
 8008186:	3740      	adds	r7, #64	@ 0x40
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08c      	sub	sp, #48	@ 0x30
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008198:	2300      	movs	r3, #0
 800819a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <xQueueReceive+0x32>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	623b      	str	r3, [r7, #32]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d103      	bne.n	80081cc <xQueueReceive+0x40>
 80081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <xQueueReceive+0x44>
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <xQueueReceive+0x46>
 80081d0:	2300      	movs	r3, #0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10b      	bne.n	80081ee <xQueueReceive+0x62>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	61fb      	str	r3, [r7, #28]
}
 80081e8:	bf00      	nop
 80081ea:	bf00      	nop
 80081ec:	e7fd      	b.n	80081ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081ee:	f001 f86f 	bl	80092d0 <xTaskGetSchedulerState>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <xQueueReceive+0x72>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <xQueueReceive+0x76>
 80081fe:	2301      	movs	r3, #1
 8008200:	e000      	b.n	8008204 <xQueueReceive+0x78>
 8008202:	2300      	movs	r3, #0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10b      	bne.n	8008220 <xQueueReceive+0x94>
	__asm volatile
 8008208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	61bb      	str	r3, [r7, #24]
}
 800821a:	bf00      	nop
 800821c:	bf00      	nop
 800821e:	e7fd      	b.n	800821c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008220:	f001 fdc2 	bl	8009da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01f      	beq.n	8008270 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008234:	f000 f8f6 	bl	8008424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00f      	beq.n	8008268 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	3310      	adds	r3, #16
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fe57 	bl	8008f00 <xTaskRemoveFromEventList>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008258:	4b3c      	ldr	r3, [pc, #240]	@ (800834c <xQueueReceive+0x1c0>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008268:	f001 fdd0 	bl	8009e0c <vPortExitCritical>
				return pdPASS;
 800826c:	2301      	movs	r3, #1
 800826e:	e069      	b.n	8008344 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d103      	bne.n	800827e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008276:	f001 fdc9 	bl	8009e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800827a:	2300      	movs	r3, #0
 800827c:	e062      	b.n	8008344 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800827e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d106      	bne.n	8008292 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008284:	f107 0310 	add.w	r3, r7, #16
 8008288:	4618      	mov	r0, r3
 800828a:	f000 fec5 	bl	8009018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800828e:	2301      	movs	r3, #1
 8008290:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008292:	f001 fdbb 	bl	8009e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008296:	f000 fc0d 	bl	8008ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800829a:	f001 fd85 	bl	8009da8 <vPortEnterCritical>
 800829e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082a4:	b25b      	sxtb	r3, r3
 80082a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082aa:	d103      	bne.n	80082b4 <xQueueReceive+0x128>
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082ba:	b25b      	sxtb	r3, r3
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d103      	bne.n	80082ca <xQueueReceive+0x13e>
 80082c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80082ca:	f001 fd9f 	bl	8009e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082ce:	1d3a      	adds	r2, r7, #4
 80082d0:	f107 0310 	add.w	r3, r7, #16
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 feb4 	bl	8009044 <xTaskCheckForTimeOut>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d123      	bne.n	800832a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082e4:	f000 f916 	bl	8008514 <prvIsQueueEmpty>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d017      	beq.n	800831e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f0:	3324      	adds	r3, #36	@ 0x24
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f000 fdb0 	bl	8008e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082fe:	f000 f8b7 	bl	8008470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008302:	f000 fbe5 	bl	8008ad0 <xTaskResumeAll>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d189      	bne.n	8008220 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800830c:	4b0f      	ldr	r3, [pc, #60]	@ (800834c <xQueueReceive+0x1c0>)
 800830e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	e780      	b.n	8008220 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800831e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008320:	f000 f8a6 	bl	8008470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008324:	f000 fbd4 	bl	8008ad0 <xTaskResumeAll>
 8008328:	e77a      	b.n	8008220 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800832a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800832c:	f000 f8a0 	bl	8008470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008330:	f000 fbce 	bl	8008ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008336:	f000 f8ed 	bl	8008514 <prvIsQueueEmpty>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	f43f af6f 	beq.w	8008220 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008342:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008344:	4618      	mov	r0, r3
 8008346:	3730      	adds	r7, #48	@ 0x30
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	e000ed04 	.word	0xe000ed04

08008350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10d      	bne.n	800838a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d14d      	bne.n	8008412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	4618      	mov	r0, r3
 800837c:	f000 ffc6 	bl	800930c <xTaskPriorityDisinherit>
 8008380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	609a      	str	r2, [r3, #8]
 8008388:	e043      	b.n	8008412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d119      	bne.n	80083c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6858      	ldr	r0, [r3, #4]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	461a      	mov	r2, r3
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	f00b fee7 	bl	801416e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685a      	ldr	r2, [r3, #4]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a8:	441a      	add	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d32b      	bcc.n	8008412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	e026      	b.n	8008412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	68d8      	ldr	r0, [r3, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083cc:	461a      	mov	r2, r3
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	f00b fecd 	bl	801416e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083dc:	425b      	negs	r3, r3
 80083de:	441a      	add	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d207      	bcs.n	8008400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f8:	425b      	negs	r3, r3
 80083fa:	441a      	add	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d105      	bne.n	8008412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	3b01      	subs	r3, #1
 8008410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	1c5a      	adds	r2, r3, #1
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800841a:	697b      	ldr	r3, [r7, #20]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008432:	2b00      	cmp	r3, #0
 8008434:	d018      	beq.n	8008468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800843e:	441a      	add	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	429a      	cmp	r2, r3
 800844e:	d303      	bcc.n	8008458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	68d9      	ldr	r1, [r3, #12]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008460:	461a      	mov	r2, r3
 8008462:	6838      	ldr	r0, [r7, #0]
 8008464:	f00b fe83 	bl	801416e <memcpy>
	}
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008478:	f001 fc96 	bl	8009da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008484:	e011      	b.n	80084aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800848a:	2b00      	cmp	r3, #0
 800848c:	d012      	beq.n	80084b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3324      	adds	r3, #36	@ 0x24
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fd34 	bl	8008f00 <xTaskRemoveFromEventList>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800849e:	f000 fe35 	bl	800910c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	dce9      	bgt.n	8008486 <prvUnlockQueue+0x16>
 80084b2:	e000      	b.n	80084b6 <prvUnlockQueue+0x46>
					break;
 80084b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	22ff      	movs	r2, #255	@ 0xff
 80084ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084be:	f001 fca5 	bl	8009e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084c2:	f001 fc71 	bl	8009da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084ce:	e011      	b.n	80084f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d012      	beq.n	80084fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3310      	adds	r3, #16
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fd0f 	bl	8008f00 <xTaskRemoveFromEventList>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084e8:	f000 fe10 	bl	800910c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084ec:	7bbb      	ldrb	r3, [r7, #14]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	dce9      	bgt.n	80084d0 <prvUnlockQueue+0x60>
 80084fc:	e000      	b.n	8008500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	22ff      	movs	r2, #255	@ 0xff
 8008504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008508:	f001 fc80 	bl	8009e0c <vPortExitCritical>
}
 800850c:	bf00      	nop
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800851c:	f001 fc44 	bl	8009da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	e001      	b.n	8008532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008532:	f001 fc6b 	bl	8009e0c <vPortExitCritical>

	return xReturn;
 8008536:	68fb      	ldr	r3, [r7, #12]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008548:	f001 fc2e 	bl	8009da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008554:	429a      	cmp	r2, r3
 8008556:	d102      	bne.n	800855e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008558:	2301      	movs	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
 800855c:	e001      	b.n	8008562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800855e:	2300      	movs	r3, #0
 8008560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008562:	f001 fc53 	bl	8009e0c <vPortExitCritical>

	return xReturn;
 8008566:	68fb      	ldr	r3, [r7, #12]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	e014      	b.n	80085aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008580:	4a0f      	ldr	r2, [pc, #60]	@ (80085c0 <vQueueAddToRegistry+0x50>)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800858c:	490c      	ldr	r1, [pc, #48]	@ (80085c0 <vQueueAddToRegistry+0x50>)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008596:	4a0a      	ldr	r2, [pc, #40]	@ (80085c0 <vQueueAddToRegistry+0x50>)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	4413      	add	r3, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085a2:	e006      	b.n	80085b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3301      	adds	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b07      	cmp	r3, #7
 80085ae:	d9e7      	bls.n	8008580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085b0:	bf00      	nop
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	20008094 	.word	0x20008094

080085c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085d4:	f001 fbe8 	bl	8009da8 <vPortEnterCritical>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80085de:	b25b      	sxtb	r3, r3
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e4:	d103      	bne.n	80085ee <vQueueWaitForMessageRestricted+0x2a>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085f4:	b25b      	sxtb	r3, r3
 80085f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fa:	d103      	bne.n	8008604 <vQueueWaitForMessageRestricted+0x40>
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008604:	f001 fc02 	bl	8009e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3324      	adds	r3, #36	@ 0x24
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fc45 	bl	8008ea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800861e:	6978      	ldr	r0, [r7, #20]
 8008620:	f7ff ff26 	bl	8008470 <prvUnlockQueue>
	}
 8008624:	bf00      	nop
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800862c:	b580      	push	{r7, lr}
 800862e:	b08e      	sub	sp, #56	@ 0x38
 8008630:	af04      	add	r7, sp, #16
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800863a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10b      	bne.n	8008658 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	623b      	str	r3, [r7, #32]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10b      	bne.n	8008676 <xTaskCreateStatic+0x4a>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	61fb      	str	r3, [r7, #28]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008676:	235c      	movs	r3, #92	@ 0x5c
 8008678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b5c      	cmp	r3, #92	@ 0x5c
 800867e:	d00b      	beq.n	8008698 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	61bb      	str	r3, [r7, #24]
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008698:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800869a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	d01e      	beq.n	80086de <xTaskCreateStatic+0xb2>
 80086a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01b      	beq.n	80086de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086b8:	2300      	movs	r3, #0
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	f107 0314 	add.w	r3, r7, #20
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f850 	bl	8008776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80086d8:	f000 f8de 	bl	8008898 <prvAddNewTaskToReadyList>
 80086dc:	e001      	b.n	80086e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80086de:	2300      	movs	r3, #0
 80086e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80086e2:	697b      	ldr	r3, [r7, #20]
	}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3728      	adds	r7, #40	@ 0x28
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08c      	sub	sp, #48	@ 0x30
 80086f0:	af04      	add	r7, sp, #16
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	4613      	mov	r3, r2
 80086fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086fc:	88fb      	ldrh	r3, [r7, #6]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	4618      	mov	r0, r3
 8008702:	f001 fc73 	bl	8009fec <pvPortMalloc>
 8008706:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00e      	beq.n	800872c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800870e:	205c      	movs	r0, #92	@ 0x5c
 8008710:	f001 fc6c 	bl	8009fec <pvPortMalloc>
 8008714:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	631a      	str	r2, [r3, #48]	@ 0x30
 8008722:	e005      	b.n	8008730 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008724:	6978      	ldr	r0, [r7, #20]
 8008726:	f001 fd2f 	bl	800a188 <vPortFree>
 800872a:	e001      	b.n	8008730 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800872c:	2300      	movs	r3, #0
 800872e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d017      	beq.n	8008766 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800873e:	88fa      	ldrh	r2, [r7, #6]
 8008740:	2300      	movs	r3, #0
 8008742:	9303      	str	r3, [sp, #12]
 8008744:	69fb      	ldr	r3, [r7, #28]
 8008746:	9302      	str	r3, [sp, #8]
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	9301      	str	r3, [sp, #4]
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f80e 	bl	8008776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800875a:	69f8      	ldr	r0, [r7, #28]
 800875c:	f000 f89c 	bl	8008898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008760:	2301      	movs	r3, #1
 8008762:	61bb      	str	r3, [r7, #24]
 8008764:	e002      	b.n	800876c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008766:	f04f 33ff 	mov.w	r3, #4294967295
 800876a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800876c:	69bb      	ldr	r3, [r7, #24]
	}
 800876e:	4618      	mov	r0, r3
 8008770:	3720      	adds	r7, #32
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b088      	sub	sp, #32
 800877a:	af00      	add	r7, sp, #0
 800877c:	60f8      	str	r0, [r7, #12]
 800877e:	60b9      	str	r1, [r7, #8]
 8008780:	607a      	str	r2, [r7, #4]
 8008782:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008786:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	461a      	mov	r2, r3
 800878e:	21a5      	movs	r1, #165	@ 0xa5
 8008790:	f00b fc24 	bl	8013fdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800879e:	3b01      	subs	r3, #1
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	f023 0307 	bic.w	r3, r3, #7
 80087ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	f003 0307 	and.w	r3, r3, #7
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	617b      	str	r3, [r7, #20]
}
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	e7fd      	b.n	80087cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01f      	beq.n	8008816 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087d6:	2300      	movs	r3, #0
 80087d8:	61fb      	str	r3, [r7, #28]
 80087da:	e012      	b.n	8008802 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	4413      	add	r3, r2
 80087e2:	7819      	ldrb	r1, [r3, #0]
 80087e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	4413      	add	r3, r2
 80087ea:	3334      	adds	r3, #52	@ 0x34
 80087ec:	460a      	mov	r2, r1
 80087ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d006      	beq.n	800880a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	3301      	adds	r3, #1
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b0f      	cmp	r3, #15
 8008806:	d9e9      	bls.n	80087dc <prvInitialiseNewTask+0x66>
 8008808:	e000      	b.n	800880c <prvInitialiseNewTask+0x96>
			{
				break;
 800880a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008814:	e003      	b.n	800881e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	2b37      	cmp	r3, #55	@ 0x37
 8008822:	d901      	bls.n	8008828 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008824:	2337      	movs	r3, #55	@ 0x37
 8008826:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800882c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800882e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008832:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008836:	2200      	movs	r2, #0
 8008838:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	3304      	adds	r3, #4
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff f966 	bl	8007b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	3318      	adds	r3, #24
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff f961 	bl	8007b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008856:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800885e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008862:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008866:	2200      	movs	r2, #0
 8008868:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	68f9      	ldr	r1, [r7, #12]
 8008876:	69b8      	ldr	r0, [r7, #24]
 8008878:	f001 f966 	bl	8009b48 <pxPortInitialiseStack>
 800887c:	4602      	mov	r2, r0
 800887e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800888c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800888e:	bf00      	nop
 8008890:	3720      	adds	r7, #32
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088a0:	f001 fa82 	bl	8009da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088a4:	4b2d      	ldr	r3, [pc, #180]	@ (800895c <prvAddNewTaskToReadyList+0xc4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	3301      	adds	r3, #1
 80088aa:	4a2c      	ldr	r2, [pc, #176]	@ (800895c <prvAddNewTaskToReadyList+0xc4>)
 80088ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088ae:	4b2c      	ldr	r3, [pc, #176]	@ (8008960 <prvAddNewTaskToReadyList+0xc8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d109      	bne.n	80088ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008960 <prvAddNewTaskToReadyList+0xc8>)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088bc:	4b27      	ldr	r3, [pc, #156]	@ (800895c <prvAddNewTaskToReadyList+0xc4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d110      	bne.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088c4:	f000 fc46 	bl	8009154 <prvInitialiseTaskLists>
 80088c8:	e00d      	b.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088ca:	4b26      	ldr	r3, [pc, #152]	@ (8008964 <prvAddNewTaskToReadyList+0xcc>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088d2:	4b23      	ldr	r3, [pc, #140]	@ (8008960 <prvAddNewTaskToReadyList+0xc8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088dc:	429a      	cmp	r2, r3
 80088de:	d802      	bhi.n	80088e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008960 <prvAddNewTaskToReadyList+0xc8>)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088e6:	4b20      	ldr	r3, [pc, #128]	@ (8008968 <prvAddNewTaskToReadyList+0xd0>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	3301      	adds	r3, #1
 80088ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008968 <prvAddNewTaskToReadyList+0xd0>)
 80088ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008968 <prvAddNewTaskToReadyList+0xd0>)
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088fc:	4b1b      	ldr	r3, [pc, #108]	@ (800896c <prvAddNewTaskToReadyList+0xd4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d903      	bls.n	800890c <prvAddNewTaskToReadyList+0x74>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008908:	4a18      	ldr	r2, [pc, #96]	@ (800896c <prvAddNewTaskToReadyList+0xd4>)
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4a15      	ldr	r2, [pc, #84]	@ (8008970 <prvAddNewTaskToReadyList+0xd8>)
 800891a:	441a      	add	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f7ff f901 	bl	8007b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008928:	f001 fa70 	bl	8009e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800892c:	4b0d      	ldr	r3, [pc, #52]	@ (8008964 <prvAddNewTaskToReadyList+0xcc>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00e      	beq.n	8008952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008934:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <prvAddNewTaskToReadyList+0xc8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	429a      	cmp	r2, r3
 8008940:	d207      	bcs.n	8008952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008942:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <prvAddNewTaskToReadyList+0xdc>)
 8008944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008952:	bf00      	nop
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	200085a8 	.word	0x200085a8
 8008960:	200080d4 	.word	0x200080d4
 8008964:	200085b4 	.word	0x200085b4
 8008968:	200085c4 	.word	0x200085c4
 800896c:	200085b0 	.word	0x200085b0
 8008970:	200080d8 	.word	0x200080d8
 8008974:	e000ed04 	.word	0xe000ed04

08008978 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d018      	beq.n	80089bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800898a:	4b14      	ldr	r3, [pc, #80]	@ (80089dc <vTaskDelay+0x64>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00b      	beq.n	80089aa <vTaskDelay+0x32>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60bb      	str	r3, [r7, #8]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089aa:	f000 f883 	bl	8008ab4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089ae:	2100      	movs	r1, #0
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fd1b 	bl	80093ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089b6:	f000 f88b 	bl	8008ad0 <xTaskResumeAll>
 80089ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d107      	bne.n	80089d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80089c2:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <vTaskDelay+0x68>)
 80089c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089d2:	bf00      	nop
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200085d0 	.word	0x200085d0
 80089e0:	e000ed04 	.word	0xe000ed04

080089e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08a      	sub	sp, #40	@ 0x28
 80089e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089f2:	463a      	mov	r2, r7
 80089f4:	1d39      	adds	r1, r7, #4
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff f834 	bl	8007a68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	9202      	str	r2, [sp, #8]
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	460a      	mov	r2, r1
 8008a12:	4922      	ldr	r1, [pc, #136]	@ (8008a9c <vTaskStartScheduler+0xb8>)
 8008a14:	4822      	ldr	r0, [pc, #136]	@ (8008aa0 <vTaskStartScheduler+0xbc>)
 8008a16:	f7ff fe09 	bl	800862c <xTaskCreateStatic>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	4a21      	ldr	r2, [pc, #132]	@ (8008aa4 <vTaskStartScheduler+0xc0>)
 8008a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a20:	4b20      	ldr	r3, [pc, #128]	@ (8008aa4 <vTaskStartScheduler+0xc0>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e001      	b.n	8008a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d102      	bne.n	8008a3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a38:	f000 fd2c 	bl	8009494 <xTimerCreateTimerTask>
 8008a3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d116      	bne.n	8008a72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	613b      	str	r3, [r7, #16]
}
 8008a56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a58:	4b13      	ldr	r3, [pc, #76]	@ (8008aa8 <vTaskStartScheduler+0xc4>)
 8008a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a60:	4b12      	ldr	r3, [pc, #72]	@ (8008aac <vTaskStartScheduler+0xc8>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a66:	4b12      	ldr	r3, [pc, #72]	@ (8008ab0 <vTaskStartScheduler+0xcc>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a6c:	f001 f8f8 	bl	8009c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a70:	e00f      	b.n	8008a92 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a78:	d10b      	bne.n	8008a92 <vTaskStartScheduler+0xae>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	60fb      	str	r3, [r7, #12]
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	e7fd      	b.n	8008a8e <vTaskStartScheduler+0xaa>
}
 8008a92:	bf00      	nop
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	08014fdc 	.word	0x08014fdc
 8008aa0:	08009125 	.word	0x08009125
 8008aa4:	200085cc 	.word	0x200085cc
 8008aa8:	200085c8 	.word	0x200085c8
 8008aac:	200085b4 	.word	0x200085b4
 8008ab0:	200085ac 	.word	0x200085ac

08008ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ab8:	4b04      	ldr	r3, [pc, #16]	@ (8008acc <vTaskSuspendAll+0x18>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	4a03      	ldr	r2, [pc, #12]	@ (8008acc <vTaskSuspendAll+0x18>)
 8008ac0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ac2:	bf00      	nop
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	200085d0 	.word	0x200085d0

08008ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ade:	4b42      	ldr	r3, [pc, #264]	@ (8008be8 <xTaskResumeAll+0x118>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10b      	bne.n	8008afe <xTaskResumeAll+0x2e>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	603b      	str	r3, [r7, #0]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008afe:	f001 f953 	bl	8009da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b02:	4b39      	ldr	r3, [pc, #228]	@ (8008be8 <xTaskResumeAll+0x118>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4a37      	ldr	r2, [pc, #220]	@ (8008be8 <xTaskResumeAll+0x118>)
 8008b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b0c:	4b36      	ldr	r3, [pc, #216]	@ (8008be8 <xTaskResumeAll+0x118>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d162      	bne.n	8008bda <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b14:	4b35      	ldr	r3, [pc, #212]	@ (8008bec <xTaskResumeAll+0x11c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d05e      	beq.n	8008bda <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b1c:	e02f      	b.n	8008b7e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b1e:	4b34      	ldr	r3, [pc, #208]	@ (8008bf0 <xTaskResumeAll+0x120>)
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3318      	adds	r3, #24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff f85a 	bl	8007be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3304      	adds	r3, #4
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff f855 	bl	8007be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf4 <xTaskResumeAll+0x124>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d903      	bls.n	8008b4e <xTaskResumeAll+0x7e>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf4 <xTaskResumeAll+0x124>)
 8008b4c:	6013      	str	r3, [r2, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4a27      	ldr	r2, [pc, #156]	@ (8008bf8 <xTaskResumeAll+0x128>)
 8008b5c:	441a      	add	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	3304      	adds	r3, #4
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7fe ffe0 	bl	8007b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6e:	4b23      	ldr	r3, [pc, #140]	@ (8008bfc <xTaskResumeAll+0x12c>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d302      	bcc.n	8008b7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008b78:	4b21      	ldr	r3, [pc, #132]	@ (8008c00 <xTaskResumeAll+0x130>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bf0 <xTaskResumeAll+0x120>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1cb      	bne.n	8008b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b8c:	f000 fb80 	bl	8009290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b90:	4b1c      	ldr	r3, [pc, #112]	@ (8008c04 <xTaskResumeAll+0x134>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d010      	beq.n	8008bbe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b9c:	f000 f846 	bl	8008c2c <xTaskIncrementTick>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008ba6:	4b16      	ldr	r3, [pc, #88]	@ (8008c00 <xTaskResumeAll+0x130>)
 8008ba8:	2201      	movs	r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1f1      	bne.n	8008b9c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008bb8:	4b12      	ldr	r3, [pc, #72]	@ (8008c04 <xTaskResumeAll+0x134>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bbe:	4b10      	ldr	r3, [pc, #64]	@ (8008c00 <xTaskResumeAll+0x130>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bca:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <xTaskResumeAll+0x138>)
 8008bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bda:	f001 f917 	bl	8009e0c <vPortExitCritical>

	return xAlreadyYielded;
 8008bde:	68bb      	ldr	r3, [r7, #8]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	200085d0 	.word	0x200085d0
 8008bec:	200085a8 	.word	0x200085a8
 8008bf0:	20008568 	.word	0x20008568
 8008bf4:	200085b0 	.word	0x200085b0
 8008bf8:	200080d8 	.word	0x200080d8
 8008bfc:	200080d4 	.word	0x200080d4
 8008c00:	200085bc 	.word	0x200085bc
 8008c04:	200085b8 	.word	0x200085b8
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c12:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <xTaskGetTickCount+0x1c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c18:	687b      	ldr	r3, [r7, #4]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	200085ac 	.word	0x200085ac

08008c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c36:	4b4f      	ldr	r3, [pc, #316]	@ (8008d74 <xTaskIncrementTick+0x148>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 8090 	bne.w	8008d60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c40:	4b4d      	ldr	r3, [pc, #308]	@ (8008d78 <xTaskIncrementTick+0x14c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c48:	4a4b      	ldr	r2, [pc, #300]	@ (8008d78 <xTaskIncrementTick+0x14c>)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d121      	bne.n	8008c98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c54:	4b49      	ldr	r3, [pc, #292]	@ (8008d7c <xTaskIncrementTick+0x150>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00b      	beq.n	8008c76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	603b      	str	r3, [r7, #0]
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	e7fd      	b.n	8008c72 <xTaskIncrementTick+0x46>
 8008c76:	4b41      	ldr	r3, [pc, #260]	@ (8008d7c <xTaskIncrementTick+0x150>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	4b40      	ldr	r3, [pc, #256]	@ (8008d80 <xTaskIncrementTick+0x154>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a3e      	ldr	r2, [pc, #248]	@ (8008d7c <xTaskIncrementTick+0x150>)
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	4a3e      	ldr	r2, [pc, #248]	@ (8008d80 <xTaskIncrementTick+0x154>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6013      	str	r3, [r2, #0]
 8008c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8008d84 <xTaskIncrementTick+0x158>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	4a3c      	ldr	r2, [pc, #240]	@ (8008d84 <xTaskIncrementTick+0x158>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	f000 fafc 	bl	8009290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c98:	4b3b      	ldr	r3, [pc, #236]	@ (8008d88 <xTaskIncrementTick+0x15c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d349      	bcc.n	8008d36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca2:	4b36      	ldr	r3, [pc, #216]	@ (8008d7c <xTaskIncrementTick+0x150>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d104      	bne.n	8008cb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cac:	4b36      	ldr	r3, [pc, #216]	@ (8008d88 <xTaskIncrementTick+0x15c>)
 8008cae:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb2:	601a      	str	r2, [r3, #0]
					break;
 8008cb4:	e03f      	b.n	8008d36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb6:	4b31      	ldr	r3, [pc, #196]	@ (8008d7c <xTaskIncrementTick+0x150>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d203      	bcs.n	8008cd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cce:	4a2e      	ldr	r2, [pc, #184]	@ (8008d88 <xTaskIncrementTick+0x15c>)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008cd4:	e02f      	b.n	8008d36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe ff82 	bl	8007be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	3318      	adds	r3, #24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fe ff79 	bl	8007be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf6:	4b25      	ldr	r3, [pc, #148]	@ (8008d8c <xTaskIncrementTick+0x160>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d903      	bls.n	8008d06 <xTaskIncrementTick+0xda>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	4a22      	ldr	r2, [pc, #136]	@ (8008d8c <xTaskIncrementTick+0x160>)
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4a1f      	ldr	r2, [pc, #124]	@ (8008d90 <xTaskIncrementTick+0x164>)
 8008d14:	441a      	add	r2, r3
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fe ff04 	bl	8007b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d26:	4b1b      	ldr	r3, [pc, #108]	@ (8008d94 <xTaskIncrementTick+0x168>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d3b8      	bcc.n	8008ca2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d34:	e7b5      	b.n	8008ca2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d36:	4b17      	ldr	r3, [pc, #92]	@ (8008d94 <xTaskIncrementTick+0x168>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3c:	4914      	ldr	r1, [pc, #80]	@ (8008d90 <xTaskIncrementTick+0x164>)
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	440b      	add	r3, r1
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d901      	bls.n	8008d52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d52:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <xTaskIncrementTick+0x16c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	e004      	b.n	8008d6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d60:	4b0e      	ldr	r3, [pc, #56]	@ (8008d9c <xTaskIncrementTick+0x170>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3301      	adds	r3, #1
 8008d66:	4a0d      	ldr	r2, [pc, #52]	@ (8008d9c <xTaskIncrementTick+0x170>)
 8008d68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d6a:	697b      	ldr	r3, [r7, #20]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	200085d0 	.word	0x200085d0
 8008d78:	200085ac 	.word	0x200085ac
 8008d7c:	20008560 	.word	0x20008560
 8008d80:	20008564 	.word	0x20008564
 8008d84:	200085c0 	.word	0x200085c0
 8008d88:	200085c8 	.word	0x200085c8
 8008d8c:	200085b0 	.word	0x200085b0
 8008d90:	200080d8 	.word	0x200080d8
 8008d94:	200080d4 	.word	0x200080d4
 8008d98:	200085bc 	.word	0x200085bc
 8008d9c:	200085b8 	.word	0x200085b8

08008da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008da6:	4b28      	ldr	r3, [pc, #160]	@ (8008e48 <vTaskSwitchContext+0xa8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dae:	4b27      	ldr	r3, [pc, #156]	@ (8008e4c <vTaskSwitchContext+0xac>)
 8008db0:	2201      	movs	r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008db4:	e042      	b.n	8008e3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008db6:	4b25      	ldr	r3, [pc, #148]	@ (8008e4c <vTaskSwitchContext+0xac>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dbc:	4b24      	ldr	r3, [pc, #144]	@ (8008e50 <vTaskSwitchContext+0xb0>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	e011      	b.n	8008de8 <vTaskSwitchContext+0x48>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10b      	bne.n	8008de2 <vTaskSwitchContext+0x42>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	607b      	str	r3, [r7, #4]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <vTaskSwitchContext+0x3e>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	491a      	ldr	r1, [pc, #104]	@ (8008e54 <vTaskSwitchContext+0xb4>)
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	4613      	mov	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0e3      	beq.n	8008dc4 <vTaskSwitchContext+0x24>
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a13      	ldr	r2, [pc, #76]	@ (8008e54 <vTaskSwitchContext+0xb4>)
 8008e08:	4413      	add	r3, r2
 8008e0a:	60bb      	str	r3, [r7, #8]
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	685a      	ldr	r2, [r3, #4]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	605a      	str	r2, [r3, #4]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	3308      	adds	r3, #8
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d104      	bne.n	8008e2c <vTaskSwitchContext+0x8c>
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	605a      	str	r2, [r3, #4]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	4a09      	ldr	r2, [pc, #36]	@ (8008e58 <vTaskSwitchContext+0xb8>)
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	4a06      	ldr	r2, [pc, #24]	@ (8008e50 <vTaskSwitchContext+0xb0>)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6013      	str	r3, [r2, #0]
}
 8008e3c:	bf00      	nop
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	200085d0 	.word	0x200085d0
 8008e4c:	200085bc 	.word	0x200085bc
 8008e50:	200085b0 	.word	0x200085b0
 8008e54:	200080d8 	.word	0x200080d8
 8008e58:	200080d4 	.word	0x200080d4

08008e5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10b      	bne.n	8008e84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	bf00      	nop
 8008e82:	e7fd      	b.n	8008e80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e84:	4b07      	ldr	r3, [pc, #28]	@ (8008ea4 <vTaskPlaceOnEventList+0x48>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	3318      	adds	r3, #24
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f7fe fe70 	bl	8007b72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e92:	2101      	movs	r1, #1
 8008e94:	6838      	ldr	r0, [r7, #0]
 8008e96:	f000 faa9 	bl	80093ec <prvAddCurrentTaskToDelayedList>
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200080d4 	.word	0x200080d4

08008ea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10b      	bne.n	8008ed2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	617b      	str	r3, [r7, #20]
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	e7fd      	b.n	8008ece <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <vTaskPlaceOnEventListRestricted+0x54>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3318      	adds	r3, #24
 8008ed8:	4619      	mov	r1, r3
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f7fe fe25 	bl	8007b2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	68b8      	ldr	r0, [r7, #8]
 8008ef0:	f000 fa7c 	bl	80093ec <prvAddCurrentTaskToDelayedList>
	}
 8008ef4:	bf00      	nop
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	200080d4 	.word	0x200080d4

08008f00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10b      	bne.n	8008f2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	60fb      	str	r3, [r7, #12]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3318      	adds	r3, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fe56 	bl	8007be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f38:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb0 <xTaskRemoveFromEventList+0xb0>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d11d      	bne.n	8008f7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fe4d 	bl	8007be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4e:	4b19      	ldr	r3, [pc, #100]	@ (8008fb4 <xTaskRemoveFromEventList+0xb4>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d903      	bls.n	8008f5e <xTaskRemoveFromEventList+0x5e>
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5a:	4a16      	ldr	r2, [pc, #88]	@ (8008fb4 <xTaskRemoveFromEventList+0xb4>)
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a13      	ldr	r2, [pc, #76]	@ (8008fb8 <xTaskRemoveFromEventList+0xb8>)
 8008f6c:	441a      	add	r2, r3
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe fdd8 	bl	8007b2a <vListInsertEnd>
 8008f7a:	e005      	b.n	8008f88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3318      	adds	r3, #24
 8008f80:	4619      	mov	r1, r3
 8008f82:	480e      	ldr	r0, [pc, #56]	@ (8008fbc <xTaskRemoveFromEventList+0xbc>)
 8008f84:	f7fe fdd1 	bl	8007b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <xTaskRemoveFromEventList+0xc0>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d905      	bls.n	8008fa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <xTaskRemoveFromEventList+0xc4>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	e001      	b.n	8008fa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	200085d0 	.word	0x200085d0
 8008fb4:	200085b0 	.word	0x200085b0
 8008fb8:	200080d8 	.word	0x200080d8
 8008fbc:	20008568 	.word	0x20008568
 8008fc0:	200080d4 	.word	0x200080d4
 8008fc4:	200085bc 	.word	0x200085bc

08008fc8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10b      	bne.n	8008fee <vTaskSetTimeOutState+0x26>
	__asm volatile
 8008fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fda:	f383 8811 	msr	BASEPRI, r3
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f3bf 8f4f 	dsb	sy
 8008fe6:	60fb      	str	r3, [r7, #12]
}
 8008fe8:	bf00      	nop
 8008fea:	bf00      	nop
 8008fec:	e7fd      	b.n	8008fea <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008fee:	f000 fedb 	bl	8009da8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ff2:	4b07      	ldr	r3, [pc, #28]	@ (8009010 <vTaskSetTimeOutState+0x48>)
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008ffa:	4b06      	ldr	r3, [pc, #24]	@ (8009014 <vTaskSetTimeOutState+0x4c>)
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009002:	f000 ff03 	bl	8009e0c <vPortExitCritical>
}
 8009006:	bf00      	nop
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	200085c0 	.word	0x200085c0
 8009014:	200085ac 	.word	0x200085ac

08009018 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009020:	4b06      	ldr	r3, [pc, #24]	@ (800903c <vTaskInternalSetTimeOutState+0x24>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <vTaskInternalSetTimeOutState+0x28>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	605a      	str	r2, [r3, #4]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	200085c0 	.word	0x200085c0
 8009040:	200085ac 	.word	0x200085ac

08009044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10b      	bne.n	800906c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	613b      	str	r3, [r7, #16]
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	e7fd      	b.n	8009068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10b      	bne.n	800908a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009076:	f383 8811 	msr	BASEPRI, r3
 800907a:	f3bf 8f6f 	isb	sy
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	60fb      	str	r3, [r7, #12]
}
 8009084:	bf00      	nop
 8009086:	bf00      	nop
 8009088:	e7fd      	b.n	8009086 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800908a:	f000 fe8d 	bl	8009da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800908e:	4b1d      	ldr	r3, [pc, #116]	@ (8009104 <xTaskCheckForTimeOut+0xc0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a6:	d102      	bne.n	80090ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090a8:	2300      	movs	r3, #0
 80090aa:	61fb      	str	r3, [r7, #28]
 80090ac:	e023      	b.n	80090f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	4b15      	ldr	r3, [pc, #84]	@ (8009108 <xTaskCheckForTimeOut+0xc4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d007      	beq.n	80090ca <xTaskCheckForTimeOut+0x86>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d302      	bcc.n	80090ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	61fb      	str	r3, [r7, #28]
 80090c8:	e015      	b.n	80090f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d20b      	bcs.n	80090ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad2      	subs	r2, r2, r3
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ff99 	bl	8009018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	61fb      	str	r3, [r7, #28]
 80090ea:	e004      	b.n	80090f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2200      	movs	r2, #0
 80090f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090f2:	2301      	movs	r3, #1
 80090f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090f6:	f000 fe89 	bl	8009e0c <vPortExitCritical>

	return xReturn;
 80090fa:	69fb      	ldr	r3, [r7, #28]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3720      	adds	r7, #32
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	200085ac 	.word	0x200085ac
 8009108:	200085c0 	.word	0x200085c0

0800910c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009110:	4b03      	ldr	r3, [pc, #12]	@ (8009120 <vTaskMissedYield+0x14>)
 8009112:	2201      	movs	r2, #1
 8009114:	601a      	str	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	200085bc 	.word	0x200085bc

08009124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800912c:	f000 f852 	bl	80091d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009130:	4b06      	ldr	r3, [pc, #24]	@ (800914c <prvIdleTask+0x28>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d9f9      	bls.n	800912c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009138:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <prvIdleTask+0x2c>)
 800913a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009148:	e7f0      	b.n	800912c <prvIdleTask+0x8>
 800914a:	bf00      	nop
 800914c:	200080d8 	.word	0x200080d8
 8009150:	e000ed04 	.word	0xe000ed04

08009154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800915a:	2300      	movs	r3, #0
 800915c:	607b      	str	r3, [r7, #4]
 800915e:	e00c      	b.n	800917a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4a12      	ldr	r2, [pc, #72]	@ (80091b4 <prvInitialiseTaskLists+0x60>)
 800916c:	4413      	add	r3, r2
 800916e:	4618      	mov	r0, r3
 8009170:	f7fe fcae 	bl	8007ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3301      	adds	r3, #1
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b37      	cmp	r3, #55	@ 0x37
 800917e:	d9ef      	bls.n	8009160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009180:	480d      	ldr	r0, [pc, #52]	@ (80091b8 <prvInitialiseTaskLists+0x64>)
 8009182:	f7fe fca5 	bl	8007ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009186:	480d      	ldr	r0, [pc, #52]	@ (80091bc <prvInitialiseTaskLists+0x68>)
 8009188:	f7fe fca2 	bl	8007ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800918c:	480c      	ldr	r0, [pc, #48]	@ (80091c0 <prvInitialiseTaskLists+0x6c>)
 800918e:	f7fe fc9f 	bl	8007ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009192:	480c      	ldr	r0, [pc, #48]	@ (80091c4 <prvInitialiseTaskLists+0x70>)
 8009194:	f7fe fc9c 	bl	8007ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009198:	480b      	ldr	r0, [pc, #44]	@ (80091c8 <prvInitialiseTaskLists+0x74>)
 800919a:	f7fe fc99 	bl	8007ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800919e:	4b0b      	ldr	r3, [pc, #44]	@ (80091cc <prvInitialiseTaskLists+0x78>)
 80091a0:	4a05      	ldr	r2, [pc, #20]	@ (80091b8 <prvInitialiseTaskLists+0x64>)
 80091a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091a4:	4b0a      	ldr	r3, [pc, #40]	@ (80091d0 <prvInitialiseTaskLists+0x7c>)
 80091a6:	4a05      	ldr	r2, [pc, #20]	@ (80091bc <prvInitialiseTaskLists+0x68>)
 80091a8:	601a      	str	r2, [r3, #0]
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	200080d8 	.word	0x200080d8
 80091b8:	20008538 	.word	0x20008538
 80091bc:	2000854c 	.word	0x2000854c
 80091c0:	20008568 	.word	0x20008568
 80091c4:	2000857c 	.word	0x2000857c
 80091c8:	20008594 	.word	0x20008594
 80091cc:	20008560 	.word	0x20008560
 80091d0:	20008564 	.word	0x20008564

080091d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091da:	e019      	b.n	8009210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091dc:	f000 fde4 	bl	8009da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e0:	4b10      	ldr	r3, [pc, #64]	@ (8009224 <prvCheckTasksWaitingTermination+0x50>)
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3304      	adds	r3, #4
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe fcf9 	bl	8007be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <prvCheckTasksWaitingTermination+0x54>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	4a0b      	ldr	r2, [pc, #44]	@ (8009228 <prvCheckTasksWaitingTermination+0x54>)
 80091fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091fc:	4b0b      	ldr	r3, [pc, #44]	@ (800922c <prvCheckTasksWaitingTermination+0x58>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3b01      	subs	r3, #1
 8009202:	4a0a      	ldr	r2, [pc, #40]	@ (800922c <prvCheckTasksWaitingTermination+0x58>)
 8009204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009206:	f000 fe01 	bl	8009e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f810 	bl	8009230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009210:	4b06      	ldr	r3, [pc, #24]	@ (800922c <prvCheckTasksWaitingTermination+0x58>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1e1      	bne.n	80091dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	2000857c 	.word	0x2000857c
 8009228:	200085a8 	.word	0x200085a8
 800922c:	20008590 	.word	0x20008590

08009230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800923e:	2b00      	cmp	r3, #0
 8009240:	d108      	bne.n	8009254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009246:	4618      	mov	r0, r3
 8009248:	f000 ff9e 	bl	800a188 <vPortFree>
				vPortFree( pxTCB );
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 ff9b 	bl	800a188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009252:	e019      	b.n	8009288 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800925a:	2b01      	cmp	r3, #1
 800925c:	d103      	bne.n	8009266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 ff92 	bl	800a188 <vPortFree>
	}
 8009264:	e010      	b.n	8009288 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800926c:	2b02      	cmp	r3, #2
 800926e:	d00b      	beq.n	8009288 <prvDeleteTCB+0x58>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60fb      	str	r3, [r7, #12]
}
 8009282:	bf00      	nop
 8009284:	bf00      	nop
 8009286:	e7fd      	b.n	8009284 <prvDeleteTCB+0x54>
	}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009296:	4b0c      	ldr	r3, [pc, #48]	@ (80092c8 <prvResetNextTaskUnblockTime+0x38>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d104      	bne.n	80092aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092a0:	4b0a      	ldr	r3, [pc, #40]	@ (80092cc <prvResetNextTaskUnblockTime+0x3c>)
 80092a2:	f04f 32ff 	mov.w	r2, #4294967295
 80092a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092a8:	e008      	b.n	80092bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092aa:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <prvResetNextTaskUnblockTime+0x38>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4a04      	ldr	r2, [pc, #16]	@ (80092cc <prvResetNextTaskUnblockTime+0x3c>)
 80092ba:	6013      	str	r3, [r2, #0]
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	20008560 	.word	0x20008560
 80092cc:	200085c8 	.word	0x200085c8

080092d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009304 <xTaskGetSchedulerState+0x34>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092de:	2301      	movs	r3, #1
 80092e0:	607b      	str	r3, [r7, #4]
 80092e2:	e008      	b.n	80092f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e4:	4b08      	ldr	r3, [pc, #32]	@ (8009308 <xTaskGetSchedulerState+0x38>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092ec:	2302      	movs	r3, #2
 80092ee:	607b      	str	r3, [r7, #4]
 80092f0:	e001      	b.n	80092f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092f2:	2300      	movs	r3, #0
 80092f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092f6:	687b      	ldr	r3, [r7, #4]
	}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	200085b4 	.word	0x200085b4
 8009308:	200085d0 	.word	0x200085d0

0800930c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d058      	beq.n	80093d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009322:	4b2f      	ldr	r3, [pc, #188]	@ (80093e0 <xTaskPriorityDisinherit+0xd4>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	429a      	cmp	r2, r3
 800932a:	d00b      	beq.n	8009344 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	e7fd      	b.n	8009340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10b      	bne.n	8009364 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	60bb      	str	r3, [r7, #8]
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009368:	1e5a      	subs	r2, r3, #1
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009376:	429a      	cmp	r2, r3
 8009378:	d02c      	beq.n	80093d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800937e:	2b00      	cmp	r3, #0
 8009380:	d128      	bne.n	80093d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3304      	adds	r3, #4
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe fc2c 	bl	8007be4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009398:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a4:	4b0f      	ldr	r3, [pc, #60]	@ (80093e4 <xTaskPriorityDisinherit+0xd8>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d903      	bls.n	80093b4 <xTaskPriorityDisinherit+0xa8>
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b0:	4a0c      	ldr	r2, [pc, #48]	@ (80093e4 <xTaskPriorityDisinherit+0xd8>)
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4a09      	ldr	r2, [pc, #36]	@ (80093e8 <xTaskPriorityDisinherit+0xdc>)
 80093c2:	441a      	add	r2, r3
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4619      	mov	r1, r3
 80093ca:	4610      	mov	r0, r2
 80093cc:	f7fe fbad 	bl	8007b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093d4:	697b      	ldr	r3, [r7, #20]
	}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200080d4 	.word	0x200080d4
 80093e4:	200085b0 	.word	0x200085b0
 80093e8:	200080d8 	.word	0x200080d8

080093ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80093f6:	4b21      	ldr	r3, [pc, #132]	@ (800947c <prvAddCurrentTaskToDelayedList+0x90>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fc:	4b20      	ldr	r3, [pc, #128]	@ (8009480 <prvAddCurrentTaskToDelayedList+0x94>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3304      	adds	r3, #4
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fbee 	bl	8007be4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940e:	d10a      	bne.n	8009426 <prvAddCurrentTaskToDelayedList+0x3a>
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d007      	beq.n	8009426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009416:	4b1a      	ldr	r3, [pc, #104]	@ (8009480 <prvAddCurrentTaskToDelayedList+0x94>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3304      	adds	r3, #4
 800941c:	4619      	mov	r1, r3
 800941e:	4819      	ldr	r0, [pc, #100]	@ (8009484 <prvAddCurrentTaskToDelayedList+0x98>)
 8009420:	f7fe fb83 	bl	8007b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009424:	e026      	b.n	8009474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4413      	add	r3, r2
 800942c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800942e:	4b14      	ldr	r3, [pc, #80]	@ (8009480 <prvAddCurrentTaskToDelayedList+0x94>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	429a      	cmp	r2, r3
 800943c:	d209      	bcs.n	8009452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800943e:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b0f      	ldr	r3, [pc, #60]	@ (8009480 <prvAddCurrentTaskToDelayedList+0x94>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3304      	adds	r3, #4
 8009448:	4619      	mov	r1, r3
 800944a:	4610      	mov	r0, r2
 800944c:	f7fe fb91 	bl	8007b72 <vListInsert>
}
 8009450:	e010      	b.n	8009474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009452:	4b0e      	ldr	r3, [pc, #56]	@ (800948c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	4b0a      	ldr	r3, [pc, #40]	@ (8009480 <prvAddCurrentTaskToDelayedList+0x94>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	3304      	adds	r3, #4
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f7fe fb87 	bl	8007b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009464:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	429a      	cmp	r2, r3
 800946c:	d202      	bcs.n	8009474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800946e:	4a08      	ldr	r2, [pc, #32]	@ (8009490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	6013      	str	r3, [r2, #0]
}
 8009474:	bf00      	nop
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	200085ac 	.word	0x200085ac
 8009480:	200080d4 	.word	0x200080d4
 8009484:	20008594 	.word	0x20008594
 8009488:	20008564 	.word	0x20008564
 800948c:	20008560 	.word	0x20008560
 8009490:	200085c8 	.word	0x200085c8

08009494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08a      	sub	sp, #40	@ 0x28
 8009498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800949e:	f000 fb13 	bl	8009ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009518 <xTimerCreateTimerTask+0x84>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d021      	beq.n	80094ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094b2:	1d3a      	adds	r2, r7, #4
 80094b4:	f107 0108 	add.w	r1, r7, #8
 80094b8:	f107 030c 	add.w	r3, r7, #12
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe faed 	bl	8007a9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094c2:	6879      	ldr	r1, [r7, #4]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	9202      	str	r2, [sp, #8]
 80094ca:	9301      	str	r3, [sp, #4]
 80094cc:	2302      	movs	r3, #2
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	2300      	movs	r3, #0
 80094d2:	460a      	mov	r2, r1
 80094d4:	4911      	ldr	r1, [pc, #68]	@ (800951c <xTimerCreateTimerTask+0x88>)
 80094d6:	4812      	ldr	r0, [pc, #72]	@ (8009520 <xTimerCreateTimerTask+0x8c>)
 80094d8:	f7ff f8a8 	bl	800862c <xTaskCreateStatic>
 80094dc:	4603      	mov	r3, r0
 80094de:	4a11      	ldr	r2, [pc, #68]	@ (8009524 <xTimerCreateTimerTask+0x90>)
 80094e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80094e2:	4b10      	ldr	r3, [pc, #64]	@ (8009524 <xTimerCreateTimerTask+0x90>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80094ea:	2301      	movs	r3, #1
 80094ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10b      	bne.n	800950c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
 8009504:	613b      	str	r3, [r7, #16]
}
 8009506:	bf00      	nop
 8009508:	bf00      	nop
 800950a:	e7fd      	b.n	8009508 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800950c:	697b      	ldr	r3, [r7, #20]
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20008604 	.word	0x20008604
 800951c:	08014fe4 	.word	0x08014fe4
 8009520:	08009661 	.word	0x08009661
 8009524:	20008608 	.word	0x20008608

08009528 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	@ 0x28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009536:	2300      	movs	r3, #0
 8009538:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10b      	bne.n	8009558 <xTimerGenericCommand+0x30>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	623b      	str	r3, [r7, #32]
}
 8009552:	bf00      	nop
 8009554:	bf00      	nop
 8009556:	e7fd      	b.n	8009554 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009558:	4b19      	ldr	r3, [pc, #100]	@ (80095c0 <xTimerGenericCommand+0x98>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d02a      	beq.n	80095b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b05      	cmp	r3, #5
 8009570:	dc18      	bgt.n	80095a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009572:	f7ff fead 	bl	80092d0 <xTaskGetSchedulerState>
 8009576:	4603      	mov	r3, r0
 8009578:	2b02      	cmp	r3, #2
 800957a:	d109      	bne.n	8009590 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800957c:	4b10      	ldr	r3, [pc, #64]	@ (80095c0 <xTimerGenericCommand+0x98>)
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	f107 0110 	add.w	r1, r7, #16
 8009584:	2300      	movs	r3, #0
 8009586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009588:	f7fe fc60 	bl	8007e4c <xQueueGenericSend>
 800958c:	6278      	str	r0, [r7, #36]	@ 0x24
 800958e:	e012      	b.n	80095b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009590:	4b0b      	ldr	r3, [pc, #44]	@ (80095c0 <xTimerGenericCommand+0x98>)
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	f107 0110 	add.w	r1, r7, #16
 8009598:	2300      	movs	r3, #0
 800959a:	2200      	movs	r2, #0
 800959c:	f7fe fc56 	bl	8007e4c <xQueueGenericSend>
 80095a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80095a2:	e008      	b.n	80095b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095a4:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <xTimerGenericCommand+0x98>)
 80095a6:	6818      	ldr	r0, [r3, #0]
 80095a8:	f107 0110 	add.w	r1, r7, #16
 80095ac:	2300      	movs	r3, #0
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	f7fe fd4e 	bl	8008050 <xQueueGenericSendFromISR>
 80095b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80095b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3728      	adds	r7, #40	@ 0x28
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20008604 	.word	0x20008604

080095c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ce:	4b23      	ldr	r3, [pc, #140]	@ (800965c <prvProcessExpiredTimer+0x98>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	3304      	adds	r3, #4
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fe fb01 	bl	8007be4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d023      	beq.n	8009638 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	699a      	ldr	r2, [r3, #24]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	18d1      	adds	r1, r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	6978      	ldr	r0, [r7, #20]
 80095fe:	f000 f8d5 	bl	80097ac <prvInsertTimerInActiveList>
 8009602:	4603      	mov	r3, r0
 8009604:	2b00      	cmp	r3, #0
 8009606:	d020      	beq.n	800964a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009608:	2300      	movs	r3, #0
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	2300      	movs	r3, #0
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	2100      	movs	r1, #0
 8009612:	6978      	ldr	r0, [r7, #20]
 8009614:	f7ff ff88 	bl	8009528 <xTimerGenericCommand>
 8009618:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d114      	bne.n	800964a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	60fb      	str	r3, [r7, #12]
}
 8009632:	bf00      	nop
 8009634:	bf00      	nop
 8009636:	e7fd      	b.n	8009634 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800963e:	f023 0301 	bic.w	r3, r3, #1
 8009642:	b2da      	uxtb	r2, r3
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	6978      	ldr	r0, [r7, #20]
 8009650:	4798      	blx	r3
}
 8009652:	bf00      	nop
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	200085fc 	.word	0x200085fc

08009660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	4618      	mov	r0, r3
 800966e:	f000 f859 	bl	8009724 <prvGetNextExpireTime>
 8009672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4619      	mov	r1, r3
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f805 	bl	8009688 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800967e:	f000 f8d7 	bl	8009830 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009682:	bf00      	nop
 8009684:	e7f0      	b.n	8009668 <prvTimerTask+0x8>
	...

08009688 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009692:	f7ff fa0f 	bl	8008ab4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f000 f866 	bl	800976c <prvSampleTimeNow>
 80096a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d130      	bne.n	800970a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10a      	bne.n	80096c4 <prvProcessTimerOrBlockTask+0x3c>
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d806      	bhi.n	80096c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80096b6:	f7ff fa0b 	bl	8008ad0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff81 	bl	80095c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80096c2:	e024      	b.n	800970e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d008      	beq.n	80096dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80096ca:	4b13      	ldr	r3, [pc, #76]	@ (8009718 <prvProcessTimerOrBlockTask+0x90>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <prvProcessTimerOrBlockTask+0x50>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <prvProcessTimerOrBlockTask+0x52>
 80096d8:	2300      	movs	r3, #0
 80096da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80096dc:	4b0f      	ldr	r3, [pc, #60]	@ (800971c <prvProcessTimerOrBlockTask+0x94>)
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	4619      	mov	r1, r3
 80096ea:	f7fe ff6b 	bl	80085c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80096ee:	f7ff f9ef 	bl	8008ad0 <xTaskResumeAll>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80096f8:	4b09      	ldr	r3, [pc, #36]	@ (8009720 <prvProcessTimerOrBlockTask+0x98>)
 80096fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	f3bf 8f6f 	isb	sy
}
 8009708:	e001      	b.n	800970e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800970a:	f7ff f9e1 	bl	8008ad0 <xTaskResumeAll>
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20008600 	.word	0x20008600
 800971c:	20008604 	.word	0x20008604
 8009720:	e000ed04 	.word	0xe000ed04

08009724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800972c:	4b0e      	ldr	r3, [pc, #56]	@ (8009768 <prvGetNextExpireTime+0x44>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <prvGetNextExpireTime+0x16>
 8009736:	2201      	movs	r2, #1
 8009738:	e000      	b.n	800973c <prvGetNextExpireTime+0x18>
 800973a:	2200      	movs	r2, #0
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d105      	bne.n	8009754 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009748:	4b07      	ldr	r3, [pc, #28]	@ (8009768 <prvGetNextExpireTime+0x44>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	60fb      	str	r3, [r7, #12]
 8009752:	e001      	b.n	8009758 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009754:	2300      	movs	r3, #0
 8009756:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009758:	68fb      	ldr	r3, [r7, #12]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	200085fc 	.word	0x200085fc

0800976c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009774:	f7ff fa4a 	bl	8008c0c <xTaskGetTickCount>
 8009778:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800977a:	4b0b      	ldr	r3, [pc, #44]	@ (80097a8 <prvSampleTimeNow+0x3c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d205      	bcs.n	8009790 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009784:	f000 f93a 	bl	80099fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	e002      	b.n	8009796 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009796:	4a04      	ldr	r2, [pc, #16]	@ (80097a8 <prvSampleTimeNow+0x3c>)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	2000860c 	.word	0x2000860c

080097ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d812      	bhi.n	80097f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	1ad2      	subs	r2, r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d302      	bcc.n	80097e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	e01b      	b.n	800981e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80097e6:	4b10      	ldr	r3, [pc, #64]	@ (8009828 <prvInsertTimerInActiveList+0x7c>)
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4619      	mov	r1, r3
 80097f0:	4610      	mov	r0, r2
 80097f2:	f7fe f9be 	bl	8007b72 <vListInsert>
 80097f6:	e012      	b.n	800981e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d206      	bcs.n	800980e <prvInsertTimerInActiveList+0x62>
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	429a      	cmp	r2, r3
 8009806:	d302      	bcc.n	800980e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009808:	2301      	movs	r3, #1
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	e007      	b.n	800981e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800980e:	4b07      	ldr	r3, [pc, #28]	@ (800982c <prvInsertTimerInActiveList+0x80>)
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7fe f9aa 	bl	8007b72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800981e:	697b      	ldr	r3, [r7, #20]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	20008600 	.word	0x20008600
 800982c:	200085fc 	.word	0x200085fc

08009830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08e      	sub	sp, #56	@ 0x38
 8009834:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009836:	e0ce      	b.n	80099d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	da19      	bge.n	8009872 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800983e:	1d3b      	adds	r3, r7, #4
 8009840:	3304      	adds	r3, #4
 8009842:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	61fb      	str	r3, [r7, #28]
}
 800985c:	bf00      	nop
 800985e:	bf00      	nop
 8009860:	e7fd      	b.n	800985e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009868:	6850      	ldr	r0, [r2, #4]
 800986a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800986c:	6892      	ldr	r2, [r2, #8]
 800986e:	4611      	mov	r1, r2
 8009870:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f2c0 80ae 	blt.w	80099d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d004      	beq.n	8009890 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009888:	3304      	adds	r3, #4
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe f9aa 	bl	8007be4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009890:	463b      	mov	r3, r7
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff ff6a 	bl	800976c <prvSampleTimeNow>
 8009898:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b09      	cmp	r3, #9
 800989e:	f200 8097 	bhi.w	80099d0 <prvProcessReceivedCommands+0x1a0>
 80098a2:	a201      	add	r2, pc, #4	@ (adr r2, 80098a8 <prvProcessReceivedCommands+0x78>)
 80098a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a8:	080098d1 	.word	0x080098d1
 80098ac:	080098d1 	.word	0x080098d1
 80098b0:	080098d1 	.word	0x080098d1
 80098b4:	08009947 	.word	0x08009947
 80098b8:	0800995b 	.word	0x0800995b
 80098bc:	080099a7 	.word	0x080099a7
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098d1 	.word	0x080098d1
 80098c8:	08009947 	.word	0x08009947
 80098cc:	0800995b 	.word	0x0800995b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	b2da      	uxtb	r2, r3
 80098dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	18d1      	adds	r1, r2, r3
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098f0:	f7ff ff5c 	bl	80097ac <prvInsertTimerInActiveList>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d06c      	beq.n	80099d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009900:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009908:	f003 0304 	and.w	r3, r3, #4
 800990c:	2b00      	cmp	r3, #0
 800990e:	d061      	beq.n	80099d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	441a      	add	r2, r3
 8009918:	2300      	movs	r3, #0
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	2300      	movs	r3, #0
 800991e:	2100      	movs	r1, #0
 8009920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009922:	f7ff fe01 	bl	8009528 <xTimerGenericCommand>
 8009926:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009928:	6a3b      	ldr	r3, [r7, #32]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d152      	bne.n	80099d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	61bb      	str	r3, [r7, #24]
}
 8009940:	bf00      	nop
 8009942:	bf00      	nop
 8009944:	e7fd      	b.n	8009942 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800994c:	f023 0301 	bic.w	r3, r3, #1
 8009950:	b2da      	uxtb	r2, r3
 8009952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009954:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009958:	e03d      	b.n	80099d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800995a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009960:	f043 0301 	orr.w	r3, r3, #1
 8009964:	b2da      	uxtb	r2, r3
 8009966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009968:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	617b      	str	r3, [r7, #20]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009994:	699a      	ldr	r2, [r3, #24]
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	18d1      	adds	r1, r2, r3
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800999e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099a0:	f7ff ff04 	bl	80097ac <prvInsertTimerInActiveList>
					break;
 80099a4:	e017      	b.n	80099d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80099b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b6:	f000 fbe7 	bl	800a188 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80099ba:	e00c      	b.n	80099d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c2:	f023 0301 	bic.w	r3, r3, #1
 80099c6:	b2da      	uxtb	r2, r3
 80099c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099ce:	e002      	b.n	80099d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80099d0:	bf00      	nop
 80099d2:	e000      	b.n	80099d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80099d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80099d6:	4b08      	ldr	r3, [pc, #32]	@ (80099f8 <prvProcessReceivedCommands+0x1c8>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	1d39      	adds	r1, r7, #4
 80099dc:	2200      	movs	r2, #0
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fbd4 	bl	800818c <xQueueReceive>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f47f af26 	bne.w	8009838 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
 80099f0:	3730      	adds	r7, #48	@ 0x30
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20008604 	.word	0x20008604

080099fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a02:	e049      	b.n	8009a98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a04:	4b2e      	ldr	r3, [pc, #184]	@ (8009ac0 <prvSwitchTimerLists+0xc4>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8009ac0 <prvSwitchTimerLists+0xc4>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe f8e1 	bl	8007be4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d02f      	beq.n	8009a98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4413      	add	r3, r2
 8009a40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d90e      	bls.n	8009a68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a56:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac0 <prvSwitchTimerLists+0xc4>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f7fe f886 	bl	8007b72 <vListInsert>
 8009a66:	e017      	b.n	8009a98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	2100      	movs	r1, #0
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f7ff fd58 	bl	8009528 <xTimerGenericCommand>
 8009a78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10b      	bne.n	8009a98 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	603b      	str	r3, [r7, #0]
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	e7fd      	b.n	8009a94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a98:	4b09      	ldr	r3, [pc, #36]	@ (8009ac0 <prvSwitchTimerLists+0xc4>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1b0      	bne.n	8009a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009aa2:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <prvSwitchTimerLists+0xc4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009aa8:	4b06      	ldr	r3, [pc, #24]	@ (8009ac4 <prvSwitchTimerLists+0xc8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a04      	ldr	r2, [pc, #16]	@ (8009ac0 <prvSwitchTimerLists+0xc4>)
 8009aae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009ab0:	4a04      	ldr	r2, [pc, #16]	@ (8009ac4 <prvSwitchTimerLists+0xc8>)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	6013      	str	r3, [r2, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200085fc 	.word	0x200085fc
 8009ac4:	20008600 	.word	0x20008600

08009ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ace:	f000 f96b 	bl	8009da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009ad2:	4b15      	ldr	r3, [pc, #84]	@ (8009b28 <prvCheckForValidListAndQueue+0x60>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d120      	bne.n	8009b1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ada:	4814      	ldr	r0, [pc, #80]	@ (8009b2c <prvCheckForValidListAndQueue+0x64>)
 8009adc:	f7fd fff8 	bl	8007ad0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ae0:	4813      	ldr	r0, [pc, #76]	@ (8009b30 <prvCheckForValidListAndQueue+0x68>)
 8009ae2:	f7fd fff5 	bl	8007ad0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ae6:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <prvCheckForValidListAndQueue+0x6c>)
 8009ae8:	4a10      	ldr	r2, [pc, #64]	@ (8009b2c <prvCheckForValidListAndQueue+0x64>)
 8009aea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009aec:	4b12      	ldr	r3, [pc, #72]	@ (8009b38 <prvCheckForValidListAndQueue+0x70>)
 8009aee:	4a10      	ldr	r2, [pc, #64]	@ (8009b30 <prvCheckForValidListAndQueue+0x68>)
 8009af0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009af2:	2300      	movs	r3, #0
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	4b11      	ldr	r3, [pc, #68]	@ (8009b3c <prvCheckForValidListAndQueue+0x74>)
 8009af8:	4a11      	ldr	r2, [pc, #68]	@ (8009b40 <prvCheckForValidListAndQueue+0x78>)
 8009afa:	2110      	movs	r1, #16
 8009afc:	200a      	movs	r0, #10
 8009afe:	f7fe f905 	bl	8007d0c <xQueueGenericCreateStatic>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4a08      	ldr	r2, [pc, #32]	@ (8009b28 <prvCheckForValidListAndQueue+0x60>)
 8009b06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b08:	4b07      	ldr	r3, [pc, #28]	@ (8009b28 <prvCheckForValidListAndQueue+0x60>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b10:	4b05      	ldr	r3, [pc, #20]	@ (8009b28 <prvCheckForValidListAndQueue+0x60>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	490b      	ldr	r1, [pc, #44]	@ (8009b44 <prvCheckForValidListAndQueue+0x7c>)
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fe fd2a 	bl	8008570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b1c:	f000 f976 	bl	8009e0c <vPortExitCritical>
}
 8009b20:	bf00      	nop
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20008604 	.word	0x20008604
 8009b2c:	200085d4 	.word	0x200085d4
 8009b30:	200085e8 	.word	0x200085e8
 8009b34:	200085fc 	.word	0x200085fc
 8009b38:	20008600 	.word	0x20008600
 8009b3c:	200086b0 	.word	0x200086b0
 8009b40:	20008610 	.word	0x20008610
 8009b44:	08014fec 	.word	0x08014fec

08009b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	3b04      	subs	r3, #4
 8009b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3b04      	subs	r3, #4
 8009b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f023 0201 	bic.w	r2, r3, #1
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3b04      	subs	r3, #4
 8009b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b78:	4a0c      	ldr	r2, [pc, #48]	@ (8009bac <pxPortInitialiseStack+0x64>)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	3b14      	subs	r3, #20
 8009b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f06f 0202 	mvn.w	r2, #2
 8009b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3b20      	subs	r3, #32
 8009b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	08009bb1 	.word	0x08009bb1

08009bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bba:	4b13      	ldr	r3, [pc, #76]	@ (8009c08 <prvTaskExitError+0x58>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d00b      	beq.n	8009bdc <prvTaskExitError+0x2c>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60fb      	str	r3, [r7, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
 8009bda:	e7fd      	b.n	8009bd8 <prvTaskExitError+0x28>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60bb      	str	r3, [r7, #8]
}
 8009bee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009bf0:	bf00      	nop
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d0fc      	beq.n	8009bf2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009bf8:	bf00      	nop
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	200000d0 	.word	0x200000d0
 8009c0c:	00000000 	.word	0x00000000

08009c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c10:	4b07      	ldr	r3, [pc, #28]	@ (8009c30 <pxCurrentTCBConst2>)
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	6808      	ldr	r0, [r1, #0]
 8009c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1a:	f380 8809 	msr	PSP, r0
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	f04f 0000 	mov.w	r0, #0
 8009c26:	f380 8811 	msr	BASEPRI, r0
 8009c2a:	4770      	bx	lr
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst2>:
 8009c30:	200080d4 	.word	0x200080d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c38:	4808      	ldr	r0, [pc, #32]	@ (8009c5c <prvPortStartFirstTask+0x24>)
 8009c3a:	6800      	ldr	r0, [r0, #0]
 8009c3c:	6800      	ldr	r0, [r0, #0]
 8009c3e:	f380 8808 	msr	MSP, r0
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8814 	msr	CONTROL, r0
 8009c4a:	b662      	cpsie	i
 8009c4c:	b661      	cpsie	f
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	df00      	svc	0
 8009c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c5a:	bf00      	nop
 8009c5c:	e000ed08 	.word	0xe000ed08

08009c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c66:	4b47      	ldr	r3, [pc, #284]	@ (8009d84 <xPortStartScheduler+0x124>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a47      	ldr	r2, [pc, #284]	@ (8009d88 <xPortStartScheduler+0x128>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d10b      	bne.n	8009c88 <xPortStartScheduler+0x28>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	613b      	str	r3, [r7, #16]
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	e7fd      	b.n	8009c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c88:	4b3e      	ldr	r3, [pc, #248]	@ (8009d84 <xPortStartScheduler+0x124>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d8c <xPortStartScheduler+0x12c>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d10b      	bne.n	8009caa <xPortStartScheduler+0x4a>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	60fb      	str	r3, [r7, #12]
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	e7fd      	b.n	8009ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009caa:	4b39      	ldr	r3, [pc, #228]	@ (8009d90 <xPortStartScheduler+0x130>)
 8009cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	22ff      	movs	r2, #255	@ 0xff
 8009cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	4b31      	ldr	r3, [pc, #196]	@ (8009d94 <xPortStartScheduler+0x134>)
 8009cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cd2:	4b31      	ldr	r3, [pc, #196]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009cd4:	2207      	movs	r2, #7
 8009cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cd8:	e009      	b.n	8009cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009cda:	4b2f      	ldr	r3, [pc, #188]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ce4:	78fb      	ldrb	r3, [r7, #3]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cee:	78fb      	ldrb	r3, [r7, #3]
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cf6:	2b80      	cmp	r3, #128	@ 0x80
 8009cf8:	d0ef      	beq.n	8009cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cfa:	4b27      	ldr	r3, [pc, #156]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f1c3 0307 	rsb	r3, r3, #7
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d00b      	beq.n	8009d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	60bb      	str	r3, [r7, #8]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	4a1c      	ldr	r2, [pc, #112]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d28:	4b1b      	ldr	r3, [pc, #108]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d30:	4a19      	ldr	r2, [pc, #100]	@ (8009d98 <xPortStartScheduler+0x138>)
 8009d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d3c:	4b17      	ldr	r3, [pc, #92]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a16      	ldr	r2, [pc, #88]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d48:	4b14      	ldr	r3, [pc, #80]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a13      	ldr	r2, [pc, #76]	@ (8009d9c <xPortStartScheduler+0x13c>)
 8009d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d54:	f000 f8da 	bl	8009f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d58:	4b11      	ldr	r3, [pc, #68]	@ (8009da0 <xPortStartScheduler+0x140>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d5e:	f000 f8f9 	bl	8009f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d62:	4b10      	ldr	r3, [pc, #64]	@ (8009da4 <xPortStartScheduler+0x144>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a0f      	ldr	r2, [pc, #60]	@ (8009da4 <xPortStartScheduler+0x144>)
 8009d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d6e:	f7ff ff63 	bl	8009c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d72:	f7ff f815 	bl	8008da0 <vTaskSwitchContext>
	prvTaskExitError();
 8009d76:	f7ff ff1b 	bl	8009bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	e000ed00 	.word	0xe000ed00
 8009d88:	410fc271 	.word	0x410fc271
 8009d8c:	410fc270 	.word	0x410fc270
 8009d90:	e000e400 	.word	0xe000e400
 8009d94:	20008700 	.word	0x20008700
 8009d98:	20008704 	.word	0x20008704
 8009d9c:	e000ed20 	.word	0xe000ed20
 8009da0:	200000d0 	.word	0x200000d0
 8009da4:	e000ef34 	.word	0xe000ef34

08009da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dc2:	4b10      	ldr	r3, [pc, #64]	@ (8009e04 <vPortEnterCritical+0x5c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8009e04 <vPortEnterCritical+0x5c>)
 8009dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009e04 <vPortEnterCritical+0x5c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d110      	bne.n	8009df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009e08 <vPortEnterCritical+0x60>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00b      	beq.n	8009df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	603b      	str	r3, [r7, #0]
}
 8009df0:	bf00      	nop
 8009df2:	bf00      	nop
 8009df4:	e7fd      	b.n	8009df2 <vPortEnterCritical+0x4a>
	}
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	200000d0 	.word	0x200000d0
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e12:	4b12      	ldr	r3, [pc, #72]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10b      	bne.n	8009e32 <vPortExitCritical+0x26>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	607b      	str	r3, [r7, #4]
}
 8009e2c:	bf00      	nop
 8009e2e:	bf00      	nop
 8009e30:	e7fd      	b.n	8009e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e32:	4b0a      	ldr	r3, [pc, #40]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	4a08      	ldr	r2, [pc, #32]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e3c:	4b07      	ldr	r3, [pc, #28]	@ (8009e5c <vPortExitCritical+0x50>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d105      	bne.n	8009e50 <vPortExitCritical+0x44>
 8009e44:	2300      	movs	r3, #0
 8009e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	f383 8811 	msr	BASEPRI, r3
}
 8009e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	200000d0 	.word	0x200000d0

08009e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e60:	f3ef 8009 	mrs	r0, PSP
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	4b15      	ldr	r3, [pc, #84]	@ (8009ec0 <pxCurrentTCBConst>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	f01e 0f10 	tst.w	lr, #16
 8009e70:	bf08      	it	eq
 8009e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	6010      	str	r0, [r2, #0]
 8009e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e84:	f380 8811 	msr	BASEPRI, r0
 8009e88:	f3bf 8f4f 	dsb	sy
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f7fe ff86 	bl	8008da0 <vTaskSwitchContext>
 8009e94:	f04f 0000 	mov.w	r0, #0
 8009e98:	f380 8811 	msr	BASEPRI, r0
 8009e9c:	bc09      	pop	{r0, r3}
 8009e9e:	6819      	ldr	r1, [r3, #0]
 8009ea0:	6808      	ldr	r0, [r1, #0]
 8009ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea6:	f01e 0f10 	tst.w	lr, #16
 8009eaa:	bf08      	it	eq
 8009eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009eb0:	f380 8809 	msr	PSP, r0
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	f3af 8000 	nop.w

08009ec0 <pxCurrentTCBConst>:
 8009ec0:	200080d4 	.word	0x200080d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop

08009ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b082      	sub	sp, #8
 8009ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	607b      	str	r3, [r7, #4]
}
 8009ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ee2:	f7fe fea3 	bl	8008c2c <xTaskIncrementTick>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009eec:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <xPortSysTickHandler+0x40>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f383 8811 	msr	BASEPRI, r3
}
 8009efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	e000ed04 	.word	0xe000ed04

08009f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f10:	4b0b      	ldr	r3, [pc, #44]	@ (8009f40 <vPortSetupTimerInterrupt+0x34>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f16:	4b0b      	ldr	r3, [pc, #44]	@ (8009f44 <vPortSetupTimerInterrupt+0x38>)
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f48 <vPortSetupTimerInterrupt+0x3c>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a0a      	ldr	r2, [pc, #40]	@ (8009f4c <vPortSetupTimerInterrupt+0x40>)
 8009f22:	fba2 2303 	umull	r2, r3, r2, r3
 8009f26:	099b      	lsrs	r3, r3, #6
 8009f28:	4a09      	ldr	r2, [pc, #36]	@ (8009f50 <vPortSetupTimerInterrupt+0x44>)
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f2e:	4b04      	ldr	r3, [pc, #16]	@ (8009f40 <vPortSetupTimerInterrupt+0x34>)
 8009f30:	2207      	movs	r2, #7
 8009f32:	601a      	str	r2, [r3, #0]
}
 8009f34:	bf00      	nop
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	e000e010 	.word	0xe000e010
 8009f44:	e000e018 	.word	0xe000e018
 8009f48:	200000c4 	.word	0x200000c4
 8009f4c:	10624dd3 	.word	0x10624dd3
 8009f50:	e000e014 	.word	0xe000e014

08009f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f64 <vPortEnableVFP+0x10>
 8009f58:	6801      	ldr	r1, [r0, #0]
 8009f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009f5e:	6001      	str	r1, [r0, #0]
 8009f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f62:	bf00      	nop
 8009f64:	e000ed88 	.word	0xe000ed88

08009f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f6e:	f3ef 8305 	mrs	r3, IPSR
 8009f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b0f      	cmp	r3, #15
 8009f78:	d915      	bls.n	8009fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f7a:	4a18      	ldr	r2, [pc, #96]	@ (8009fdc <vPortValidateInterruptPriority+0x74>)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f84:	4b16      	ldr	r3, [pc, #88]	@ (8009fe0 <vPortValidateInterruptPriority+0x78>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	7afa      	ldrb	r2, [r7, #11]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d20b      	bcs.n	8009fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe4 <vPortValidateInterruptPriority+0x7c>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009fae:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe8 <vPortValidateInterruptPriority+0x80>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d90b      	bls.n	8009fce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	603b      	str	r3, [r7, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <vPortValidateInterruptPriority+0x62>
	}
 8009fce:	bf00      	nop
 8009fd0:	3714      	adds	r7, #20
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd8:	4770      	bx	lr
 8009fda:	bf00      	nop
 8009fdc:	e000e3f0 	.word	0xe000e3f0
 8009fe0:	20008700 	.word	0x20008700
 8009fe4:	e000ed0c 	.word	0xe000ed0c
 8009fe8:	20008704 	.word	0x20008704

08009fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b08a      	sub	sp, #40	@ 0x28
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ff8:	f7fe fd5c 	bl	8008ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ffc:	4b5c      	ldr	r3, [pc, #368]	@ (800a170 <pvPortMalloc+0x184>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a004:	f000 f924 	bl	800a250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a008:	4b5a      	ldr	r3, [pc, #360]	@ (800a174 <pvPortMalloc+0x188>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4013      	ands	r3, r2
 800a010:	2b00      	cmp	r3, #0
 800a012:	f040 8095 	bne.w	800a140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01e      	beq.n	800a05a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a01c:	2208      	movs	r2, #8
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4413      	add	r3, r2
 800a022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f003 0307 	and.w	r3, r3, #7
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d015      	beq.n	800a05a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f023 0307 	bic.w	r3, r3, #7
 800a034:	3308      	adds	r3, #8
 800a036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f003 0307 	and.w	r3, r3, #7
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <pvPortMalloc+0x6e>
	__asm volatile
 800a042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	617b      	str	r3, [r7, #20]
}
 800a054:	bf00      	nop
 800a056:	bf00      	nop
 800a058:	e7fd      	b.n	800a056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d06f      	beq.n	800a140 <pvPortMalloc+0x154>
 800a060:	4b45      	ldr	r3, [pc, #276]	@ (800a178 <pvPortMalloc+0x18c>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d86a      	bhi.n	800a140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a06a:	4b44      	ldr	r3, [pc, #272]	@ (800a17c <pvPortMalloc+0x190>)
 800a06c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a06e:	4b43      	ldr	r3, [pc, #268]	@ (800a17c <pvPortMalloc+0x190>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a074:	e004      	b.n	800a080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	429a      	cmp	r2, r3
 800a088:	d903      	bls.n	800a092 <pvPortMalloc+0xa6>
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1f1      	bne.n	800a076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a092:	4b37      	ldr	r3, [pc, #220]	@ (800a170 <pvPortMalloc+0x184>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a098:	429a      	cmp	r2, r3
 800a09a:	d051      	beq.n	800a140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a09c:	6a3b      	ldr	r3, [r7, #32]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	4413      	add	r3, r2
 800a0a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	2308      	movs	r3, #8
 800a0b8:	005b      	lsls	r3, r3, #1
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d920      	bls.n	800a100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <pvPortMalloc+0xfc>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	613b      	str	r3, [r7, #16]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0fa:	69b8      	ldr	r0, [r7, #24]
 800a0fc:	f000 f90a 	bl	800a314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a100:	4b1d      	ldr	r3, [pc, #116]	@ (800a178 <pvPortMalloc+0x18c>)
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	4a1b      	ldr	r2, [pc, #108]	@ (800a178 <pvPortMalloc+0x18c>)
 800a10c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a10e:	4b1a      	ldr	r3, [pc, #104]	@ (800a178 <pvPortMalloc+0x18c>)
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b1b      	ldr	r3, [pc, #108]	@ (800a180 <pvPortMalloc+0x194>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d203      	bcs.n	800a122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a11a:	4b17      	ldr	r3, [pc, #92]	@ (800a178 <pvPortMalloc+0x18c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a18      	ldr	r2, [pc, #96]	@ (800a180 <pvPortMalloc+0x194>)
 800a120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	4b13      	ldr	r3, [pc, #76]	@ (800a174 <pvPortMalloc+0x188>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	431a      	orrs	r2, r3
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a136:	4b13      	ldr	r3, [pc, #76]	@ (800a184 <pvPortMalloc+0x198>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	4a11      	ldr	r2, [pc, #68]	@ (800a184 <pvPortMalloc+0x198>)
 800a13e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a140:	f7fe fcc6 	bl	8008ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00b      	beq.n	800a166 <pvPortMalloc+0x17a>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	60fb      	str	r3, [r7, #12]
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	e7fd      	b.n	800a162 <pvPortMalloc+0x176>
	return pvReturn;
 800a166:	69fb      	ldr	r3, [r7, #28]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3728      	adds	r7, #40	@ 0x28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	2000c310 	.word	0x2000c310
 800a174:	2000c324 	.word	0x2000c324
 800a178:	2000c314 	.word	0x2000c314
 800a17c:	2000c308 	.word	0x2000c308
 800a180:	2000c318 	.word	0x2000c318
 800a184:	2000c31c 	.word	0x2000c31c

0800a188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d04f      	beq.n	800a23a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a19a:	2308      	movs	r3, #8
 800a19c:	425b      	negs	r3, r3
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	4b25      	ldr	r3, [pc, #148]	@ (800a244 <vPortFree+0xbc>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10b      	bne.n	800a1ce <vPortFree+0x46>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	60fb      	str	r3, [r7, #12]
}
 800a1c8:	bf00      	nop
 800a1ca:	bf00      	nop
 800a1cc:	e7fd      	b.n	800a1ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d00b      	beq.n	800a1ee <vPortFree+0x66>
	__asm volatile
 800a1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1da:	f383 8811 	msr	BASEPRI, r3
 800a1de:	f3bf 8f6f 	isb	sy
 800a1e2:	f3bf 8f4f 	dsb	sy
 800a1e6:	60bb      	str	r3, [r7, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	bf00      	nop
 800a1ec:	e7fd      	b.n	800a1ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	4b14      	ldr	r3, [pc, #80]	@ (800a244 <vPortFree+0xbc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01e      	beq.n	800a23a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d11a      	bne.n	800a23a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	4b0e      	ldr	r3, [pc, #56]	@ (800a244 <vPortFree+0xbc>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	43db      	mvns	r3, r3
 800a20e:	401a      	ands	r2, r3
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a214:	f7fe fc4e 	bl	8008ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	4b0a      	ldr	r3, [pc, #40]	@ (800a248 <vPortFree+0xc0>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4413      	add	r3, r2
 800a222:	4a09      	ldr	r2, [pc, #36]	@ (800a248 <vPortFree+0xc0>)
 800a224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a226:	6938      	ldr	r0, [r7, #16]
 800a228:	f000 f874 	bl	800a314 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a22c:	4b07      	ldr	r3, [pc, #28]	@ (800a24c <vPortFree+0xc4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3301      	adds	r3, #1
 800a232:	4a06      	ldr	r2, [pc, #24]	@ (800a24c <vPortFree+0xc4>)
 800a234:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a236:	f7fe fc4b 	bl	8008ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a23a:	bf00      	nop
 800a23c:	3718      	adds	r7, #24
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	2000c324 	.word	0x2000c324
 800a248:	2000c314 	.word	0x2000c314
 800a24c:	2000c320 	.word	0x2000c320

0800a250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a256:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a25a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a25c:	4b27      	ldr	r3, [pc, #156]	@ (800a2fc <prvHeapInit+0xac>)
 800a25e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f003 0307 	and.w	r3, r3, #7
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00c      	beq.n	800a284 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	3307      	adds	r3, #7
 800a26e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f023 0307 	bic.w	r3, r3, #7
 800a276:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	4a1f      	ldr	r2, [pc, #124]	@ (800a2fc <prvHeapInit+0xac>)
 800a280:	4413      	add	r3, r2
 800a282:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a288:	4a1d      	ldr	r2, [pc, #116]	@ (800a300 <prvHeapInit+0xb0>)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a28e:	4b1c      	ldr	r3, [pc, #112]	@ (800a300 <prvHeapInit+0xb0>)
 800a290:	2200      	movs	r2, #0
 800a292:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	68ba      	ldr	r2, [r7, #8]
 800a298:	4413      	add	r3, r2
 800a29a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a29c:	2208      	movs	r2, #8
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	1a9b      	subs	r3, r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0307 	bic.w	r3, r3, #7
 800a2aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4a15      	ldr	r2, [pc, #84]	@ (800a304 <prvHeapInit+0xb4>)
 800a2b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2b2:	4b14      	ldr	r3, [pc, #80]	@ (800a304 <prvHeapInit+0xb4>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2ba:	4b12      	ldr	r3, [pc, #72]	@ (800a304 <prvHeapInit+0xb4>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	1ad2      	subs	r2, r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a304 <prvHeapInit+0xb4>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a308 <prvHeapInit+0xb8>)
 800a2de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	4a09      	ldr	r2, [pc, #36]	@ (800a30c <prvHeapInit+0xbc>)
 800a2e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2e8:	4b09      	ldr	r3, [pc, #36]	@ (800a310 <prvHeapInit+0xc0>)
 800a2ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a2ee:	601a      	str	r2, [r3, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr
 800a2fc:	20008708 	.word	0x20008708
 800a300:	2000c308 	.word	0x2000c308
 800a304:	2000c310 	.word	0x2000c310
 800a308:	2000c318 	.word	0x2000c318
 800a30c:	2000c314 	.word	0x2000c314
 800a310:	2000c324 	.word	0x2000c324

0800a314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a31c:	4b28      	ldr	r3, [pc, #160]	@ (800a3c0 <prvInsertBlockIntoFreeList+0xac>)
 800a31e:	60fb      	str	r3, [r7, #12]
 800a320:	e002      	b.n	800a328 <prvInsertBlockIntoFreeList+0x14>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d8f7      	bhi.n	800a322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	429a      	cmp	r2, r3
 800a342:	d108      	bne.n	800a356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	441a      	add	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	441a      	add	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d118      	bne.n	800a39c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	4b15      	ldr	r3, [pc, #84]	@ (800a3c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d00d      	beq.n	800a392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	441a      	add	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	e008      	b.n	800a3a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a392:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	e003      	b.n	800a3a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d002      	beq.n	800a3b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3b2:	bf00      	nop
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	2000c308 	.word	0x2000c308
 800a3c4:	2000c310 	.word	0x2000c310

0800a3c8 <rcl_get_zero_initialized_publisher>:
 800a3c8:	4b01      	ldr	r3, [pc, #4]	@ (800a3d0 <rcl_get_zero_initialized_publisher+0x8>)
 800a3ca:	6818      	ldr	r0, [r3, #0]
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	08015044 	.word	0x08015044

0800a3d4 <rcl_publisher_init>:
 800a3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d8:	b088      	sub	sp, #32
 800a3da:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a3dc:	2d00      	cmp	r5, #0
 800a3de:	d069      	beq.n	800a4b4 <rcl_publisher_init+0xe0>
 800a3e0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	4648      	mov	r0, r9
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	4690      	mov	r8, r2
 800a3ec:	461f      	mov	r7, r3
 800a3ee:	f000 f9d5 	bl	800a79c <rcutils_allocator_is_valid>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	d05e      	beq.n	800a4b4 <rcl_publisher_init+0xe0>
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	d05c      	beq.n	800a4b4 <rcl_publisher_init+0xe0>
 800a3fa:	f8d4 a000 	ldr.w	sl, [r4]
 800a3fe:	f1ba 0f00 	cmp.w	sl, #0
 800a402:	d004      	beq.n	800a40e <rcl_publisher_init+0x3a>
 800a404:	2764      	movs	r7, #100	@ 0x64
 800a406:	4638      	mov	r0, r7
 800a408:	b008      	add	sp, #32
 800a40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40e:	4630      	mov	r0, r6
 800a410:	f004 ffa4 	bl	800f35c <rcl_node_is_valid>
 800a414:	2800      	cmp	r0, #0
 800a416:	d052      	beq.n	800a4be <rcl_publisher_init+0xea>
 800a418:	f1b8 0f00 	cmp.w	r8, #0
 800a41c:	d04a      	beq.n	800a4b4 <rcl_publisher_init+0xe0>
 800a41e:	2f00      	cmp	r7, #0
 800a420:	d048      	beq.n	800a4b4 <rcl_publisher_init+0xe0>
 800a422:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a426:	aa07      	add	r2, sp, #28
 800a428:	9205      	str	r2, [sp, #20]
 800a42a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a42e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a432:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a436:	f8cd a01c 	str.w	sl, [sp, #28]
 800a43a:	4639      	mov	r1, r7
 800a43c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a440:	4630      	mov	r0, r6
 800a442:	f004 ffdf 	bl	800f404 <rcl_node_resolve_name>
 800a446:	4607      	mov	r7, r0
 800a448:	2800      	cmp	r0, #0
 800a44a:	d14f      	bne.n	800a4ec <rcl_publisher_init+0x118>
 800a44c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a44e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a450:	20c8      	movs	r0, #200	@ 0xc8
 800a452:	4798      	blx	r3
 800a454:	6020      	str	r0, [r4, #0]
 800a456:	2800      	cmp	r0, #0
 800a458:	d04e      	beq.n	800a4f8 <rcl_publisher_init+0x124>
 800a45a:	4630      	mov	r0, r6
 800a45c:	f004 ffa0 	bl	800f3a0 <rcl_node_get_rmw_handle>
 800a460:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a464:	9300      	str	r3, [sp, #0]
 800a466:	9a07      	ldr	r2, [sp, #28]
 800a468:	6827      	ldr	r7, [r4, #0]
 800a46a:	462b      	mov	r3, r5
 800a46c:	4641      	mov	r1, r8
 800a46e:	f000 fa55 	bl	800a91c <rmw_create_publisher>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a478:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a47c:	b370      	cbz	r0, 800a4dc <rcl_publisher_init+0x108>
 800a47e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a482:	f000 fb29 	bl	800aad8 <rmw_publisher_get_actual_qos>
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	4607      	mov	r7, r0
 800a48a:	b9d0      	cbnz	r0, 800a4c2 <rcl_publisher_init+0xee>
 800a48c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a490:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a494:	4629      	mov	r1, r5
 800a496:	2270      	movs	r2, #112	@ 0x70
 800a498:	4618      	mov	r0, r3
 800a49a:	f009 fe68 	bl	801416e <memcpy>
 800a49e:	6832      	ldr	r2, [r6, #0]
 800a4a0:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a4a4:	9807      	ldr	r0, [sp, #28]
 800a4a6:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a4a8:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a4aa:	4798      	blx	r3
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	b008      	add	sp, #32
 800a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b4:	270b      	movs	r7, #11
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	b008      	add	sp, #32
 800a4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4be:	27c8      	movs	r7, #200	@ 0xc8
 800a4c0:	e7a1      	b.n	800a406 <rcl_publisher_init+0x32>
 800a4c2:	b18b      	cbz	r3, 800a4e8 <rcl_publisher_init+0x114>
 800a4c4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a4c8:	b142      	cbz	r2, 800a4dc <rcl_publisher_init+0x108>
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	f004 ff68 	bl	800f3a0 <rcl_node_get_rmw_handle>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a4d6:	f000 fb0f 	bl	800aaf8 <rmw_destroy_publisher>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a4de:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	4790      	blx	r2
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	2701      	movs	r7, #1
 800a4ea:	e7db      	b.n	800a4a4 <rcl_publisher_init+0xd0>
 800a4ec:	2867      	cmp	r0, #103	@ 0x67
 800a4ee:	d0d9      	beq.n	800a4a4 <rcl_publisher_init+0xd0>
 800a4f0:	2869      	cmp	r0, #105	@ 0x69
 800a4f2:	d003      	beq.n	800a4fc <rcl_publisher_init+0x128>
 800a4f4:	280a      	cmp	r0, #10
 800a4f6:	d1f7      	bne.n	800a4e8 <rcl_publisher_init+0x114>
 800a4f8:	270a      	movs	r7, #10
 800a4fa:	e7d3      	b.n	800a4a4 <rcl_publisher_init+0xd0>
 800a4fc:	2767      	movs	r7, #103	@ 0x67
 800a4fe:	e7d1      	b.n	800a4a4 <rcl_publisher_init+0xd0>

0800a500 <rcl_publisher_get_default_options>:
 800a500:	b570      	push	{r4, r5, r6, lr}
 800a502:	4d14      	ldr	r5, [pc, #80]	@ (800a554 <rcl_publisher_get_default_options+0x54>)
 800a504:	4914      	ldr	r1, [pc, #80]	@ (800a558 <rcl_publisher_get_default_options+0x58>)
 800a506:	b088      	sub	sp, #32
 800a508:	4604      	mov	r4, r0
 800a50a:	2250      	movs	r2, #80	@ 0x50
 800a50c:	4628      	mov	r0, r5
 800a50e:	f009 fe2e 	bl	801416e <memcpy>
 800a512:	a802      	add	r0, sp, #8
 800a514:	f000 f934 	bl	800a780 <rcutils_get_default_allocator>
 800a518:	f10d 0c08 	add.w	ip, sp, #8
 800a51c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a520:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a524:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a528:	466e      	mov	r6, sp
 800a52a:	f8dc 3000 	ldr.w	r3, [ip]
 800a52e:	f8ce 3000 	str.w	r3, [lr]
 800a532:	4630      	mov	r0, r6
 800a534:	f000 f974 	bl	800a820 <rmw_get_default_publisher_options>
 800a538:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a53c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a540:	e883 0003 	stmia.w	r3, {r0, r1}
 800a544:	2270      	movs	r2, #112	@ 0x70
 800a546:	4629      	mov	r1, r5
 800a548:	4620      	mov	r0, r4
 800a54a:	f009 fe10 	bl	801416e <memcpy>
 800a54e:	4620      	mov	r0, r4
 800a550:	b008      	add	sp, #32
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	2000c328 	.word	0x2000c328
 800a558:	08015048 	.word	0x08015048

0800a55c <rcl_publish>:
 800a55c:	b1f8      	cbz	r0, 800a59e <rcl_publish+0x42>
 800a55e:	6803      	ldr	r3, [r0, #0]
 800a560:	b570      	push	{r4, r5, r6, lr}
 800a562:	4604      	mov	r4, r0
 800a564:	b1b3      	cbz	r3, 800a594 <rcl_publish+0x38>
 800a566:	4616      	mov	r6, r2
 800a568:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a56c:	b192      	cbz	r2, 800a594 <rcl_publish+0x38>
 800a56e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a572:	460d      	mov	r5, r1
 800a574:	f004 fb2e 	bl	800ebd4 <rcl_context_is_valid>
 800a578:	b160      	cbz	r0, 800a594 <rcl_publish+0x38>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a580:	b140      	cbz	r0, 800a594 <rcl_publish+0x38>
 800a582:	b155      	cbz	r5, 800a59a <rcl_publish+0x3e>
 800a584:	4632      	mov	r2, r6
 800a586:	4629      	mov	r1, r5
 800a588:	f000 f968 	bl	800a85c <rmw_publish>
 800a58c:	3800      	subs	r0, #0
 800a58e:	bf18      	it	ne
 800a590:	2001      	movne	r0, #1
 800a592:	bd70      	pop	{r4, r5, r6, pc}
 800a594:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a598:	bd70      	pop	{r4, r5, r6, pc}
 800a59a:	200b      	movs	r0, #11
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a5a2:	4770      	bx	lr

0800a5a4 <rclc_support_init>:
 800a5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a8:	b086      	sub	sp, #24
 800a5aa:	b3b8      	cbz	r0, 800a61c <rclc_support_init+0x78>
 800a5ac:	461c      	mov	r4, r3
 800a5ae:	b3ab      	cbz	r3, 800a61c <rclc_support_init+0x78>
 800a5b0:	460f      	mov	r7, r1
 800a5b2:	4690      	mov	r8, r2
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	f004 fc61 	bl	800ee7c <rcl_get_zero_initialized_init_options>
 800a5ba:	f104 030c 	add.w	r3, r4, #12
 800a5be:	9005      	str	r0, [sp, #20]
 800a5c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a5c4:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a5c8:	a805      	add	r0, sp, #20
 800a5ca:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a5ce:	f004 fc57 	bl	800ee80 <rcl_init_options_init>
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	b9e0      	cbnz	r0, 800a610 <rclc_support_init+0x6c>
 800a5d6:	ad02      	add	r5, sp, #8
 800a5d8:	4628      	mov	r0, r5
 800a5da:	f004 faf1 	bl	800ebc0 <rcl_get_zero_initialized_context>
 800a5de:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a5e2:	4633      	mov	r3, r6
 800a5e4:	e886 0003 	stmia.w	r6, {r0, r1}
 800a5e8:	aa05      	add	r2, sp, #20
 800a5ea:	4641      	mov	r1, r8
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f004 fb57 	bl	800eca0 <rcl_init>
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	b9b8      	cbnz	r0, 800a626 <rclc_support_init+0x82>
 800a5f6:	60b4      	str	r4, [r6, #8]
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	f106 010c 	add.w	r1, r6, #12
 800a5fe:	2003      	movs	r0, #3
 800a600:	f004 ffc0 	bl	800f584 <rcl_clock_init>
 800a604:	4605      	mov	r5, r0
 800a606:	b970      	cbnz	r0, 800a626 <rclc_support_init+0x82>
 800a608:	a805      	add	r0, sp, #20
 800a60a:	f004 fc9f 	bl	800ef4c <rcl_init_options_fini>
 800a60e:	b108      	cbz	r0, 800a614 <rclc_support_init+0x70>
 800a610:	f000 f8ea 	bl	800a7e8 <rcutils_reset_error>
 800a614:	4628      	mov	r0, r5
 800a616:	b006      	add	sp, #24
 800a618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61c:	250b      	movs	r5, #11
 800a61e:	4628      	mov	r0, r5
 800a620:	b006      	add	sp, #24
 800a622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a626:	f000 f8df 	bl	800a7e8 <rcutils_reset_error>
 800a62a:	a805      	add	r0, sp, #20
 800a62c:	f004 fc8e 	bl	800ef4c <rcl_init_options_fini>
 800a630:	2800      	cmp	r0, #0
 800a632:	d0ef      	beq.n	800a614 <rclc_support_init+0x70>
 800a634:	e7ec      	b.n	800a610 <rclc_support_init+0x6c>
 800a636:	bf00      	nop

0800a638 <rclc_node_init_default>:
 800a638:	b3b8      	cbz	r0, 800a6aa <rclc_node_init_default+0x72>
 800a63a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a63e:	460d      	mov	r5, r1
 800a640:	b0a1      	sub	sp, #132	@ 0x84
 800a642:	b329      	cbz	r1, 800a690 <rclc_node_init_default+0x58>
 800a644:	4616      	mov	r6, r2
 800a646:	b31a      	cbz	r2, 800a690 <rclc_node_init_default+0x58>
 800a648:	461f      	mov	r7, r3
 800a64a:	b30b      	cbz	r3, 800a690 <rclc_node_init_default+0x58>
 800a64c:	f10d 0810 	add.w	r8, sp, #16
 800a650:	4604      	mov	r4, r0
 800a652:	4640      	mov	r0, r8
 800a654:	f004 fd32 	bl	800f0bc <rcl_get_zero_initialized_node>
 800a658:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a65c:	f10d 0918 	add.w	r9, sp, #24
 800a660:	e884 0003 	stmia.w	r4, {r0, r1}
 800a664:	4648      	mov	r0, r9
 800a666:	f004 fea1 	bl	800f3ac <rcl_node_get_default_options>
 800a66a:	4640      	mov	r0, r8
 800a66c:	f004 fd26 	bl	800f0bc <rcl_get_zero_initialized_node>
 800a670:	f8cd 9000 	str.w	r9, [sp]
 800a674:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a678:	463b      	mov	r3, r7
 800a67a:	e884 0003 	stmia.w	r4, {r0, r1}
 800a67e:	4632      	mov	r2, r6
 800a680:	4629      	mov	r1, r5
 800a682:	4620      	mov	r0, r4
 800a684:	f004 fd24 	bl	800f0d0 <rcl_node_init>
 800a688:	b930      	cbnz	r0, 800a698 <rclc_node_init_default+0x60>
 800a68a:	b021      	add	sp, #132	@ 0x84
 800a68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a690:	200b      	movs	r0, #11
 800a692:	b021      	add	sp, #132	@ 0x84
 800a694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a698:	9003      	str	r0, [sp, #12]
 800a69a:	f000 f8a5 	bl	800a7e8 <rcutils_reset_error>
 800a69e:	f000 f8a3 	bl	800a7e8 <rcutils_reset_error>
 800a6a2:	9803      	ldr	r0, [sp, #12]
 800a6a4:	b021      	add	sp, #132	@ 0x84
 800a6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6aa:	200b      	movs	r0, #11
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop

0800a6b0 <rclc_publisher_init_default>:
 800a6b0:	b368      	cbz	r0, 800a70e <rclc_publisher_init_default+0x5e>
 800a6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b6:	460d      	mov	r5, r1
 800a6b8:	b0a0      	sub	sp, #128	@ 0x80
 800a6ba:	b321      	cbz	r1, 800a706 <rclc_publisher_init_default+0x56>
 800a6bc:	4616      	mov	r6, r2
 800a6be:	b312      	cbz	r2, 800a706 <rclc_publisher_init_default+0x56>
 800a6c0:	461f      	mov	r7, r3
 800a6c2:	b303      	cbz	r3, 800a706 <rclc_publisher_init_default+0x56>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	f7ff fe7f 	bl	800a3c8 <rcl_get_zero_initialized_publisher>
 800a6ca:	f10d 0810 	add.w	r8, sp, #16
 800a6ce:	6020      	str	r0, [r4, #0]
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	f7ff ff15 	bl	800a500 <rcl_publisher_get_default_options>
 800a6d6:	490f      	ldr	r1, [pc, #60]	@ (800a714 <rclc_publisher_init_default+0x64>)
 800a6d8:	2250      	movs	r2, #80	@ 0x50
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f009 fd47 	bl	801416e <memcpy>
 800a6e0:	f8cd 8000 	str.w	r8, [sp]
 800a6e4:	463b      	mov	r3, r7
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	4629      	mov	r1, r5
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f7ff fe72 	bl	800a3d4 <rcl_publisher_init>
 800a6f0:	b910      	cbnz	r0, 800a6f8 <rclc_publisher_init_default+0x48>
 800a6f2:	b020      	add	sp, #128	@ 0x80
 800a6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6f8:	9003      	str	r0, [sp, #12]
 800a6fa:	f000 f875 	bl	800a7e8 <rcutils_reset_error>
 800a6fe:	9803      	ldr	r0, [sp, #12]
 800a700:	b020      	add	sp, #128	@ 0x80
 800a702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a706:	200b      	movs	r0, #11
 800a708:	b020      	add	sp, #128	@ 0x80
 800a70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a70e:	200b      	movs	r0, #11
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	08015098 	.word	0x08015098

0800a718 <__default_zero_allocate>:
 800a718:	f009 b8a0 	b.w	801385c <calloc>

0800a71c <__default_reallocate>:
 800a71c:	f009 ba2c 	b.w	8013b78 <realloc>

0800a720 <__default_deallocate>:
 800a720:	f009 b908 	b.w	8013934 <free>

0800a724 <__default_allocate>:
 800a724:	f009 b8fe 	b.w	8013924 <malloc>

0800a728 <rcutils_get_zero_initialized_allocator>:
 800a728:	b510      	push	{r4, lr}
 800a72a:	4c05      	ldr	r4, [pc, #20]	@ (800a740 <rcutils_get_zero_initialized_allocator+0x18>)
 800a72c:	4686      	mov	lr, r0
 800a72e:	4684      	mov	ip, r0
 800a730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a732:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	f8cc 3000 	str.w	r3, [ip]
 800a73c:	4670      	mov	r0, lr
 800a73e:	bd10      	pop	{r4, pc}
 800a740:	080150e8 	.word	0x080150e8

0800a744 <rcutils_set_default_allocator>:
 800a744:	b1a8      	cbz	r0, 800a772 <rcutils_set_default_allocator+0x2e>
 800a746:	6802      	ldr	r2, [r0, #0]
 800a748:	b1a2      	cbz	r2, 800a774 <rcutils_set_default_allocator+0x30>
 800a74a:	6841      	ldr	r1, [r0, #4]
 800a74c:	b1a1      	cbz	r1, 800a778 <rcutils_set_default_allocator+0x34>
 800a74e:	b410      	push	{r4}
 800a750:	68c4      	ldr	r4, [r0, #12]
 800a752:	b164      	cbz	r4, 800a76e <rcutils_set_default_allocator+0x2a>
 800a754:	6880      	ldr	r0, [r0, #8]
 800a756:	b138      	cbz	r0, 800a768 <rcutils_set_default_allocator+0x24>
 800a758:	4b08      	ldr	r3, [pc, #32]	@ (800a77c <rcutils_set_default_allocator+0x38>)
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	2200      	movs	r2, #0
 800a75e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a762:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a766:	2001      	movs	r0, #1
 800a768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	4620      	mov	r0, r4
 800a770:	e7fa      	b.n	800a768 <rcutils_set_default_allocator+0x24>
 800a772:	4770      	bx	lr
 800a774:	4610      	mov	r0, r2
 800a776:	4770      	bx	lr
 800a778:	4608      	mov	r0, r1
 800a77a:	4770      	bx	lr
 800a77c:	200000d4 	.word	0x200000d4

0800a780 <rcutils_get_default_allocator>:
 800a780:	b510      	push	{r4, lr}
 800a782:	4c05      	ldr	r4, [pc, #20]	@ (800a798 <rcutils_get_default_allocator+0x18>)
 800a784:	4686      	mov	lr, r0
 800a786:	4684      	mov	ip, r0
 800a788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a78a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	f8cc 3000 	str.w	r3, [ip]
 800a794:	4670      	mov	r0, lr
 800a796:	bd10      	pop	{r4, pc}
 800a798:	200000d4 	.word	0x200000d4

0800a79c <rcutils_allocator_is_valid>:
 800a79c:	b158      	cbz	r0, 800a7b6 <rcutils_allocator_is_valid+0x1a>
 800a79e:	6803      	ldr	r3, [r0, #0]
 800a7a0:	b143      	cbz	r3, 800a7b4 <rcutils_allocator_is_valid+0x18>
 800a7a2:	6843      	ldr	r3, [r0, #4]
 800a7a4:	b133      	cbz	r3, 800a7b4 <rcutils_allocator_is_valid+0x18>
 800a7a6:	68c3      	ldr	r3, [r0, #12]
 800a7a8:	b123      	cbz	r3, 800a7b4 <rcutils_allocator_is_valid+0x18>
 800a7aa:	6880      	ldr	r0, [r0, #8]
 800a7ac:	3800      	subs	r0, #0
 800a7ae:	bf18      	it	ne
 800a7b0:	2001      	movne	r0, #1
 800a7b2:	4770      	bx	lr
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <rcutils_get_error_string>:
 800a7b8:	4b06      	ldr	r3, [pc, #24]	@ (800a7d4 <rcutils_get_error_string+0x1c>)
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	b13b      	cbz	r3, 800a7ce <rcutils_get_error_string+0x16>
 800a7be:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <rcutils_get_error_string+0x20>)
 800a7c0:	781a      	ldrb	r2, [r3, #0]
 800a7c2:	b90a      	cbnz	r2, 800a7c8 <rcutils_get_error_string+0x10>
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	701a      	strb	r2, [r3, #0]
 800a7c8:	4b04      	ldr	r3, [pc, #16]	@ (800a7dc <rcutils_get_error_string+0x24>)
 800a7ca:	7818      	ldrb	r0, [r3, #0]
 800a7cc:	4770      	bx	lr
 800a7ce:	4b04      	ldr	r3, [pc, #16]	@ (800a7e0 <rcutils_get_error_string+0x28>)
 800a7d0:	7818      	ldrb	r0, [r3, #0]
 800a7d2:	4770      	bx	lr
 800a7d4:	2000c398 	.word	0x2000c398
 800a7d8:	2000c3b1 	.word	0x2000c3b1
 800a7dc:	2000c3b0 	.word	0x2000c3b0
 800a7e0:	080150fc 	.word	0x080150fc
 800a7e4:	00000000 	.word	0x00000000

0800a7e8 <rcutils_reset_error>:
 800a7e8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800a808 <rcutils_reset_error+0x20>
 800a7ec:	4a08      	ldr	r2, [pc, #32]	@ (800a810 <rcutils_reset_error+0x28>)
 800a7ee:	4809      	ldr	r0, [pc, #36]	@ (800a814 <rcutils_reset_error+0x2c>)
 800a7f0:	4909      	ldr	r1, [pc, #36]	@ (800a818 <rcutils_reset_error+0x30>)
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	8013      	strh	r3, [r2, #0]
 800a7f6:	ed82 7b02 	vstr	d7, [r2, #8]
 800a7fa:	4a08      	ldr	r2, [pc, #32]	@ (800a81c <rcutils_reset_error+0x34>)
 800a7fc:	7003      	strb	r3, [r0, #0]
 800a7fe:	700b      	strb	r3, [r1, #0]
 800a800:	7013      	strb	r3, [r2, #0]
 800a802:	4770      	bx	lr
 800a804:	f3af 8000 	nop.w
	...
 800a810:	2000c3a0 	.word	0x2000c3a0
 800a814:	2000c3b1 	.word	0x2000c3b1
 800a818:	2000c3b0 	.word	0x2000c3b0
 800a81c:	2000c398 	.word	0x2000c398

0800a820 <rmw_get_default_publisher_options>:
 800a820:	2200      	movs	r2, #0
 800a822:	6002      	str	r2, [r0, #0]
 800a824:	7102      	strb	r2, [r0, #4]
 800a826:	4770      	bx	lr

0800a828 <rmw_uros_set_custom_transport>:
 800a828:	b470      	push	{r4, r5, r6}
 800a82a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a82e:	b162      	cbz	r2, 800a84a <rmw_uros_set_custom_transport+0x22>
 800a830:	b15b      	cbz	r3, 800a84a <rmw_uros_set_custom_transport+0x22>
 800a832:	b155      	cbz	r5, 800a84a <rmw_uros_set_custom_transport+0x22>
 800a834:	b14e      	cbz	r6, 800a84a <rmw_uros_set_custom_transport+0x22>
 800a836:	4c06      	ldr	r4, [pc, #24]	@ (800a850 <rmw_uros_set_custom_transport+0x28>)
 800a838:	7020      	strb	r0, [r4, #0]
 800a83a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a83e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a842:	6166      	str	r6, [r4, #20]
 800a844:	2000      	movs	r0, #0
 800a846:	bc70      	pop	{r4, r5, r6}
 800a848:	4770      	bx	lr
 800a84a:	200b      	movs	r0, #11
 800a84c:	bc70      	pop	{r4, r5, r6}
 800a84e:	4770      	bx	lr
 800a850:	2000c3b4 	.word	0x2000c3b4

0800a854 <flush_session>:
 800a854:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800a856:	f002 bb3d 	b.w	800ced4 <uxr_run_session_until_confirm_delivery>
 800a85a:	bf00      	nop

0800a85c <rmw_publish>:
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d053      	beq.n	800a908 <rmw_publish+0xac>
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	460d      	mov	r5, r1
 800a864:	b08e      	sub	sp, #56	@ 0x38
 800a866:	2900      	cmp	r1, #0
 800a868:	d04b      	beq.n	800a902 <rmw_publish+0xa6>
 800a86a:	4604      	mov	r4, r0
 800a86c:	6800      	ldr	r0, [r0, #0]
 800a86e:	f000 fc47 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 800a872:	2800      	cmp	r0, #0
 800a874:	d045      	beq.n	800a902 <rmw_publish+0xa6>
 800a876:	6866      	ldr	r6, [r4, #4]
 800a878:	2e00      	cmp	r6, #0
 800a87a:	d042      	beq.n	800a902 <rmw_publish+0xa6>
 800a87c:	69b4      	ldr	r4, [r6, #24]
 800a87e:	4628      	mov	r0, r5
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	4798      	blx	r3
 800a884:	69f3      	ldr	r3, [r6, #28]
 800a886:	9005      	str	r0, [sp, #20]
 800a888:	b113      	cbz	r3, 800a890 <rmw_publish+0x34>
 800a88a:	a805      	add	r0, sp, #20
 800a88c:	4798      	blx	r3
 800a88e:	9805      	ldr	r0, [sp, #20]
 800a890:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	9000      	str	r0, [sp, #0]
 800a898:	6972      	ldr	r2, [r6, #20]
 800a89a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a89c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800a8a0:	ab06      	add	r3, sp, #24
 800a8a2:	f003 f903 	bl	800daac <uxr_prepare_output_stream>
 800a8a6:	b1d8      	cbz	r0, 800a8e0 <rmw_publish+0x84>
 800a8a8:	68a3      	ldr	r3, [r4, #8]
 800a8aa:	a906      	add	r1, sp, #24
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	4798      	blx	r3
 800a8b0:	6a33      	ldr	r3, [r6, #32]
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b10b      	cbz	r3, 800a8ba <rmw_publish+0x5e>
 800a8b6:	a806      	add	r0, sp, #24
 800a8b8:	4798      	blx	r3
 800a8ba:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a8c4:	d022      	beq.n	800a90c <rmw_publish+0xb0>
 800a8c6:	6918      	ldr	r0, [r3, #16]
 800a8c8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800a8ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a8ce:	f002 fb01 	bl	800ced4 <uxr_run_session_until_confirm_delivery>
 800a8d2:	4020      	ands	r0, r4
 800a8d4:	b2c4      	uxtb	r4, r0
 800a8d6:	f084 0001 	eor.w	r0, r4, #1
 800a8da:	b2c0      	uxtb	r0, r0
 800a8dc:	b00e      	add	sp, #56	@ 0x38
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800a8e4:	6918      	ldr	r0, [r3, #16]
 800a8e6:	9b05      	ldr	r3, [sp, #20]
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a918 <rmw_publish+0xbc>)
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	9602      	str	r6, [sp, #8]
 800a8f0:	6972      	ldr	r2, [r6, #20]
 800a8f2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800a8f4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a8f8:	ab06      	add	r3, sp, #24
 800a8fa:	f003 f907 	bl	800db0c <uxr_prepare_output_stream_fragmented>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d1d2      	bne.n	800a8a8 <rmw_publish+0x4c>
 800a902:	2001      	movs	r0, #1
 800a904:	b00e      	add	sp, #56	@ 0x38
 800a906:	bd70      	pop	{r4, r5, r6, pc}
 800a908:	2001      	movs	r0, #1
 800a90a:	4770      	bx	lr
 800a90c:	6918      	ldr	r0, [r3, #16]
 800a90e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800a912:	f001 ff59 	bl	800c7c8 <uxr_flash_output_streams>
 800a916:	e7de      	b.n	800a8d6 <rmw_publish+0x7a>
 800a918:	0800a855 	.word	0x0800a855

0800a91c <rmw_create_publisher>:
 800a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a920:	b087      	sub	sp, #28
 800a922:	2800      	cmp	r0, #0
 800a924:	f000 80cc 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a928:	460e      	mov	r6, r1
 800a92a:	2900      	cmp	r1, #0
 800a92c:	f000 80c8 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a930:	4604      	mov	r4, r0
 800a932:	6800      	ldr	r0, [r0, #0]
 800a934:	4615      	mov	r5, r2
 800a936:	4698      	mov	r8, r3
 800a938:	f000 fbe2 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 800a93c:	2800      	cmp	r0, #0
 800a93e:	f000 80bf 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a942:	2d00      	cmp	r5, #0
 800a944:	f000 80bc 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a948:	782b      	ldrb	r3, [r5, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 80b8 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a950:	f1b8 0f00 	cmp.w	r8, #0
 800a954:	f000 80b4 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a958:	485c      	ldr	r0, [pc, #368]	@ (800aacc <rmw_create_publisher+0x1b0>)
 800a95a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a95e:	f005 fb0f 	bl	800ff80 <get_memory>
 800a962:	2800      	cmp	r0, #0
 800a964:	f000 80ac 	beq.w	800aac0 <rmw_create_publisher+0x1a4>
 800a968:	6884      	ldr	r4, [r0, #8]
 800a96a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800a96e:	f005 fb2b 	bl	800ffc8 <rmw_get_implementation_identifier>
 800a972:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800a976:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800a97a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800a97e:	4628      	mov	r0, r5
 800a980:	f7f5 fc50 	bl	8000224 <strlen>
 800a984:	3001      	adds	r0, #1
 800a986:	283c      	cmp	r0, #60	@ 0x3c
 800a988:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800a98c:	f200 8091 	bhi.w	800aab2 <rmw_create_publisher+0x196>
 800a990:	4a4f      	ldr	r2, [pc, #316]	@ (800aad0 <rmw_create_publisher+0x1b4>)
 800a992:	462b      	mov	r3, r5
 800a994:	213c      	movs	r1, #60	@ 0x3c
 800a996:	4650      	mov	r0, sl
 800a998:	f009 fa70 	bl	8013e7c <sniprintf>
 800a99c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a9a0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800a9a2:	4641      	mov	r1, r8
 800a9a4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800a9a8:	2250      	movs	r2, #80	@ 0x50
 800a9aa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800a9ae:	f009 fbde 	bl	801416e <memcpy>
 800a9b2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a9b6:	4947      	ldr	r1, [pc, #284]	@ (800aad4 <rmw_create_publisher+0x1b8>)
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9be:	bf0c      	ite	eq
 800a9c0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800a9c4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800a9c8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	f000 fba3 	bl	800b11c <get_message_typesupport_handle>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d06b      	beq.n	800aab2 <rmw_create_publisher+0x196>
 800a9da:	6842      	ldr	r2, [r0, #4]
 800a9dc:	61a2      	str	r2, [r4, #24]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d067      	beq.n	800aab2 <rmw_create_publisher+0x196>
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	4643      	mov	r3, r8
 800a9e6:	4648      	mov	r0, r9
 800a9e8:	f005 fd7e 	bl	80104e8 <create_topic>
 800a9ec:	6260      	str	r0, [r4, #36]	@ 0x24
 800a9ee:	2800      	cmp	r0, #0
 800a9f0:	d063      	beq.n	800aaba <rmw_create_publisher+0x19e>
 800a9f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9fa:	2103      	movs	r1, #3
 800a9fc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800aa00:	1c42      	adds	r2, r0, #1
 800aa02:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800aa06:	f001 fd91 	bl	800c52c <uxr_object_id>
 800aa0a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800aa0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa12:	6120      	str	r0, [r4, #16]
 800aa14:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800aa18:	6910      	ldr	r0, [r2, #16]
 800aa1a:	2506      	movs	r5, #6
 800aa1c:	9500      	str	r5, [sp, #0]
 800aa1e:	6819      	ldr	r1, [r3, #0]
 800aa20:	6922      	ldr	r2, [r4, #16]
 800aa22:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800aa26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800aa2a:	f001 fcd9 	bl	800c3e0 <uxr_buffer_create_publisher_bin>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aa34:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aa38:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aa3c:	f000 fae0 	bl	800b000 <run_xrce_session>
 800aa40:	b3b8      	cbz	r0, 800aab2 <rmw_create_publisher+0x196>
 800aa42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa4a:	2105      	movs	r1, #5
 800aa4c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800aa50:	1c42      	adds	r2, r0, #1
 800aa52:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800aa56:	f001 fd69 	bl	800c52c <uxr_object_id>
 800aa5a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800aa5e:	6160      	str	r0, [r4, #20]
 800aa60:	691e      	ldr	r6, [r3, #16]
 800aa62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa66:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800aa6a:	f10d 0a10 	add.w	sl, sp, #16
 800aa6e:	4641      	mov	r1, r8
 800aa70:	4650      	mov	r0, sl
 800aa72:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800aa76:	f000 fadf 	bl	800b038 <convert_qos_profile>
 800aa7a:	9503      	str	r5, [sp, #12]
 800aa7c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800aa80:	9001      	str	r0, [sp, #4]
 800aa82:	f8ad 1008 	strh.w	r1, [sp, #8]
 800aa86:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800aa90:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800aa94:	f8d8 1000 	ldr.w	r1, [r8]
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f001 fcd1 	bl	800c440 <uxr_buffer_create_datawriter_bin>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800aaa4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800aaa8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800aaac:	f000 faa8 	bl	800b000 <run_xrce_session>
 800aab0:	b938      	cbnz	r0, 800aac2 <rmw_create_publisher+0x1a6>
 800aab2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800aab4:	b108      	cbz	r0, 800aaba <rmw_create_publisher+0x19e>
 800aab6:	f000 fa47 	bl	800af48 <rmw_uxrce_fini_topic_memory>
 800aaba:	4638      	mov	r0, r7
 800aabc:	f000 f9ec 	bl	800ae98 <rmw_uxrce_fini_publisher_memory>
 800aac0:	2700      	movs	r7, #0
 800aac2:	4638      	mov	r0, r7
 800aac4:	b007      	add	sp, #28
 800aac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaca:	bf00      	nop
 800aacc:	20010cac 	.word	0x20010cac
 800aad0:	08015134 	.word	0x08015134
 800aad4:	08015100 	.word	0x08015100

0800aad8 <rmw_publisher_get_actual_qos>:
 800aad8:	b150      	cbz	r0, 800aaf0 <rmw_publisher_get_actual_qos+0x18>
 800aada:	b508      	push	{r3, lr}
 800aadc:	460b      	mov	r3, r1
 800aade:	b149      	cbz	r1, 800aaf4 <rmw_publisher_get_actual_qos+0x1c>
 800aae0:	6841      	ldr	r1, [r0, #4]
 800aae2:	2250      	movs	r2, #80	@ 0x50
 800aae4:	3128      	adds	r1, #40	@ 0x28
 800aae6:	4618      	mov	r0, r3
 800aae8:	f009 fb41 	bl	801416e <memcpy>
 800aaec:	2000      	movs	r0, #0
 800aaee:	bd08      	pop	{r3, pc}
 800aaf0:	200b      	movs	r0, #11
 800aaf2:	4770      	bx	lr
 800aaf4:	200b      	movs	r0, #11
 800aaf6:	bd08      	pop	{r3, pc}

0800aaf8 <rmw_destroy_publisher>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	b128      	cbz	r0, 800ab08 <rmw_destroy_publisher+0x10>
 800aafc:	4604      	mov	r4, r0
 800aafe:	6800      	ldr	r0, [r0, #0]
 800ab00:	460d      	mov	r5, r1
 800ab02:	f000 fafd 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 800ab06:	b910      	cbnz	r0, 800ab0e <rmw_destroy_publisher+0x16>
 800ab08:	2401      	movs	r4, #1
 800ab0a:	4620      	mov	r0, r4
 800ab0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab0e:	6863      	ldr	r3, [r4, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d0f9      	beq.n	800ab08 <rmw_destroy_publisher+0x10>
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	d0f7      	beq.n	800ab08 <rmw_destroy_publisher+0x10>
 800ab18:	6828      	ldr	r0, [r5, #0]
 800ab1a:	f000 faf1 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d0f2      	beq.n	800ab08 <rmw_destroy_publisher+0x10>
 800ab22:	686c      	ldr	r4, [r5, #4]
 800ab24:	2c00      	cmp	r4, #0
 800ab26:	d0ef      	beq.n	800ab08 <rmw_destroy_publisher+0x10>
 800ab28:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ab2a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800ab2e:	f005 fd2b 	bl	8010588 <destroy_topic>
 800ab32:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ab36:	6962      	ldr	r2, [r4, #20]
 800ab38:	6918      	ldr	r0, [r3, #16]
 800ab3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ab3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ab42:	6819      	ldr	r1, [r3, #0]
 800ab44:	f001 fb98 	bl	800c278 <uxr_buffer_delete_entity>
 800ab48:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ab4c:	6922      	ldr	r2, [r4, #16]
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ab54:	4604      	mov	r4, r0
 800ab56:	6809      	ldr	r1, [r1, #0]
 800ab58:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ab5c:	f001 fb8c 	bl	800c278 <uxr_buffer_delete_entity>
 800ab60:	693e      	ldr	r6, [r7, #16]
 800ab62:	4622      	mov	r2, r4
 800ab64:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ab68:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f000 fa46 	bl	800b000 <run_xrce_session>
 800ab74:	693e      	ldr	r6, [r7, #16]
 800ab76:	4622      	mov	r2, r4
 800ab78:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ab7c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ab80:	4604      	mov	r4, r0
 800ab82:	4630      	mov	r0, r6
 800ab84:	f000 fa3c 	bl	800b000 <run_xrce_session>
 800ab88:	b12c      	cbz	r4, 800ab96 <rmw_destroy_publisher+0x9e>
 800ab8a:	b120      	cbz	r0, 800ab96 <rmw_destroy_publisher+0x9e>
 800ab8c:	2400      	movs	r4, #0
 800ab8e:	4628      	mov	r0, r5
 800ab90:	f000 f982 	bl	800ae98 <rmw_uxrce_fini_publisher_memory>
 800ab94:	e7b9      	b.n	800ab0a <rmw_destroy_publisher+0x12>
 800ab96:	2402      	movs	r4, #2
 800ab98:	e7f9      	b.n	800ab8e <rmw_destroy_publisher+0x96>
 800ab9a:	bf00      	nop

0800ab9c <rmw_uxrce_init_service_memory>:
 800ab9c:	b1e2      	cbz	r2, 800abd8 <rmw_uxrce_init_service_memory+0x3c>
 800ab9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba2:	7b05      	ldrb	r5, [r0, #12]
 800aba4:	4606      	mov	r6, r0
 800aba6:	b9ad      	cbnz	r5, 800abd4 <rmw_uxrce_init_service_memory+0x38>
 800aba8:	23c8      	movs	r3, #200	@ 0xc8
 800abaa:	e9c0 5500 	strd	r5, r5, [r0]
 800abae:	6083      	str	r3, [r0, #8]
 800abb0:	f240 1301 	movw	r3, #257	@ 0x101
 800abb4:	4617      	mov	r7, r2
 800abb6:	8183      	strh	r3, [r0, #12]
 800abb8:	460c      	mov	r4, r1
 800abba:	46a8      	mov	r8, r5
 800abbc:	4621      	mov	r1, r4
 800abbe:	4630      	mov	r0, r6
 800abc0:	3501      	adds	r5, #1
 800abc2:	f005 f9ed 	bl	800ffa0 <put_memory>
 800abc6:	42af      	cmp	r7, r5
 800abc8:	60a4      	str	r4, [r4, #8]
 800abca:	f884 800c 	strb.w	r8, [r4, #12]
 800abce:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800abd2:	d1f3      	bne.n	800abbc <rmw_uxrce_init_service_memory+0x20>
 800abd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop

0800abdc <rmw_uxrce_init_client_memory>:
 800abdc:	b1e2      	cbz	r2, 800ac18 <rmw_uxrce_init_client_memory+0x3c>
 800abde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	7b05      	ldrb	r5, [r0, #12]
 800abe4:	4606      	mov	r6, r0
 800abe6:	b9ad      	cbnz	r5, 800ac14 <rmw_uxrce_init_client_memory+0x38>
 800abe8:	23c8      	movs	r3, #200	@ 0xc8
 800abea:	e9c0 5500 	strd	r5, r5, [r0]
 800abee:	6083      	str	r3, [r0, #8]
 800abf0:	f240 1301 	movw	r3, #257	@ 0x101
 800abf4:	4617      	mov	r7, r2
 800abf6:	8183      	strh	r3, [r0, #12]
 800abf8:	460c      	mov	r4, r1
 800abfa:	46a8      	mov	r8, r5
 800abfc:	4621      	mov	r1, r4
 800abfe:	4630      	mov	r0, r6
 800ac00:	3501      	adds	r5, #1
 800ac02:	f005 f9cd 	bl	800ffa0 <put_memory>
 800ac06:	42af      	cmp	r7, r5
 800ac08:	60a4      	str	r4, [r4, #8]
 800ac0a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac0e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ac12:	d1f3      	bne.n	800abfc <rmw_uxrce_init_client_memory+0x20>
 800ac14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop

0800ac1c <rmw_uxrce_init_publisher_memory>:
 800ac1c:	b1e2      	cbz	r2, 800ac58 <rmw_uxrce_init_publisher_memory+0x3c>
 800ac1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac22:	7b05      	ldrb	r5, [r0, #12]
 800ac24:	4606      	mov	r6, r0
 800ac26:	b9ad      	cbnz	r5, 800ac54 <rmw_uxrce_init_publisher_memory+0x38>
 800ac28:	23d8      	movs	r3, #216	@ 0xd8
 800ac2a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac2e:	6083      	str	r3, [r0, #8]
 800ac30:	f240 1301 	movw	r3, #257	@ 0x101
 800ac34:	4617      	mov	r7, r2
 800ac36:	8183      	strh	r3, [r0, #12]
 800ac38:	460c      	mov	r4, r1
 800ac3a:	46a8      	mov	r8, r5
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	4630      	mov	r0, r6
 800ac40:	3501      	adds	r5, #1
 800ac42:	f005 f9ad 	bl	800ffa0 <put_memory>
 800ac46:	42af      	cmp	r7, r5
 800ac48:	60a4      	str	r4, [r4, #8]
 800ac4a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac4e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ac52:	d1f3      	bne.n	800ac3c <rmw_uxrce_init_publisher_memory+0x20>
 800ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop

0800ac5c <rmw_uxrce_init_subscription_memory>:
 800ac5c:	b1e2      	cbz	r2, 800ac98 <rmw_uxrce_init_subscription_memory+0x3c>
 800ac5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac62:	7b05      	ldrb	r5, [r0, #12]
 800ac64:	4606      	mov	r6, r0
 800ac66:	b9ad      	cbnz	r5, 800ac94 <rmw_uxrce_init_subscription_memory+0x38>
 800ac68:	23d8      	movs	r3, #216	@ 0xd8
 800ac6a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac6e:	6083      	str	r3, [r0, #8]
 800ac70:	f240 1301 	movw	r3, #257	@ 0x101
 800ac74:	4617      	mov	r7, r2
 800ac76:	8183      	strh	r3, [r0, #12]
 800ac78:	460c      	mov	r4, r1
 800ac7a:	46a8      	mov	r8, r5
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	4630      	mov	r0, r6
 800ac80:	3501      	adds	r5, #1
 800ac82:	f005 f98d 	bl	800ffa0 <put_memory>
 800ac86:	42af      	cmp	r7, r5
 800ac88:	60a4      	str	r4, [r4, #8]
 800ac8a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac8e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ac92:	d1f3      	bne.n	800ac7c <rmw_uxrce_init_subscription_memory+0x20>
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop

0800ac9c <rmw_uxrce_init_node_memory>:
 800ac9c:	b1e2      	cbz	r2, 800acd8 <rmw_uxrce_init_node_memory+0x3c>
 800ac9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca2:	7b05      	ldrb	r5, [r0, #12]
 800aca4:	4606      	mov	r6, r0
 800aca6:	b9ad      	cbnz	r5, 800acd4 <rmw_uxrce_init_node_memory+0x38>
 800aca8:	23a4      	movs	r3, #164	@ 0xa4
 800acaa:	e9c0 5500 	strd	r5, r5, [r0]
 800acae:	6083      	str	r3, [r0, #8]
 800acb0:	f240 1301 	movw	r3, #257	@ 0x101
 800acb4:	4617      	mov	r7, r2
 800acb6:	8183      	strh	r3, [r0, #12]
 800acb8:	460c      	mov	r4, r1
 800acba:	46a8      	mov	r8, r5
 800acbc:	4621      	mov	r1, r4
 800acbe:	4630      	mov	r0, r6
 800acc0:	3501      	adds	r5, #1
 800acc2:	f005 f96d 	bl	800ffa0 <put_memory>
 800acc6:	42af      	cmp	r7, r5
 800acc8:	60a4      	str	r4, [r4, #8]
 800acca:	f884 800c 	strb.w	r8, [r4, #12]
 800acce:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800acd2:	d1f3      	bne.n	800acbc <rmw_uxrce_init_node_memory+0x20>
 800acd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop

0800acdc <rmw_uxrce_init_session_memory>:
 800acdc:	b1ea      	cbz	r2, 800ad1a <rmw_uxrce_init_session_memory+0x3e>
 800acde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace2:	7b05      	ldrb	r5, [r0, #12]
 800ace4:	4606      	mov	r6, r0
 800ace6:	b9b5      	cbnz	r5, 800ad16 <rmw_uxrce_init_session_memory+0x3a>
 800ace8:	e9c0 5500 	strd	r5, r5, [r0]
 800acec:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800acf0:	f240 1301 	movw	r3, #257	@ 0x101
 800acf4:	4617      	mov	r7, r2
 800acf6:	f8c0 8008 	str.w	r8, [r0, #8]
 800acfa:	460c      	mov	r4, r1
 800acfc:	8183      	strh	r3, [r0, #12]
 800acfe:	46a9      	mov	r9, r5
 800ad00:	4621      	mov	r1, r4
 800ad02:	4630      	mov	r0, r6
 800ad04:	3501      	adds	r5, #1
 800ad06:	f005 f94b 	bl	800ffa0 <put_memory>
 800ad0a:	42af      	cmp	r7, r5
 800ad0c:	60a4      	str	r4, [r4, #8]
 800ad0e:	f884 900c 	strb.w	r9, [r4, #12]
 800ad12:	4444      	add	r4, r8
 800ad14:	d1f4      	bne.n	800ad00 <rmw_uxrce_init_session_memory+0x24>
 800ad16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	4770      	bx	lr

0800ad1c <rmw_uxrce_init_topic_memory>:
 800ad1c:	b1e2      	cbz	r2, 800ad58 <rmw_uxrce_init_topic_memory+0x3c>
 800ad1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	7b05      	ldrb	r5, [r0, #12]
 800ad24:	4606      	mov	r6, r0
 800ad26:	b9ad      	cbnz	r5, 800ad54 <rmw_uxrce_init_topic_memory+0x38>
 800ad28:	231c      	movs	r3, #28
 800ad2a:	e9c0 5500 	strd	r5, r5, [r0]
 800ad2e:	6083      	str	r3, [r0, #8]
 800ad30:	f240 1301 	movw	r3, #257	@ 0x101
 800ad34:	4617      	mov	r7, r2
 800ad36:	8183      	strh	r3, [r0, #12]
 800ad38:	460c      	mov	r4, r1
 800ad3a:	46a8      	mov	r8, r5
 800ad3c:	4621      	mov	r1, r4
 800ad3e:	4630      	mov	r0, r6
 800ad40:	3501      	adds	r5, #1
 800ad42:	f005 f92d 	bl	800ffa0 <put_memory>
 800ad46:	42af      	cmp	r7, r5
 800ad48:	60a4      	str	r4, [r4, #8]
 800ad4a:	f884 800c 	strb.w	r8, [r4, #12]
 800ad4e:	f104 041c 	add.w	r4, r4, #28
 800ad52:	d1f3      	bne.n	800ad3c <rmw_uxrce_init_topic_memory+0x20>
 800ad54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop

0800ad5c <rmw_uxrce_init_static_input_buffer_memory>:
 800ad5c:	b1ea      	cbz	r2, 800ad9a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ad5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	7b05      	ldrb	r5, [r0, #12]
 800ad64:	4606      	mov	r6, r0
 800ad66:	b9b5      	cbnz	r5, 800ad96 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ad68:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ad6c:	e9c0 5500 	strd	r5, r5, [r0]
 800ad70:	6083      	str	r3, [r0, #8]
 800ad72:	f240 1301 	movw	r3, #257	@ 0x101
 800ad76:	4617      	mov	r7, r2
 800ad78:	8183      	strh	r3, [r0, #12]
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	46a8      	mov	r8, r5
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4630      	mov	r0, r6
 800ad82:	3501      	adds	r5, #1
 800ad84:	f005 f90c 	bl	800ffa0 <put_memory>
 800ad88:	42af      	cmp	r7, r5
 800ad8a:	60a4      	str	r4, [r4, #8]
 800ad8c:	f884 800c 	strb.w	r8, [r4, #12]
 800ad90:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ad94:	d1f3      	bne.n	800ad7e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ad96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9a:	4770      	bx	lr

0800ad9c <rmw_uxrce_init_init_options_impl_memory>:
 800ad9c:	b1e2      	cbz	r2, 800add8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada2:	7b05      	ldrb	r5, [r0, #12]
 800ada4:	4606      	mov	r6, r0
 800ada6:	b9ad      	cbnz	r5, 800add4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ada8:	232c      	movs	r3, #44	@ 0x2c
 800adaa:	e9c0 5500 	strd	r5, r5, [r0]
 800adae:	6083      	str	r3, [r0, #8]
 800adb0:	f240 1301 	movw	r3, #257	@ 0x101
 800adb4:	4617      	mov	r7, r2
 800adb6:	8183      	strh	r3, [r0, #12]
 800adb8:	460c      	mov	r4, r1
 800adba:	46a8      	mov	r8, r5
 800adbc:	4621      	mov	r1, r4
 800adbe:	4630      	mov	r0, r6
 800adc0:	3501      	adds	r5, #1
 800adc2:	f005 f8ed 	bl	800ffa0 <put_memory>
 800adc6:	42af      	cmp	r7, r5
 800adc8:	60a4      	str	r4, [r4, #8]
 800adca:	f884 800c 	strb.w	r8, [r4, #12]
 800adce:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800add2:	d1f3      	bne.n	800adbc <rmw_uxrce_init_init_options_impl_memory+0x20>
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop

0800addc <rmw_uxrce_init_wait_set_memory>:
 800addc:	b1e2      	cbz	r2, 800ae18 <rmw_uxrce_init_wait_set_memory+0x3c>
 800adde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade2:	7b05      	ldrb	r5, [r0, #12]
 800ade4:	4606      	mov	r6, r0
 800ade6:	b9ad      	cbnz	r5, 800ae14 <rmw_uxrce_init_wait_set_memory+0x38>
 800ade8:	231c      	movs	r3, #28
 800adea:	e9c0 5500 	strd	r5, r5, [r0]
 800adee:	6083      	str	r3, [r0, #8]
 800adf0:	f240 1301 	movw	r3, #257	@ 0x101
 800adf4:	4617      	mov	r7, r2
 800adf6:	8183      	strh	r3, [r0, #12]
 800adf8:	460c      	mov	r4, r1
 800adfa:	46a8      	mov	r8, r5
 800adfc:	4621      	mov	r1, r4
 800adfe:	4630      	mov	r0, r6
 800ae00:	3501      	adds	r5, #1
 800ae02:	f005 f8cd 	bl	800ffa0 <put_memory>
 800ae06:	42af      	cmp	r7, r5
 800ae08:	60a4      	str	r4, [r4, #8]
 800ae0a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae0e:	f104 041c 	add.w	r4, r4, #28
 800ae12:	d1f3      	bne.n	800adfc <rmw_uxrce_init_wait_set_memory+0x20>
 800ae14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop

0800ae1c <rmw_uxrce_init_guard_condition_memory>:
 800ae1c:	b1e2      	cbz	r2, 800ae58 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800ae1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae22:	7b05      	ldrb	r5, [r0, #12]
 800ae24:	4606      	mov	r6, r0
 800ae26:	b9ad      	cbnz	r5, 800ae54 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ae28:	2320      	movs	r3, #32
 800ae2a:	e9c0 5500 	strd	r5, r5, [r0]
 800ae2e:	6083      	str	r3, [r0, #8]
 800ae30:	f240 1301 	movw	r3, #257	@ 0x101
 800ae34:	4617      	mov	r7, r2
 800ae36:	8183      	strh	r3, [r0, #12]
 800ae38:	460c      	mov	r4, r1
 800ae3a:	46a8      	mov	r8, r5
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	4630      	mov	r0, r6
 800ae40:	3501      	adds	r5, #1
 800ae42:	f005 f8ad 	bl	800ffa0 <put_memory>
 800ae46:	42af      	cmp	r7, r5
 800ae48:	60a4      	str	r4, [r4, #8]
 800ae4a:	f884 800c 	strb.w	r8, [r4, #12]
 800ae4e:	f104 0420 	add.w	r4, r4, #32
 800ae52:	d1f3      	bne.n	800ae3c <rmw_uxrce_init_guard_condition_memory+0x20>
 800ae54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop

0800ae5c <rmw_uxrce_fini_session_memory>:
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	4801      	ldr	r0, [pc, #4]	@ (800ae64 <rmw_uxrce_fini_session_memory+0x8>)
 800ae60:	f005 b89e 	b.w	800ffa0 <put_memory>
 800ae64:	20010ccc 	.word	0x20010ccc

0800ae68 <rmw_uxrce_fini_node_memory>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	6800      	ldr	r0, [r0, #0]
 800ae6e:	b128      	cbz	r0, 800ae7c <rmw_uxrce_fini_node_memory+0x14>
 800ae70:	4b07      	ldr	r3, [pc, #28]	@ (800ae90 <rmw_uxrce_fini_node_memory+0x28>)
 800ae72:	6819      	ldr	r1, [r3, #0]
 800ae74:	f7f5 f9cc 	bl	8000210 <strcmp>
 800ae78:	b940      	cbnz	r0, 800ae8c <rmw_uxrce_fini_node_memory+0x24>
 800ae7a:	6020      	str	r0, [r4, #0]
 800ae7c:	6861      	ldr	r1, [r4, #4]
 800ae7e:	b129      	cbz	r1, 800ae8c <rmw_uxrce_fini_node_memory+0x24>
 800ae80:	2500      	movs	r5, #0
 800ae82:	4804      	ldr	r0, [pc, #16]	@ (800ae94 <rmw_uxrce_fini_node_memory+0x2c>)
 800ae84:	610d      	str	r5, [r1, #16]
 800ae86:	f005 f88b 	bl	800ffa0 <put_memory>
 800ae8a:	6065      	str	r5, [r4, #4]
 800ae8c:	bd38      	pop	{r3, r4, r5, pc}
 800ae8e:	bf00      	nop
 800ae90:	0801563c 	.word	0x0801563c
 800ae94:	20010c9c 	.word	0x20010c9c

0800ae98 <rmw_uxrce_fini_publisher_memory>:
 800ae98:	b510      	push	{r4, lr}
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	6800      	ldr	r0, [r0, #0]
 800ae9e:	b128      	cbz	r0, 800aeac <rmw_uxrce_fini_publisher_memory+0x14>
 800aea0:	4b06      	ldr	r3, [pc, #24]	@ (800aebc <rmw_uxrce_fini_publisher_memory+0x24>)
 800aea2:	6819      	ldr	r1, [r3, #0]
 800aea4:	f7f5 f9b4 	bl	8000210 <strcmp>
 800aea8:	b938      	cbnz	r0, 800aeba <rmw_uxrce_fini_publisher_memory+0x22>
 800aeaa:	6020      	str	r0, [r4, #0]
 800aeac:	6861      	ldr	r1, [r4, #4]
 800aeae:	b121      	cbz	r1, 800aeba <rmw_uxrce_fini_publisher_memory+0x22>
 800aeb0:	4803      	ldr	r0, [pc, #12]	@ (800aec0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800aeb2:	f005 f875 	bl	800ffa0 <put_memory>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	6063      	str	r3, [r4, #4]
 800aeba:	bd10      	pop	{r4, pc}
 800aebc:	0801563c 	.word	0x0801563c
 800aec0:	20010cac 	.word	0x20010cac

0800aec4 <rmw_uxrce_fini_subscription_memory>:
 800aec4:	b510      	push	{r4, lr}
 800aec6:	4604      	mov	r4, r0
 800aec8:	6800      	ldr	r0, [r0, #0]
 800aeca:	b128      	cbz	r0, 800aed8 <rmw_uxrce_fini_subscription_memory+0x14>
 800aecc:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800aece:	6819      	ldr	r1, [r3, #0]
 800aed0:	f7f5 f99e 	bl	8000210 <strcmp>
 800aed4:	b938      	cbnz	r0, 800aee6 <rmw_uxrce_fini_subscription_memory+0x22>
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	6861      	ldr	r1, [r4, #4]
 800aeda:	b121      	cbz	r1, 800aee6 <rmw_uxrce_fini_subscription_memory+0x22>
 800aedc:	4803      	ldr	r0, [pc, #12]	@ (800aeec <rmw_uxrce_fini_subscription_memory+0x28>)
 800aede:	f005 f85f 	bl	800ffa0 <put_memory>
 800aee2:	2300      	movs	r3, #0
 800aee4:	6063      	str	r3, [r4, #4]
 800aee6:	bd10      	pop	{r4, pc}
 800aee8:	0801563c 	.word	0x0801563c
 800aeec:	20010cec 	.word	0x20010cec

0800aef0 <rmw_uxrce_fini_service_memory>:
 800aef0:	b510      	push	{r4, lr}
 800aef2:	4604      	mov	r4, r0
 800aef4:	6800      	ldr	r0, [r0, #0]
 800aef6:	b128      	cbz	r0, 800af04 <rmw_uxrce_fini_service_memory+0x14>
 800aef8:	4b06      	ldr	r3, [pc, #24]	@ (800af14 <rmw_uxrce_fini_service_memory+0x24>)
 800aefa:	6819      	ldr	r1, [r3, #0]
 800aefc:	f7f5 f988 	bl	8000210 <strcmp>
 800af00:	b938      	cbnz	r0, 800af12 <rmw_uxrce_fini_service_memory+0x22>
 800af02:	6020      	str	r0, [r4, #0]
 800af04:	6861      	ldr	r1, [r4, #4]
 800af06:	b121      	cbz	r1, 800af12 <rmw_uxrce_fini_service_memory+0x22>
 800af08:	4803      	ldr	r0, [pc, #12]	@ (800af18 <rmw_uxrce_fini_service_memory+0x28>)
 800af0a:	f005 f849 	bl	800ffa0 <put_memory>
 800af0e:	2300      	movs	r3, #0
 800af10:	6063      	str	r3, [r4, #4]
 800af12:	bd10      	pop	{r4, pc}
 800af14:	0801563c 	.word	0x0801563c
 800af18:	20010cbc 	.word	0x20010cbc

0800af1c <rmw_uxrce_fini_client_memory>:
 800af1c:	b510      	push	{r4, lr}
 800af1e:	4604      	mov	r4, r0
 800af20:	6800      	ldr	r0, [r0, #0]
 800af22:	b128      	cbz	r0, 800af30 <rmw_uxrce_fini_client_memory+0x14>
 800af24:	4b06      	ldr	r3, [pc, #24]	@ (800af40 <rmw_uxrce_fini_client_memory+0x24>)
 800af26:	6819      	ldr	r1, [r3, #0]
 800af28:	f7f5 f972 	bl	8000210 <strcmp>
 800af2c:	b938      	cbnz	r0, 800af3e <rmw_uxrce_fini_client_memory+0x22>
 800af2e:	6020      	str	r0, [r4, #0]
 800af30:	6861      	ldr	r1, [r4, #4]
 800af32:	b121      	cbz	r1, 800af3e <rmw_uxrce_fini_client_memory+0x22>
 800af34:	4803      	ldr	r0, [pc, #12]	@ (800af44 <rmw_uxrce_fini_client_memory+0x28>)
 800af36:	f005 f833 	bl	800ffa0 <put_memory>
 800af3a:	2300      	movs	r3, #0
 800af3c:	6063      	str	r3, [r4, #4]
 800af3e:	bd10      	pop	{r4, pc}
 800af40:	0801563c 	.word	0x0801563c
 800af44:	2000c3d0 	.word	0x2000c3d0

0800af48 <rmw_uxrce_fini_topic_memory>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	4604      	mov	r4, r0
 800af4c:	4621      	mov	r1, r4
 800af4e:	4803      	ldr	r0, [pc, #12]	@ (800af5c <rmw_uxrce_fini_topic_memory+0x14>)
 800af50:	f005 f826 	bl	800ffa0 <put_memory>
 800af54:	2300      	movs	r3, #0
 800af56:	61a3      	str	r3, [r4, #24]
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	bf00      	nop
 800af5c:	20010cfc 	.word	0x20010cfc

0800af60 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800af60:	b082      	sub	sp, #8
 800af62:	b530      	push	{r4, r5, lr}
 800af64:	4925      	ldr	r1, [pc, #148]	@ (800affc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800af66:	680d      	ldr	r5, [r1, #0]
 800af68:	ac03      	add	r4, sp, #12
 800af6a:	e884 000c 	stmia.w	r4, {r2, r3}
 800af6e:	461c      	mov	r4, r3
 800af70:	2d00      	cmp	r5, #0
 800af72:	d041      	beq.n	800aff8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800af74:	462b      	mov	r3, r5
 800af76:	2100      	movs	r1, #0
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800af80:	4290      	cmp	r0, r2
 800af82:	bf08      	it	eq
 800af84:	3101      	addeq	r1, #1
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f6      	bne.n	800af78 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800af8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d029      	beq.n	800afe6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800af92:	d907      	bls.n	800afa4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800af94:	2b03      	cmp	r3, #3
 800af96:	d005      	beq.n	800afa4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800af98:	2100      	movs	r1, #0
 800af9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af9e:	4608      	mov	r0, r1
 800afa0:	b002      	add	sp, #8
 800afa2:	4770      	bx	lr
 800afa4:	b314      	cbz	r4, 800afec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800afa6:	428c      	cmp	r4, r1
 800afa8:	d820      	bhi.n	800afec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800afaa:	2d00      	cmp	r5, #0
 800afac:	d0f4      	beq.n	800af98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800afae:	2100      	movs	r1, #0
 800afb0:	f04f 3cff 	mov.w	ip, #4294967295
 800afb4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800afb8:	e002      	b.n	800afc0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800afba:	686d      	ldr	r5, [r5, #4]
 800afbc:	2d00      	cmp	r5, #0
 800afbe:	d0ec      	beq.n	800af9a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800afc0:	68ab      	ldr	r3, [r5, #8]
 800afc2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800afc6:	4290      	cmp	r0, r2
 800afc8:	d1f7      	bne.n	800afba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800afca:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800afce:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800afd2:	4562      	cmp	r2, ip
 800afd4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800afd8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800afdc:	daed      	bge.n	800afba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800afde:	4694      	mov	ip, r2
 800afe0:	461c      	mov	r4, r3
 800afe2:	4629      	mov	r1, r5
 800afe4:	e7e9      	b.n	800afba <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800afe6:	b10c      	cbz	r4, 800afec <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800afe8:	428c      	cmp	r4, r1
 800afea:	d9d5      	bls.n	800af98 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800afec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aff0:	4802      	ldr	r0, [pc, #8]	@ (800affc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800aff2:	b002      	add	sp, #8
 800aff4:	f004 bfc4 	b.w	800ff80 <get_memory>
 800aff8:	4629      	mov	r1, r5
 800affa:	e7c6      	b.n	800af8a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800affc:	20010cdc 	.word	0x20010cdc

0800b000 <run_xrce_session>:
 800b000:	b510      	push	{r4, lr}
 800b002:	788c      	ldrb	r4, [r1, #2]
 800b004:	b086      	sub	sp, #24
 800b006:	2c01      	cmp	r4, #1
 800b008:	f8ad 200e 	strh.w	r2, [sp, #14]
 800b00c:	d00c      	beq.n	800b028 <run_xrce_session+0x28>
 800b00e:	4619      	mov	r1, r3
 800b010:	2301      	movs	r3, #1
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	f10d 020e 	add.w	r2, sp, #14
 800b018:	f10d 0317 	add.w	r3, sp, #23
 800b01c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b020:	f001 ff7e 	bl	800cf20 <uxr_run_session_until_all_status>
 800b024:	b006      	add	sp, #24
 800b026:	bd10      	pop	{r4, pc}
 800b028:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b02c:	f001 fbcc 	bl	800c7c8 <uxr_flash_output_streams>
 800b030:	4620      	mov	r0, r4
 800b032:	b006      	add	sp, #24
 800b034:	bd10      	pop	{r4, pc}
 800b036:	bf00      	nop

0800b038 <convert_qos_profile>:
 800b038:	7a4a      	ldrb	r2, [r1, #9]
 800b03a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800b03e:	2a02      	cmp	r2, #2
 800b040:	bf18      	it	ne
 800b042:	2200      	movne	r2, #0
 800b044:	7002      	strb	r2, [r0, #0]
 800b046:	780a      	ldrb	r2, [r1, #0]
 800b048:	8889      	ldrh	r1, [r1, #4]
 800b04a:	8081      	strh	r1, [r0, #4]
 800b04c:	f1ac 0c02 	sub.w	ip, ip, #2
 800b050:	f1a2 0202 	sub.w	r2, r2, #2
 800b054:	fabc fc8c 	clz	ip, ip
 800b058:	fab2 f282 	clz	r2, r2
 800b05c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800b060:	0952      	lsrs	r2, r2, #5
 800b062:	f880 c001 	strb.w	ip, [r0, #1]
 800b066:	7082      	strb	r2, [r0, #2]
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <generate_type_name>:
 800b06c:	b530      	push	{r4, r5, lr}
 800b06e:	2300      	movs	r3, #0
 800b070:	700b      	strb	r3, [r1, #0]
 800b072:	6803      	ldr	r3, [r0, #0]
 800b074:	b087      	sub	sp, #28
 800b076:	4614      	mov	r4, r2
 800b078:	b1d3      	cbz	r3, 800b0b0 <generate_type_name+0x44>
 800b07a:	4a0f      	ldr	r2, [pc, #60]	@ (800b0b8 <generate_type_name+0x4c>)
 800b07c:	4615      	mov	r5, r2
 800b07e:	9203      	str	r2, [sp, #12]
 800b080:	9500      	str	r5, [sp, #0]
 800b082:	6842      	ldr	r2, [r0, #4]
 800b084:	480d      	ldr	r0, [pc, #52]	@ (800b0bc <generate_type_name+0x50>)
 800b086:	9001      	str	r0, [sp, #4]
 800b088:	4608      	mov	r0, r1
 800b08a:	490d      	ldr	r1, [pc, #52]	@ (800b0c0 <generate_type_name+0x54>)
 800b08c:	9204      	str	r2, [sp, #16]
 800b08e:	9105      	str	r1, [sp, #20]
 800b090:	9102      	str	r1, [sp, #8]
 800b092:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c4 <generate_type_name+0x58>)
 800b094:	4621      	mov	r1, r4
 800b096:	f008 fef1 	bl	8013e7c <sniprintf>
 800b09a:	2800      	cmp	r0, #0
 800b09c:	db05      	blt.n	800b0aa <generate_type_name+0x3e>
 800b09e:	4284      	cmp	r4, r0
 800b0a0:	bfd4      	ite	le
 800b0a2:	2000      	movle	r0, #0
 800b0a4:	2001      	movgt	r0, #1
 800b0a6:	b007      	add	sp, #28
 800b0a8:	bd30      	pop	{r4, r5, pc}
 800b0aa:	2000      	movs	r0, #0
 800b0ac:	b007      	add	sp, #28
 800b0ae:	bd30      	pop	{r4, r5, pc}
 800b0b0:	4b05      	ldr	r3, [pc, #20]	@ (800b0c8 <generate_type_name+0x5c>)
 800b0b2:	4a01      	ldr	r2, [pc, #4]	@ (800b0b8 <generate_type_name+0x4c>)
 800b0b4:	461d      	mov	r5, r3
 800b0b6:	e7e2      	b.n	800b07e <generate_type_name+0x12>
 800b0b8:	08015124 	.word	0x08015124
 800b0bc:	0801513c 	.word	0x0801513c
 800b0c0:	08015138 	.word	0x08015138
 800b0c4:	08015128 	.word	0x08015128
 800b0c8:	08015414 	.word	0x08015414

0800b0cc <generate_topic_name>:
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	4614      	mov	r4, r2
 800b0d2:	9000      	str	r0, [sp, #0]
 800b0d4:	4b08      	ldr	r3, [pc, #32]	@ (800b0f8 <generate_topic_name+0x2c>)
 800b0d6:	4a09      	ldr	r2, [pc, #36]	@ (800b0fc <generate_topic_name+0x30>)
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4621      	mov	r1, r4
 800b0dc:	f008 fece 	bl	8013e7c <sniprintf>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	db05      	blt.n	800b0f0 <generate_topic_name+0x24>
 800b0e4:	4284      	cmp	r4, r0
 800b0e6:	bfd4      	ite	le
 800b0e8:	2000      	movle	r0, #0
 800b0ea:	2001      	movgt	r0, #1
 800b0ec:	b002      	add	sp, #8
 800b0ee:	bd10      	pop	{r4, pc}
 800b0f0:	2000      	movs	r0, #0
 800b0f2:	b002      	add	sp, #8
 800b0f4:	bd10      	pop	{r4, pc}
 800b0f6:	bf00      	nop
 800b0f8:	08015148 	.word	0x08015148
 800b0fc:	08015140 	.word	0x08015140

0800b100 <is_uxrce_rmw_identifier_valid>:
 800b100:	b510      	push	{r4, lr}
 800b102:	4604      	mov	r4, r0
 800b104:	b140      	cbz	r0, 800b118 <is_uxrce_rmw_identifier_valid+0x18>
 800b106:	f004 ff5f 	bl	800ffc8 <rmw_get_implementation_identifier>
 800b10a:	4601      	mov	r1, r0
 800b10c:	4620      	mov	r0, r4
 800b10e:	f7f5 f87f 	bl	8000210 <strcmp>
 800b112:	fab0 f080 	clz	r0, r0
 800b116:	0940      	lsrs	r0, r0, #5
 800b118:	bd10      	pop	{r4, pc}
 800b11a:	bf00      	nop

0800b11c <get_message_typesupport_handle>:
 800b11c:	6883      	ldr	r3, [r0, #8]
 800b11e:	4718      	bx	r3

0800b120 <get_message_typesupport_handle_function>:
 800b120:	b510      	push	{r4, lr}
 800b122:	4604      	mov	r4, r0
 800b124:	6800      	ldr	r0, [r0, #0]
 800b126:	f7f5 f873 	bl	8000210 <strcmp>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	bf0c      	ite	eq
 800b12e:	4620      	moveq	r0, r4
 800b130:	2000      	movne	r0, #0
 800b132:	bd10      	pop	{r4, pc}

0800b134 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b134:	4b04      	ldr	r3, [pc, #16]	@ (800b148 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	b10a      	cbz	r2, 800b13e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b13a:	4803      	ldr	r0, [pc, #12]	@ (800b148 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b13c:	4770      	bx	lr
 800b13e:	4a03      	ldr	r2, [pc, #12]	@ (800b14c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b140:	4801      	ldr	r0, [pc, #4]	@ (800b148 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b142:	6812      	ldr	r2, [r2, #0]
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	4770      	bx	lr
 800b148:	200000f0 	.word	0x200000f0
 800b14c:	2000016c 	.word	0x2000016c

0800b150 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b150:	4a02      	ldr	r2, [pc, #8]	@ (800b15c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b152:	4b03      	ldr	r3, [pc, #12]	@ (800b160 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b154:	6812      	ldr	r2, [r2, #0]
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	2000016c 	.word	0x2000016c
 800b160:	200000f0 	.word	0x200000f0

0800b164 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b164:	f005 bc3e 	b.w	80109e4 <std_msgs__msg__Int32__init>

0800b168 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b168:	f005 bc40 	b.w	80109ec <std_msgs__msg__Int32__fini>

0800b16c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b16c:	4b04      	ldr	r3, [pc, #16]	@ (800b180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b16e:	681a      	ldr	r2, [r3, #0]
 800b170:	b10a      	cbz	r2, 800b176 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b172:	4803      	ldr	r0, [pc, #12]	@ (800b180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b174:	4770      	bx	lr
 800b176:	4a03      	ldr	r2, [pc, #12]	@ (800b184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b178:	4801      	ldr	r0, [pc, #4]	@ (800b180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b17a:	6812      	ldr	r2, [r2, #0]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	4770      	bx	lr
 800b180:	20000138 	.word	0x20000138
 800b184:	20000170 	.word	0x20000170

0800b188 <_Int32__max_serialized_size>:
 800b188:	b508      	push	{r3, lr}
 800b18a:	2104      	movs	r1, #4
 800b18c:	2000      	movs	r0, #0
 800b18e:	f001 f807 	bl	800c1a0 <ucdr_alignment>
 800b192:	3004      	adds	r0, #4
 800b194:	bd08      	pop	{r3, pc}
 800b196:	bf00      	nop

0800b198 <_Int32__cdr_deserialize>:
 800b198:	b109      	cbz	r1, 800b19e <_Int32__cdr_deserialize+0x6>
 800b19a:	f000 bf19 	b.w	800bfd0 <ucdr_deserialize_int32_t>
 800b19e:	4608      	mov	r0, r1
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop

0800b1a4 <get_serialized_size_std_msgs__msg__Int32>:
 800b1a4:	b138      	cbz	r0, 800b1b6 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b1a6:	b508      	push	{r3, lr}
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	2104      	movs	r1, #4
 800b1ae:	f000 fff7 	bl	800c1a0 <ucdr_alignment>
 800b1b2:	3004      	adds	r0, #4
 800b1b4:	bd08      	pop	{r3, pc}
 800b1b6:	4770      	bx	lr

0800b1b8 <_Int32__cdr_serialize>:
 800b1b8:	460a      	mov	r2, r1
 800b1ba:	b118      	cbz	r0, 800b1c4 <_Int32__cdr_serialize+0xc>
 800b1bc:	6801      	ldr	r1, [r0, #0]
 800b1be:	4610      	mov	r0, r2
 800b1c0:	f000 be6e 	b.w	800bea0 <ucdr_serialize_int32_t>
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop

0800b1c8 <_Int32__get_serialized_size>:
 800b1c8:	b130      	cbz	r0, 800b1d8 <_Int32__get_serialized_size+0x10>
 800b1ca:	b508      	push	{r3, lr}
 800b1cc:	2104      	movs	r1, #4
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	f000 ffe6 	bl	800c1a0 <ucdr_alignment>
 800b1d4:	3004      	adds	r0, #4
 800b1d6:	bd08      	pop	{r3, pc}
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop

0800b1dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b1dc:	4800      	ldr	r0, [pc, #0]	@ (800b1e0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b1de:	4770      	bx	lr
 800b1e0:	20000144 	.word	0x20000144

0800b1e4 <ucdr_serialize_bool>:
 800b1e4:	b538      	push	{r3, r4, r5, lr}
 800b1e6:	460d      	mov	r5, r1
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	f000 ff8c 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b1f0:	b148      	cbz	r0, 800b206 <ucdr_serialize_bool+0x22>
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	701d      	strb	r5, [r3, #0]
 800b1f6:	68a2      	ldr	r2, [r4, #8]
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	2101      	movs	r1, #1
 800b1fc:	440a      	add	r2, r1
 800b1fe:	440b      	add	r3, r1
 800b200:	60a2      	str	r2, [r4, #8]
 800b202:	6123      	str	r3, [r4, #16]
 800b204:	7561      	strb	r1, [r4, #21]
 800b206:	7da0      	ldrb	r0, [r4, #22]
 800b208:	f080 0001 	eor.w	r0, r0, #1
 800b20c:	bd38      	pop	{r3, r4, r5, pc}
 800b20e:	bf00      	nop

0800b210 <ucdr_deserialize_bool>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	460d      	mov	r5, r1
 800b214:	2101      	movs	r1, #1
 800b216:	4604      	mov	r4, r0
 800b218:	f000 ff76 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b21c:	b160      	cbz	r0, 800b238 <ucdr_deserialize_bool+0x28>
 800b21e:	68a2      	ldr	r2, [r4, #8]
 800b220:	6923      	ldr	r3, [r4, #16]
 800b222:	f812 1b01 	ldrb.w	r1, [r2], #1
 800b226:	3900      	subs	r1, #0
 800b228:	bf18      	it	ne
 800b22a:	2101      	movne	r1, #1
 800b22c:	7029      	strb	r1, [r5, #0]
 800b22e:	3301      	adds	r3, #1
 800b230:	2101      	movs	r1, #1
 800b232:	60a2      	str	r2, [r4, #8]
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	7561      	strb	r1, [r4, #21]
 800b238:	7da0      	ldrb	r0, [r4, #22]
 800b23a:	f080 0001 	eor.w	r0, r0, #1
 800b23e:	bd38      	pop	{r3, r4, r5, pc}

0800b240 <ucdr_serialize_uint8_t>:
 800b240:	b538      	push	{r3, r4, r5, lr}
 800b242:	460d      	mov	r5, r1
 800b244:	2101      	movs	r1, #1
 800b246:	4604      	mov	r4, r0
 800b248:	f000 ff5e 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b24c:	b148      	cbz	r0, 800b262 <ucdr_serialize_uint8_t+0x22>
 800b24e:	68a3      	ldr	r3, [r4, #8]
 800b250:	701d      	strb	r5, [r3, #0]
 800b252:	68a2      	ldr	r2, [r4, #8]
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	2101      	movs	r1, #1
 800b258:	440a      	add	r2, r1
 800b25a:	440b      	add	r3, r1
 800b25c:	60a2      	str	r2, [r4, #8]
 800b25e:	6123      	str	r3, [r4, #16]
 800b260:	7561      	strb	r1, [r4, #21]
 800b262:	7da0      	ldrb	r0, [r4, #22]
 800b264:	f080 0001 	eor.w	r0, r0, #1
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop

0800b26c <ucdr_deserialize_uint8_t>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	460d      	mov	r5, r1
 800b270:	2101      	movs	r1, #1
 800b272:	4604      	mov	r4, r0
 800b274:	f000 ff48 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b278:	b150      	cbz	r0, 800b290 <ucdr_deserialize_uint8_t+0x24>
 800b27a:	68a3      	ldr	r3, [r4, #8]
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	702b      	strb	r3, [r5, #0]
 800b280:	68a2      	ldr	r2, [r4, #8]
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	2101      	movs	r1, #1
 800b286:	440a      	add	r2, r1
 800b288:	440b      	add	r3, r1
 800b28a:	60a2      	str	r2, [r4, #8]
 800b28c:	6123      	str	r3, [r4, #16]
 800b28e:	7561      	strb	r1, [r4, #21]
 800b290:	7da0      	ldrb	r0, [r4, #22]
 800b292:	f080 0001 	eor.w	r0, r0, #1
 800b296:	bd38      	pop	{r3, r4, r5, pc}

0800b298 <ucdr_serialize_uint16_t>:
 800b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	460b      	mov	r3, r1
 800b2a0:	2102      	movs	r1, #2
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b2a8:	f000 ff82 	bl	800c1b0 <ucdr_buffer_alignment>
 800b2ac:	4601      	mov	r1, r0
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	7d67      	ldrb	r7, [r4, #21]
 800b2b2:	f000 ffc1 	bl	800c238 <ucdr_advance_buffer>
 800b2b6:	2102      	movs	r1, #2
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 ff19 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b2be:	bb78      	cbnz	r0, 800b320 <ucdr_serialize_uint16_t+0x88>
 800b2c0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	d926      	bls.n	800b316 <ucdr_serialize_uint16_t+0x7e>
 800b2c8:	1b5e      	subs	r6, r3, r5
 800b2ca:	60a3      	str	r3, [r4, #8]
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	f1c6 0802 	rsb	r8, r6, #2
 800b2d2:	4433      	add	r3, r6
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 ff15 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d03b      	beq.n	800b35a <ucdr_serialize_uint16_t+0xc2>
 800b2e2:	7d23      	ldrb	r3, [r4, #20]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d04a      	beq.n	800b37e <ucdr_serialize_uint16_t+0xe6>
 800b2e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2ec:	702b      	strb	r3, [r5, #0]
 800b2ee:	2e00      	cmp	r6, #0
 800b2f0:	d040      	beq.n	800b374 <ucdr_serialize_uint16_t+0xdc>
 800b2f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2f6:	706b      	strb	r3, [r5, #1]
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	68a2      	ldr	r2, [r4, #8]
 800b2fc:	7da0      	ldrb	r0, [r4, #22]
 800b2fe:	3302      	adds	r3, #2
 800b300:	1b9e      	subs	r6, r3, r6
 800b302:	4442      	add	r2, r8
 800b304:	2302      	movs	r3, #2
 800b306:	f080 0001 	eor.w	r0, r0, #1
 800b30a:	60a2      	str	r2, [r4, #8]
 800b30c:	6126      	str	r6, [r4, #16]
 800b30e:	7563      	strb	r3, [r4, #21]
 800b310:	b002      	add	sp, #8
 800b312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b316:	2102      	movs	r1, #2
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fef5 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b31e:	b190      	cbz	r0, 800b346 <ucdr_serialize_uint16_t+0xae>
 800b320:	7d23      	ldrb	r3, [r4, #20]
 800b322:	2b01      	cmp	r3, #1
 800b324:	68a3      	ldr	r3, [r4, #8]
 800b326:	d014      	beq.n	800b352 <ucdr_serialize_uint16_t+0xba>
 800b328:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	68a3      	ldr	r3, [r4, #8]
 800b330:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b334:	705a      	strb	r2, [r3, #1]
 800b336:	68a2      	ldr	r2, [r4, #8]
 800b338:	6923      	ldr	r3, [r4, #16]
 800b33a:	3202      	adds	r2, #2
 800b33c:	3302      	adds	r3, #2
 800b33e:	2102      	movs	r1, #2
 800b340:	60a2      	str	r2, [r4, #8]
 800b342:	6123      	str	r3, [r4, #16]
 800b344:	7561      	strb	r1, [r4, #21]
 800b346:	7da0      	ldrb	r0, [r4, #22]
 800b348:	f080 0001 	eor.w	r0, r0, #1
 800b34c:	b002      	add	sp, #8
 800b34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b352:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b356:	801a      	strh	r2, [r3, #0]
 800b358:	e7ed      	b.n	800b336 <ucdr_serialize_uint16_t+0x9e>
 800b35a:	68a2      	ldr	r2, [r4, #8]
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	7da0      	ldrb	r0, [r4, #22]
 800b360:	7567      	strb	r7, [r4, #21]
 800b362:	1b92      	subs	r2, r2, r6
 800b364:	1b9b      	subs	r3, r3, r6
 800b366:	f080 0001 	eor.w	r0, r0, #1
 800b36a:	60a2      	str	r2, [r4, #8]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	b002      	add	sp, #8
 800b370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b374:	68a3      	ldr	r3, [r4, #8]
 800b376:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b37a:	701a      	strb	r2, [r3, #0]
 800b37c:	e7bc      	b.n	800b2f8 <ucdr_serialize_uint16_t+0x60>
 800b37e:	4628      	mov	r0, r5
 800b380:	f10d 0506 	add.w	r5, sp, #6
 800b384:	4629      	mov	r1, r5
 800b386:	4632      	mov	r2, r6
 800b388:	f008 fef1 	bl	801416e <memcpy>
 800b38c:	68a0      	ldr	r0, [r4, #8]
 800b38e:	4642      	mov	r2, r8
 800b390:	19a9      	adds	r1, r5, r6
 800b392:	f008 feec 	bl	801416e <memcpy>
 800b396:	e7af      	b.n	800b2f8 <ucdr_serialize_uint16_t+0x60>

0800b398 <ucdr_serialize_endian_uint16_t>:
 800b398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b39c:	b083      	sub	sp, #12
 800b39e:	460d      	mov	r5, r1
 800b3a0:	2102      	movs	r1, #2
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b3a8:	f000 ff02 	bl	800c1b0 <ucdr_buffer_alignment>
 800b3ac:	4601      	mov	r1, r0
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b3b4:	f000 ff40 	bl	800c238 <ucdr_advance_buffer>
 800b3b8:	2102      	movs	r1, #2
 800b3ba:	4620      	mov	r0, r4
 800b3bc:	f000 fe98 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b3c0:	bb70      	cbnz	r0, 800b420 <ucdr_serialize_endian_uint16_t+0x88>
 800b3c2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b3c6:	42be      	cmp	r6, r7
 800b3c8:	d925      	bls.n	800b416 <ucdr_serialize_endian_uint16_t+0x7e>
 800b3ca:	6923      	ldr	r3, [r4, #16]
 800b3cc:	60a6      	str	r6, [r4, #8]
 800b3ce:	1bf6      	subs	r6, r6, r7
 800b3d0:	4433      	add	r3, r6
 800b3d2:	f1c6 0902 	rsb	r9, r6, #2
 800b3d6:	6123      	str	r3, [r4, #16]
 800b3d8:	4649      	mov	r1, r9
 800b3da:	4620      	mov	r0, r4
 800b3dc:	f000 fe94 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d039      	beq.n	800b458 <ucdr_serialize_endian_uint16_t+0xc0>
 800b3e4:	2d01      	cmp	r5, #1
 800b3e6:	d04a      	beq.n	800b47e <ucdr_serialize_endian_uint16_t+0xe6>
 800b3e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b3ec:	703b      	strb	r3, [r7, #0]
 800b3ee:	2e00      	cmp	r6, #0
 800b3f0:	d040      	beq.n	800b474 <ucdr_serialize_endian_uint16_t+0xdc>
 800b3f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b3f6:	707b      	strb	r3, [r7, #1]
 800b3f8:	6923      	ldr	r3, [r4, #16]
 800b3fa:	68a2      	ldr	r2, [r4, #8]
 800b3fc:	7da0      	ldrb	r0, [r4, #22]
 800b3fe:	3302      	adds	r3, #2
 800b400:	444a      	add	r2, r9
 800b402:	1b9b      	subs	r3, r3, r6
 800b404:	2102      	movs	r1, #2
 800b406:	f080 0001 	eor.w	r0, r0, #1
 800b40a:	60a2      	str	r2, [r4, #8]
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	7561      	strb	r1, [r4, #21]
 800b410:	b003      	add	sp, #12
 800b412:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b416:	2102      	movs	r1, #2
 800b418:	4620      	mov	r0, r4
 800b41a:	f000 fe75 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b41e:	b188      	cbz	r0, 800b444 <ucdr_serialize_endian_uint16_t+0xac>
 800b420:	2d01      	cmp	r5, #1
 800b422:	68a3      	ldr	r3, [r4, #8]
 800b424:	d014      	beq.n	800b450 <ucdr_serialize_endian_uint16_t+0xb8>
 800b426:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b42a:	701a      	strb	r2, [r3, #0]
 800b42c:	68a3      	ldr	r3, [r4, #8]
 800b42e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b432:	705a      	strb	r2, [r3, #1]
 800b434:	68a2      	ldr	r2, [r4, #8]
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	3202      	adds	r2, #2
 800b43a:	3302      	adds	r3, #2
 800b43c:	2102      	movs	r1, #2
 800b43e:	60a2      	str	r2, [r4, #8]
 800b440:	6123      	str	r3, [r4, #16]
 800b442:	7561      	strb	r1, [r4, #21]
 800b444:	7da0      	ldrb	r0, [r4, #22]
 800b446:	f080 0001 	eor.w	r0, r0, #1
 800b44a:	b003      	add	sp, #12
 800b44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b450:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b454:	801a      	strh	r2, [r3, #0]
 800b456:	e7ed      	b.n	800b434 <ucdr_serialize_endian_uint16_t+0x9c>
 800b458:	68a2      	ldr	r2, [r4, #8]
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	7da0      	ldrb	r0, [r4, #22]
 800b45e:	f884 8015 	strb.w	r8, [r4, #21]
 800b462:	1b92      	subs	r2, r2, r6
 800b464:	1b9b      	subs	r3, r3, r6
 800b466:	f080 0001 	eor.w	r0, r0, #1
 800b46a:	60a2      	str	r2, [r4, #8]
 800b46c:	6123      	str	r3, [r4, #16]
 800b46e:	b003      	add	sp, #12
 800b470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b474:	68a3      	ldr	r3, [r4, #8]
 800b476:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	e7bc      	b.n	800b3f8 <ucdr_serialize_endian_uint16_t+0x60>
 800b47e:	f10d 0506 	add.w	r5, sp, #6
 800b482:	4629      	mov	r1, r5
 800b484:	4632      	mov	r2, r6
 800b486:	4638      	mov	r0, r7
 800b488:	f008 fe71 	bl	801416e <memcpy>
 800b48c:	68a0      	ldr	r0, [r4, #8]
 800b48e:	464a      	mov	r2, r9
 800b490:	19a9      	adds	r1, r5, r6
 800b492:	f008 fe6c 	bl	801416e <memcpy>
 800b496:	e7af      	b.n	800b3f8 <ucdr_serialize_endian_uint16_t+0x60>

0800b498 <ucdr_deserialize_uint16_t>:
 800b498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b49c:	460d      	mov	r5, r1
 800b49e:	2102      	movs	r1, #2
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	f000 fe85 	bl	800c1b0 <ucdr_buffer_alignment>
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b4ae:	f000 fec3 	bl	800c238 <ucdr_advance_buffer>
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fe1b 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b4ba:	bb60      	cbnz	r0, 800b516 <ucdr_deserialize_uint16_t+0x7e>
 800b4bc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b4c0:	42be      	cmp	r6, r7
 800b4c2:	d923      	bls.n	800b50c <ucdr_deserialize_uint16_t+0x74>
 800b4c4:	6923      	ldr	r3, [r4, #16]
 800b4c6:	60a6      	str	r6, [r4, #8]
 800b4c8:	1bf6      	subs	r6, r6, r7
 800b4ca:	4433      	add	r3, r6
 800b4cc:	f1c6 0902 	rsb	r9, r6, #2
 800b4d0:	6123      	str	r3, [r4, #16]
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f000 fe17 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	d034      	beq.n	800b548 <ucdr_deserialize_uint16_t+0xb0>
 800b4de:	7d23      	ldrb	r3, [r4, #20]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d042      	beq.n	800b56a <ucdr_deserialize_uint16_t+0xd2>
 800b4e4:	787b      	ldrb	r3, [r7, #1]
 800b4e6:	702b      	strb	r3, [r5, #0]
 800b4e8:	2e00      	cmp	r6, #0
 800b4ea:	d03a      	beq.n	800b562 <ucdr_deserialize_uint16_t+0xca>
 800b4ec:	783b      	ldrb	r3, [r7, #0]
 800b4ee:	706b      	strb	r3, [r5, #1]
 800b4f0:	6923      	ldr	r3, [r4, #16]
 800b4f2:	68a2      	ldr	r2, [r4, #8]
 800b4f4:	7da0      	ldrb	r0, [r4, #22]
 800b4f6:	2102      	movs	r1, #2
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	444a      	add	r2, r9
 800b4fc:	1b9b      	subs	r3, r3, r6
 800b4fe:	7561      	strb	r1, [r4, #21]
 800b500:	60a2      	str	r2, [r4, #8]
 800b502:	6123      	str	r3, [r4, #16]
 800b504:	f080 0001 	eor.w	r0, r0, #1
 800b508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b50c:	2102      	movs	r1, #2
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 fdfa 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b514:	b180      	cbz	r0, 800b538 <ucdr_deserialize_uint16_t+0xa0>
 800b516:	7d23      	ldrb	r3, [r4, #20]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	68a3      	ldr	r3, [r4, #8]
 800b51c:	d011      	beq.n	800b542 <ucdr_deserialize_uint16_t+0xaa>
 800b51e:	785b      	ldrb	r3, [r3, #1]
 800b520:	702b      	strb	r3, [r5, #0]
 800b522:	68a3      	ldr	r3, [r4, #8]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	706b      	strb	r3, [r5, #1]
 800b528:	68a2      	ldr	r2, [r4, #8]
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	3202      	adds	r2, #2
 800b52e:	3302      	adds	r3, #2
 800b530:	2102      	movs	r1, #2
 800b532:	60a2      	str	r2, [r4, #8]
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	7561      	strb	r1, [r4, #21]
 800b538:	7da0      	ldrb	r0, [r4, #22]
 800b53a:	f080 0001 	eor.w	r0, r0, #1
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	802b      	strh	r3, [r5, #0]
 800b546:	e7ef      	b.n	800b528 <ucdr_deserialize_uint16_t+0x90>
 800b548:	68a2      	ldr	r2, [r4, #8]
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	7da0      	ldrb	r0, [r4, #22]
 800b54e:	f884 8015 	strb.w	r8, [r4, #21]
 800b552:	1b92      	subs	r2, r2, r6
 800b554:	1b9b      	subs	r3, r3, r6
 800b556:	60a2      	str	r2, [r4, #8]
 800b558:	6123      	str	r3, [r4, #16]
 800b55a:	f080 0001 	eor.w	r0, r0, #1
 800b55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b562:	68a3      	ldr	r3, [r4, #8]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	706b      	strb	r3, [r5, #1]
 800b568:	e7c2      	b.n	800b4f0 <ucdr_deserialize_uint16_t+0x58>
 800b56a:	4639      	mov	r1, r7
 800b56c:	4632      	mov	r2, r6
 800b56e:	4628      	mov	r0, r5
 800b570:	f008 fdfd 	bl	801416e <memcpy>
 800b574:	68a1      	ldr	r1, [r4, #8]
 800b576:	464a      	mov	r2, r9
 800b578:	19a8      	adds	r0, r5, r6
 800b57a:	f008 fdf8 	bl	801416e <memcpy>
 800b57e:	e7b7      	b.n	800b4f0 <ucdr_deserialize_uint16_t+0x58>

0800b580 <ucdr_deserialize_endian_uint16_t>:
 800b580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b584:	460e      	mov	r6, r1
 800b586:	2102      	movs	r1, #2
 800b588:	4604      	mov	r4, r0
 800b58a:	4615      	mov	r5, r2
 800b58c:	f000 fe10 	bl	800c1b0 <ucdr_buffer_alignment>
 800b590:	4601      	mov	r1, r0
 800b592:	4620      	mov	r0, r4
 800b594:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b598:	f000 fe4e 	bl	800c238 <ucdr_advance_buffer>
 800b59c:	2102      	movs	r1, #2
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fda6 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b5a4:	bb70      	cbnz	r0, 800b604 <ucdr_deserialize_endian_uint16_t+0x84>
 800b5a6:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b5aa:	4547      	cmp	r7, r8
 800b5ac:	d925      	bls.n	800b5fa <ucdr_deserialize_endian_uint16_t+0x7a>
 800b5ae:	6923      	ldr	r3, [r4, #16]
 800b5b0:	60a7      	str	r7, [r4, #8]
 800b5b2:	eba7 0708 	sub.w	r7, r7, r8
 800b5b6:	443b      	add	r3, r7
 800b5b8:	f1c7 0a02 	rsb	sl, r7, #2
 800b5bc:	6123      	str	r3, [r4, #16]
 800b5be:	4651      	mov	r1, sl
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f000 fda1 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d034      	beq.n	800b634 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b5ca:	2e01      	cmp	r6, #1
 800b5cc:	d043      	beq.n	800b656 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b5ce:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b5d2:	702b      	strb	r3, [r5, #0]
 800b5d4:	2f00      	cmp	r7, #0
 800b5d6:	d03a      	beq.n	800b64e <ucdr_deserialize_endian_uint16_t+0xce>
 800b5d8:	f898 3000 	ldrb.w	r3, [r8]
 800b5dc:	706b      	strb	r3, [r5, #1]
 800b5de:	6923      	ldr	r3, [r4, #16]
 800b5e0:	68a2      	ldr	r2, [r4, #8]
 800b5e2:	7da0      	ldrb	r0, [r4, #22]
 800b5e4:	2102      	movs	r1, #2
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	4452      	add	r2, sl
 800b5ea:	1bdb      	subs	r3, r3, r7
 800b5ec:	7561      	strb	r1, [r4, #21]
 800b5ee:	60a2      	str	r2, [r4, #8]
 800b5f0:	6123      	str	r3, [r4, #16]
 800b5f2:	f080 0001 	eor.w	r0, r0, #1
 800b5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fa:	2102      	movs	r1, #2
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f000 fd83 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b602:	b178      	cbz	r0, 800b624 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b604:	2e01      	cmp	r6, #1
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	d011      	beq.n	800b62e <ucdr_deserialize_endian_uint16_t+0xae>
 800b60a:	785b      	ldrb	r3, [r3, #1]
 800b60c:	702b      	strb	r3, [r5, #0]
 800b60e:	68a3      	ldr	r3, [r4, #8]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	706b      	strb	r3, [r5, #1]
 800b614:	68a2      	ldr	r2, [r4, #8]
 800b616:	6923      	ldr	r3, [r4, #16]
 800b618:	3202      	adds	r2, #2
 800b61a:	3302      	adds	r3, #2
 800b61c:	2102      	movs	r1, #2
 800b61e:	60a2      	str	r2, [r4, #8]
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	7561      	strb	r1, [r4, #21]
 800b624:	7da0      	ldrb	r0, [r4, #22]
 800b626:	f080 0001 	eor.w	r0, r0, #1
 800b62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62e:	881b      	ldrh	r3, [r3, #0]
 800b630:	802b      	strh	r3, [r5, #0]
 800b632:	e7ef      	b.n	800b614 <ucdr_deserialize_endian_uint16_t+0x94>
 800b634:	68a2      	ldr	r2, [r4, #8]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	7da0      	ldrb	r0, [r4, #22]
 800b63a:	f884 9015 	strb.w	r9, [r4, #21]
 800b63e:	1bd2      	subs	r2, r2, r7
 800b640:	1bdb      	subs	r3, r3, r7
 800b642:	60a2      	str	r2, [r4, #8]
 800b644:	6123      	str	r3, [r4, #16]
 800b646:	f080 0001 	eor.w	r0, r0, #1
 800b64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64e:	68a3      	ldr	r3, [r4, #8]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	706b      	strb	r3, [r5, #1]
 800b654:	e7c3      	b.n	800b5de <ucdr_deserialize_endian_uint16_t+0x5e>
 800b656:	4641      	mov	r1, r8
 800b658:	463a      	mov	r2, r7
 800b65a:	4628      	mov	r0, r5
 800b65c:	f008 fd87 	bl	801416e <memcpy>
 800b660:	68a1      	ldr	r1, [r4, #8]
 800b662:	4652      	mov	r2, sl
 800b664:	19e8      	adds	r0, r5, r7
 800b666:	f008 fd82 	bl	801416e <memcpy>
 800b66a:	e7b8      	b.n	800b5de <ucdr_deserialize_endian_uint16_t+0x5e>

0800b66c <ucdr_serialize_uint32_t>:
 800b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	4604      	mov	r4, r0
 800b674:	9101      	str	r1, [sp, #4]
 800b676:	2104      	movs	r1, #4
 800b678:	f000 fd9a 	bl	800c1b0 <ucdr_buffer_alignment>
 800b67c:	4601      	mov	r1, r0
 800b67e:	4620      	mov	r0, r4
 800b680:	7d67      	ldrb	r7, [r4, #21]
 800b682:	f000 fdd9 	bl	800c238 <ucdr_advance_buffer>
 800b686:	2104      	movs	r1, #4
 800b688:	4620      	mov	r0, r4
 800b68a:	f000 fd31 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d139      	bne.n	800b706 <ucdr_serialize_uint32_t+0x9a>
 800b692:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b696:	42ab      	cmp	r3, r5
 800b698:	d930      	bls.n	800b6fc <ucdr_serialize_uint32_t+0x90>
 800b69a:	1b5e      	subs	r6, r3, r5
 800b69c:	60a3      	str	r3, [r4, #8]
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	f1c6 0804 	rsb	r8, r6, #4
 800b6a4:	4433      	add	r3, r6
 800b6a6:	6123      	str	r3, [r4, #16]
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fd2c 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d04c      	beq.n	800b74e <ucdr_serialize_uint32_t+0xe2>
 800b6b4:	7d23      	ldrb	r3, [r4, #20]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d063      	beq.n	800b782 <ucdr_serialize_uint32_t+0x116>
 800b6ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b6be:	702b      	strb	r3, [r5, #0]
 800b6c0:	2e00      	cmp	r6, #0
 800b6c2:	d051      	beq.n	800b768 <ucdr_serialize_uint32_t+0xfc>
 800b6c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b6c8:	706b      	strb	r3, [r5, #1]
 800b6ca:	2e01      	cmp	r6, #1
 800b6cc:	d050      	beq.n	800b770 <ucdr_serialize_uint32_t+0x104>
 800b6ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b6d2:	70ab      	strb	r3, [r5, #2]
 800b6d4:	2e02      	cmp	r6, #2
 800b6d6:	d04f      	beq.n	800b778 <ucdr_serialize_uint32_t+0x10c>
 800b6d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b6dc:	70eb      	strb	r3, [r5, #3]
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	68a2      	ldr	r2, [r4, #8]
 800b6e2:	7da0      	ldrb	r0, [r4, #22]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	1b9e      	subs	r6, r3, r6
 800b6e8:	4442      	add	r2, r8
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	f080 0001 	eor.w	r0, r0, #1
 800b6f0:	60a2      	str	r2, [r4, #8]
 800b6f2:	6126      	str	r6, [r4, #16]
 800b6f4:	7563      	strb	r3, [r4, #21]
 800b6f6:	b002      	add	sp, #8
 800b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6fc:	2104      	movs	r1, #4
 800b6fe:	4620      	mov	r0, r4
 800b700:	f000 fd02 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b704:	b1d0      	cbz	r0, 800b73c <ucdr_serialize_uint32_t+0xd0>
 800b706:	7d23      	ldrb	r3, [r4, #20]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	68a3      	ldr	r3, [r4, #8]
 800b70c:	d01c      	beq.n	800b748 <ucdr_serialize_uint32_t+0xdc>
 800b70e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b71a:	705a      	strb	r2, [r3, #1]
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b722:	709a      	strb	r2, [r3, #2]
 800b724:	68a3      	ldr	r3, [r4, #8]
 800b726:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b72a:	70da      	strb	r2, [r3, #3]
 800b72c:	68a2      	ldr	r2, [r4, #8]
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	3204      	adds	r2, #4
 800b732:	3304      	adds	r3, #4
 800b734:	2104      	movs	r1, #4
 800b736:	60a2      	str	r2, [r4, #8]
 800b738:	6123      	str	r3, [r4, #16]
 800b73a:	7561      	strb	r1, [r4, #21]
 800b73c:	7da0      	ldrb	r0, [r4, #22]
 800b73e:	f080 0001 	eor.w	r0, r0, #1
 800b742:	b002      	add	sp, #8
 800b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b748:	9a01      	ldr	r2, [sp, #4]
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e7ee      	b.n	800b72c <ucdr_serialize_uint32_t+0xc0>
 800b74e:	68a2      	ldr	r2, [r4, #8]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	7da0      	ldrb	r0, [r4, #22]
 800b754:	7567      	strb	r7, [r4, #21]
 800b756:	1b92      	subs	r2, r2, r6
 800b758:	1b9b      	subs	r3, r3, r6
 800b75a:	f080 0001 	eor.w	r0, r0, #1
 800b75e:	60a2      	str	r2, [r4, #8]
 800b760:	6123      	str	r3, [r4, #16]
 800b762:	b002      	add	sp, #8
 800b764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b768:	68a3      	ldr	r3, [r4, #8]
 800b76a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b76e:	701a      	strb	r2, [r3, #0]
 800b770:	68a3      	ldr	r3, [r4, #8]
 800b772:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b776:	701a      	strb	r2, [r3, #0]
 800b778:	68a3      	ldr	r3, [r4, #8]
 800b77a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b77e:	701a      	strb	r2, [r3, #0]
 800b780:	e7ad      	b.n	800b6de <ucdr_serialize_uint32_t+0x72>
 800b782:	4628      	mov	r0, r5
 800b784:	ad01      	add	r5, sp, #4
 800b786:	4629      	mov	r1, r5
 800b788:	4632      	mov	r2, r6
 800b78a:	f008 fcf0 	bl	801416e <memcpy>
 800b78e:	68a0      	ldr	r0, [r4, #8]
 800b790:	4642      	mov	r2, r8
 800b792:	19a9      	adds	r1, r5, r6
 800b794:	f008 fceb 	bl	801416e <memcpy>
 800b798:	e7a1      	b.n	800b6de <ucdr_serialize_uint32_t+0x72>
 800b79a:	bf00      	nop

0800b79c <ucdr_serialize_endian_uint32_t>:
 800b79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	460d      	mov	r5, r1
 800b7a4:	2104      	movs	r1, #4
 800b7a6:	4604      	mov	r4, r0
 800b7a8:	9201      	str	r2, [sp, #4]
 800b7aa:	f000 fd01 	bl	800c1b0 <ucdr_buffer_alignment>
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b7b6:	f000 fd3f 	bl	800c238 <ucdr_advance_buffer>
 800b7ba:	2104      	movs	r1, #4
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f000 fc97 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d138      	bne.n	800b838 <ucdr_serialize_endian_uint32_t+0x9c>
 800b7c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b7ca:	42b7      	cmp	r7, r6
 800b7cc:	d92f      	bls.n	800b82e <ucdr_serialize_endian_uint32_t+0x92>
 800b7ce:	6923      	ldr	r3, [r4, #16]
 800b7d0:	60a7      	str	r7, [r4, #8]
 800b7d2:	1bbf      	subs	r7, r7, r6
 800b7d4:	443b      	add	r3, r7
 800b7d6:	f1c7 0904 	rsb	r9, r7, #4
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	4649      	mov	r1, r9
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f000 fc92 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	d04a      	beq.n	800b87e <ucdr_serialize_endian_uint32_t+0xe2>
 800b7e8:	2d01      	cmp	r5, #1
 800b7ea:	d063      	beq.n	800b8b4 <ucdr_serialize_endian_uint32_t+0x118>
 800b7ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7f0:	7033      	strb	r3, [r6, #0]
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	d051      	beq.n	800b89a <ucdr_serialize_endian_uint32_t+0xfe>
 800b7f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b7fa:	7073      	strb	r3, [r6, #1]
 800b7fc:	2f01      	cmp	r7, #1
 800b7fe:	d050      	beq.n	800b8a2 <ucdr_serialize_endian_uint32_t+0x106>
 800b800:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b804:	70b3      	strb	r3, [r6, #2]
 800b806:	2f02      	cmp	r7, #2
 800b808:	d04f      	beq.n	800b8aa <ucdr_serialize_endian_uint32_t+0x10e>
 800b80a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b80e:	70f3      	strb	r3, [r6, #3]
 800b810:	6923      	ldr	r3, [r4, #16]
 800b812:	68a2      	ldr	r2, [r4, #8]
 800b814:	7da0      	ldrb	r0, [r4, #22]
 800b816:	3304      	adds	r3, #4
 800b818:	444a      	add	r2, r9
 800b81a:	1bdb      	subs	r3, r3, r7
 800b81c:	2104      	movs	r1, #4
 800b81e:	f080 0001 	eor.w	r0, r0, #1
 800b822:	60a2      	str	r2, [r4, #8]
 800b824:	6123      	str	r3, [r4, #16]
 800b826:	7561      	strb	r1, [r4, #21]
 800b828:	b003      	add	sp, #12
 800b82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b82e:	2104      	movs	r1, #4
 800b830:	4620      	mov	r0, r4
 800b832:	f000 fc69 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b836:	b1c8      	cbz	r0, 800b86c <ucdr_serialize_endian_uint32_t+0xd0>
 800b838:	2d01      	cmp	r5, #1
 800b83a:	68a3      	ldr	r3, [r4, #8]
 800b83c:	d01c      	beq.n	800b878 <ucdr_serialize_endian_uint32_t+0xdc>
 800b83e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b84a:	705a      	strb	r2, [r3, #1]
 800b84c:	68a3      	ldr	r3, [r4, #8]
 800b84e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b852:	709a      	strb	r2, [r3, #2]
 800b854:	68a3      	ldr	r3, [r4, #8]
 800b856:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b85a:	70da      	strb	r2, [r3, #3]
 800b85c:	68a2      	ldr	r2, [r4, #8]
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	3204      	adds	r2, #4
 800b862:	3304      	adds	r3, #4
 800b864:	2104      	movs	r1, #4
 800b866:	60a2      	str	r2, [r4, #8]
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	7561      	strb	r1, [r4, #21]
 800b86c:	7da0      	ldrb	r0, [r4, #22]
 800b86e:	f080 0001 	eor.w	r0, r0, #1
 800b872:	b003      	add	sp, #12
 800b874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b878:	9a01      	ldr	r2, [sp, #4]
 800b87a:	601a      	str	r2, [r3, #0]
 800b87c:	e7ee      	b.n	800b85c <ucdr_serialize_endian_uint32_t+0xc0>
 800b87e:	68a2      	ldr	r2, [r4, #8]
 800b880:	6923      	ldr	r3, [r4, #16]
 800b882:	7da0      	ldrb	r0, [r4, #22]
 800b884:	f884 8015 	strb.w	r8, [r4, #21]
 800b888:	1bd2      	subs	r2, r2, r7
 800b88a:	1bdb      	subs	r3, r3, r7
 800b88c:	f080 0001 	eor.w	r0, r0, #1
 800b890:	60a2      	str	r2, [r4, #8]
 800b892:	6123      	str	r3, [r4, #16]
 800b894:	b003      	add	sp, #12
 800b896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8a0:	701a      	strb	r2, [r3, #0]
 800b8a2:	68a3      	ldr	r3, [r4, #8]
 800b8a4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b8a8:	701a      	strb	r2, [r3, #0]
 800b8aa:	68a3      	ldr	r3, [r4, #8]
 800b8ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b8b0:	701a      	strb	r2, [r3, #0]
 800b8b2:	e7ad      	b.n	800b810 <ucdr_serialize_endian_uint32_t+0x74>
 800b8b4:	ad01      	add	r5, sp, #4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	463a      	mov	r2, r7
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f008 fc57 	bl	801416e <memcpy>
 800b8c0:	68a0      	ldr	r0, [r4, #8]
 800b8c2:	464a      	mov	r2, r9
 800b8c4:	19e9      	adds	r1, r5, r7
 800b8c6:	f008 fc52 	bl	801416e <memcpy>
 800b8ca:	e7a1      	b.n	800b810 <ucdr_serialize_endian_uint32_t+0x74>

0800b8cc <ucdr_deserialize_uint32_t>:
 800b8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	2104      	movs	r1, #4
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	f000 fc6b 	bl	800c1b0 <ucdr_buffer_alignment>
 800b8da:	4601      	mov	r1, r0
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8e2:	f000 fca9 	bl	800c238 <ucdr_advance_buffer>
 800b8e6:	2104      	movs	r1, #4
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 fc01 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d138      	bne.n	800b964 <ucdr_deserialize_uint32_t+0x98>
 800b8f2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b8f6:	42b7      	cmp	r7, r6
 800b8f8:	d92f      	bls.n	800b95a <ucdr_deserialize_uint32_t+0x8e>
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	60a7      	str	r7, [r4, #8]
 800b8fe:	1bbf      	subs	r7, r7, r6
 800b900:	443b      	add	r3, r7
 800b902:	f1c7 0904 	rsb	r9, r7, #4
 800b906:	6123      	str	r3, [r4, #16]
 800b908:	4649      	mov	r1, r9
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fbfc 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b910:	2800      	cmp	r0, #0
 800b912:	d046      	beq.n	800b9a2 <ucdr_deserialize_uint32_t+0xd6>
 800b914:	7d23      	ldrb	r3, [r4, #20]
 800b916:	2b01      	cmp	r3, #1
 800b918:	d05c      	beq.n	800b9d4 <ucdr_deserialize_uint32_t+0x108>
 800b91a:	78f3      	ldrb	r3, [r6, #3]
 800b91c:	702b      	strb	r3, [r5, #0]
 800b91e:	2f00      	cmp	r7, #0
 800b920:	d04c      	beq.n	800b9bc <ucdr_deserialize_uint32_t+0xf0>
 800b922:	78b3      	ldrb	r3, [r6, #2]
 800b924:	706b      	strb	r3, [r5, #1]
 800b926:	2f01      	cmp	r7, #1
 800b928:	f105 0302 	add.w	r3, r5, #2
 800b92c:	d04a      	beq.n	800b9c4 <ucdr_deserialize_uint32_t+0xf8>
 800b92e:	7873      	ldrb	r3, [r6, #1]
 800b930:	70ab      	strb	r3, [r5, #2]
 800b932:	2f02      	cmp	r7, #2
 800b934:	f105 0303 	add.w	r3, r5, #3
 800b938:	d048      	beq.n	800b9cc <ucdr_deserialize_uint32_t+0x100>
 800b93a:	7833      	ldrb	r3, [r6, #0]
 800b93c:	70eb      	strb	r3, [r5, #3]
 800b93e:	6923      	ldr	r3, [r4, #16]
 800b940:	68a2      	ldr	r2, [r4, #8]
 800b942:	7da0      	ldrb	r0, [r4, #22]
 800b944:	2104      	movs	r1, #4
 800b946:	3304      	adds	r3, #4
 800b948:	444a      	add	r2, r9
 800b94a:	1bdb      	subs	r3, r3, r7
 800b94c:	7561      	strb	r1, [r4, #21]
 800b94e:	60a2      	str	r2, [r4, #8]
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	f080 0001 	eor.w	r0, r0, #1
 800b956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95a:	2104      	movs	r1, #4
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 fbd3 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800b962:	b1b0      	cbz	r0, 800b992 <ucdr_deserialize_uint32_t+0xc6>
 800b964:	7d23      	ldrb	r3, [r4, #20]
 800b966:	2b01      	cmp	r3, #1
 800b968:	68a3      	ldr	r3, [r4, #8]
 800b96a:	d017      	beq.n	800b99c <ucdr_deserialize_uint32_t+0xd0>
 800b96c:	78db      	ldrb	r3, [r3, #3]
 800b96e:	702b      	strb	r3, [r5, #0]
 800b970:	68a3      	ldr	r3, [r4, #8]
 800b972:	789b      	ldrb	r3, [r3, #2]
 800b974:	706b      	strb	r3, [r5, #1]
 800b976:	68a3      	ldr	r3, [r4, #8]
 800b978:	785b      	ldrb	r3, [r3, #1]
 800b97a:	70ab      	strb	r3, [r5, #2]
 800b97c:	68a3      	ldr	r3, [r4, #8]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	70eb      	strb	r3, [r5, #3]
 800b982:	68a2      	ldr	r2, [r4, #8]
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	3204      	adds	r2, #4
 800b988:	3304      	adds	r3, #4
 800b98a:	2104      	movs	r1, #4
 800b98c:	60a2      	str	r2, [r4, #8]
 800b98e:	6123      	str	r3, [r4, #16]
 800b990:	7561      	strb	r1, [r4, #21]
 800b992:	7da0      	ldrb	r0, [r4, #22]
 800b994:	f080 0001 	eor.w	r0, r0, #1
 800b998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	602b      	str	r3, [r5, #0]
 800b9a0:	e7ef      	b.n	800b982 <ucdr_deserialize_uint32_t+0xb6>
 800b9a2:	68a2      	ldr	r2, [r4, #8]
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	7da0      	ldrb	r0, [r4, #22]
 800b9a8:	f884 8015 	strb.w	r8, [r4, #21]
 800b9ac:	1bd2      	subs	r2, r2, r7
 800b9ae:	1bdb      	subs	r3, r3, r7
 800b9b0:	60a2      	str	r2, [r4, #8]
 800b9b2:	6123      	str	r3, [r4, #16]
 800b9b4:	f080 0001 	eor.w	r0, r0, #1
 800b9b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9bc:	68a3      	ldr	r3, [r4, #8]
 800b9be:	789b      	ldrb	r3, [r3, #2]
 800b9c0:	706b      	strb	r3, [r5, #1]
 800b9c2:	1cab      	adds	r3, r5, #2
 800b9c4:	68a2      	ldr	r2, [r4, #8]
 800b9c6:	7852      	ldrb	r2, [r2, #1]
 800b9c8:	f803 2b01 	strb.w	r2, [r3], #1
 800b9cc:	68a2      	ldr	r2, [r4, #8]
 800b9ce:	7812      	ldrb	r2, [r2, #0]
 800b9d0:	701a      	strb	r2, [r3, #0]
 800b9d2:	e7b4      	b.n	800b93e <ucdr_deserialize_uint32_t+0x72>
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4628      	mov	r0, r5
 800b9da:	f008 fbc8 	bl	801416e <memcpy>
 800b9de:	68a1      	ldr	r1, [r4, #8]
 800b9e0:	464a      	mov	r2, r9
 800b9e2:	19e8      	adds	r0, r5, r7
 800b9e4:	f008 fbc3 	bl	801416e <memcpy>
 800b9e8:	e7a9      	b.n	800b93e <ucdr_deserialize_uint32_t+0x72>
 800b9ea:	bf00      	nop

0800b9ec <ucdr_deserialize_endian_uint32_t>:
 800b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f0:	460e      	mov	r6, r1
 800b9f2:	2104      	movs	r1, #4
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	4615      	mov	r5, r2
 800b9f8:	f000 fbda 	bl	800c1b0 <ucdr_buffer_alignment>
 800b9fc:	4601      	mov	r1, r0
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ba04:	f000 fc18 	bl	800c238 <ucdr_advance_buffer>
 800ba08:	2104      	movs	r1, #4
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 fb70 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d13c      	bne.n	800ba8e <ucdr_deserialize_endian_uint32_t+0xa2>
 800ba14:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800ba18:	42bb      	cmp	r3, r7
 800ba1a:	d933      	bls.n	800ba84 <ucdr_deserialize_endian_uint32_t+0x98>
 800ba1c:	eba3 0807 	sub.w	r8, r3, r7
 800ba20:	60a3      	str	r3, [r4, #8]
 800ba22:	6923      	ldr	r3, [r4, #16]
 800ba24:	f1c8 0a04 	rsb	sl, r8, #4
 800ba28:	4443      	add	r3, r8
 800ba2a:	6123      	str	r3, [r4, #16]
 800ba2c:	4651      	mov	r1, sl
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fb6a 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d048      	beq.n	800baca <ucdr_deserialize_endian_uint32_t+0xde>
 800ba38:	2e01      	cmp	r6, #1
 800ba3a:	d061      	beq.n	800bb00 <ucdr_deserialize_endian_uint32_t+0x114>
 800ba3c:	78fb      	ldrb	r3, [r7, #3]
 800ba3e:	702b      	strb	r3, [r5, #0]
 800ba40:	f1b8 0f00 	cmp.w	r8, #0
 800ba44:	d050      	beq.n	800bae8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800ba46:	78bb      	ldrb	r3, [r7, #2]
 800ba48:	706b      	strb	r3, [r5, #1]
 800ba4a:	f1b8 0f01 	cmp.w	r8, #1
 800ba4e:	f105 0302 	add.w	r3, r5, #2
 800ba52:	d04d      	beq.n	800baf0 <ucdr_deserialize_endian_uint32_t+0x104>
 800ba54:	787b      	ldrb	r3, [r7, #1]
 800ba56:	70ab      	strb	r3, [r5, #2]
 800ba58:	f1b8 0f02 	cmp.w	r8, #2
 800ba5c:	f105 0303 	add.w	r3, r5, #3
 800ba60:	d04a      	beq.n	800baf8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800ba62:	783b      	ldrb	r3, [r7, #0]
 800ba64:	70eb      	strb	r3, [r5, #3]
 800ba66:	6923      	ldr	r3, [r4, #16]
 800ba68:	68a2      	ldr	r2, [r4, #8]
 800ba6a:	7da0      	ldrb	r0, [r4, #22]
 800ba6c:	2104      	movs	r1, #4
 800ba6e:	3304      	adds	r3, #4
 800ba70:	4452      	add	r2, sl
 800ba72:	eba3 0308 	sub.w	r3, r3, r8
 800ba76:	7561      	strb	r1, [r4, #21]
 800ba78:	60a2      	str	r2, [r4, #8]
 800ba7a:	6123      	str	r3, [r4, #16]
 800ba7c:	f080 0001 	eor.w	r0, r0, #1
 800ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba84:	2104      	movs	r1, #4
 800ba86:	4620      	mov	r0, r4
 800ba88:	f000 fb3e 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800ba8c:	b1a8      	cbz	r0, 800baba <ucdr_deserialize_endian_uint32_t+0xce>
 800ba8e:	2e01      	cmp	r6, #1
 800ba90:	68a3      	ldr	r3, [r4, #8]
 800ba92:	d017      	beq.n	800bac4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800ba94:	78db      	ldrb	r3, [r3, #3]
 800ba96:	702b      	strb	r3, [r5, #0]
 800ba98:	68a3      	ldr	r3, [r4, #8]
 800ba9a:	789b      	ldrb	r3, [r3, #2]
 800ba9c:	706b      	strb	r3, [r5, #1]
 800ba9e:	68a3      	ldr	r3, [r4, #8]
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	70ab      	strb	r3, [r5, #2]
 800baa4:	68a3      	ldr	r3, [r4, #8]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	70eb      	strb	r3, [r5, #3]
 800baaa:	68a2      	ldr	r2, [r4, #8]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	3204      	adds	r2, #4
 800bab0:	3304      	adds	r3, #4
 800bab2:	2104      	movs	r1, #4
 800bab4:	60a2      	str	r2, [r4, #8]
 800bab6:	6123      	str	r3, [r4, #16]
 800bab8:	7561      	strb	r1, [r4, #21]
 800baba:	7da0      	ldrb	r0, [r4, #22]
 800babc:	f080 0001 	eor.w	r0, r0, #1
 800bac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	602b      	str	r3, [r5, #0]
 800bac8:	e7ef      	b.n	800baaa <ucdr_deserialize_endian_uint32_t+0xbe>
 800baca:	68a2      	ldr	r2, [r4, #8]
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	7da0      	ldrb	r0, [r4, #22]
 800bad0:	f884 9015 	strb.w	r9, [r4, #21]
 800bad4:	eba2 0208 	sub.w	r2, r2, r8
 800bad8:	eba3 0308 	sub.w	r3, r3, r8
 800badc:	60a2      	str	r2, [r4, #8]
 800bade:	6123      	str	r3, [r4, #16]
 800bae0:	f080 0001 	eor.w	r0, r0, #1
 800bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae8:	68a3      	ldr	r3, [r4, #8]
 800baea:	789b      	ldrb	r3, [r3, #2]
 800baec:	706b      	strb	r3, [r5, #1]
 800baee:	1cab      	adds	r3, r5, #2
 800baf0:	68a2      	ldr	r2, [r4, #8]
 800baf2:	7852      	ldrb	r2, [r2, #1]
 800baf4:	f803 2b01 	strb.w	r2, [r3], #1
 800baf8:	68a2      	ldr	r2, [r4, #8]
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	701a      	strb	r2, [r3, #0]
 800bafe:	e7b2      	b.n	800ba66 <ucdr_deserialize_endian_uint32_t+0x7a>
 800bb00:	4639      	mov	r1, r7
 800bb02:	4642      	mov	r2, r8
 800bb04:	4628      	mov	r0, r5
 800bb06:	f008 fb32 	bl	801416e <memcpy>
 800bb0a:	68a1      	ldr	r1, [r4, #8]
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	eb05 0008 	add.w	r0, r5, r8
 800bb12:	f008 fb2c 	bl	801416e <memcpy>
 800bb16:	e7a6      	b.n	800ba66 <ucdr_deserialize_endian_uint32_t+0x7a>

0800bb18 <ucdr_serialize_uint64_t>:
 800bb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb1c:	2108      	movs	r1, #8
 800bb1e:	b082      	sub	sp, #8
 800bb20:	4604      	mov	r4, r0
 800bb22:	e9cd 2300 	strd	r2, r3, [sp]
 800bb26:	f000 fb43 	bl	800c1b0 <ucdr_buffer_alignment>
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	7d67      	ldrb	r7, [r4, #21]
 800bb30:	f000 fb82 	bl	800c238 <ucdr_advance_buffer>
 800bb34:	2108      	movs	r1, #8
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 fada 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d14e      	bne.n	800bbde <ucdr_serialize_uint64_t+0xc6>
 800bb40:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	d945      	bls.n	800bbd4 <ucdr_serialize_uint64_t+0xbc>
 800bb48:	1b5e      	subs	r6, r3, r5
 800bb4a:	60a3      	str	r3, [r4, #8]
 800bb4c:	6923      	ldr	r3, [r4, #16]
 800bb4e:	f1c6 0808 	rsb	r8, r6, #8
 800bb52:	4433      	add	r3, r6
 800bb54:	6123      	str	r3, [r4, #16]
 800bb56:	4641      	mov	r1, r8
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f000 fad5 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d074      	beq.n	800bc4c <ucdr_serialize_uint64_t+0x134>
 800bb62:	7d23      	ldrb	r3, [r4, #20]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	f000 809b 	beq.w	800bca0 <ucdr_serialize_uint64_t+0x188>
 800bb6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb6e:	702b      	strb	r3, [r5, #0]
 800bb70:	2e00      	cmp	r6, #0
 800bb72:	d078      	beq.n	800bc66 <ucdr_serialize_uint64_t+0x14e>
 800bb74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb78:	706b      	strb	r3, [r5, #1]
 800bb7a:	2e01      	cmp	r6, #1
 800bb7c:	d077      	beq.n	800bc6e <ucdr_serialize_uint64_t+0x156>
 800bb7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bb82:	70ab      	strb	r3, [r5, #2]
 800bb84:	2e02      	cmp	r6, #2
 800bb86:	d076      	beq.n	800bc76 <ucdr_serialize_uint64_t+0x15e>
 800bb88:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bb8c:	70eb      	strb	r3, [r5, #3]
 800bb8e:	2e03      	cmp	r6, #3
 800bb90:	d075      	beq.n	800bc7e <ucdr_serialize_uint64_t+0x166>
 800bb92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bb96:	712b      	strb	r3, [r5, #4]
 800bb98:	2e04      	cmp	r6, #4
 800bb9a:	d074      	beq.n	800bc86 <ucdr_serialize_uint64_t+0x16e>
 800bb9c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bba0:	716b      	strb	r3, [r5, #5]
 800bba2:	2e05      	cmp	r6, #5
 800bba4:	d073      	beq.n	800bc8e <ucdr_serialize_uint64_t+0x176>
 800bba6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bbaa:	71ab      	strb	r3, [r5, #6]
 800bbac:	2e06      	cmp	r6, #6
 800bbae:	d072      	beq.n	800bc96 <ucdr_serialize_uint64_t+0x17e>
 800bbb0:	f89d 3000 	ldrb.w	r3, [sp]
 800bbb4:	71eb      	strb	r3, [r5, #7]
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	68a2      	ldr	r2, [r4, #8]
 800bbba:	7da0      	ldrb	r0, [r4, #22]
 800bbbc:	3308      	adds	r3, #8
 800bbbe:	1b9e      	subs	r6, r3, r6
 800bbc0:	4442      	add	r2, r8
 800bbc2:	2308      	movs	r3, #8
 800bbc4:	f080 0001 	eor.w	r0, r0, #1
 800bbc8:	60a2      	str	r2, [r4, #8]
 800bbca:	6126      	str	r6, [r4, #16]
 800bbcc:	7563      	strb	r3, [r4, #21]
 800bbce:	b002      	add	sp, #8
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	2108      	movs	r1, #8
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 fa96 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bbdc:	b350      	cbz	r0, 800bc34 <ucdr_serialize_uint64_t+0x11c>
 800bbde:	7d23      	ldrb	r3, [r4, #20]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d02d      	beq.n	800bc40 <ucdr_serialize_uint64_t+0x128>
 800bbe4:	68a3      	ldr	r3, [r4, #8]
 800bbe6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	68a3      	ldr	r3, [r4, #8]
 800bbee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbf2:	705a      	strb	r2, [r3, #1]
 800bbf4:	68a3      	ldr	r3, [r4, #8]
 800bbf6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbfa:	709a      	strb	r2, [r3, #2]
 800bbfc:	68a3      	ldr	r3, [r4, #8]
 800bbfe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc02:	70da      	strb	r2, [r3, #3]
 800bc04:	68a3      	ldr	r3, [r4, #8]
 800bc06:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bc0a:	711a      	strb	r2, [r3, #4]
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bc12:	715a      	strb	r2, [r3, #5]
 800bc14:	68a3      	ldr	r3, [r4, #8]
 800bc16:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bc1a:	719a      	strb	r2, [r3, #6]
 800bc1c:	68a3      	ldr	r3, [r4, #8]
 800bc1e:	f89d 2000 	ldrb.w	r2, [sp]
 800bc22:	71da      	strb	r2, [r3, #7]
 800bc24:	68a2      	ldr	r2, [r4, #8]
 800bc26:	6923      	ldr	r3, [r4, #16]
 800bc28:	3208      	adds	r2, #8
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	2108      	movs	r1, #8
 800bc2e:	60a2      	str	r2, [r4, #8]
 800bc30:	6123      	str	r3, [r4, #16]
 800bc32:	7561      	strb	r1, [r4, #21]
 800bc34:	7da0      	ldrb	r0, [r4, #22]
 800bc36:	f080 0001 	eor.w	r0, r0, #1
 800bc3a:	b002      	add	sp, #8
 800bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc40:	466b      	mov	r3, sp
 800bc42:	cb03      	ldmia	r3!, {r0, r1}
 800bc44:	68a3      	ldr	r3, [r4, #8]
 800bc46:	6018      	str	r0, [r3, #0]
 800bc48:	6059      	str	r1, [r3, #4]
 800bc4a:	e7eb      	b.n	800bc24 <ucdr_serialize_uint64_t+0x10c>
 800bc4c:	68a2      	ldr	r2, [r4, #8]
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	7da0      	ldrb	r0, [r4, #22]
 800bc52:	7567      	strb	r7, [r4, #21]
 800bc54:	1b92      	subs	r2, r2, r6
 800bc56:	1b9b      	subs	r3, r3, r6
 800bc58:	f080 0001 	eor.w	r0, r0, #1
 800bc5c:	60a2      	str	r2, [r4, #8]
 800bc5e:	6123      	str	r3, [r4, #16]
 800bc60:	b002      	add	sp, #8
 800bc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc66:	68a3      	ldr	r3, [r4, #8]
 800bc68:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc6c:	701a      	strb	r2, [r3, #0]
 800bc6e:	68a3      	ldr	r3, [r4, #8]
 800bc70:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc74:	701a      	strb	r2, [r3, #0]
 800bc76:	68a3      	ldr	r3, [r4, #8]
 800bc78:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc7c:	701a      	strb	r2, [r3, #0]
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bc84:	701a      	strb	r2, [r3, #0]
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bc8c:	701a      	strb	r2, [r3, #0]
 800bc8e:	68a3      	ldr	r3, [r4, #8]
 800bc90:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	f89d 2000 	ldrb.w	r2, [sp]
 800bc9c:	701a      	strb	r2, [r3, #0]
 800bc9e:	e78a      	b.n	800bbb6 <ucdr_serialize_uint64_t+0x9e>
 800bca0:	4628      	mov	r0, r5
 800bca2:	466d      	mov	r5, sp
 800bca4:	4629      	mov	r1, r5
 800bca6:	4632      	mov	r2, r6
 800bca8:	f008 fa61 	bl	801416e <memcpy>
 800bcac:	68a0      	ldr	r0, [r4, #8]
 800bcae:	4642      	mov	r2, r8
 800bcb0:	19a9      	adds	r1, r5, r6
 800bcb2:	f008 fa5c 	bl	801416e <memcpy>
 800bcb6:	e77e      	b.n	800bbb6 <ucdr_serialize_uint64_t+0x9e>

0800bcb8 <ucdr_serialize_int16_t>:
 800bcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	2102      	movs	r1, #2
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800bcc8:	f000 fa72 	bl	800c1b0 <ucdr_buffer_alignment>
 800bccc:	4601      	mov	r1, r0
 800bcce:	4620      	mov	r0, r4
 800bcd0:	7d67      	ldrb	r7, [r4, #21]
 800bcd2:	f000 fab1 	bl	800c238 <ucdr_advance_buffer>
 800bcd6:	2102      	movs	r1, #2
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fa09 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800bcde:	bb78      	cbnz	r0, 800bd40 <ucdr_serialize_int16_t+0x88>
 800bce0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bce4:	42ab      	cmp	r3, r5
 800bce6:	d926      	bls.n	800bd36 <ucdr_serialize_int16_t+0x7e>
 800bce8:	1b5e      	subs	r6, r3, r5
 800bcea:	60a3      	str	r3, [r4, #8]
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	f1c6 0802 	rsb	r8, r6, #2
 800bcf2:	4433      	add	r3, r6
 800bcf4:	6123      	str	r3, [r4, #16]
 800bcf6:	4641      	mov	r1, r8
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f000 fa05 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d03b      	beq.n	800bd7a <ucdr_serialize_int16_t+0xc2>
 800bd02:	7d23      	ldrb	r3, [r4, #20]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d04a      	beq.n	800bd9e <ucdr_serialize_int16_t+0xe6>
 800bd08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd0c:	702b      	strb	r3, [r5, #0]
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	d040      	beq.n	800bd94 <ucdr_serialize_int16_t+0xdc>
 800bd12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bd16:	706b      	strb	r3, [r5, #1]
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	68a2      	ldr	r2, [r4, #8]
 800bd1c:	7da0      	ldrb	r0, [r4, #22]
 800bd1e:	3302      	adds	r3, #2
 800bd20:	1b9e      	subs	r6, r3, r6
 800bd22:	4442      	add	r2, r8
 800bd24:	2302      	movs	r3, #2
 800bd26:	f080 0001 	eor.w	r0, r0, #1
 800bd2a:	60a2      	str	r2, [r4, #8]
 800bd2c:	6126      	str	r6, [r4, #16]
 800bd2e:	7563      	strb	r3, [r4, #21]
 800bd30:	b002      	add	sp, #8
 800bd32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd36:	2102      	movs	r1, #2
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 f9e5 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bd3e:	b190      	cbz	r0, 800bd66 <ucdr_serialize_int16_t+0xae>
 800bd40:	7d23      	ldrb	r3, [r4, #20]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	68a3      	ldr	r3, [r4, #8]
 800bd46:	d014      	beq.n	800bd72 <ucdr_serialize_int16_t+0xba>
 800bd48:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bd4c:	701a      	strb	r2, [r3, #0]
 800bd4e:	68a3      	ldr	r3, [r4, #8]
 800bd50:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd54:	705a      	strb	r2, [r3, #1]
 800bd56:	68a2      	ldr	r2, [r4, #8]
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	3202      	adds	r2, #2
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	2102      	movs	r1, #2
 800bd60:	60a2      	str	r2, [r4, #8]
 800bd62:	6123      	str	r3, [r4, #16]
 800bd64:	7561      	strb	r1, [r4, #21]
 800bd66:	7da0      	ldrb	r0, [r4, #22]
 800bd68:	f080 0001 	eor.w	r0, r0, #1
 800bd6c:	b002      	add	sp, #8
 800bd6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd72:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bd76:	801a      	strh	r2, [r3, #0]
 800bd78:	e7ed      	b.n	800bd56 <ucdr_serialize_int16_t+0x9e>
 800bd7a:	68a2      	ldr	r2, [r4, #8]
 800bd7c:	6923      	ldr	r3, [r4, #16]
 800bd7e:	7da0      	ldrb	r0, [r4, #22]
 800bd80:	7567      	strb	r7, [r4, #21]
 800bd82:	1b92      	subs	r2, r2, r6
 800bd84:	1b9b      	subs	r3, r3, r6
 800bd86:	f080 0001 	eor.w	r0, r0, #1
 800bd8a:	60a2      	str	r2, [r4, #8]
 800bd8c:	6123      	str	r3, [r4, #16]
 800bd8e:	b002      	add	sp, #8
 800bd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd94:	68a3      	ldr	r3, [r4, #8]
 800bd96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd9a:	701a      	strb	r2, [r3, #0]
 800bd9c:	e7bc      	b.n	800bd18 <ucdr_serialize_int16_t+0x60>
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f10d 0506 	add.w	r5, sp, #6
 800bda4:	4629      	mov	r1, r5
 800bda6:	4632      	mov	r2, r6
 800bda8:	f008 f9e1 	bl	801416e <memcpy>
 800bdac:	68a0      	ldr	r0, [r4, #8]
 800bdae:	4642      	mov	r2, r8
 800bdb0:	19a9      	adds	r1, r5, r6
 800bdb2:	f008 f9dc 	bl	801416e <memcpy>
 800bdb6:	e7af      	b.n	800bd18 <ucdr_serialize_int16_t+0x60>

0800bdb8 <ucdr_deserialize_int16_t>:
 800bdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdbc:	460d      	mov	r5, r1
 800bdbe:	2102      	movs	r1, #2
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	f000 f9f5 	bl	800c1b0 <ucdr_buffer_alignment>
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	4620      	mov	r0, r4
 800bdca:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bdce:	f000 fa33 	bl	800c238 <ucdr_advance_buffer>
 800bdd2:	2102      	movs	r1, #2
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f000 f98b 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800bdda:	bb60      	cbnz	r0, 800be36 <ucdr_deserialize_int16_t+0x7e>
 800bddc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bde0:	42be      	cmp	r6, r7
 800bde2:	d923      	bls.n	800be2c <ucdr_deserialize_int16_t+0x74>
 800bde4:	6923      	ldr	r3, [r4, #16]
 800bde6:	60a6      	str	r6, [r4, #8]
 800bde8:	1bf6      	subs	r6, r6, r7
 800bdea:	4433      	add	r3, r6
 800bdec:	f1c6 0902 	rsb	r9, r6, #2
 800bdf0:	6123      	str	r3, [r4, #16]
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f000 f987 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d034      	beq.n	800be68 <ucdr_deserialize_int16_t+0xb0>
 800bdfe:	7d23      	ldrb	r3, [r4, #20]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d042      	beq.n	800be8a <ucdr_deserialize_int16_t+0xd2>
 800be04:	787b      	ldrb	r3, [r7, #1]
 800be06:	702b      	strb	r3, [r5, #0]
 800be08:	2e00      	cmp	r6, #0
 800be0a:	d03a      	beq.n	800be82 <ucdr_deserialize_int16_t+0xca>
 800be0c:	783b      	ldrb	r3, [r7, #0]
 800be0e:	706b      	strb	r3, [r5, #1]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	68a2      	ldr	r2, [r4, #8]
 800be14:	7da0      	ldrb	r0, [r4, #22]
 800be16:	2102      	movs	r1, #2
 800be18:	3302      	adds	r3, #2
 800be1a:	444a      	add	r2, r9
 800be1c:	1b9b      	subs	r3, r3, r6
 800be1e:	7561      	strb	r1, [r4, #21]
 800be20:	60a2      	str	r2, [r4, #8]
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	f080 0001 	eor.w	r0, r0, #1
 800be28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2c:	2102      	movs	r1, #2
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f96a 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800be34:	b180      	cbz	r0, 800be58 <ucdr_deserialize_int16_t+0xa0>
 800be36:	7d23      	ldrb	r3, [r4, #20]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	d011      	beq.n	800be62 <ucdr_deserialize_int16_t+0xaa>
 800be3e:	785b      	ldrb	r3, [r3, #1]
 800be40:	702b      	strb	r3, [r5, #0]
 800be42:	68a3      	ldr	r3, [r4, #8]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	706b      	strb	r3, [r5, #1]
 800be48:	68a2      	ldr	r2, [r4, #8]
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	3202      	adds	r2, #2
 800be4e:	3302      	adds	r3, #2
 800be50:	2102      	movs	r1, #2
 800be52:	60a2      	str	r2, [r4, #8]
 800be54:	6123      	str	r3, [r4, #16]
 800be56:	7561      	strb	r1, [r4, #21]
 800be58:	7da0      	ldrb	r0, [r4, #22]
 800be5a:	f080 0001 	eor.w	r0, r0, #1
 800be5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	802b      	strh	r3, [r5, #0]
 800be66:	e7ef      	b.n	800be48 <ucdr_deserialize_int16_t+0x90>
 800be68:	68a2      	ldr	r2, [r4, #8]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	7da0      	ldrb	r0, [r4, #22]
 800be6e:	f884 8015 	strb.w	r8, [r4, #21]
 800be72:	1b92      	subs	r2, r2, r6
 800be74:	1b9b      	subs	r3, r3, r6
 800be76:	60a2      	str	r2, [r4, #8]
 800be78:	6123      	str	r3, [r4, #16]
 800be7a:	f080 0001 	eor.w	r0, r0, #1
 800be7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be82:	68a3      	ldr	r3, [r4, #8]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	706b      	strb	r3, [r5, #1]
 800be88:	e7c2      	b.n	800be10 <ucdr_deserialize_int16_t+0x58>
 800be8a:	4639      	mov	r1, r7
 800be8c:	4632      	mov	r2, r6
 800be8e:	4628      	mov	r0, r5
 800be90:	f008 f96d 	bl	801416e <memcpy>
 800be94:	68a1      	ldr	r1, [r4, #8]
 800be96:	464a      	mov	r2, r9
 800be98:	19a8      	adds	r0, r5, r6
 800be9a:	f008 f968 	bl	801416e <memcpy>
 800be9e:	e7b7      	b.n	800be10 <ucdr_deserialize_int16_t+0x58>

0800bea0 <ucdr_serialize_int32_t>:
 800bea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	4604      	mov	r4, r0
 800bea8:	9101      	str	r1, [sp, #4]
 800beaa:	2104      	movs	r1, #4
 800beac:	f000 f980 	bl	800c1b0 <ucdr_buffer_alignment>
 800beb0:	4601      	mov	r1, r0
 800beb2:	4620      	mov	r0, r4
 800beb4:	7d67      	ldrb	r7, [r4, #21]
 800beb6:	f000 f9bf 	bl	800c238 <ucdr_advance_buffer>
 800beba:	2104      	movs	r1, #4
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 f917 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800bec2:	2800      	cmp	r0, #0
 800bec4:	d139      	bne.n	800bf3a <ucdr_serialize_int32_t+0x9a>
 800bec6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800beca:	42ab      	cmp	r3, r5
 800becc:	d930      	bls.n	800bf30 <ucdr_serialize_int32_t+0x90>
 800bece:	1b5e      	subs	r6, r3, r5
 800bed0:	60a3      	str	r3, [r4, #8]
 800bed2:	6923      	ldr	r3, [r4, #16]
 800bed4:	f1c6 0804 	rsb	r8, r6, #4
 800bed8:	4433      	add	r3, r6
 800beda:	6123      	str	r3, [r4, #16]
 800bedc:	4641      	mov	r1, r8
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 f912 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d04c      	beq.n	800bf82 <ucdr_serialize_int32_t+0xe2>
 800bee8:	7d23      	ldrb	r3, [r4, #20]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d063      	beq.n	800bfb6 <ucdr_serialize_int32_t+0x116>
 800beee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bef2:	702b      	strb	r3, [r5, #0]
 800bef4:	2e00      	cmp	r6, #0
 800bef6:	d051      	beq.n	800bf9c <ucdr_serialize_int32_t+0xfc>
 800bef8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800befc:	706b      	strb	r3, [r5, #1]
 800befe:	2e01      	cmp	r6, #1
 800bf00:	d050      	beq.n	800bfa4 <ucdr_serialize_int32_t+0x104>
 800bf02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bf06:	70ab      	strb	r3, [r5, #2]
 800bf08:	2e02      	cmp	r6, #2
 800bf0a:	d04f      	beq.n	800bfac <ucdr_serialize_int32_t+0x10c>
 800bf0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bf10:	70eb      	strb	r3, [r5, #3]
 800bf12:	6923      	ldr	r3, [r4, #16]
 800bf14:	68a2      	ldr	r2, [r4, #8]
 800bf16:	7da0      	ldrb	r0, [r4, #22]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	1b9e      	subs	r6, r3, r6
 800bf1c:	4442      	add	r2, r8
 800bf1e:	2304      	movs	r3, #4
 800bf20:	f080 0001 	eor.w	r0, r0, #1
 800bf24:	60a2      	str	r2, [r4, #8]
 800bf26:	6126      	str	r6, [r4, #16]
 800bf28:	7563      	strb	r3, [r4, #21]
 800bf2a:	b002      	add	sp, #8
 800bf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf30:	2104      	movs	r1, #4
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 f8e8 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800bf38:	b1d0      	cbz	r0, 800bf70 <ucdr_serialize_int32_t+0xd0>
 800bf3a:	7d23      	ldrb	r3, [r4, #20]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	d01c      	beq.n	800bf7c <ucdr_serialize_int32_t+0xdc>
 800bf42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf46:	701a      	strb	r2, [r3, #0]
 800bf48:	68a3      	ldr	r3, [r4, #8]
 800bf4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf4e:	705a      	strb	r2, [r3, #1]
 800bf50:	68a3      	ldr	r3, [r4, #8]
 800bf52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bf56:	709a      	strb	r2, [r3, #2]
 800bf58:	68a3      	ldr	r3, [r4, #8]
 800bf5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bf5e:	70da      	strb	r2, [r3, #3]
 800bf60:	68a2      	ldr	r2, [r4, #8]
 800bf62:	6923      	ldr	r3, [r4, #16]
 800bf64:	3204      	adds	r2, #4
 800bf66:	3304      	adds	r3, #4
 800bf68:	2104      	movs	r1, #4
 800bf6a:	60a2      	str	r2, [r4, #8]
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	7561      	strb	r1, [r4, #21]
 800bf70:	7da0      	ldrb	r0, [r4, #22]
 800bf72:	f080 0001 	eor.w	r0, r0, #1
 800bf76:	b002      	add	sp, #8
 800bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf7c:	9a01      	ldr	r2, [sp, #4]
 800bf7e:	601a      	str	r2, [r3, #0]
 800bf80:	e7ee      	b.n	800bf60 <ucdr_serialize_int32_t+0xc0>
 800bf82:	68a2      	ldr	r2, [r4, #8]
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	7da0      	ldrb	r0, [r4, #22]
 800bf88:	7567      	strb	r7, [r4, #21]
 800bf8a:	1b92      	subs	r2, r2, r6
 800bf8c:	1b9b      	subs	r3, r3, r6
 800bf8e:	f080 0001 	eor.w	r0, r0, #1
 800bf92:	60a2      	str	r2, [r4, #8]
 800bf94:	6123      	str	r3, [r4, #16]
 800bf96:	b002      	add	sp, #8
 800bf98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9c:	68a3      	ldr	r3, [r4, #8]
 800bf9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfa2:	701a      	strb	r2, [r3, #0]
 800bfa4:	68a3      	ldr	r3, [r4, #8]
 800bfa6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bfaa:	701a      	strb	r2, [r3, #0]
 800bfac:	68a3      	ldr	r3, [r4, #8]
 800bfae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bfb2:	701a      	strb	r2, [r3, #0]
 800bfb4:	e7ad      	b.n	800bf12 <ucdr_serialize_int32_t+0x72>
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	ad01      	add	r5, sp, #4
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	f008 f8d6 	bl	801416e <memcpy>
 800bfc2:	68a0      	ldr	r0, [r4, #8]
 800bfc4:	4642      	mov	r2, r8
 800bfc6:	19a9      	adds	r1, r5, r6
 800bfc8:	f008 f8d1 	bl	801416e <memcpy>
 800bfcc:	e7a1      	b.n	800bf12 <ucdr_serialize_int32_t+0x72>
 800bfce:	bf00      	nop

0800bfd0 <ucdr_deserialize_int32_t>:
 800bfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd4:	460d      	mov	r5, r1
 800bfd6:	2104      	movs	r1, #4
 800bfd8:	4604      	mov	r4, r0
 800bfda:	f000 f8e9 	bl	800c1b0 <ucdr_buffer_alignment>
 800bfde:	4601      	mov	r1, r0
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bfe6:	f000 f927 	bl	800c238 <ucdr_advance_buffer>
 800bfea:	2104      	movs	r1, #4
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 f87f 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d138      	bne.n	800c068 <ucdr_deserialize_int32_t+0x98>
 800bff6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bffa:	42b7      	cmp	r7, r6
 800bffc:	d92f      	bls.n	800c05e <ucdr_deserialize_int32_t+0x8e>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	60a7      	str	r7, [r4, #8]
 800c002:	1bbf      	subs	r7, r7, r6
 800c004:	443b      	add	r3, r7
 800c006:	f1c7 0904 	rsb	r9, r7, #4
 800c00a:	6123      	str	r3, [r4, #16]
 800c00c:	4649      	mov	r1, r9
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 f87a 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800c014:	2800      	cmp	r0, #0
 800c016:	d046      	beq.n	800c0a6 <ucdr_deserialize_int32_t+0xd6>
 800c018:	7d23      	ldrb	r3, [r4, #20]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d05c      	beq.n	800c0d8 <ucdr_deserialize_int32_t+0x108>
 800c01e:	78f3      	ldrb	r3, [r6, #3]
 800c020:	702b      	strb	r3, [r5, #0]
 800c022:	2f00      	cmp	r7, #0
 800c024:	d04c      	beq.n	800c0c0 <ucdr_deserialize_int32_t+0xf0>
 800c026:	78b3      	ldrb	r3, [r6, #2]
 800c028:	706b      	strb	r3, [r5, #1]
 800c02a:	2f01      	cmp	r7, #1
 800c02c:	f105 0302 	add.w	r3, r5, #2
 800c030:	d04a      	beq.n	800c0c8 <ucdr_deserialize_int32_t+0xf8>
 800c032:	7873      	ldrb	r3, [r6, #1]
 800c034:	70ab      	strb	r3, [r5, #2]
 800c036:	2f02      	cmp	r7, #2
 800c038:	f105 0303 	add.w	r3, r5, #3
 800c03c:	d048      	beq.n	800c0d0 <ucdr_deserialize_int32_t+0x100>
 800c03e:	7833      	ldrb	r3, [r6, #0]
 800c040:	70eb      	strb	r3, [r5, #3]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	68a2      	ldr	r2, [r4, #8]
 800c046:	7da0      	ldrb	r0, [r4, #22]
 800c048:	2104      	movs	r1, #4
 800c04a:	3304      	adds	r3, #4
 800c04c:	444a      	add	r2, r9
 800c04e:	1bdb      	subs	r3, r3, r7
 800c050:	7561      	strb	r1, [r4, #21]
 800c052:	60a2      	str	r2, [r4, #8]
 800c054:	6123      	str	r3, [r4, #16]
 800c056:	f080 0001 	eor.w	r0, r0, #1
 800c05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c05e:	2104      	movs	r1, #4
 800c060:	4620      	mov	r0, r4
 800c062:	f000 f851 	bl	800c108 <ucdr_check_final_buffer_behavior>
 800c066:	b1b0      	cbz	r0, 800c096 <ucdr_deserialize_int32_t+0xc6>
 800c068:	7d23      	ldrb	r3, [r4, #20]
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	68a3      	ldr	r3, [r4, #8]
 800c06e:	d017      	beq.n	800c0a0 <ucdr_deserialize_int32_t+0xd0>
 800c070:	78db      	ldrb	r3, [r3, #3]
 800c072:	702b      	strb	r3, [r5, #0]
 800c074:	68a3      	ldr	r3, [r4, #8]
 800c076:	789b      	ldrb	r3, [r3, #2]
 800c078:	706b      	strb	r3, [r5, #1]
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	785b      	ldrb	r3, [r3, #1]
 800c07e:	70ab      	strb	r3, [r5, #2]
 800c080:	68a3      	ldr	r3, [r4, #8]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	70eb      	strb	r3, [r5, #3]
 800c086:	68a2      	ldr	r2, [r4, #8]
 800c088:	6923      	ldr	r3, [r4, #16]
 800c08a:	3204      	adds	r2, #4
 800c08c:	3304      	adds	r3, #4
 800c08e:	2104      	movs	r1, #4
 800c090:	60a2      	str	r2, [r4, #8]
 800c092:	6123      	str	r3, [r4, #16]
 800c094:	7561      	strb	r1, [r4, #21]
 800c096:	7da0      	ldrb	r0, [r4, #22]
 800c098:	f080 0001 	eor.w	r0, r0, #1
 800c09c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	602b      	str	r3, [r5, #0]
 800c0a4:	e7ef      	b.n	800c086 <ucdr_deserialize_int32_t+0xb6>
 800c0a6:	68a2      	ldr	r2, [r4, #8]
 800c0a8:	6923      	ldr	r3, [r4, #16]
 800c0aa:	7da0      	ldrb	r0, [r4, #22]
 800c0ac:	f884 8015 	strb.w	r8, [r4, #21]
 800c0b0:	1bd2      	subs	r2, r2, r7
 800c0b2:	1bdb      	subs	r3, r3, r7
 800c0b4:	60a2      	str	r2, [r4, #8]
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	f080 0001 	eor.w	r0, r0, #1
 800c0bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c0:	68a3      	ldr	r3, [r4, #8]
 800c0c2:	789b      	ldrb	r3, [r3, #2]
 800c0c4:	706b      	strb	r3, [r5, #1]
 800c0c6:	1cab      	adds	r3, r5, #2
 800c0c8:	68a2      	ldr	r2, [r4, #8]
 800c0ca:	7852      	ldrb	r2, [r2, #1]
 800c0cc:	f803 2b01 	strb.w	r2, [r3], #1
 800c0d0:	68a2      	ldr	r2, [r4, #8]
 800c0d2:	7812      	ldrb	r2, [r2, #0]
 800c0d4:	701a      	strb	r2, [r3, #0]
 800c0d6:	e7b4      	b.n	800c042 <ucdr_deserialize_int32_t+0x72>
 800c0d8:	4631      	mov	r1, r6
 800c0da:	463a      	mov	r2, r7
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f008 f846 	bl	801416e <memcpy>
 800c0e2:	68a1      	ldr	r1, [r4, #8]
 800c0e4:	464a      	mov	r2, r9
 800c0e6:	19e8      	adds	r0, r5, r7
 800c0e8:	f008 f841 	bl	801416e <memcpy>
 800c0ec:	e7a9      	b.n	800c042 <ucdr_deserialize_int32_t+0x72>
 800c0ee:	bf00      	nop

0800c0f0 <ucdr_check_buffer_available_for>:
 800c0f0:	7d83      	ldrb	r3, [r0, #22]
 800c0f2:	b93b      	cbnz	r3, 800c104 <ucdr_check_buffer_available_for+0x14>
 800c0f4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800c0f8:	4419      	add	r1, r3
 800c0fa:	4288      	cmp	r0, r1
 800c0fc:	bf34      	ite	cc
 800c0fe:	2000      	movcc	r0, #0
 800c100:	2001      	movcs	r0, #1
 800c102:	4770      	bx	lr
 800c104:	2000      	movs	r0, #0
 800c106:	4770      	bx	lr

0800c108 <ucdr_check_final_buffer_behavior>:
 800c108:	7d83      	ldrb	r3, [r0, #22]
 800c10a:	b943      	cbnz	r3, 800c11e <ucdr_check_final_buffer_behavior+0x16>
 800c10c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800c110:	4291      	cmp	r1, r2
 800c112:	b510      	push	{r4, lr}
 800c114:	4604      	mov	r4, r0
 800c116:	d205      	bcs.n	800c124 <ucdr_check_final_buffer_behavior+0x1c>
 800c118:	2301      	movs	r3, #1
 800c11a:	4618      	mov	r0, r3
 800c11c:	bd10      	pop	{r4, pc}
 800c11e:	2300      	movs	r3, #0
 800c120:	4618      	mov	r0, r3
 800c122:	4770      	bx	lr
 800c124:	6982      	ldr	r2, [r0, #24]
 800c126:	b13a      	cbz	r2, 800c138 <ucdr_check_final_buffer_behavior+0x30>
 800c128:	69c1      	ldr	r1, [r0, #28]
 800c12a:	4790      	blx	r2
 800c12c:	f080 0301 	eor.w	r3, r0, #1
 800c130:	b2db      	uxtb	r3, r3
 800c132:	75a0      	strb	r0, [r4, #22]
 800c134:	4618      	mov	r0, r3
 800c136:	bd10      	pop	{r4, pc}
 800c138:	2001      	movs	r0, #1
 800c13a:	75a0      	strb	r0, [r4, #22]
 800c13c:	e7fa      	b.n	800c134 <ucdr_check_final_buffer_behavior+0x2c>
 800c13e:	bf00      	nop

0800c140 <ucdr_set_on_full_buffer_callback>:
 800c140:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop

0800c148 <ucdr_init_buffer_origin_offset_endian>:
 800c148:	b410      	push	{r4}
 800c14a:	9c01      	ldr	r4, [sp, #4]
 800c14c:	6001      	str	r1, [r0, #0]
 800c14e:	440a      	add	r2, r1
 800c150:	6042      	str	r2, [r0, #4]
 800c152:	190a      	adds	r2, r1, r4
 800c154:	441c      	add	r4, r3
 800c156:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800c15a:	6082      	str	r2, [r0, #8]
 800c15c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c160:	7503      	strb	r3, [r0, #20]
 800c162:	2200      	movs	r2, #0
 800c164:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800c168:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c16c:	7542      	strb	r2, [r0, #21]
 800c16e:	7582      	strb	r2, [r0, #22]
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop

0800c174 <ucdr_init_buffer_origin_offset>:
 800c174:	b510      	push	{r4, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	9c04      	ldr	r4, [sp, #16]
 800c17a:	9400      	str	r4, [sp, #0]
 800c17c:	2401      	movs	r4, #1
 800c17e:	9401      	str	r4, [sp, #4]
 800c180:	f7ff ffe2 	bl	800c148 <ucdr_init_buffer_origin_offset_endian>
 800c184:	b002      	add	sp, #8
 800c186:	bd10      	pop	{r4, pc}

0800c188 <ucdr_init_buffer_origin>:
 800c188:	b510      	push	{r4, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	2400      	movs	r4, #0
 800c18e:	9400      	str	r4, [sp, #0]
 800c190:	f7ff fff0 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800c194:	b002      	add	sp, #8
 800c196:	bd10      	pop	{r4, pc}

0800c198 <ucdr_init_buffer>:
 800c198:	2300      	movs	r3, #0
 800c19a:	f7ff bff5 	b.w	800c188 <ucdr_init_buffer_origin>
 800c19e:	bf00      	nop

0800c1a0 <ucdr_alignment>:
 800c1a0:	fbb0 f3f1 	udiv	r3, r0, r1
 800c1a4:	fb03 0011 	mls	r0, r3, r1, r0
 800c1a8:	1a08      	subs	r0, r1, r0
 800c1aa:	3901      	subs	r1, #1
 800c1ac:	4008      	ands	r0, r1
 800c1ae:	4770      	bx	lr

0800c1b0 <ucdr_buffer_alignment>:
 800c1b0:	7d43      	ldrb	r3, [r0, #21]
 800c1b2:	428b      	cmp	r3, r1
 800c1b4:	d208      	bcs.n	800c1c8 <ucdr_buffer_alignment+0x18>
 800c1b6:	6900      	ldr	r0, [r0, #16]
 800c1b8:	fbb0 f3f1 	udiv	r3, r0, r1
 800c1bc:	fb01 0013 	mls	r0, r1, r3, r0
 800c1c0:	1a08      	subs	r0, r1, r0
 800c1c2:	3901      	subs	r1, #1
 800c1c4:	4008      	ands	r0, r1
 800c1c6:	4770      	bx	lr
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	4770      	bx	lr

0800c1cc <ucdr_align_to>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	460d      	mov	r5, r1
 800c1d2:	f7ff ffed 	bl	800c1b0 <ucdr_buffer_alignment>
 800c1d6:	68a3      	ldr	r3, [r4, #8]
 800c1d8:	6921      	ldr	r1, [r4, #16]
 800c1da:	7565      	strb	r5, [r4, #21]
 800c1dc:	181a      	adds	r2, r3, r0
 800c1de:	6863      	ldr	r3, [r4, #4]
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	4408      	add	r0, r1
 800c1e4:	bf28      	it	cs
 800c1e6:	4613      	movcs	r3, r2
 800c1e8:	6120      	str	r0, [r4, #16]
 800c1ea:	60a3      	str	r3, [r4, #8]
 800c1ec:	bd38      	pop	{r3, r4, r5, pc}
 800c1ee:	bf00      	nop

0800c1f0 <ucdr_buffer_length>:
 800c1f0:	6882      	ldr	r2, [r0, #8]
 800c1f2:	6800      	ldr	r0, [r0, #0]
 800c1f4:	1a10      	subs	r0, r2, r0
 800c1f6:	4770      	bx	lr

0800c1f8 <ucdr_buffer_remaining>:
 800c1f8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c1fc:	1a10      	subs	r0, r2, r0
 800c1fe:	4770      	bx	lr

0800c200 <ucdr_check_final_buffer_behavior_array>:
 800c200:	b538      	push	{r3, r4, r5, lr}
 800c202:	7d83      	ldrb	r3, [r0, #22]
 800c204:	b963      	cbnz	r3, 800c220 <ucdr_check_final_buffer_behavior_array+0x20>
 800c206:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	4604      	mov	r4, r0
 800c20e:	460d      	mov	r5, r1
 800c210:	d308      	bcc.n	800c224 <ucdr_check_final_buffer_behavior_array+0x24>
 800c212:	b139      	cbz	r1, 800c224 <ucdr_check_final_buffer_behavior_array+0x24>
 800c214:	6983      	ldr	r3, [r0, #24]
 800c216:	b163      	cbz	r3, 800c232 <ucdr_check_final_buffer_behavior_array+0x32>
 800c218:	69c1      	ldr	r1, [r0, #28]
 800c21a:	4798      	blx	r3
 800c21c:	75a0      	strb	r0, [r4, #22]
 800c21e:	b108      	cbz	r0, 800c224 <ucdr_check_final_buffer_behavior_array+0x24>
 800c220:	2000      	movs	r0, #0
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	4620      	mov	r0, r4
 800c226:	f7ff ffe7 	bl	800c1f8 <ucdr_buffer_remaining>
 800c22a:	42a8      	cmp	r0, r5
 800c22c:	bf28      	it	cs
 800c22e:	4628      	movcs	r0, r5
 800c230:	bd38      	pop	{r3, r4, r5, pc}
 800c232:	2301      	movs	r3, #1
 800c234:	7583      	strb	r3, [r0, #22]
 800c236:	e7f3      	b.n	800c220 <ucdr_check_final_buffer_behavior_array+0x20>

0800c238 <ucdr_advance_buffer>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4604      	mov	r4, r0
 800c23c:	460d      	mov	r5, r1
 800c23e:	f7ff ff57 	bl	800c0f0 <ucdr_check_buffer_available_for>
 800c242:	b178      	cbz	r0, 800c264 <ucdr_advance_buffer+0x2c>
 800c244:	6923      	ldr	r3, [r4, #16]
 800c246:	68a2      	ldr	r2, [r4, #8]
 800c248:	442b      	add	r3, r5
 800c24a:	6123      	str	r3, [r4, #16]
 800c24c:	2301      	movs	r3, #1
 800c24e:	442a      	add	r2, r5
 800c250:	7563      	strb	r3, [r4, #21]
 800c252:	60a2      	str	r2, [r4, #8]
 800c254:	bd38      	pop	{r3, r4, r5, pc}
 800c256:	68a2      	ldr	r2, [r4, #8]
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	4402      	add	r2, r0
 800c25c:	4403      	add	r3, r0
 800c25e:	1a2d      	subs	r5, r5, r0
 800c260:	60a2      	str	r2, [r4, #8]
 800c262:	6123      	str	r3, [r4, #16]
 800c264:	4629      	mov	r1, r5
 800c266:	2201      	movs	r2, #1
 800c268:	4620      	mov	r0, r4
 800c26a:	f7ff ffc9 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 800c26e:	2800      	cmp	r0, #0
 800c270:	d1f1      	bne.n	800c256 <ucdr_advance_buffer+0x1e>
 800c272:	2301      	movs	r3, #1
 800c274:	7563      	strb	r3, [r4, #21]
 800c276:	bd38      	pop	{r3, r4, r5, pc}

0800c278 <uxr_buffer_delete_entity>:
 800c278:	b510      	push	{r4, lr}
 800c27a:	2300      	movs	r3, #0
 800c27c:	b08e      	sub	sp, #56	@ 0x38
 800c27e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c282:	2303      	movs	r3, #3
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	2204      	movs	r2, #4
 800c288:	ab06      	add	r3, sp, #24
 800c28a:	4604      	mov	r4, r0
 800c28c:	9103      	str	r1, [sp, #12]
 800c28e:	f001 f86f 	bl	800d370 <uxr_prepare_stream_to_write_submessage>
 800c292:	b918      	cbnz	r0, 800c29c <uxr_buffer_delete_entity+0x24>
 800c294:	4604      	mov	r4, r0
 800c296:	4620      	mov	r0, r4
 800c298:	b00e      	add	sp, #56	@ 0x38
 800c29a:	bd10      	pop	{r4, pc}
 800c29c:	9902      	ldr	r1, [sp, #8]
 800c29e:	aa05      	add	r2, sp, #20
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	f001 f99b 	bl	800d5dc <uxr_init_base_object_request>
 800c2a6:	a905      	add	r1, sp, #20
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	a806      	add	r0, sp, #24
 800c2ac:	f002 fb00 	bl	800e8b0 <uxr_serialize_DELETE_Payload>
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	b00e      	add	sp, #56	@ 0x38
 800c2b4:	bd10      	pop	{r4, pc}
 800c2b6:	bf00      	nop

0800c2b8 <uxr_common_create_entity>:
 800c2b8:	b510      	push	{r4, lr}
 800c2ba:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c2be:	b08c      	sub	sp, #48	@ 0x30
 800c2c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c2c4:	f1bc 0f01 	cmp.w	ip, #1
 800c2c8:	bf0c      	ite	eq
 800c2ca:	f003 0201 	andeq.w	r2, r3, #1
 800c2ce:	2200      	movne	r2, #0
 800c2d0:	330e      	adds	r3, #14
 800c2d2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800c2d6:	9101      	str	r1, [sp, #4]
 800c2d8:	441a      	add	r2, r3
 800c2da:	2301      	movs	r3, #1
 800c2dc:	9300      	str	r3, [sp, #0]
 800c2de:	9903      	ldr	r1, [sp, #12]
 800c2e0:	ab04      	add	r3, sp, #16
 800c2e2:	b292      	uxth	r2, r2
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	f001 f843 	bl	800d370 <uxr_prepare_stream_to_write_submessage>
 800c2ea:	b918      	cbnz	r0, 800c2f4 <uxr_common_create_entity+0x3c>
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	b00c      	add	sp, #48	@ 0x30
 800c2f2:	bd10      	pop	{r4, pc}
 800c2f4:	9902      	ldr	r1, [sp, #8]
 800c2f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f001 f96f 	bl	800d5dc <uxr_init_base_object_request>
 800c2fe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c300:	4604      	mov	r4, r0
 800c302:	a804      	add	r0, sp, #16
 800c304:	f002 fa30 	bl	800e768 <uxr_serialize_CREATE_Payload>
 800c308:	4620      	mov	r0, r4
 800c30a:	b00c      	add	sp, #48	@ 0x30
 800c30c:	bd10      	pop	{r4, pc}
 800c30e:	bf00      	nop

0800c310 <uxr_buffer_create_participant_bin>:
 800c310:	b570      	push	{r4, r5, r6, lr}
 800c312:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800c316:	ac11      	add	r4, sp, #68	@ 0x44
 800c318:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800c31c:	2303      	movs	r3, #3
 800c31e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800c322:	7223      	strb	r3, [r4, #8]
 800c324:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800c326:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800c32a:	2201      	movs	r2, #1
 800c32c:	2100      	movs	r1, #0
 800c32e:	4605      	mov	r5, r0
 800c330:	7122      	strb	r2, [r4, #4]
 800c332:	f88d 1014 	strb.w	r1, [sp, #20]
 800c336:	b1cb      	cbz	r3, 800c36c <uxr_buffer_create_participant_bin+0x5c>
 800c338:	f88d 201c 	strb.w	r2, [sp, #28]
 800c33c:	9308      	str	r3, [sp, #32]
 800c33e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c342:	a915      	add	r1, sp, #84	@ 0x54
 800c344:	a809      	add	r0, sp, #36	@ 0x24
 800c346:	f7ff ff27 	bl	800c198 <ucdr_init_buffer>
 800c34a:	a905      	add	r1, sp, #20
 800c34c:	a809      	add	r0, sp, #36	@ 0x24
 800c34e:	f001 fed9 	bl	800e104 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800c352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c354:	9600      	str	r6, [sp, #0]
 800c356:	9401      	str	r4, [sp, #4]
 800c358:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c35c:	60e3      	str	r3, [r4, #12]
 800c35e:	4628      	mov	r0, r5
 800c360:	b29b      	uxth	r3, r3
 800c362:	f7ff ffa9 	bl	800c2b8 <uxr_common_create_entity>
 800c366:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800c36a:	bd70      	pop	{r4, r5, r6, pc}
 800c36c:	f88d 301c 	strb.w	r3, [sp, #28]
 800c370:	e7e5      	b.n	800c33e <uxr_buffer_create_participant_bin+0x2e>
 800c372:	bf00      	nop

0800c374 <uxr_buffer_create_topic_bin>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800c37a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c37e:	9105      	str	r1, [sp, #20]
 800c380:	4605      	mov	r5, r0
 800c382:	a997      	add	r1, sp, #604	@ 0x25c
 800c384:	4618      	mov	r0, r3
 800c386:	2302      	movs	r3, #2
 800c388:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800c38c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800c390:	f000 f8ee 	bl	800c570 <uxr_object_id_to_raw>
 800c394:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800c396:	9306      	str	r3, [sp, #24]
 800c398:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800c39a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c39c:	2303      	movs	r3, #3
 800c39e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c3a8:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800c3ac:	a917      	add	r1, sp, #92	@ 0x5c
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	a80b      	add	r0, sp, #44	@ 0x2c
 800c3b2:	f88d 301c 	strb.w	r3, [sp, #28]
 800c3b6:	f7ff feef 	bl	800c198 <ucdr_init_buffer>
 800c3ba:	a906      	add	r1, sp, #24
 800c3bc:	a80b      	add	r0, sp, #44	@ 0x2c
 800c3be:	f001 fec3 	bl	800e148 <uxr_serialize_OBJK_Topic_Binary>
 800c3c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3c4:	9316      	str	r3, [sp, #88]	@ 0x58
 800c3c6:	ac13      	add	r4, sp, #76	@ 0x4c
 800c3c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c3cc:	9600      	str	r6, [sp, #0]
 800c3ce:	9401      	str	r4, [sp, #4]
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	f7ff ff70 	bl	800c2b8 <uxr_common_create_entity>
 800c3d8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800c3dc:	bd70      	pop	{r4, r5, r6, pc}
 800c3de:	bf00      	nop

0800c3e0 <uxr_buffer_create_publisher_bin>:
 800c3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3e2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800c3e6:	4605      	mov	r5, r0
 800c3e8:	9105      	str	r1, [sp, #20]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	2603      	movs	r6, #3
 800c3ee:	a992      	add	r1, sp, #584	@ 0x248
 800c3f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c3f4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800c3f8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800c3fc:	f000 f8b8 	bl	800c570 <uxr_object_id_to_raw>
 800c400:	2300      	movs	r3, #0
 800c402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c406:	a912      	add	r1, sp, #72	@ 0x48
 800c408:	a806      	add	r0, sp, #24
 800c40a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800c40e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800c412:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800c416:	f7ff febf 	bl	800c198 <ucdr_init_buffer>
 800c41a:	a993      	add	r1, sp, #588	@ 0x24c
 800c41c:	a806      	add	r0, sp, #24
 800c41e:	f001 ff47 	bl	800e2b0 <uxr_serialize_OBJK_Publisher_Binary>
 800c422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c424:	9311      	str	r3, [sp, #68]	@ 0x44
 800c426:	ac0e      	add	r4, sp, #56	@ 0x38
 800c428:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c42c:	9700      	str	r7, [sp, #0]
 800c42e:	9401      	str	r4, [sp, #4]
 800c430:	b29b      	uxth	r3, r3
 800c432:	4628      	mov	r0, r5
 800c434:	f7ff ff40 	bl	800c2b8 <uxr_common_create_entity>
 800c438:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800c43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c43e:	bf00      	nop

0800c440 <uxr_buffer_create_datawriter_bin>:
 800c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c444:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c448:	ac1d      	add	r4, sp, #116	@ 0x74
 800c44a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c44e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800c452:	9105      	str	r1, [sp, #20]
 800c454:	4606      	mov	r6, r0
 800c456:	a9a1      	add	r1, sp, #644	@ 0x284
 800c458:	4618      	mov	r0, r3
 800c45a:	2305      	movs	r3, #5
 800c45c:	7123      	strb	r3, [r4, #4]
 800c45e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800c462:	2703      	movs	r7, #3
 800c464:	f000 f884 	bl	800c570 <uxr_object_id_to_raw>
 800c468:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800c46a:	7227      	strb	r7, [r4, #8]
 800c46c:	a90e      	add	r1, sp, #56	@ 0x38
 800c46e:	f000 f87f 	bl	800c570 <uxr_object_id_to_raw>
 800c472:	2300      	movs	r3, #0
 800c474:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800c478:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800c47c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800c480:	3d00      	subs	r5, #0
 800c482:	bf18      	it	ne
 800c484:	2501      	movne	r5, #1
 800c486:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800c48a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800c48e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800c492:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c496:	2301      	movs	r3, #1
 800c498:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800c49c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800c4a0:	bb8a      	cbnz	r2, 800c506 <uxr_buffer_create_datawriter_bin+0xc6>
 800c4a2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c4a6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800c4aa:	f04f 0c13 	mov.w	ip, #19
 800c4ae:	250b      	movs	r5, #11
 800c4b0:	2221      	movs	r2, #33	@ 0x21
 800c4b2:	2111      	movs	r1, #17
 800c4b4:	2009      	movs	r0, #9
 800c4b6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800c4ba:	b923      	cbnz	r3, 800c4c6 <uxr_buffer_create_datawriter_bin+0x86>
 800c4bc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800c4c0:	4672      	mov	r2, lr
 800c4c2:	4661      	mov	r1, ip
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d025      	beq.n	800c51a <uxr_buffer_create_datawriter_bin+0xda>
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d029      	beq.n	800c526 <uxr_buffer_create_datawriter_bin+0xe6>
 800c4d2:	b32b      	cbz	r3, 800c520 <uxr_buffer_create_datawriter_bin+0xe0>
 800c4d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4d8:	a921      	add	r1, sp, #132	@ 0x84
 800c4da:	a806      	add	r0, sp, #24
 800c4dc:	f7ff fe5c 	bl	800c198 <ucdr_init_buffer>
 800c4e0:	a90e      	add	r1, sp, #56	@ 0x38
 800c4e2:	a806      	add	r0, sp, #24
 800c4e4:	f001 ff5a 	bl	800e39c <uxr_serialize_OBJK_DataWriter_Binary>
 800c4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ea:	f8cd 8000 	str.w	r8, [sp]
 800c4ee:	9401      	str	r4, [sp, #4]
 800c4f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c4f4:	60e3      	str	r3, [r4, #12]
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	f7ff fedd 	bl	800c2b8 <uxr_common_create_entity>
 800c4fe:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c506:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800c50a:	f04f 0c12 	mov.w	ip, #18
 800c50e:	250a      	movs	r5, #10
 800c510:	2220      	movs	r2, #32
 800c512:	2110      	movs	r1, #16
 800c514:	2008      	movs	r0, #8
 800c516:	2702      	movs	r7, #2
 800c518:	e7cd      	b.n	800c4b6 <uxr_buffer_create_datawriter_bin+0x76>
 800c51a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800c51e:	e7d9      	b.n	800c4d4 <uxr_buffer_create_datawriter_bin+0x94>
 800c520:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800c524:	e7d6      	b.n	800c4d4 <uxr_buffer_create_datawriter_bin+0x94>
 800c526:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800c52a:	e7d3      	b.n	800c4d4 <uxr_buffer_create_datawriter_bin+0x94>

0800c52c <uxr_object_id>:
 800c52c:	b082      	sub	sp, #8
 800c52e:	2300      	movs	r3, #0
 800c530:	f88d 1006 	strb.w	r1, [sp, #6]
 800c534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c538:	f360 030f 	bfi	r3, r0, #0, #16
 800c53c:	f362 431f 	bfi	r3, r2, #16, #16
 800c540:	4618      	mov	r0, r3
 800c542:	b002      	add	sp, #8
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop

0800c548 <uxr_object_id_from_raw>:
 800c548:	7843      	ldrb	r3, [r0, #1]
 800c54a:	7801      	ldrb	r1, [r0, #0]
 800c54c:	b082      	sub	sp, #8
 800c54e:	f003 020f 	and.w	r2, r3, #15
 800c552:	f88d 2006 	strb.w	r2, [sp, #6]
 800c556:	091b      	lsrs	r3, r3, #4
 800c558:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c55c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c560:	2000      	movs	r0, #0
 800c562:	f363 000f 	bfi	r0, r3, #0, #16
 800c566:	f362 401f 	bfi	r0, r2, #16, #16
 800c56a:	b002      	add	sp, #8
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop

0800c570 <uxr_object_id_to_raw>:
 800c570:	4602      	mov	r2, r0
 800c572:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c576:	b082      	sub	sp, #8
 800c578:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c57c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c580:	f881 c000 	strb.w	ip, [r1]
 800c584:	7048      	strb	r0, [r1, #1]
 800c586:	b002      	add	sp, #8
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop

0800c58c <on_get_fragmentation_info>:
 800c58c:	b500      	push	{lr}
 800c58e:	b08b      	sub	sp, #44	@ 0x2c
 800c590:	4601      	mov	r1, r0
 800c592:	2204      	movs	r2, #4
 800c594:	a802      	add	r0, sp, #8
 800c596:	f7ff fdff 	bl	800c198 <ucdr_init_buffer>
 800c59a:	f10d 0305 	add.w	r3, sp, #5
 800c59e:	f10d 0206 	add.w	r2, sp, #6
 800c5a2:	a901      	add	r1, sp, #4
 800c5a4:	a802      	add	r0, sp, #8
 800c5a6:	f001 f99b 	bl	800d8e0 <uxr_read_submessage_header>
 800c5aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5ae:	2b0d      	cmp	r3, #13
 800c5b0:	d003      	beq.n	800c5ba <on_get_fragmentation_info+0x2e>
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	b00b      	add	sp, #44	@ 0x2c
 800c5b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c5be:	f013 0f02 	tst.w	r3, #2
 800c5c2:	bf14      	ite	ne
 800c5c4:	2002      	movne	r0, #2
 800c5c6:	2001      	moveq	r0, #1
 800c5c8:	b00b      	add	sp, #44	@ 0x2c
 800c5ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800c5ce:	bf00      	nop

0800c5d0 <read_submessage_get_info>:
 800c5d0:	b570      	push	{r4, r5, r6, lr}
 800c5d2:	2500      	movs	r5, #0
 800c5d4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800c5d8:	4604      	mov	r4, r0
 800c5da:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800c5de:	460e      	mov	r6, r1
 800c5e0:	a810      	add	r0, sp, #64	@ 0x40
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c5e8:	f007 fcf8 	bl	8013fdc <memset>
 800c5ec:	a903      	add	r1, sp, #12
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	f002 f94a 	bl	800e888 <uxr_deserialize_GET_INFO_Payload>
 800c5f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c5f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 ffe5 	bl	800d5cc <uxr_session_header_offset>
 800c602:	462b      	mov	r3, r5
 800c604:	9000      	str	r0, [sp, #0]
 800c606:	220c      	movs	r2, #12
 800c608:	a905      	add	r1, sp, #20
 800c60a:	a808      	add	r0, sp, #32
 800c60c:	f7ff fdb2 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800c610:	a910      	add	r1, sp, #64	@ 0x40
 800c612:	a808      	add	r0, sp, #32
 800c614:	f002 f9aa 	bl	800e96c <uxr_serialize_INFO_Payload>
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	462a      	mov	r2, r5
 800c61c:	4629      	mov	r1, r5
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 ff7e 	bl	800d520 <uxr_stamp_session_header>
 800c624:	a808      	add	r0, sp, #32
 800c626:	f7ff fde3 	bl	800c1f0 <ucdr_buffer_length>
 800c62a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c62c:	4602      	mov	r2, r0
 800c62e:	a905      	add	r1, sp, #20
 800c630:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c634:	47a0      	blx	r4
 800c636:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800c63a:	bd70      	pop	{r4, r5, r6, pc}

0800c63c <write_submessage_acknack.isra.0>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	b092      	sub	sp, #72	@ 0x48
 800c640:	4605      	mov	r5, r0
 800c642:	460e      	mov	r6, r1
 800c644:	4614      	mov	r4, r2
 800c646:	f000 ffc1 	bl	800d5cc <uxr_session_header_offset>
 800c64a:	a905      	add	r1, sp, #20
 800c64c:	9000      	str	r0, [sp, #0]
 800c64e:	2300      	movs	r3, #0
 800c650:	a80a      	add	r0, sp, #40	@ 0x28
 800c652:	2211      	movs	r2, #17
 800c654:	f7ff fd8e 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800c658:	2218      	movs	r2, #24
 800c65a:	fb02 5404 	mla	r4, r2, r4, r5
 800c65e:	2300      	movs	r3, #0
 800c660:	2205      	movs	r2, #5
 800c662:	3450      	adds	r4, #80	@ 0x50
 800c664:	210a      	movs	r1, #10
 800c666:	a80a      	add	r0, sp, #40	@ 0x28
 800c668:	f001 f920 	bl	800d8ac <uxr_buffer_submessage_header>
 800c66c:	a903      	add	r1, sp, #12
 800c66e:	4620      	mov	r0, r4
 800c670:	f004 fdbe 	bl	80111f0 <uxr_compute_acknack>
 800c674:	ba40      	rev16	r0, r0
 800c676:	f8ad 000e 	strh.w	r0, [sp, #14]
 800c67a:	a903      	add	r1, sp, #12
 800c67c:	a80a      	add	r0, sp, #40	@ 0x28
 800c67e:	f88d 6010 	strb.w	r6, [sp, #16]
 800c682:	f002 f9e3 	bl	800ea4c <uxr_serialize_ACKNACK_Payload>
 800c686:	2200      	movs	r2, #0
 800c688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c68a:	4611      	mov	r1, r2
 800c68c:	4628      	mov	r0, r5
 800c68e:	f000 ff47 	bl	800d520 <uxr_stamp_session_header>
 800c692:	a80a      	add	r0, sp, #40	@ 0x28
 800c694:	f7ff fdac 	bl	800c1f0 <ucdr_buffer_length>
 800c698:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800c69a:	4602      	mov	r2, r0
 800c69c:	a905      	add	r1, sp, #20
 800c69e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c6a2:	47a0      	blx	r4
 800c6a4:	b012      	add	sp, #72	@ 0x48
 800c6a6:	bd70      	pop	{r4, r5, r6, pc}

0800c6a8 <uxr_init_session>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800c6e0 <uxr_init_session+0x38>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800c6b4:	4604      	mov	r4, r0
 800c6b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800c6ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800c6be:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800c6c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800c6c6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800c6ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800c6ce:	2181      	movs	r1, #129	@ 0x81
 800c6d0:	f000 fe92 	bl	800d3f8 <uxr_init_session_info>
 800c6d4:	f104 0008 	add.w	r0, r4, #8
 800c6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6dc:	f001 b802 	b.w	800d6e4 <uxr_init_stream_storage>
	...

0800c6e8 <uxr_set_status_callback>:
 800c6e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop

0800c6f0 <uxr_set_topic_callback>:
 800c6f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800c6f4:	4770      	bx	lr
 800c6f6:	bf00      	nop

0800c6f8 <uxr_set_request_callback>:
 800c6f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop

0800c700 <uxr_set_reply_callback>:
 800c700:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop

0800c708 <uxr_create_output_best_effort_stream>:
 800c708:	b510      	push	{r4, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	e9cd 2100 	strd	r2, r1, [sp]
 800c710:	4604      	mov	r4, r0
 800c712:	f000 ff5b 	bl	800d5cc <uxr_session_header_offset>
 800c716:	e9dd 2100 	ldrd	r2, r1, [sp]
 800c71a:	4603      	mov	r3, r0
 800c71c:	f104 0008 	add.w	r0, r4, #8
 800c720:	b004      	add	sp, #16
 800c722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c726:	f001 b827 	b.w	800d778 <uxr_add_output_best_effort_buffer>
 800c72a:	bf00      	nop

0800c72c <uxr_create_output_reliable_stream>:
 800c72c:	b510      	push	{r4, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c734:	4604      	mov	r4, r0
 800c736:	9303      	str	r3, [sp, #12]
 800c738:	f000 ff48 	bl	800d5cc <uxr_session_header_offset>
 800c73c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c740:	9000      	str	r0, [sp, #0]
 800c742:	9905      	ldr	r1, [sp, #20]
 800c744:	f104 0008 	add.w	r0, r4, #8
 800c748:	f001 f82a 	bl	800d7a0 <uxr_add_output_reliable_buffer>
 800c74c:	2200      	movs	r2, #0
 800c74e:	b2c3      	uxtb	r3, r0
 800c750:	f363 0207 	bfi	r2, r3, #0, #8
 800c754:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c758:	f363 220f 	bfi	r2, r3, #8, #8
 800c75c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c760:	f363 4217 	bfi	r2, r3, #16, #8
 800c764:	0e03      	lsrs	r3, r0, #24
 800c766:	f363 621f 	bfi	r2, r3, #24, #8
 800c76a:	4610      	mov	r0, r2
 800c76c:	b008      	add	sp, #32
 800c76e:	bd10      	pop	{r4, pc}

0800c770 <uxr_create_input_best_effort_stream>:
 800c770:	b082      	sub	sp, #8
 800c772:	3008      	adds	r0, #8
 800c774:	b002      	add	sp, #8
 800c776:	f001 b82d 	b.w	800d7d4 <uxr_add_input_best_effort_buffer>
 800c77a:	bf00      	nop

0800c77c <uxr_create_input_reliable_stream>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	4c0b      	ldr	r4, [pc, #44]	@ (800c7b0 <uxr_create_input_reliable_stream+0x34>)
 800c782:	9400      	str	r4, [sp, #0]
 800c784:	3008      	adds	r0, #8
 800c786:	f001 f83b 	bl	800d800 <uxr_add_input_reliable_buffer>
 800c78a:	2200      	movs	r2, #0
 800c78c:	b2c3      	uxtb	r3, r0
 800c78e:	f363 0207 	bfi	r2, r3, #0, #8
 800c792:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c796:	f363 220f 	bfi	r2, r3, #8, #8
 800c79a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c79e:	f363 4217 	bfi	r2, r3, #16, #8
 800c7a2:	0e03      	lsrs	r3, r0, #24
 800c7a4:	f363 621f 	bfi	r2, r3, #24, #8
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	b004      	add	sp, #16
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	bf00      	nop
 800c7b0:	0800c58d 	.word	0x0800c58d

0800c7b4 <uxr_epoch_nanos>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	f001 f8d8 	bl	800d96c <uxr_nanos>
 800c7bc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800c7c0:	1ac0      	subs	r0, r0, r3
 800c7c2:	eb61 0102 	sbc.w	r1, r1, r2
 800c7c6:	bd10      	pop	{r4, pc}

0800c7c8 <uxr_flash_output_streams>:
 800c7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7cc:	7e03      	ldrb	r3, [r0, #24]
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d035      	beq.n	800c842 <uxr_flash_output_streams+0x7a>
 800c7d6:	f04f 0900 	mov.w	r9, #0
 800c7da:	4648      	mov	r0, r9
 800c7dc:	f10d 0802 	add.w	r8, sp, #2
 800c7e0:	af03      	add	r7, sp, #12
 800c7e2:	ae02      	add	r6, sp, #8
 800c7e4:	e006      	b.n	800c7f4 <uxr_flash_output_streams+0x2c>
 800c7e6:	7e23      	ldrb	r3, [r4, #24]
 800c7e8:	f109 0901 	add.w	r9, r9, #1
 800c7ec:	fa5f f089 	uxtb.w	r0, r9
 800c7f0:	4283      	cmp	r3, r0
 800c7f2:	d926      	bls.n	800c842 <uxr_flash_output_streams+0x7a>
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	4611      	mov	r1, r2
 800c7f8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800c7fc:	f000 ff1e 	bl	800d63c <uxr_stream_id>
 800c800:	3508      	adds	r5, #8
 800c802:	4684      	mov	ip, r0
 800c804:	4643      	mov	r3, r8
 800c806:	463a      	mov	r2, r7
 800c808:	4631      	mov	r1, r6
 800c80a:	4628      	mov	r0, r5
 800c80c:	f8cd c004 	str.w	ip, [sp, #4]
 800c810:	f004 fd74 	bl	80112fc <uxr_prepare_best_effort_buffer_to_send>
 800c814:	2800      	cmp	r0, #0
 800c816:	d0e6      	beq.n	800c7e6 <uxr_flash_output_streams+0x1e>
 800c818:	9b02      	ldr	r3, [sp, #8]
 800c81a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c81e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c822:	4620      	mov	r0, r4
 800c824:	f000 fe7c 	bl	800d520 <uxr_stamp_session_header>
 800c828:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c82a:	9a03      	ldr	r2, [sp, #12]
 800c82c:	685d      	ldr	r5, [r3, #4]
 800c82e:	6818      	ldr	r0, [r3, #0]
 800c830:	9902      	ldr	r1, [sp, #8]
 800c832:	47a8      	blx	r5
 800c834:	f109 0901 	add.w	r9, r9, #1
 800c838:	7e23      	ldrb	r3, [r4, #24]
 800c83a:	fa5f f089 	uxtb.w	r0, r9
 800c83e:	4283      	cmp	r3, r0
 800c840:	d8d8      	bhi.n	800c7f4 <uxr_flash_output_streams+0x2c>
 800c842:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800c846:	b38b      	cbz	r3, 800c8ac <uxr_flash_output_streams+0xe4>
 800c848:	f04f 0900 	mov.w	r9, #0
 800c84c:	f10d 0802 	add.w	r8, sp, #2
 800c850:	af03      	add	r7, sp, #12
 800c852:	ae02      	add	r6, sp, #8
 800c854:	4648      	mov	r0, r9
 800c856:	2201      	movs	r2, #1
 800c858:	2102      	movs	r1, #2
 800c85a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800c85e:	f000 feed 	bl	800d63c <uxr_stream_id>
 800c862:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800c866:	3520      	adds	r5, #32
 800c868:	9001      	str	r0, [sp, #4]
 800c86a:	e00d      	b.n	800c888 <uxr_flash_output_streams+0xc0>
 800c86c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c870:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	f000 fe53 	bl	800d520 <uxr_stamp_session_header>
 800c87a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c87c:	9a03      	ldr	r2, [sp, #12]
 800c87e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800c882:	9902      	ldr	r1, [sp, #8]
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	47d0      	blx	sl
 800c888:	4643      	mov	r3, r8
 800c88a:	463a      	mov	r2, r7
 800c88c:	4631      	mov	r1, r6
 800c88e:	4628      	mov	r0, r5
 800c890:	f004 ff52 	bl	8011738 <uxr_prepare_next_reliable_buffer_to_send>
 800c894:	4603      	mov	r3, r0
 800c896:	4620      	mov	r0, r4
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e7      	bne.n	800c86c <uxr_flash_output_streams+0xa4>
 800c89c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800c8a0:	f109 0901 	add.w	r9, r9, #1
 800c8a4:	fa5f f089 	uxtb.w	r0, r9
 800c8a8:	4283      	cmp	r3, r0
 800c8aa:	d8d4      	bhi.n	800c856 <uxr_flash_output_streams+0x8e>
 800c8ac:	b004      	add	sp, #16
 800c8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b2:	bf00      	nop

0800c8b4 <read_submessage_info>:
 800c8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b8:	460d      	mov	r5, r1
 800c8ba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800c8be:	4669      	mov	r1, sp
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f001 feee 	bl	800e6a4 <uxr_deserialize_BaseObjectReply>
 800c8c8:	a902      	add	r1, sp, #8
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800c8d2:	f7fe fc9d 	bl	800b210 <ucdr_deserialize_bool>
 800c8d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c8da:	4004      	ands	r4, r0
 800c8dc:	b2e4      	uxtb	r4, r4
 800c8de:	b95b      	cbnz	r3, 800c8f8 <read_submessage_info+0x44>
 800c8e0:	a987      	add	r1, sp, #540	@ 0x21c
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	f7fe fc94 	bl	800b210 <ucdr_deserialize_bool>
 800c8e8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	b94b      	cbnz	r3, 800c904 <read_submessage_info+0x50>
 800c8f0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	a903      	add	r1, sp, #12
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f001 fd7a 	bl	800e3f4 <uxr_deserialize_ObjectVariant>
 800c900:	4004      	ands	r4, r0
 800c902:	e7ed      	b.n	800c8e0 <read_submessage_info+0x2c>
 800c904:	a988      	add	r1, sp, #544	@ 0x220
 800c906:	4628      	mov	r0, r5
 800c908:	f7fe fcb0 	bl	800b26c <ucdr_deserialize_uint8_t>
 800c90c:	4234      	tst	r4, r6
 800c90e:	d0ef      	beq.n	800c8f0 <read_submessage_info+0x3c>
 800c910:	2800      	cmp	r0, #0
 800c912:	d0ed      	beq.n	800c8f0 <read_submessage_info+0x3c>
 800c914:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800c918:	2b0d      	cmp	r3, #13
 800c91a:	d1e9      	bne.n	800c8f0 <read_submessage_info+0x3c>
 800c91c:	a98a      	add	r1, sp, #552	@ 0x228
 800c91e:	4628      	mov	r0, r5
 800c920:	f7ff fa4a 	bl	800bdb8 <ucdr_deserialize_int16_t>
 800c924:	b140      	cbz	r0, 800c938 <read_submessage_info+0x84>
 800c926:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dd07      	ble.n	800c93e <read_submessage_info+0x8a>
 800c92e:	f1b8 0f00 	cmp.w	r8, #0
 800c932:	bf14      	ite	ne
 800c934:	2001      	movne	r0, #1
 800c936:	2002      	moveq	r0, #2
 800c938:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800c93c:	e7d8      	b.n	800c8f0 <read_submessage_info+0x3c>
 800c93e:	2000      	movs	r0, #0
 800c940:	e7fa      	b.n	800c938 <read_submessage_info+0x84>
 800c942:	bf00      	nop

0800c944 <read_submessage_list>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	b097      	sub	sp, #92	@ 0x5c
 800c94a:	4ec1      	ldr	r6, [pc, #772]	@ (800cc50 <read_submessage_list+0x30c>)
 800c94c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c94e:	4604      	mov	r4, r0
 800c950:	460d      	mov	r5, r1
 800c952:	f04f 0801 	mov.w	r8, #1
 800c956:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800c95a:	aa0c      	add	r2, sp, #48	@ 0x30
 800c95c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800c960:	4628      	mov	r0, r5
 800c962:	f000 ffbd 	bl	800d8e0 <uxr_read_submessage_header>
 800c966:	2800      	cmp	r0, #0
 800c968:	f000 813e 	beq.w	800cbe8 <read_submessage_list+0x2a4>
 800c96c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800c970:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800c974:	3b02      	subs	r3, #2
 800c976:	2b0d      	cmp	r3, #13
 800c978:	d8ed      	bhi.n	800c956 <read_submessage_list+0x12>
 800c97a:	a101      	add	r1, pc, #4	@ (adr r1, 800c980 <read_submessage_list+0x3c>)
 800c97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c980:	0800cbdf 	.word	0x0800cbdf
 800c984:	0800c957 	.word	0x0800c957
 800c988:	0800cbcf 	.word	0x0800cbcf
 800c98c:	0800cb6d 	.word	0x0800cb6d
 800c990:	0800cb63 	.word	0x0800cb63
 800c994:	0800c957 	.word	0x0800c957
 800c998:	0800c957 	.word	0x0800c957
 800c99c:	0800cac3 	.word	0x0800cac3
 800c9a0:	0800ca53 	.word	0x0800ca53
 800c9a4:	0800ca13 	.word	0x0800ca13
 800c9a8:	0800c957 	.word	0x0800c957
 800c9ac:	0800c957 	.word	0x0800c957
 800c9b0:	0800c957 	.word	0x0800c957
 800c9b4:	0800c9b9 	.word	0x0800c9b9
 800c9b8:	a910      	add	r1, sp, #64	@ 0x40
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f002 f896 	bl	800eaec <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800c9c0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800c9c4:	f1b9 0f00 	cmp.w	r9, #0
 800c9c8:	f000 8116 	beq.w	800cbf8 <read_submessage_list+0x2b4>
 800c9cc:	f000 ffce 	bl	800d96c <uxr_nanos>
 800c9d0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800c9d8:	2100      	movs	r1, #0
 800c9da:	468c      	mov	ip, r1
 800c9dc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c9e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800c9e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c9e6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800c9e8:	468c      	mov	ip, r1
 800c9ea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c9ee:	46e2      	mov	sl, ip
 800c9f0:	46bc      	mov	ip, r7
 800c9f2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800c9f6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800c9fa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800c9fe:	e9cd 7100 	strd	r7, r1, [sp]
 800ca02:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ca06:	9106      	str	r1, [sp, #24]
 800ca08:	4620      	mov	r0, r4
 800ca0a:	47c8      	blx	r9
 800ca0c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800ca10:	e7a1      	b.n	800c956 <read_submessage_list+0x12>
 800ca12:	a910      	add	r1, sp, #64	@ 0x40
 800ca14:	4628      	mov	r0, r5
 800ca16:	f002 f857 	bl	800eac8 <uxr_deserialize_HEARTBEAT_Payload>
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ca20:	f000 fe36 	bl	800d690 <uxr_stream_id_from_raw>
 800ca24:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ca28:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	f104 0008 	add.w	r0, r4, #8
 800ca30:	f000 ff1c 	bl	800d86c <uxr_get_input_reliable_stream>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d08e      	beq.n	800c956 <read_submessage_list+0x12>
 800ca38:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ca3c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ca40:	f004 fbca 	bl	80111d8 <uxr_process_heartbeat>
 800ca44:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ca48:	463a      	mov	r2, r7
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	f7ff fdf6 	bl	800c63c <write_submessage_acknack.isra.0>
 800ca50:	e781      	b.n	800c956 <read_submessage_list+0x12>
 800ca52:	a910      	add	r1, sp, #64	@ 0x40
 800ca54:	4628      	mov	r0, r5
 800ca56:	f002 f80f 	bl	800ea78 <uxr_deserialize_ACKNACK_Payload>
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ca60:	f000 fe16 	bl	800d690 <uxr_stream_id_from_raw>
 800ca64:	900d      	str	r0, [sp, #52]	@ 0x34
 800ca66:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ca6a:	f104 0008 	add.w	r0, r4, #8
 800ca6e:	f000 fee9 	bl	800d844 <uxr_get_output_reliable_stream>
 800ca72:	4607      	mov	r7, r0
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f43f af6e 	beq.w	800c956 <read_submessage_list+0x12>
 800ca7a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ca7e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ca82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ca86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ca8a:	b289      	uxth	r1, r1
 800ca8c:	f004 fefe 	bl	801188c <uxr_process_acknack>
 800ca90:	4638      	mov	r0, r7
 800ca92:	f004 febb 	bl	801180c <uxr_begin_output_nack_buffer_it>
 800ca96:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ca9a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ca9e:	e006      	b.n	800caae <read_submessage_list+0x16a>
 800caa0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800caa2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800caa4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800caa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	47c8      	blx	r9
 800caae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800cab2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800cab4:	4651      	mov	r1, sl
 800cab6:	4638      	mov	r0, r7
 800cab8:	f004 feaa 	bl	8011810 <uxr_next_reliable_nack_buffer_to_send>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d1ef      	bne.n	800caa0 <read_submessage_list+0x15c>
 800cac0:	e749      	b.n	800c956 <read_submessage_list+0x12>
 800cac2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800cac6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800caca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800cace:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800cad2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800cad6:	4651      	mov	r1, sl
 800cad8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800cadc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800cae0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800cae4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800cae8:	4628      	mov	r0, r5
 800caea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800caee:	f001 fd23 	bl	800e538 <uxr_deserialize_BaseObjectRequest>
 800caf2:	4650      	mov	r0, sl
 800caf4:	a90f      	add	r1, sp, #60	@ 0x3c
 800caf6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800cafa:	f000 fd8d 	bl	800d618 <uxr_parse_base_object_request>
 800cafe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800cb02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb04:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800cb08:	9110      	str	r1, [sp, #64]	@ 0x40
 800cb0a:	3f04      	subs	r7, #4
 800cb0c:	f009 090e 	and.w	r9, r9, #14
 800cb10:	b2bf      	uxth	r7, r7
 800cb12:	f1bb 0f00 	cmp.w	fp, #0
 800cb16:	d006      	beq.n	800cb26 <read_submessage_list+0x1e2>
 800cb18:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	4652      	mov	r2, sl
 800cb20:	2300      	movs	r3, #0
 800cb22:	4620      	mov	r0, r4
 800cb24:	47d8      	blx	fp
 800cb26:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cb28:	b16a      	cbz	r2, 800cb46 <read_submessage_list+0x202>
 800cb2a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	3802      	subs	r0, #2
 800cb30:	e002      	b.n	800cb38 <read_submessage_list+0x1f4>
 800cb32:	3101      	adds	r1, #1
 800cb34:	4291      	cmp	r1, r2
 800cb36:	d006      	beq.n	800cb46 <read_submessage_list+0x202>
 800cb38:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800cb3c:	4553      	cmp	r3, sl
 800cb3e:	d1f8      	bne.n	800cb32 <read_submessage_list+0x1ee>
 800cb40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cb42:	2200      	movs	r2, #0
 800cb44:	545a      	strb	r2, [r3, r1]
 800cb46:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800cb4a:	9102      	str	r1, [sp, #8]
 800cb4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb4e:	9101      	str	r1, [sp, #4]
 800cb50:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800cb52:	9100      	str	r1, [sp, #0]
 800cb54:	464b      	mov	r3, r9
 800cb56:	463a      	mov	r2, r7
 800cb58:	4629      	mov	r1, r5
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	f004 ff1a 	bl	8011994 <read_submessage_format>
 800cb60:	e6f9      	b.n	800c956 <read_submessage_list+0x12>
 800cb62:	4629      	mov	r1, r5
 800cb64:	4620      	mov	r0, r4
 800cb66:	f7ff fea5 	bl	800c8b4 <read_submessage_info>
 800cb6a:	e6f4      	b.n	800c956 <read_submessage_list+0x12>
 800cb6c:	2a00      	cmp	r2, #0
 800cb6e:	d03e      	beq.n	800cbee <read_submessage_list+0x2aa>
 800cb70:	a910      	add	r1, sp, #64	@ 0x40
 800cb72:	4628      	mov	r0, r5
 800cb74:	f001 fedc 	bl	800e930 <uxr_deserialize_STATUS_Payload>
 800cb78:	a90e      	add	r1, sp, #56	@ 0x38
 800cb7a:	aa0d      	add	r2, sp, #52	@ 0x34
 800cb7c:	a810      	add	r0, sp, #64	@ 0x40
 800cb7e:	f000 fd4b 	bl	800d618 <uxr_parse_base_object_request>
 800cb82:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800cb86:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb88:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800cb8c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800cb90:	910f      	str	r1, [sp, #60]	@ 0x3c
 800cb92:	f1ba 0f00 	cmp.w	sl, #0
 800cb96:	d006      	beq.n	800cba6 <read_submessage_list+0x262>
 800cb98:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	463a      	mov	r2, r7
 800cba0:	464b      	mov	r3, r9
 800cba2:	4620      	mov	r0, r4
 800cba4:	47d0      	blx	sl
 800cba6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800cba8:	2a00      	cmp	r2, #0
 800cbaa:	f43f aed4 	beq.w	800c956 <read_submessage_list+0x12>
 800cbae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	3802      	subs	r0, #2
 800cbb4:	e003      	b.n	800cbbe <read_submessage_list+0x27a>
 800cbb6:	3101      	adds	r1, #1
 800cbb8:	4291      	cmp	r1, r2
 800cbba:	f43f aecc 	beq.w	800c956 <read_submessage_list+0x12>
 800cbbe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800cbc2:	42bb      	cmp	r3, r7
 800cbc4:	d1f7      	bne.n	800cbb6 <read_submessage_list+0x272>
 800cbc6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cbc8:	f803 9001 	strb.w	r9, [r3, r1]
 800cbcc:	e6c3      	b.n	800c956 <read_submessage_list+0x12>
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	f47f aec1 	bne.w	800c956 <read_submessage_list+0x12>
 800cbd4:	4629      	mov	r1, r5
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f000 fc64 	bl	800d4a4 <uxr_read_create_session_status>
 800cbdc:	e6bb      	b.n	800c956 <read_submessage_list+0x12>
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	f7ff fcf5 	bl	800c5d0 <read_submessage_get_info>
 800cbe6:	e6b6      	b.n	800c956 <read_submessage_list+0x12>
 800cbe8:	b017      	add	sp, #92	@ 0x5c
 800cbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbee:	4629      	mov	r1, r5
 800cbf0:	4620      	mov	r0, r4
 800cbf2:	f000 fc63 	bl	800d4bc <uxr_read_delete_session_status>
 800cbf6:	e6ae      	b.n	800c956 <read_submessage_list+0x12>
 800cbf8:	f000 feb8 	bl	800d96c <uxr_nanos>
 800cbfc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cbfe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800cc00:	464f      	mov	r7, r9
 800cc02:	fbc3 2706 	smlal	r2, r7, r3, r6
 800cc06:	1812      	adds	r2, r2, r0
 800cc08:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cc0a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800cc0c:	eb47 0101 	adc.w	r1, r7, r1
 800cc10:	464f      	mov	r7, r9
 800cc12:	fbc3 0706 	smlal	r0, r7, r3, r6
 800cc16:	463b      	mov	r3, r7
 800cc18:	4684      	mov	ip, r0
 800cc1a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800cc1e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800cc22:	eb1c 0c00 	adds.w	ip, ip, r0
 800cc26:	464f      	mov	r7, r9
 800cc28:	eb43 0307 	adc.w	r3, r3, r7
 800cc2c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800cc30:	eb61 0303 	sbc.w	r3, r1, r3
 800cc34:	0fda      	lsrs	r2, r3, #31
 800cc36:	eb12 020c 	adds.w	r2, r2, ip
 800cc3a:	f143 0300 	adc.w	r3, r3, #0
 800cc3e:	0852      	lsrs	r2, r2, #1
 800cc40:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800cc44:	105b      	asrs	r3, r3, #1
 800cc46:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800cc4a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800cc4e:	e6dd      	b.n	800ca0c <read_submessage_list+0xc8>
 800cc50:	3b9aca00 	.word	0x3b9aca00

0800cc54 <listen_message_reliably>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	1e0b      	subs	r3, r1, #0
 800cc5a:	b09d      	sub	sp, #116	@ 0x74
 800cc5c:	bfb8      	it	lt
 800cc5e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800cc62:	4680      	mov	r8, r0
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	f000 fe67 	bl	800d938 <uxr_millis>
 800cc6a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800cc6e:	4681      	mov	r9, r0
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	f000 80a1 	beq.w	800cdb8 <listen_message_reliably+0x164>
 800cc76:	2600      	movs	r6, #0
 800cc78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cc7c:	f04f 3bff 	mov.w	fp, #4294967295
 800cc80:	9303      	str	r3, [sp, #12]
 800cc82:	4630      	mov	r0, r6
 800cc84:	460f      	mov	r7, r1
 800cc86:	e00f      	b.n	800cca8 <listen_message_reliably+0x54>
 800cc88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cc8c:	9903      	ldr	r1, [sp, #12]
 800cc8e:	455a      	cmp	r2, fp
 800cc90:	f106 0601 	add.w	r6, r6, #1
 800cc94:	eb73 0101 	sbcs.w	r1, r3, r1
 800cc98:	b2f0      	uxtb	r0, r6
 800cc9a:	da01      	bge.n	800cca0 <listen_message_reliably+0x4c>
 800cc9c:	4693      	mov	fp, r2
 800cc9e:	9303      	str	r3, [sp, #12]
 800cca0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800cca4:	4283      	cmp	r3, r0
 800cca6:	d960      	bls.n	800cd6a <listen_message_reliably+0x116>
 800cca8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800ccac:	2102      	movs	r1, #2
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f000 fcc4 	bl	800d63c <uxr_stream_id>
 800ccb4:	00e4      	lsls	r4, r4, #3
 800ccb6:	f104 0520 	add.w	r5, r4, #32
 800ccba:	4445      	add	r5, r8
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	463b      	mov	r3, r7
 800ccc0:	464a      	mov	r2, r9
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	9109      	str	r1, [sp, #36]	@ 0x24
 800ccc6:	f004 fd77 	bl	80117b8 <uxr_update_output_stream_heartbeat_timestamp>
 800ccca:	eb08 0304 	add.w	r3, r8, r4
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d0da      	beq.n	800cc88 <listen_message_reliably+0x34>
 800ccd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ccd6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800ccda:	9304      	str	r3, [sp, #16]
 800ccdc:	4640      	mov	r0, r8
 800ccde:	f000 fc75 	bl	800d5cc <uxr_session_header_offset>
 800cce2:	3501      	adds	r5, #1
 800cce4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800cce8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ccec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	2211      	movs	r2, #17
 800ccf4:	9000      	str	r0, [sp, #0]
 800ccf6:	a90c      	add	r1, sp, #48	@ 0x30
 800ccf8:	4650      	mov	r0, sl
 800ccfa:	f7ff fa3b 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	2205      	movs	r2, #5
 800cd02:	210b      	movs	r1, #11
 800cd04:	4650      	mov	r0, sl
 800cd06:	f000 fdd1 	bl	800d8ac <uxr_buffer_submessage_header>
 800cd0a:	8968      	ldrh	r0, [r5, #10]
 800cd0c:	2101      	movs	r1, #1
 800cd0e:	f004 ff0b 	bl	8011b28 <uxr_seq_num_add>
 800cd12:	892b      	ldrh	r3, [r5, #8]
 800cd14:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800cd18:	4602      	mov	r2, r0
 800cd1a:	9b04      	ldr	r3, [sp, #16]
 800cd1c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800cd20:	a90a      	add	r1, sp, #40	@ 0x28
 800cd22:	4650      	mov	r0, sl
 800cd24:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800cd28:	f001 feba 	bl	800eaa0 <uxr_serialize_HEARTBEAT_Payload>
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	4611      	mov	r1, r2
 800cd30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd32:	4640      	mov	r0, r8
 800cd34:	f000 fbf4 	bl	800d520 <uxr_stamp_session_header>
 800cd38:	4650      	mov	r0, sl
 800cd3a:	f7ff fa59 	bl	800c1f0 <ucdr_buffer_length>
 800cd3e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800cd42:	4602      	mov	r2, r0
 800cd44:	a90c      	add	r1, sp, #48	@ 0x30
 800cd46:	e9d3 0500 	ldrd	r0, r5, [r3]
 800cd4a:	4444      	add	r4, r8
 800cd4c:	47a8      	blx	r5
 800cd4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800cd52:	9903      	ldr	r1, [sp, #12]
 800cd54:	455a      	cmp	r2, fp
 800cd56:	f106 0601 	add.w	r6, r6, #1
 800cd5a:	eb73 0101 	sbcs.w	r1, r3, r1
 800cd5e:	b2f0      	uxtb	r0, r6
 800cd60:	db9c      	blt.n	800cc9c <listen_message_reliably+0x48>
 800cd62:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800cd66:	4283      	cmp	r3, r0
 800cd68:	d89e      	bhi.n	800cca8 <listen_message_reliably+0x54>
 800cd6a:	9a03      	ldr	r2, [sp, #12]
 800cd6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cd70:	429a      	cmp	r2, r3
 800cd72:	bf08      	it	eq
 800cd74:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 800cd78:	d01e      	beq.n	800cdb8 <listen_message_reliably+0x164>
 800cd7a:	ebab 0309 	sub.w	r3, fp, r9
 800cd7e:	9905      	ldr	r1, [sp, #20]
 800cd80:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	bf08      	it	eq
 800cd88:	2301      	moveq	r3, #1
 800cd8a:	4299      	cmp	r1, r3
 800cd8c:	bfa8      	it	ge
 800cd8e:	4619      	movge	r1, r3
 800cd90:	6894      	ldr	r4, [r2, #8]
 800cd92:	6810      	ldr	r0, [r2, #0]
 800cd94:	4689      	mov	r9, r1
 800cd96:	460b      	mov	r3, r1
 800cd98:	aa08      	add	r2, sp, #32
 800cd9a:	a907      	add	r1, sp, #28
 800cd9c:	47a0      	blx	r4
 800cd9e:	b968      	cbnz	r0, 800cdbc <listen_message_reliably+0x168>
 800cda0:	9b05      	ldr	r3, [sp, #20]
 800cda2:	eba3 0309 	sub.w	r3, r3, r9
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	9305      	str	r3, [sp, #20]
 800cdaa:	f73f af5c 	bgt.w	800cc66 <listen_message_reliably+0x12>
 800cdae:	4604      	mov	r4, r0
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	b01d      	add	sp, #116	@ 0x74
 800cdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	9b05      	ldr	r3, [sp, #20]
 800cdba:	e7e0      	b.n	800cd7e <listen_message_reliably+0x12a>
 800cdbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800cdc0:	4604      	mov	r4, r0
 800cdc2:	a80c      	add	r0, sp, #48	@ 0x30
 800cdc4:	f7ff f9e8 	bl	800c198 <ucdr_init_buffer>
 800cdc8:	2500      	movs	r5, #0
 800cdca:	f10d 031a 	add.w	r3, sp, #26
 800cdce:	aa06      	add	r2, sp, #24
 800cdd0:	a90c      	add	r1, sp, #48	@ 0x30
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	f88d 5018 	strb.w	r5, [sp, #24]
 800cdd8:	f000 fbb6 	bl	800d548 <uxr_read_session_header>
 800cddc:	b918      	cbnz	r0, 800cde6 <listen_message_reliably+0x192>
 800cdde:	4620      	mov	r0, r4
 800cde0:	b01d      	add	sp, #116	@ 0x74
 800cde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde6:	4629      	mov	r1, r5
 800cde8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800cdec:	f000 fc50 	bl	800d690 <uxr_stream_id_from_raw>
 800cdf0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800cdf4:	2d01      	cmp	r5, #1
 800cdf6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800cdfa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800cdfe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ce02:	d04b      	beq.n	800ce9c <listen_message_reliably+0x248>
 800ce04:	2d02      	cmp	r5, #2
 800ce06:	d00f      	beq.n	800ce28 <listen_message_reliably+0x1d4>
 800ce08:	2d00      	cmp	r5, #0
 800ce0a:	d1e8      	bne.n	800cdde <listen_message_reliably+0x18a>
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 fc3e 	bl	800d690 <uxr_stream_id_from_raw>
 800ce14:	a90c      	add	r1, sp, #48	@ 0x30
 800ce16:	4602      	mov	r2, r0
 800ce18:	4640      	mov	r0, r8
 800ce1a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ce1c:	f7ff fd92 	bl	800c944 <read_submessage_list>
 800ce20:	4620      	mov	r0, r4
 800ce22:	b01d      	add	sp, #116	@ 0x74
 800ce24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce28:	4631      	mov	r1, r6
 800ce2a:	f108 0008 	add.w	r0, r8, #8
 800ce2e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800ce32:	f000 fd1b 	bl	800d86c <uxr_get_input_reliable_stream>
 800ce36:	4607      	mov	r7, r0
 800ce38:	b338      	cbz	r0, 800ce8a <listen_message_reliably+0x236>
 800ce3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce3c:	9203      	str	r2, [sp, #12]
 800ce3e:	a80c      	add	r0, sp, #48	@ 0x30
 800ce40:	f7ff f9da 	bl	800c1f8 <ucdr_buffer_remaining>
 800ce44:	4603      	mov	r3, r0
 800ce46:	f10d 0019 	add.w	r0, sp, #25
 800ce4a:	9000      	str	r0, [sp, #0]
 800ce4c:	9a03      	ldr	r2, [sp, #12]
 800ce4e:	4651      	mov	r1, sl
 800ce50:	4638      	mov	r0, r7
 800ce52:	f004 f8c7 	bl	8010fe4 <uxr_receive_reliable_message>
 800ce56:	b1c0      	cbz	r0, 800ce8a <listen_message_reliably+0x236>
 800ce58:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ce5c:	b393      	cbz	r3, 800cec4 <listen_message_reliably+0x270>
 800ce5e:	ad14      	add	r5, sp, #80	@ 0x50
 800ce60:	f04f 0a02 	mov.w	sl, #2
 800ce64:	e00a      	b.n	800ce7c <listen_message_reliably+0x228>
 800ce66:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800ce6a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800ce6e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800ce72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce74:	4629      	mov	r1, r5
 800ce76:	4640      	mov	r0, r8
 800ce78:	f7ff fd64 	bl	800c944 <read_submessage_list>
 800ce7c:	2204      	movs	r2, #4
 800ce7e:	4629      	mov	r1, r5
 800ce80:	4638      	mov	r0, r7
 800ce82:	f004 f92f 	bl	80110e4 <uxr_next_input_reliable_buffer_available>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d1ed      	bne.n	800ce66 <listen_message_reliably+0x212>
 800ce8a:	4640      	mov	r0, r8
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	4649      	mov	r1, r9
 800ce90:	f7ff fbd4 	bl	800c63c <write_submessage_acknack.isra.0>
 800ce94:	4620      	mov	r0, r4
 800ce96:	b01d      	add	sp, #116	@ 0x74
 800ce98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	f108 0008 	add.w	r0, r8, #8
 800cea2:	f000 fcd9 	bl	800d858 <uxr_get_input_best_effort_stream>
 800cea6:	2800      	cmp	r0, #0
 800cea8:	d099      	beq.n	800cdde <listen_message_reliably+0x18a>
 800ceaa:	4651      	mov	r1, sl
 800ceac:	f004 f806 	bl	8010ebc <uxr_receive_best_effort_message>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d094      	beq.n	800cdde <listen_message_reliably+0x18a>
 800ceb4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800ceb8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceba:	a90c      	add	r1, sp, #48	@ 0x30
 800cebc:	4640      	mov	r0, r8
 800cebe:	f7ff fd41 	bl	800c944 <read_submessage_list>
 800cec2:	e78c      	b.n	800cdde <listen_message_reliably+0x18a>
 800cec4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800cec8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceca:	a90c      	add	r1, sp, #48	@ 0x30
 800cecc:	4640      	mov	r0, r8
 800cece:	f7ff fd39 	bl	800c944 <read_submessage_list>
 800ced2:	e7c4      	b.n	800ce5e <listen_message_reliably+0x20a>

0800ced4 <uxr_run_session_until_confirm_delivery>:
 800ced4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced8:	4606      	mov	r6, r0
 800ceda:	460d      	mov	r5, r1
 800cedc:	f000 fd2c 	bl	800d938 <uxr_millis>
 800cee0:	4607      	mov	r7, r0
 800cee2:	4630      	mov	r0, r6
 800cee4:	f7ff fc70 	bl	800c7c8 <uxr_flash_output_streams>
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	f106 0808 	add.w	r8, r6, #8
 800ceee:	bfa8      	it	ge
 800cef0:	462c      	movge	r4, r5
 800cef2:	da07      	bge.n	800cf04 <uxr_run_session_until_confirm_delivery+0x30>
 800cef4:	e00e      	b.n	800cf14 <uxr_run_session_until_confirm_delivery+0x40>
 800cef6:	f7ff fead 	bl	800cc54 <listen_message_reliably>
 800cefa:	f000 fd1d 	bl	800d938 <uxr_millis>
 800cefe:	1bc3      	subs	r3, r0, r7
 800cf00:	1aec      	subs	r4, r5, r3
 800cf02:	d407      	bmi.n	800cf14 <uxr_run_session_until_confirm_delivery+0x40>
 800cf04:	4640      	mov	r0, r8
 800cf06:	f000 fcbb 	bl	800d880 <uxr_output_streams_confirmed>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4630      	mov	r0, r6
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d0f0      	beq.n	800cef6 <uxr_run_session_until_confirm_delivery+0x22>
 800cf14:	4640      	mov	r0, r8
 800cf16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1a:	f000 bcb1 	b.w	800d880 <uxr_output_streams_confirmed>
 800cf1e:	bf00      	nop

0800cf20 <uxr_run_session_until_all_status>:
 800cf20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf24:	9c08      	ldr	r4, [sp, #32]
 800cf26:	4606      	mov	r6, r0
 800cf28:	460f      	mov	r7, r1
 800cf2a:	4691      	mov	r9, r2
 800cf2c:	461d      	mov	r5, r3
 800cf2e:	f7ff fc4b 	bl	800c7c8 <uxr_flash_output_streams>
 800cf32:	b124      	cbz	r4, 800cf3e <uxr_run_session_until_all_status+0x1e>
 800cf34:	4622      	mov	r2, r4
 800cf36:	21ff      	movs	r1, #255	@ 0xff
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f007 f84f 	bl	8013fdc <memset>
 800cf3e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800cf42:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800cf44:	f000 fcf8 	bl	800d938 <uxr_millis>
 800cf48:	3d01      	subs	r5, #1
 800cf4a:	f1a9 0902 	sub.w	r9, r9, #2
 800cf4e:	4680      	mov	r8, r0
 800cf50:	4639      	mov	r1, r7
 800cf52:	4630      	mov	r0, r6
 800cf54:	f7ff fe7e 	bl	800cc54 <listen_message_reliably>
 800cf58:	f000 fcee 	bl	800d938 <uxr_millis>
 800cf5c:	eba0 0008 	sub.w	r0, r0, r8
 800cf60:	1a39      	subs	r1, r7, r0
 800cf62:	b344      	cbz	r4, 800cfb6 <uxr_run_session_until_all_status+0x96>
 800cf64:	4628      	mov	r0, r5
 800cf66:	46ac      	mov	ip, r5
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e002      	b.n	800cf72 <uxr_run_session_until_all_status+0x52>
 800cf6c:	42a3      	cmp	r3, r4
 800cf6e:	d20d      	bcs.n	800cf8c <uxr_run_session_until_all_status+0x6c>
 800cf70:	3301      	adds	r3, #1
 800cf72:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800cf76:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800cf7a:	d1f7      	bne.n	800cf6c <uxr_run_session_until_all_status+0x4c>
 800cf7c:	42a3      	cmp	r3, r4
 800cf7e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800cf82:	d213      	bcs.n	800cfac <uxr_run_session_until_all_status+0x8c>
 800cf84:	2a00      	cmp	r2, #0
 800cf86:	d0f3      	beq.n	800cf70 <uxr_run_session_until_all_status+0x50>
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	dce2      	bgt.n	800cf52 <uxr_run_session_until_all_status+0x32>
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800cf90:	442c      	add	r4, r5
 800cf92:	e001      	b.n	800cf98 <uxr_run_session_until_all_status+0x78>
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d812      	bhi.n	800cfbe <uxr_run_session_until_all_status+0x9e>
 800cf98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800cf9c:	4284      	cmp	r4, r0
 800cf9e:	d1f9      	bne.n	800cf94 <uxr_run_session_until_all_status+0x74>
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	bf8c      	ite	hi
 800cfa4:	2000      	movhi	r0, #0
 800cfa6:	2001      	movls	r0, #1
 800cfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfac:	2900      	cmp	r1, #0
 800cfae:	dded      	ble.n	800cf8c <uxr_run_session_until_all_status+0x6c>
 800cfb0:	2a00      	cmp	r2, #0
 800cfb2:	d1ce      	bne.n	800cf52 <uxr_run_session_until_all_status+0x32>
 800cfb4:	e7ea      	b.n	800cf8c <uxr_run_session_until_all_status+0x6c>
 800cfb6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800cfb8:	2001      	movs	r0, #1
 800cfba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cfc4 <wait_session_status>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	4604      	mov	r4, r0
 800cfca:	b09d      	sub	sp, #116	@ 0x74
 800cfcc:	20ff      	movs	r0, #255	@ 0xff
 800cfce:	7160      	strb	r0, [r4, #5]
 800cfd0:	9303      	str	r3, [sp, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f000 80b6 	beq.w	800d144 <wait_session_status+0x180>
 800cfd8:	468a      	mov	sl, r1
 800cfda:	4691      	mov	r9, r2
 800cfdc:	f04f 0b00 	mov.w	fp, #0
 800cfe0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800cfe2:	464a      	mov	r2, r9
 800cfe4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800cfe8:	4651      	mov	r1, sl
 800cfea:	47a8      	blx	r5
 800cfec:	f000 fca4 	bl	800d938 <uxr_millis>
 800cff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cff4:	4605      	mov	r5, r0
 800cff6:	e009      	b.n	800d00c <wait_session_status+0x48>
 800cff8:	f000 fc9e 	bl	800d938 <uxr_millis>
 800cffc:	1b40      	subs	r0, r0, r5
 800cffe:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d002:	2b00      	cmp	r3, #0
 800d004:	dd40      	ble.n	800d088 <wait_session_status+0xc4>
 800d006:	7960      	ldrb	r0, [r4, #5]
 800d008:	28ff      	cmp	r0, #255	@ 0xff
 800d00a:	d145      	bne.n	800d098 <wait_session_status+0xd4>
 800d00c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d00e:	a908      	add	r1, sp, #32
 800d010:	6896      	ldr	r6, [r2, #8]
 800d012:	6810      	ldr	r0, [r2, #0]
 800d014:	aa09      	add	r2, sp, #36	@ 0x24
 800d016:	47b0      	blx	r6
 800d018:	2800      	cmp	r0, #0
 800d01a:	d0ed      	beq.n	800cff8 <wait_session_status+0x34>
 800d01c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800d020:	a80c      	add	r0, sp, #48	@ 0x30
 800d022:	f7ff f8b9 	bl	800c198 <ucdr_init_buffer>
 800d026:	2600      	movs	r6, #0
 800d028:	f10d 031e 	add.w	r3, sp, #30
 800d02c:	aa07      	add	r2, sp, #28
 800d02e:	a90c      	add	r1, sp, #48	@ 0x30
 800d030:	4620      	mov	r0, r4
 800d032:	f88d 601c 	strb.w	r6, [sp, #28]
 800d036:	f000 fa87 	bl	800d548 <uxr_read_session_header>
 800d03a:	2800      	cmp	r0, #0
 800d03c:	d0dc      	beq.n	800cff8 <wait_session_status+0x34>
 800d03e:	4631      	mov	r1, r6
 800d040:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d044:	f000 fb24 	bl	800d690 <uxr_stream_id_from_raw>
 800d048:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800d04c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d050:	9302      	str	r3, [sp, #8]
 800d052:	2f01      	cmp	r7, #1
 800d054:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800d058:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d05c:	d05c      	beq.n	800d118 <wait_session_status+0x154>
 800d05e:	2f02      	cmp	r7, #2
 800d060:	d020      	beq.n	800d0a4 <wait_session_status+0xe0>
 800d062:	2f00      	cmp	r7, #0
 800d064:	d1c8      	bne.n	800cff8 <wait_session_status+0x34>
 800d066:	4639      	mov	r1, r7
 800d068:	4638      	mov	r0, r7
 800d06a:	f000 fb11 	bl	800d690 <uxr_stream_id_from_raw>
 800d06e:	a90c      	add	r1, sp, #48	@ 0x30
 800d070:	4602      	mov	r2, r0
 800d072:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d074:	4620      	mov	r0, r4
 800d076:	f7ff fc65 	bl	800c944 <read_submessage_list>
 800d07a:	f000 fc5d 	bl	800d938 <uxr_millis>
 800d07e:	1b40      	subs	r0, r0, r5
 800d080:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d084:	2b00      	cmp	r3, #0
 800d086:	dcbe      	bgt.n	800d006 <wait_session_status+0x42>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	7960      	ldrb	r0, [r4, #5]
 800d08c:	f10b 0b01 	add.w	fp, fp, #1
 800d090:	455b      	cmp	r3, fp
 800d092:	d001      	beq.n	800d098 <wait_session_status+0xd4>
 800d094:	28ff      	cmp	r0, #255	@ 0xff
 800d096:	d0a3      	beq.n	800cfe0 <wait_session_status+0x1c>
 800d098:	38ff      	subs	r0, #255	@ 0xff
 800d09a:	bf18      	it	ne
 800d09c:	2001      	movne	r0, #1
 800d09e:	b01d      	add	sp, #116	@ 0x74
 800d0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a4:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	f104 0008 	add.w	r0, r4, #8
 800d0b0:	f000 fbdc 	bl	800d86c <uxr_get_input_reliable_stream>
 800d0b4:	4680      	mov	r8, r0
 800d0b6:	b348      	cbz	r0, 800d10c <wait_session_status+0x148>
 800d0b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0ba:	9205      	str	r2, [sp, #20]
 800d0bc:	a80c      	add	r0, sp, #48	@ 0x30
 800d0be:	f7ff f89b 	bl	800c1f8 <ucdr_buffer_remaining>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f10d 001d 	add.w	r0, sp, #29
 800d0c8:	9000      	str	r0, [sp, #0]
 800d0ca:	9a05      	ldr	r2, [sp, #20]
 800d0cc:	9902      	ldr	r1, [sp, #8]
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	f003 ff88 	bl	8010fe4 <uxr_receive_reliable_message>
 800d0d4:	b1d0      	cbz	r0, 800d10c <wait_session_status+0x148>
 800d0d6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d03a      	beq.n	800d154 <wait_session_status+0x190>
 800d0de:	9f04      	ldr	r7, [sp, #16]
 800d0e0:	e00a      	b.n	800d0f8 <wait_session_status+0x134>
 800d0e2:	f04f 0302 	mov.w	r3, #2
 800d0e6:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800d0ea:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800d0ee:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800d0f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d0f4:	f7ff fc26 	bl	800c944 <read_submessage_list>
 800d0f8:	a914      	add	r1, sp, #80	@ 0x50
 800d0fa:	2204      	movs	r2, #4
 800d0fc:	4640      	mov	r0, r8
 800d0fe:	f003 fff1 	bl	80110e4 <uxr_next_input_reliable_buffer_available>
 800d102:	4603      	mov	r3, r0
 800d104:	a914      	add	r1, sp, #80	@ 0x50
 800d106:	4620      	mov	r0, r4
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1ea      	bne.n	800d0e2 <wait_session_status+0x11e>
 800d10c:	9904      	ldr	r1, [sp, #16]
 800d10e:	4632      	mov	r2, r6
 800d110:	4620      	mov	r0, r4
 800d112:	f7ff fa93 	bl	800c63c <write_submessage_acknack.isra.0>
 800d116:	e76f      	b.n	800cff8 <wait_session_status+0x34>
 800d118:	4631      	mov	r1, r6
 800d11a:	f104 0008 	add.w	r0, r4, #8
 800d11e:	f000 fb9b 	bl	800d858 <uxr_get_input_best_effort_stream>
 800d122:	2800      	cmp	r0, #0
 800d124:	f43f af68 	beq.w	800cff8 <wait_session_status+0x34>
 800d128:	9902      	ldr	r1, [sp, #8]
 800d12a:	f003 fec7 	bl	8010ebc <uxr_receive_best_effort_message>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f43f af62 	beq.w	800cff8 <wait_session_status+0x34>
 800d134:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d138:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d13a:	a90c      	add	r1, sp, #48	@ 0x30
 800d13c:	4620      	mov	r0, r4
 800d13e:	f7ff fc01 	bl	800c944 <read_submessage_list>
 800d142:	e759      	b.n	800cff8 <wait_session_status+0x34>
 800d144:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d146:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d14a:	47a0      	blx	r4
 800d14c:	2001      	movs	r0, #1
 800d14e:	b01d      	add	sp, #116	@ 0x74
 800d150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d154:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800d158:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d15a:	a90c      	add	r1, sp, #48	@ 0x30
 800d15c:	4620      	mov	r0, r4
 800d15e:	f7ff fbf1 	bl	800c944 <read_submessage_list>
 800d162:	e7bc      	b.n	800d0de <wait_session_status+0x11a>

0800d164 <uxr_delete_session_retries>:
 800d164:	b530      	push	{r4, r5, lr}
 800d166:	b08f      	sub	sp, #60	@ 0x3c
 800d168:	4604      	mov	r4, r0
 800d16a:	460d      	mov	r5, r1
 800d16c:	f000 fa2e 	bl	800d5cc <uxr_session_header_offset>
 800d170:	2300      	movs	r3, #0
 800d172:	2210      	movs	r2, #16
 800d174:	9000      	str	r0, [sp, #0]
 800d176:	a902      	add	r1, sp, #8
 800d178:	a806      	add	r0, sp, #24
 800d17a:	f7fe fffb 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800d17e:	a906      	add	r1, sp, #24
 800d180:	4620      	mov	r0, r4
 800d182:	f000 f973 	bl	800d46c <uxr_buffer_delete_session>
 800d186:	2200      	movs	r2, #0
 800d188:	4611      	mov	r1, r2
 800d18a:	9b06      	ldr	r3, [sp, #24]
 800d18c:	4620      	mov	r0, r4
 800d18e:	f000 f9c7 	bl	800d520 <uxr_stamp_session_header>
 800d192:	a806      	add	r0, sp, #24
 800d194:	f7ff f82c 	bl	800c1f0 <ucdr_buffer_length>
 800d198:	462b      	mov	r3, r5
 800d19a:	4602      	mov	r2, r0
 800d19c:	a902      	add	r1, sp, #8
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f7ff ff10 	bl	800cfc4 <wait_session_status>
 800d1a4:	b118      	cbz	r0, 800d1ae <uxr_delete_session_retries+0x4a>
 800d1a6:	7960      	ldrb	r0, [r4, #5]
 800d1a8:	fab0 f080 	clz	r0, r0
 800d1ac:	0940      	lsrs	r0, r0, #5
 800d1ae:	b00f      	add	sp, #60	@ 0x3c
 800d1b0:	bd30      	pop	{r4, r5, pc}
 800d1b2:	bf00      	nop

0800d1b4 <uxr_create_session>:
 800d1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b8:	f100 0b08 	add.w	fp, r0, #8
 800d1bc:	b0ab      	sub	sp, #172	@ 0xac
 800d1be:	4604      	mov	r4, r0
 800d1c0:	4658      	mov	r0, fp
 800d1c2:	f000 fa99 	bl	800d6f8 <uxr_reset_stream_storage>
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f000 fa00 	bl	800d5cc <uxr_session_header_offset>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	9000      	str	r0, [sp, #0]
 800d1d0:	221c      	movs	r2, #28
 800d1d2:	a90b      	add	r1, sp, #44	@ 0x2c
 800d1d4:	a812      	add	r0, sp, #72	@ 0x48
 800d1d6:	f7fe ffcd 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800d1da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d1dc:	8a1a      	ldrh	r2, [r3, #16]
 800d1de:	3a04      	subs	r2, #4
 800d1e0:	b292      	uxth	r2, r2
 800d1e2:	a912      	add	r1, sp, #72	@ 0x48
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f000 f917 	bl	800d418 <uxr_buffer_create_session>
 800d1ea:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 f983 	bl	800d4f8 <uxr_stamp_create_session_header>
 800d1f2:	a812      	add	r0, sp, #72	@ 0x48
 800d1f4:	f7fe fffc 	bl	800c1f0 <ucdr_buffer_length>
 800d1f8:	23ff      	movs	r3, #255	@ 0xff
 800d1fa:	7163      	strb	r3, [r4, #5]
 800d1fc:	230a      	movs	r3, #10
 800d1fe:	46da      	mov	sl, fp
 800d200:	9303      	str	r3, [sp, #12]
 800d202:	4683      	mov	fp, r0
 800d204:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d206:	465a      	mov	r2, fp
 800d208:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d20c:	a90b      	add	r1, sp, #44	@ 0x2c
 800d20e:	47a8      	blx	r5
 800d210:	f000 fb92 	bl	800d938 <uxr_millis>
 800d214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d218:	4605      	mov	r5, r0
 800d21a:	e009      	b.n	800d230 <uxr_create_session+0x7c>
 800d21c:	f000 fb8c 	bl	800d938 <uxr_millis>
 800d220:	1b40      	subs	r0, r0, r5
 800d222:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800d226:	2b00      	cmp	r3, #0
 800d228:	7962      	ldrb	r2, [r4, #5]
 800d22a:	dd38      	ble.n	800d29e <uxr_create_session+0xea>
 800d22c:	2aff      	cmp	r2, #255	@ 0xff
 800d22e:	d13c      	bne.n	800d2aa <uxr_create_session+0xf6>
 800d230:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800d232:	a907      	add	r1, sp, #28
 800d234:	6896      	ldr	r6, [r2, #8]
 800d236:	6810      	ldr	r0, [r2, #0]
 800d238:	aa08      	add	r2, sp, #32
 800d23a:	47b0      	blx	r6
 800d23c:	2800      	cmp	r0, #0
 800d23e:	d0ed      	beq.n	800d21c <uxr_create_session+0x68>
 800d240:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d244:	a81a      	add	r0, sp, #104	@ 0x68
 800d246:	f7fe ffa7 	bl	800c198 <ucdr_init_buffer>
 800d24a:	2600      	movs	r6, #0
 800d24c:	f10d 031a 	add.w	r3, sp, #26
 800d250:	aa06      	add	r2, sp, #24
 800d252:	a91a      	add	r1, sp, #104	@ 0x68
 800d254:	4620      	mov	r0, r4
 800d256:	f88d 6018 	strb.w	r6, [sp, #24]
 800d25a:	f000 f975 	bl	800d548 <uxr_read_session_header>
 800d25e:	2800      	cmp	r0, #0
 800d260:	d0dc      	beq.n	800d21c <uxr_create_session+0x68>
 800d262:	4631      	mov	r1, r6
 800d264:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d268:	f000 fa12 	bl	800d690 <uxr_stream_id_from_raw>
 800d26c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d270:	2e01      	cmp	r6, #1
 800d272:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d276:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800d27a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d27e:	d053      	beq.n	800d328 <uxr_create_session+0x174>
 800d280:	2e02      	cmp	r6, #2
 800d282:	d018      	beq.n	800d2b6 <uxr_create_session+0x102>
 800d284:	2e00      	cmp	r6, #0
 800d286:	d1c9      	bne.n	800d21c <uxr_create_session+0x68>
 800d288:	4631      	mov	r1, r6
 800d28a:	4630      	mov	r0, r6
 800d28c:	f000 fa00 	bl	800d690 <uxr_stream_id_from_raw>
 800d290:	a91a      	add	r1, sp, #104	@ 0x68
 800d292:	4602      	mov	r2, r0
 800d294:	900a      	str	r0, [sp, #40]	@ 0x28
 800d296:	4620      	mov	r0, r4
 800d298:	f7ff fb54 	bl	800c944 <read_submessage_list>
 800d29c:	e7be      	b.n	800d21c <uxr_create_session+0x68>
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	9303      	str	r3, [sp, #12]
 800d2a4:	d001      	beq.n	800d2aa <uxr_create_session+0xf6>
 800d2a6:	2aff      	cmp	r2, #255	@ 0xff
 800d2a8:	d0ac      	beq.n	800d204 <uxr_create_session+0x50>
 800d2aa:	2a00      	cmp	r2, #0
 800d2ac:	d051      	beq.n	800d352 <uxr_create_session+0x19e>
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	b02b      	add	sp, #172	@ 0xac
 800d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d2ba:	9304      	str	r3, [sp, #16]
 800d2bc:	4639      	mov	r1, r7
 800d2be:	4650      	mov	r0, sl
 800d2c0:	f000 fad4 	bl	800d86c <uxr_get_input_reliable_stream>
 800d2c4:	4680      	mov	r8, r0
 800d2c6:	b348      	cbz	r0, 800d31c <uxr_create_session+0x168>
 800d2c8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d2ca:	9205      	str	r2, [sp, #20]
 800d2cc:	a81a      	add	r0, sp, #104	@ 0x68
 800d2ce:	f7fe ff93 	bl	800c1f8 <ucdr_buffer_remaining>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f10d 0019 	add.w	r0, sp, #25
 800d2d8:	9000      	str	r0, [sp, #0]
 800d2da:	9a05      	ldr	r2, [sp, #20]
 800d2dc:	4649      	mov	r1, r9
 800d2de:	4640      	mov	r0, r8
 800d2e0:	f003 fe80 	bl	8010fe4 <uxr_receive_reliable_message>
 800d2e4:	b1d0      	cbz	r0, 800d31c <uxr_create_session+0x168>
 800d2e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d038      	beq.n	800d360 <uxr_create_session+0x1ac>
 800d2ee:	9e04      	ldr	r6, [sp, #16]
 800d2f0:	e00a      	b.n	800d308 <uxr_create_session+0x154>
 800d2f2:	f04f 0302 	mov.w	r3, #2
 800d2f6:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800d2fa:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800d2fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d302:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d304:	f7ff fb1e 	bl	800c944 <read_submessage_list>
 800d308:	a922      	add	r1, sp, #136	@ 0x88
 800d30a:	2204      	movs	r2, #4
 800d30c:	4640      	mov	r0, r8
 800d30e:	f003 fee9 	bl	80110e4 <uxr_next_input_reliable_buffer_available>
 800d312:	4603      	mov	r3, r0
 800d314:	a922      	add	r1, sp, #136	@ 0x88
 800d316:	4620      	mov	r0, r4
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1ea      	bne.n	800d2f2 <uxr_create_session+0x13e>
 800d31c:	9904      	ldr	r1, [sp, #16]
 800d31e:	463a      	mov	r2, r7
 800d320:	4620      	mov	r0, r4
 800d322:	f7ff f98b 	bl	800c63c <write_submessage_acknack.isra.0>
 800d326:	e779      	b.n	800d21c <uxr_create_session+0x68>
 800d328:	4639      	mov	r1, r7
 800d32a:	4650      	mov	r0, sl
 800d32c:	f000 fa94 	bl	800d858 <uxr_get_input_best_effort_stream>
 800d330:	2800      	cmp	r0, #0
 800d332:	f43f af73 	beq.w	800d21c <uxr_create_session+0x68>
 800d336:	4649      	mov	r1, r9
 800d338:	f003 fdc0 	bl	8010ebc <uxr_receive_best_effort_message>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f43f af6d 	beq.w	800d21c <uxr_create_session+0x68>
 800d342:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d346:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d348:	a91a      	add	r1, sp, #104	@ 0x68
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7ff fafa 	bl	800c944 <read_submessage_list>
 800d350:	e764      	b.n	800d21c <uxr_create_session+0x68>
 800d352:	4650      	mov	r0, sl
 800d354:	f000 f9d0 	bl	800d6f8 <uxr_reset_stream_storage>
 800d358:	2001      	movs	r0, #1
 800d35a:	b02b      	add	sp, #172	@ 0xac
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800d364:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d366:	a91a      	add	r1, sp, #104	@ 0x68
 800d368:	4620      	mov	r0, r4
 800d36a:	f7ff faeb 	bl	800c944 <read_submessage_list>
 800d36e:	e7be      	b.n	800d2ee <uxr_create_session+0x13a>

0800d370 <uxr_prepare_stream_to_write_submessage>:
 800d370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d374:	b082      	sub	sp, #8
 800d376:	4682      	mov	sl, r0
 800d378:	4610      	mov	r0, r2
 800d37a:	4615      	mov	r5, r2
 800d37c:	461e      	mov	r6, r3
 800d37e:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800d382:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800d386:	9101      	str	r1, [sp, #4]
 800d388:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d38c:	f000 face 	bl	800d92c <uxr_submessage_padding>
 800d390:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d394:	f105 0904 	add.w	r9, r5, #4
 800d398:	2b01      	cmp	r3, #1
 800d39a:	4481      	add	r9, r0
 800d39c:	d01d      	beq.n	800d3da <uxr_prepare_stream_to_write_submessage+0x6a>
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d116      	bne.n	800d3d0 <uxr_prepare_stream_to_write_submessage+0x60>
 800d3a2:	4621      	mov	r1, r4
 800d3a4:	f10a 0008 	add.w	r0, sl, #8
 800d3a8:	f000 fa4c 	bl	800d844 <uxr_get_output_reliable_stream>
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	b158      	cbz	r0, 800d3c8 <uxr_prepare_stream_to_write_submessage+0x58>
 800d3b0:	4649      	mov	r1, r9
 800d3b2:	4632      	mov	r2, r6
 800d3b4:	f004 f852 	bl	801145c <uxr_prepare_reliable_buffer_to_write>
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	b12c      	cbz	r4, 800d3c8 <uxr_prepare_stream_to_write_submessage+0x58>
 800d3bc:	4643      	mov	r3, r8
 800d3be:	b2aa      	uxth	r2, r5
 800d3c0:	4639      	mov	r1, r7
 800d3c2:	4630      	mov	r0, r6
 800d3c4:	f000 fa72 	bl	800d8ac <uxr_buffer_submessage_header>
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	b002      	add	sp, #8
 800d3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3d0:	2400      	movs	r4, #0
 800d3d2:	4620      	mov	r0, r4
 800d3d4:	b002      	add	sp, #8
 800d3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3da:	4621      	mov	r1, r4
 800d3dc:	f10a 0008 	add.w	r0, sl, #8
 800d3e0:	f000 fa28 	bl	800d834 <uxr_get_output_best_effort_stream>
 800d3e4:	4604      	mov	r4, r0
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d0ee      	beq.n	800d3c8 <uxr_prepare_stream_to_write_submessage+0x58>
 800d3ea:	4649      	mov	r1, r9
 800d3ec:	4632      	mov	r2, r6
 800d3ee:	f003 ff65 	bl	80112bc <uxr_prepare_best_effort_buffer_to_write>
 800d3f2:	4604      	mov	r4, r0
 800d3f4:	e7e1      	b.n	800d3ba <uxr_prepare_stream_to_write_submessage+0x4a>
 800d3f6:	bf00      	nop

0800d3f8 <uxr_init_session_info>:
 800d3f8:	0e13      	lsrs	r3, r2, #24
 800d3fa:	7043      	strb	r3, [r0, #1]
 800d3fc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d400:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d404:	7001      	strb	r1, [r0, #0]
 800d406:	70c3      	strb	r3, [r0, #3]
 800d408:	2109      	movs	r1, #9
 800d40a:	23ff      	movs	r3, #255	@ 0xff
 800d40c:	f880 c002 	strb.w	ip, [r0, #2]
 800d410:	7102      	strb	r2, [r0, #4]
 800d412:	80c1      	strh	r1, [r0, #6]
 800d414:	7143      	strb	r3, [r0, #5]
 800d416:	4770      	bx	lr

0800d418 <uxr_buffer_create_session>:
 800d418:	b530      	push	{r4, r5, lr}
 800d41a:	b089      	sub	sp, #36	@ 0x24
 800d41c:	2300      	movs	r3, #0
 800d41e:	4d12      	ldr	r5, [pc, #72]	@ (800d468 <uxr_buffer_create_session+0x50>)
 800d420:	9307      	str	r3, [sp, #28]
 800d422:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d426:	2201      	movs	r2, #1
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	80c2      	strh	r2, [r0, #6]
 800d42c:	f88d 2004 	strb.w	r2, [sp, #4]
 800d430:	682a      	ldr	r2, [r5, #0]
 800d432:	9200      	str	r2, [sp, #0]
 800d434:	88aa      	ldrh	r2, [r5, #4]
 800d436:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d43a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d43e:	9202      	str	r2, [sp, #8]
 800d440:	460c      	mov	r4, r1
 800d442:	7802      	ldrb	r2, [r0, #0]
 800d444:	9303      	str	r3, [sp, #12]
 800d446:	4619      	mov	r1, r3
 800d448:	f88d 200c 	strb.w	r2, [sp, #12]
 800d44c:	4620      	mov	r0, r4
 800d44e:	2210      	movs	r2, #16
 800d450:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d454:	9306      	str	r3, [sp, #24]
 800d456:	f000 fa29 	bl	800d8ac <uxr_buffer_submessage_header>
 800d45a:	4669      	mov	r1, sp
 800d45c:	4620      	mov	r0, r4
 800d45e:	f001 f981 	bl	800e764 <uxr_serialize_CREATE_CLIENT_Payload>
 800d462:	b009      	add	sp, #36	@ 0x24
 800d464:	bd30      	pop	{r4, r5, pc}
 800d466:	bf00      	nop
 800d468:	08014ff4 	.word	0x08014ff4

0800d46c <uxr_buffer_delete_session>:
 800d46c:	b510      	push	{r4, lr}
 800d46e:	4b0c      	ldr	r3, [pc, #48]	@ (800d4a0 <uxr_buffer_delete_session+0x34>)
 800d470:	b082      	sub	sp, #8
 800d472:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800d476:	f8ad c006 	strh.w	ip, [sp, #6]
 800d47a:	460c      	mov	r4, r1
 800d47c:	2202      	movs	r2, #2
 800d47e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d482:	80c2      	strh	r2, [r0, #6]
 800d484:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d488:	2204      	movs	r2, #4
 800d48a:	2300      	movs	r3, #0
 800d48c:	2103      	movs	r1, #3
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 fa0c 	bl	800d8ac <uxr_buffer_submessage_header>
 800d494:	a901      	add	r1, sp, #4
 800d496:	4620      	mov	r0, r4
 800d498:	f001 fa0a 	bl	800e8b0 <uxr_serialize_DELETE_Payload>
 800d49c:	b002      	add	sp, #8
 800d49e:	bd10      	pop	{r4, pc}
 800d4a0:	08014ff4 	.word	0x08014ff4

0800d4a4 <uxr_read_create_session_status>:
 800d4a4:	b510      	push	{r4, lr}
 800d4a6:	b088      	sub	sp, #32
 800d4a8:	4604      	mov	r4, r0
 800d4aa:	4608      	mov	r0, r1
 800d4ac:	a901      	add	r1, sp, #4
 800d4ae:	f001 fa0f 	bl	800e8d0 <uxr_deserialize_STATUS_AGENT_Payload>
 800d4b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4b6:	7163      	strb	r3, [r4, #5]
 800d4b8:	b008      	add	sp, #32
 800d4ba:	bd10      	pop	{r4, pc}

0800d4bc <uxr_read_delete_session_status>:
 800d4bc:	b510      	push	{r4, lr}
 800d4be:	4604      	mov	r4, r0
 800d4c0:	b084      	sub	sp, #16
 800d4c2:	4608      	mov	r0, r1
 800d4c4:	a902      	add	r1, sp, #8
 800d4c6:	f001 fa33 	bl	800e930 <uxr_deserialize_STATUS_Payload>
 800d4ca:	88e3      	ldrh	r3, [r4, #6]
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d001      	beq.n	800d4d4 <uxr_read_delete_session_status+0x18>
 800d4d0:	b004      	add	sp, #16
 800d4d2:	bd10      	pop	{r4, pc}
 800d4d4:	f10d 000a 	add.w	r0, sp, #10
 800d4d8:	f7ff f836 	bl	800c548 <uxr_object_id_from_raw>
 800d4dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d4e0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d4e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	bf04      	itt	eq
 800d4ee:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800d4f2:	7163      	strbeq	r3, [r4, #5]
 800d4f4:	b004      	add	sp, #16
 800d4f6:	bd10      	pop	{r4, pc}

0800d4f8 <uxr_stamp_create_session_header>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	2208      	movs	r2, #8
 800d4fc:	b08a      	sub	sp, #40	@ 0x28
 800d4fe:	4604      	mov	r4, r0
 800d500:	eb0d 0002 	add.w	r0, sp, r2
 800d504:	f7fe fe48 	bl	800c198 <ucdr_init_buffer>
 800d508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d50c:	9400      	str	r4, [sp, #0]
 800d50e:	2300      	movs	r3, #0
 800d510:	461a      	mov	r2, r3
 800d512:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800d516:	a802      	add	r0, sp, #8
 800d518:	f000 fbc2 	bl	800dca0 <uxr_serialize_message_header>
 800d51c:	b00a      	add	sp, #40	@ 0x28
 800d51e:	bd10      	pop	{r4, pc}

0800d520 <uxr_stamp_session_header>:
 800d520:	b530      	push	{r4, r5, lr}
 800d522:	b08d      	sub	sp, #52	@ 0x34
 800d524:	4604      	mov	r4, r0
 800d526:	460d      	mov	r5, r1
 800d528:	9203      	str	r2, [sp, #12]
 800d52a:	4619      	mov	r1, r3
 800d52c:	a804      	add	r0, sp, #16
 800d52e:	2208      	movs	r2, #8
 800d530:	f7fe fe32 	bl	800c198 <ucdr_init_buffer>
 800d534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d538:	9b03      	ldr	r3, [sp, #12]
 800d53a:	9400      	str	r4, [sp, #0]
 800d53c:	462a      	mov	r2, r5
 800d53e:	a804      	add	r0, sp, #16
 800d540:	f000 fbae 	bl	800dca0 <uxr_serialize_message_header>
 800d544:	b00d      	add	sp, #52	@ 0x34
 800d546:	bd30      	pop	{r4, r5, pc}

0800d548 <uxr_read_session_header>:
 800d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54c:	4607      	mov	r7, r0
 800d54e:	b084      	sub	sp, #16
 800d550:	4608      	mov	r0, r1
 800d552:	460c      	mov	r4, r1
 800d554:	4615      	mov	r5, r2
 800d556:	461e      	mov	r6, r3
 800d558:	f7fe fe4e 	bl	800c1f8 <ucdr_buffer_remaining>
 800d55c:	2808      	cmp	r0, #8
 800d55e:	d803      	bhi.n	800d568 <uxr_read_session_header+0x20>
 800d560:	2000      	movs	r0, #0
 800d562:	b004      	add	sp, #16
 800d564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d568:	f10d 080c 	add.w	r8, sp, #12
 800d56c:	4633      	mov	r3, r6
 800d56e:	462a      	mov	r2, r5
 800d570:	f8cd 8000 	str.w	r8, [sp]
 800d574:	4620      	mov	r0, r4
 800d576:	f10d 010b 	add.w	r1, sp, #11
 800d57a:	f000 fbaf 	bl	800dcdc <uxr_deserialize_message_header>
 800d57e:	783a      	ldrb	r2, [r7, #0]
 800d580:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d584:	4293      	cmp	r3, r2
 800d586:	d1eb      	bne.n	800d560 <uxr_read_session_header+0x18>
 800d588:	061b      	lsls	r3, r3, #24
 800d58a:	d41c      	bmi.n	800d5c6 <uxr_read_session_header+0x7e>
 800d58c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d590:	787b      	ldrb	r3, [r7, #1]
 800d592:	429a      	cmp	r2, r3
 800d594:	d003      	beq.n	800d59e <uxr_read_session_header+0x56>
 800d596:	2001      	movs	r0, #1
 800d598:	f080 0001 	eor.w	r0, r0, #1
 800d59c:	e7e1      	b.n	800d562 <uxr_read_session_header+0x1a>
 800d59e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d5a2:	78bb      	ldrb	r3, [r7, #2]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	f107 0102 	add.w	r1, r7, #2
 800d5aa:	d1f4      	bne.n	800d596 <uxr_read_session_header+0x4e>
 800d5ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d5b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d1ee      	bne.n	800d596 <uxr_read_session_header+0x4e>
 800d5b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d5bc:	784b      	ldrb	r3, [r1, #1]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d1e9      	bne.n	800d596 <uxr_read_session_header+0x4e>
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	e7e8      	b.n	800d598 <uxr_read_session_header+0x50>
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	e7cb      	b.n	800d562 <uxr_read_session_header+0x1a>
 800d5ca:	bf00      	nop

0800d5cc <uxr_session_header_offset>:
 800d5cc:	f990 3000 	ldrsb.w	r3, [r0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	bfac      	ite	ge
 800d5d4:	2008      	movge	r0, #8
 800d5d6:	2004      	movlt	r0, #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop

0800d5dc <uxr_init_base_object_request>:
 800d5dc:	b510      	push	{r4, lr}
 800d5de:	88c3      	ldrh	r3, [r0, #6]
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800d5e6:	9101      	str	r1, [sp, #4]
 800d5e8:	f1a3 010a 	sub.w	r1, r3, #10
 800d5ec:	b289      	uxth	r1, r1
 800d5ee:	42a1      	cmp	r1, r4
 800d5f0:	d80e      	bhi.n	800d610 <uxr_init_base_object_request+0x34>
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	b29c      	uxth	r4, r3
 800d5f6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	80c4      	strh	r4, [r0, #6]
 800d5fe:	9801      	ldr	r0, [sp, #4]
 800d600:	7011      	strb	r1, [r2, #0]
 800d602:	7053      	strb	r3, [r2, #1]
 800d604:	1c91      	adds	r1, r2, #2
 800d606:	f7fe ffb3 	bl	800c570 <uxr_object_id_to_raw>
 800d60a:	4620      	mov	r0, r4
 800d60c:	b002      	add	sp, #8
 800d60e:	bd10      	pop	{r4, pc}
 800d610:	230a      	movs	r3, #10
 800d612:	2100      	movs	r1, #0
 800d614:	461c      	mov	r4, r3
 800d616:	e7f1      	b.n	800d5fc <uxr_init_base_object_request+0x20>

0800d618 <uxr_parse_base_object_request>:
 800d618:	b570      	push	{r4, r5, r6, lr}
 800d61a:	4604      	mov	r4, r0
 800d61c:	3002      	adds	r0, #2
 800d61e:	460d      	mov	r5, r1
 800d620:	4616      	mov	r6, r2
 800d622:	f7fe ff91 	bl	800c548 <uxr_object_id_from_raw>
 800d626:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800d62a:	8028      	strh	r0, [r5, #0]
 800d62c:	806b      	strh	r3, [r5, #2]
 800d62e:	7822      	ldrb	r2, [r4, #0]
 800d630:	7863      	ldrb	r3, [r4, #1]
 800d632:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d636:	8033      	strh	r3, [r6, #0]
 800d638:	bd70      	pop	{r4, r5, r6, pc}
 800d63a:	bf00      	nop

0800d63c <uxr_stream_id>:
 800d63c:	2901      	cmp	r1, #1
 800d63e:	b082      	sub	sp, #8
 800d640:	d01d      	beq.n	800d67e <uxr_stream_id+0x42>
 800d642:	2902      	cmp	r1, #2
 800d644:	f04f 0c00 	mov.w	ip, #0
 800d648:	d01e      	beq.n	800d688 <uxr_stream_id+0x4c>
 800d64a:	2300      	movs	r3, #0
 800d64c:	f36c 0307 	bfi	r3, ip, #0, #8
 800d650:	f360 230f 	bfi	r3, r0, #8, #8
 800d654:	f361 4317 	bfi	r3, r1, #16, #8
 800d658:	f362 631f 	bfi	r3, r2, #24, #8
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	2000      	movs	r0, #0
 800d660:	f362 0007 	bfi	r0, r2, #0, #8
 800d664:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d668:	f362 200f 	bfi	r0, r2, #8, #8
 800d66c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d670:	f362 4017 	bfi	r0, r2, #16, #8
 800d674:	0e1b      	lsrs	r3, r3, #24
 800d676:	f363 601f 	bfi	r0, r3, #24, #8
 800d67a:	b002      	add	sp, #8
 800d67c:	4770      	bx	lr
 800d67e:	f100 0c01 	add.w	ip, r0, #1
 800d682:	fa5f fc8c 	uxtb.w	ip, ip
 800d686:	e7e0      	b.n	800d64a <uxr_stream_id+0xe>
 800d688:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800d68c:	e7dd      	b.n	800d64a <uxr_stream_id+0xe>
 800d68e:	bf00      	nop

0800d690 <uxr_stream_id_from_raw>:
 800d690:	b082      	sub	sp, #8
 800d692:	b130      	cbz	r0, 800d6a2 <uxr_stream_id_from_raw+0x12>
 800d694:	0603      	lsls	r3, r0, #24
 800d696:	d420      	bmi.n	800d6da <uxr_stream_id_from_raw+0x4a>
 800d698:	1e42      	subs	r2, r0, #1
 800d69a:	b2d2      	uxtb	r2, r2
 800d69c:	f04f 0c01 	mov.w	ip, #1
 800d6a0:	e001      	b.n	800d6a6 <uxr_stream_id_from_raw+0x16>
 800d6a2:	4684      	mov	ip, r0
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f360 0307 	bfi	r3, r0, #0, #8
 800d6ac:	f362 230f 	bfi	r3, r2, #8, #8
 800d6b0:	f36c 4317 	bfi	r3, ip, #16, #8
 800d6b4:	f361 631f 	bfi	r3, r1, #24, #8
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	f362 0007 	bfi	r0, r2, #0, #8
 800d6c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d6c4:	f362 200f 	bfi	r0, r2, #8, #8
 800d6c8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d6cc:	f362 4017 	bfi	r0, r2, #16, #8
 800d6d0:	0e1b      	lsrs	r3, r3, #24
 800d6d2:	f363 601f 	bfi	r0, r3, #24, #8
 800d6d6:	b002      	add	sp, #8
 800d6d8:	4770      	bx	lr
 800d6da:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800d6de:	f04f 0c02 	mov.w	ip, #2
 800d6e2:	e7e0      	b.n	800d6a6 <uxr_stream_id_from_raw+0x16>

0800d6e4 <uxr_init_stream_storage>:
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	7403      	strb	r3, [r0, #16]
 800d6e8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800d6ec:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800d6f0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop

0800d6f8 <uxr_reset_stream_storage>:
 800d6f8:	b570      	push	{r4, r5, r6, lr}
 800d6fa:	7c03      	ldrb	r3, [r0, #16]
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	b153      	cbz	r3, 800d716 <uxr_reset_stream_storage+0x1e>
 800d700:	4606      	mov	r6, r0
 800d702:	2500      	movs	r5, #0
 800d704:	4630      	mov	r0, r6
 800d706:	f003 fdd3 	bl	80112b0 <uxr_reset_output_best_effort_stream>
 800d70a:	7c23      	ldrb	r3, [r4, #16]
 800d70c:	3501      	adds	r5, #1
 800d70e:	42ab      	cmp	r3, r5
 800d710:	f106 0610 	add.w	r6, r6, #16
 800d714:	d8f6      	bhi.n	800d704 <uxr_reset_stream_storage+0xc>
 800d716:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d71a:	b163      	cbz	r3, 800d736 <uxr_reset_stream_storage+0x3e>
 800d71c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d720:	2500      	movs	r5, #0
 800d722:	4630      	mov	r0, r6
 800d724:	f003 fbc6 	bl	8010eb4 <uxr_reset_input_best_effort_stream>
 800d728:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d72c:	3501      	adds	r5, #1
 800d72e:	42ab      	cmp	r3, r5
 800d730:	f106 0602 	add.w	r6, r6, #2
 800d734:	d8f5      	bhi.n	800d722 <uxr_reset_stream_storage+0x2a>
 800d736:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d73a:	b163      	cbz	r3, 800d756 <uxr_reset_stream_storage+0x5e>
 800d73c:	f104 0618 	add.w	r6, r4, #24
 800d740:	2500      	movs	r5, #0
 800d742:	4630      	mov	r0, r6
 800d744:	f003 fe60 	bl	8011408 <uxr_reset_output_reliable_stream>
 800d748:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800d74c:	3501      	adds	r5, #1
 800d74e:	42ab      	cmp	r3, r5
 800d750:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800d754:	d8f5      	bhi.n	800d742 <uxr_reset_stream_storage+0x4a>
 800d756:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800d75a:	b163      	cbz	r3, 800d776 <uxr_reset_stream_storage+0x7e>
 800d75c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800d760:	2500      	movs	r5, #0
 800d762:	4630      	mov	r0, r6
 800d764:	f003 fc1a 	bl	8010f9c <uxr_reset_input_reliable_stream>
 800d768:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800d76c:	3501      	adds	r5, #1
 800d76e:	42ab      	cmp	r3, r5
 800d770:	f106 0618 	add.w	r6, r6, #24
 800d774:	d8f5      	bhi.n	800d762 <uxr_reset_stream_storage+0x6a>
 800d776:	bd70      	pop	{r4, r5, r6, pc}

0800d778 <uxr_add_output_best_effort_buffer>:
 800d778:	b510      	push	{r4, lr}
 800d77a:	7c04      	ldrb	r4, [r0, #16]
 800d77c:	f104 0c01 	add.w	ip, r4, #1
 800d780:	b082      	sub	sp, #8
 800d782:	f880 c010 	strb.w	ip, [r0, #16]
 800d786:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800d78a:	f003 fd87 	bl	801129c <uxr_init_output_best_effort_stream>
 800d78e:	2201      	movs	r2, #1
 800d790:	4611      	mov	r1, r2
 800d792:	4620      	mov	r0, r4
 800d794:	b002      	add	sp, #8
 800d796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d79a:	f7ff bf4f 	b.w	800d63c <uxr_stream_id>
 800d79e:	bf00      	nop

0800d7a0 <uxr_add_output_reliable_buffer>:
 800d7a0:	b510      	push	{r4, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	4684      	mov	ip, r0
 800d7a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d7aa:	9000      	str	r0, [sp, #0]
 800d7ac:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800d7b0:	2028      	movs	r0, #40	@ 0x28
 800d7b2:	fb00 c004 	mla	r0, r0, r4, ip
 800d7b6:	f104 0e01 	add.w	lr, r4, #1
 800d7ba:	3018      	adds	r0, #24
 800d7bc:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800d7c0:	f003 fdea 	bl	8011398 <uxr_init_output_reliable_stream>
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	2102      	movs	r1, #2
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	b004      	add	sp, #16
 800d7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7d0:	f7ff bf34 	b.w	800d63c <uxr_stream_id>

0800d7d4 <uxr_add_input_best_effort_buffer>:
 800d7d4:	b510      	push	{r4, lr}
 800d7d6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800d7da:	4603      	mov	r3, r0
 800d7dc:	1c62      	adds	r2, r4, #1
 800d7de:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d7ec:	f003 fb5e 	bl	8010eac <uxr_init_input_best_effort_stream>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	2101      	movs	r1, #1
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	b002      	add	sp, #8
 800d7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7fc:	f7ff bf1e 	b.w	800d63c <uxr_stream_id>

0800d800 <uxr_add_input_reliable_buffer>:
 800d800:	b510      	push	{r4, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	4684      	mov	ip, r0
 800d806:	9806      	ldr	r0, [sp, #24]
 800d808:	9000      	str	r0, [sp, #0]
 800d80a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800d80e:	2018      	movs	r0, #24
 800d810:	fb00 c004 	mla	r0, r0, r4, ip
 800d814:	f104 0e01 	add.w	lr, r4, #1
 800d818:	3048      	adds	r0, #72	@ 0x48
 800d81a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800d81e:	f003 fb91 	bl	8010f44 <uxr_init_input_reliable_stream>
 800d822:	2200      	movs	r2, #0
 800d824:	2102      	movs	r1, #2
 800d826:	4620      	mov	r0, r4
 800d828:	b004      	add	sp, #16
 800d82a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d82e:	f7ff bf05 	b.w	800d63c <uxr_stream_id>
 800d832:	bf00      	nop

0800d834 <uxr_get_output_best_effort_stream>:
 800d834:	7c03      	ldrb	r3, [r0, #16]
 800d836:	428b      	cmp	r3, r1
 800d838:	bf8c      	ite	hi
 800d83a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800d83e:	2000      	movls	r0, #0
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop

0800d844 <uxr_get_output_reliable_stream>:
 800d844:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d848:	428b      	cmp	r3, r1
 800d84a:	bf83      	ittte	hi
 800d84c:	2328      	movhi	r3, #40	@ 0x28
 800d84e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800d852:	3018      	addhi	r0, #24
 800d854:	2000      	movls	r0, #0
 800d856:	4770      	bx	lr

0800d858 <uxr_get_input_best_effort_stream>:
 800d858:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d85c:	428b      	cmp	r3, r1
 800d85e:	bf86      	itte	hi
 800d860:	3121      	addhi	r1, #33	@ 0x21
 800d862:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800d866:	2000      	movls	r0, #0
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop

0800d86c <uxr_get_input_reliable_stream>:
 800d86c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800d870:	428b      	cmp	r3, r1
 800d872:	bf83      	ittte	hi
 800d874:	2318      	movhi	r3, #24
 800d876:	fb03 0001 	mlahi	r0, r3, r1, r0
 800d87a:	3048      	addhi	r0, #72	@ 0x48
 800d87c:	2000      	movls	r0, #0
 800d87e:	4770      	bx	lr

0800d880 <uxr_output_streams_confirmed>:
 800d880:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d884:	b183      	cbz	r3, 800d8a8 <uxr_output_streams_confirmed+0x28>
 800d886:	b570      	push	{r4, r5, r6, lr}
 800d888:	4606      	mov	r6, r0
 800d88a:	f100 0518 	add.w	r5, r0, #24
 800d88e:	2400      	movs	r4, #0
 800d890:	e001      	b.n	800d896 <uxr_output_streams_confirmed+0x16>
 800d892:	3528      	adds	r5, #40	@ 0x28
 800d894:	b138      	cbz	r0, 800d8a6 <uxr_output_streams_confirmed+0x26>
 800d896:	4628      	mov	r0, r5
 800d898:	f004 f826 	bl	80118e8 <uxr_is_output_up_to_date>
 800d89c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800d8a0:	3401      	adds	r4, #1
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	d8f5      	bhi.n	800d892 <uxr_output_streams_confirmed+0x12>
 800d8a6:	bd70      	pop	{r4, r5, r6, pc}
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	4770      	bx	lr

0800d8ac <uxr_buffer_submessage_header>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	460e      	mov	r6, r1
 800d8b2:	2104      	movs	r1, #4
 800d8b4:	4615      	mov	r5, r2
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	f7fe fc88 	bl	800c1cc <ucdr_align_to>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	ea47 0203 	orr.w	r2, r7, r3
 800d8c2:	4631      	mov	r1, r6
 800d8c4:	7523      	strb	r3, [r4, #20]
 800d8c6:	4620      	mov	r0, r4
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	f000 fa27 	bl	800dd1c <uxr_serialize_submessage_header>
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f7fe fc92 	bl	800c1f8 <ucdr_buffer_remaining>
 800d8d4:	42a8      	cmp	r0, r5
 800d8d6:	bf34      	ite	cc
 800d8d8:	2000      	movcc	r0, #0
 800d8da:	2001      	movcs	r0, #1
 800d8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8de:	bf00      	nop

0800d8e0 <uxr_read_submessage_header>:
 800d8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	460d      	mov	r5, r1
 800d8e8:	2104      	movs	r1, #4
 800d8ea:	4616      	mov	r6, r2
 800d8ec:	4698      	mov	r8, r3
 800d8ee:	f7fe fc6d 	bl	800c1cc <ucdr_align_to>
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f7fe fc80 	bl	800c1f8 <ucdr_buffer_remaining>
 800d8f8:	2803      	cmp	r0, #3
 800d8fa:	bf8c      	ite	hi
 800d8fc:	2701      	movhi	r7, #1
 800d8fe:	2700      	movls	r7, #0
 800d900:	d802      	bhi.n	800d908 <uxr_read_submessage_header+0x28>
 800d902:	4638      	mov	r0, r7
 800d904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d908:	4633      	mov	r3, r6
 800d90a:	4642      	mov	r2, r8
 800d90c:	4620      	mov	r0, r4
 800d90e:	4629      	mov	r1, r5
 800d910:	f000 fa18 	bl	800dd44 <uxr_deserialize_submessage_header>
 800d914:	f898 3000 	ldrb.w	r3, [r8]
 800d918:	f003 0201 	and.w	r2, r3, #1
 800d91c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800d920:	f888 3000 	strb.w	r3, [r8]
 800d924:	7522      	strb	r2, [r4, #20]
 800d926:	4638      	mov	r0, r7
 800d928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d92c <uxr_submessage_padding>:
 800d92c:	f010 0003 	ands.w	r0, r0, #3
 800d930:	bf18      	it	ne
 800d932:	f1c0 0004 	rsbne	r0, r0, #4
 800d936:	4770      	bx	lr

0800d938 <uxr_millis>:
 800d938:	b510      	push	{r4, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	4669      	mov	r1, sp
 800d93e:	2001      	movs	r0, #1
 800d940:	f7f4 ff9a 	bl	8002878 <clock_gettime>
 800d944:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800d948:	4906      	ldr	r1, [pc, #24]	@ (800d964 <uxr_millis+0x2c>)
 800d94a:	fba0 0301 	umull	r0, r3, r0, r1
 800d94e:	1900      	adds	r0, r0, r4
 800d950:	fb01 3102 	mla	r1, r1, r2, r3
 800d954:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800d958:	4a03      	ldr	r2, [pc, #12]	@ (800d968 <uxr_millis+0x30>)
 800d95a:	2300      	movs	r3, #0
 800d95c:	f7f3 f8de 	bl	8000b1c <__aeabi_ldivmod>
 800d960:	b004      	add	sp, #16
 800d962:	bd10      	pop	{r4, pc}
 800d964:	3b9aca00 	.word	0x3b9aca00
 800d968:	000f4240 	.word	0x000f4240

0800d96c <uxr_nanos>:
 800d96c:	b510      	push	{r4, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	4669      	mov	r1, sp
 800d972:	2001      	movs	r0, #1
 800d974:	f7f4 ff80 	bl	8002878 <clock_gettime>
 800d978:	4a06      	ldr	r2, [pc, #24]	@ (800d994 <uxr_nanos+0x28>)
 800d97a:	9800      	ldr	r0, [sp, #0]
 800d97c:	9902      	ldr	r1, [sp, #8]
 800d97e:	9c01      	ldr	r4, [sp, #4]
 800d980:	fba0 0302 	umull	r0, r3, r0, r2
 800d984:	1840      	adds	r0, r0, r1
 800d986:	fb02 3304 	mla	r3, r2, r4, r3
 800d98a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800d98e:	b004      	add	sp, #16
 800d990:	bd10      	pop	{r4, pc}
 800d992:	bf00      	nop
 800d994:	3b9aca00 	.word	0x3b9aca00

0800d998 <on_full_output_buffer_fragmented>:
 800d998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d99c:	460c      	mov	r4, r1
 800d99e:	b08a      	sub	sp, #40	@ 0x28
 800d9a0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	f104 0008 	add.w	r0, r4, #8
 800d9aa:	f7ff ff4b 	bl	800d844 <uxr_get_output_reliable_stream>
 800d9ae:	4605      	mov	r5, r0
 800d9b0:	f003 ffa4 	bl	80118fc <get_available_free_slots>
 800d9b4:	b968      	cbnz	r0, 800d9d2 <on_full_output_buffer_fragmented+0x3a>
 800d9b6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	4798      	blx	r3
 800d9be:	b918      	cbnz	r0, 800d9c8 <on_full_output_buffer_fragmented+0x30>
 800d9c0:	2001      	movs	r0, #1
 800d9c2:	b00a      	add	sp, #40	@ 0x28
 800d9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c8:	4628      	mov	r0, r5
 800d9ca:	f003 ff97 	bl	80118fc <get_available_free_slots>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d0f6      	beq.n	800d9c0 <on_full_output_buffer_fragmented+0x28>
 800d9d2:	8929      	ldrh	r1, [r5, #8]
 800d9d4:	89eb      	ldrh	r3, [r5, #14]
 800d9d6:	7b28      	ldrb	r0, [r5, #12]
 800d9d8:	686a      	ldr	r2, [r5, #4]
 800d9da:	fbb2 f8f1 	udiv	r8, r2, r1
 800d9de:	fbb3 f2f1 	udiv	r2, r3, r1
 800d9e2:	fb01 3112 	mls	r1, r1, r2, r3
 800d9e6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800d9ea:	b289      	uxth	r1, r1
 800d9ec:	fb08 f101 	mul.w	r1, r8, r1
 800d9f0:	30fc      	adds	r0, #252	@ 0xfc
 800d9f2:	f1a8 0804 	sub.w	r8, r8, #4
 800d9f6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800d9fa:	4440      	add	r0, r8
 800d9fc:	b287      	uxth	r7, r0
 800d9fe:	1bdb      	subs	r3, r3, r7
 800da00:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	3104      	adds	r1, #4
 800da08:	4419      	add	r1, r3
 800da0a:	4642      	mov	r2, r8
 800da0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	a802      	add	r0, sp, #8
 800da14:	2300      	movs	r3, #0
 800da16:	f7fe fbad 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800da1a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800da1e:	f102 0308 	add.w	r3, r2, #8
 800da22:	4543      	cmp	r3, r8
 800da24:	d928      	bls.n	800da78 <on_full_output_buffer_fragmented+0xe0>
 800da26:	463a      	mov	r2, r7
 800da28:	2300      	movs	r3, #0
 800da2a:	210d      	movs	r1, #13
 800da2c:	a802      	add	r0, sp, #8
 800da2e:	f7ff ff3d 	bl	800d8ac <uxr_buffer_submessage_header>
 800da32:	8929      	ldrh	r1, [r5, #8]
 800da34:	89eb      	ldrh	r3, [r5, #14]
 800da36:	fbb3 f2f1 	udiv	r2, r3, r1
 800da3a:	fb01 3312 	mls	r3, r1, r2, r3
 800da3e:	b29b      	uxth	r3, r3
 800da40:	686a      	ldr	r2, [r5, #4]
 800da42:	fbb2 f2f1 	udiv	r2, r2, r1
 800da46:	fb02 f303 	mul.w	r3, r2, r3
 800da4a:	682a      	ldr	r2, [r5, #0]
 800da4c:	f842 8003 	str.w	r8, [r2, r3]
 800da50:	89e8      	ldrh	r0, [r5, #14]
 800da52:	2101      	movs	r1, #1
 800da54:	f004 f868 	bl	8011b28 <uxr_seq_num_add>
 800da58:	9904      	ldr	r1, [sp, #16]
 800da5a:	9a03      	ldr	r2, [sp, #12]
 800da5c:	81e8      	strh	r0, [r5, #14]
 800da5e:	1a52      	subs	r2, r2, r1
 800da60:	4630      	mov	r0, r6
 800da62:	f7fe fb99 	bl	800c198 <ucdr_init_buffer>
 800da66:	4630      	mov	r0, r6
 800da68:	490f      	ldr	r1, [pc, #60]	@ (800daa8 <on_full_output_buffer_fragmented+0x110>)
 800da6a:	4622      	mov	r2, r4
 800da6c:	f7fe fb68 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 800da70:	2000      	movs	r0, #0
 800da72:	b00a      	add	sp, #40	@ 0x28
 800da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da78:	b292      	uxth	r2, r2
 800da7a:	2302      	movs	r3, #2
 800da7c:	210d      	movs	r1, #13
 800da7e:	a802      	add	r0, sp, #8
 800da80:	f7ff ff14 	bl	800d8ac <uxr_buffer_submessage_header>
 800da84:	8928      	ldrh	r0, [r5, #8]
 800da86:	89eb      	ldrh	r3, [r5, #14]
 800da88:	fbb3 f1f0 	udiv	r1, r3, r0
 800da8c:	fb00 3311 	mls	r3, r0, r1, r3
 800da90:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800da94:	6869      	ldr	r1, [r5, #4]
 800da96:	fbb1 f1f0 	udiv	r1, r1, r0
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	fb01 f303 	mul.w	r3, r1, r3
 800daa0:	6829      	ldr	r1, [r5, #0]
 800daa2:	3208      	adds	r2, #8
 800daa4:	50ca      	str	r2, [r1, r3]
 800daa6:	e7d3      	b.n	800da50 <on_full_output_buffer_fragmented+0xb8>
 800daa8:	0800d999 	.word	0x0800d999

0800daac <uxr_prepare_output_stream>:
 800daac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daae:	b087      	sub	sp, #28
 800dab0:	2707      	movs	r7, #7
 800dab2:	9202      	str	r2, [sp, #8]
 800dab4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dab6:	9103      	str	r1, [sp, #12]
 800dab8:	2500      	movs	r5, #0
 800daba:	3204      	adds	r2, #4
 800dabc:	e9cd 7500 	strd	r7, r5, [sp]
 800dac0:	461c      	mov	r4, r3
 800dac2:	4606      	mov	r6, r0
 800dac4:	f7ff fc54 	bl	800d370 <uxr_prepare_stream_to_write_submessage>
 800dac8:	f080 0201 	eor.w	r2, r0, #1
 800dacc:	b2d2      	uxtb	r2, r2
 800dace:	75a2      	strb	r2, [r4, #22]
 800dad0:	b112      	cbz	r2, 800dad8 <uxr_prepare_output_stream+0x2c>
 800dad2:	4628      	mov	r0, r5
 800dad4:	b007      	add	sp, #28
 800dad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad8:	aa05      	add	r2, sp, #20
 800dada:	9902      	ldr	r1, [sp, #8]
 800dadc:	4630      	mov	r0, r6
 800dade:	f7ff fd7d 	bl	800d5dc <uxr_init_base_object_request>
 800dae2:	a905      	add	r1, sp, #20
 800dae4:	4605      	mov	r5, r0
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 ffa0 	bl	800ea2c <uxr_serialize_WRITE_DATA_Payload_Data>
 800daec:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800daf0:	69a6      	ldr	r6, [r4, #24]
 800daf2:	69e7      	ldr	r7, [r4, #28]
 800daf4:	1a52      	subs	r2, r2, r1
 800daf6:	4620      	mov	r0, r4
 800daf8:	f7fe fb4e 	bl	800c198 <ucdr_init_buffer>
 800dafc:	4620      	mov	r0, r4
 800dafe:	463a      	mov	r2, r7
 800db00:	4631      	mov	r1, r6
 800db02:	f7fe fb1d 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 800db06:	4628      	mov	r0, r5
 800db08:	b007      	add	sp, #28
 800db0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db0c <uxr_prepare_output_stream_fragmented>:
 800db0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db10:	b091      	sub	sp, #68	@ 0x44
 800db12:	4605      	mov	r5, r0
 800db14:	9105      	str	r1, [sp, #20]
 800db16:	3008      	adds	r0, #8
 800db18:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800db1c:	461e      	mov	r6, r3
 800db1e:	9204      	str	r2, [sp, #16]
 800db20:	f7ff fe90 	bl	800d844 <uxr_get_output_reliable_stream>
 800db24:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	f000 8091 	beq.w	800dc50 <uxr_prepare_output_stream_fragmented+0x144>
 800db2e:	4604      	mov	r4, r0
 800db30:	2800      	cmp	r0, #0
 800db32:	f000 808d 	beq.w	800dc50 <uxr_prepare_output_stream_fragmented+0x144>
 800db36:	f003 fee1 	bl	80118fc <get_available_free_slots>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	f000 8083 	beq.w	800dc46 <uxr_prepare_output_stream_fragmented+0x13a>
 800db40:	8922      	ldrh	r2, [r4, #8]
 800db42:	89e7      	ldrh	r7, [r4, #14]
 800db44:	fbb7 f9f2 	udiv	r9, r7, r2
 800db48:	fb02 7919 	mls	r9, r2, r9, r7
 800db4c:	fa1f f989 	uxth.w	r9, r9
 800db50:	6863      	ldr	r3, [r4, #4]
 800db52:	fbb3 f2f2 	udiv	r2, r3, r2
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	9203      	str	r2, [sp, #12]
 800db5a:	fb02 f909 	mul.w	r9, r2, r9
 800db5e:	f109 0904 	add.w	r9, r9, #4
 800db62:	4499      	add	r9, r3
 800db64:	7b23      	ldrb	r3, [r4, #12]
 800db66:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800db6a:	4543      	cmp	r3, r8
 800db6c:	f1a2 0b04 	sub.w	fp, r2, #4
 800db70:	d37a      	bcc.n	800dc68 <uxr_prepare_output_stream_fragmented+0x15c>
 800db72:	f1ab 0a04 	sub.w	sl, fp, #4
 800db76:	ebaa 0a03 	sub.w	sl, sl, r3
 800db7a:	465a      	mov	r2, fp
 800db7c:	2300      	movs	r3, #0
 800db7e:	4649      	mov	r1, r9
 800db80:	a808      	add	r0, sp, #32
 800db82:	f8cd 8000 	str.w	r8, [sp]
 800db86:	f7fe faf5 	bl	800c174 <ucdr_init_buffer_origin_offset>
 800db8a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800db8c:	fa1f fa8a 	uxth.w	sl, sl
 800db90:	4652      	mov	r2, sl
 800db92:	f103 0a08 	add.w	sl, r3, #8
 800db96:	45da      	cmp	sl, fp
 800db98:	bf34      	ite	cc
 800db9a:	2302      	movcc	r3, #2
 800db9c:	2300      	movcs	r3, #0
 800db9e:	210d      	movs	r1, #13
 800dba0:	a808      	add	r0, sp, #32
 800dba2:	f7ff fe83 	bl	800d8ac <uxr_buffer_submessage_header>
 800dba6:	8921      	ldrh	r1, [r4, #8]
 800dba8:	fbb7 f2f1 	udiv	r2, r7, r1
 800dbac:	fb01 7212 	mls	r2, r1, r2, r7
 800dbb0:	b292      	uxth	r2, r2
 800dbb2:	6863      	ldr	r3, [r4, #4]
 800dbb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbb8:	fb02 f303 	mul.w	r3, r2, r3
 800dbbc:	6822      	ldr	r2, [r4, #0]
 800dbbe:	4638      	mov	r0, r7
 800dbc0:	f842 b003 	str.w	fp, [r2, r3]
 800dbc4:	2101      	movs	r1, #1
 800dbc6:	f003 ffaf 	bl	8011b28 <uxr_seq_num_add>
 800dbca:	9b03      	ldr	r3, [sp, #12]
 800dbcc:	f108 0104 	add.w	r1, r8, #4
 800dbd0:	f1a3 0208 	sub.w	r2, r3, #8
 800dbd4:	eba2 0208 	sub.w	r2, r2, r8
 800dbd8:	4449      	add	r1, r9
 800dbda:	4607      	mov	r7, r0
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f7fe fadb 	bl	800c198 <ucdr_init_buffer>
 800dbe2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800dbe4:	81e7      	strh	r7, [r4, #14]
 800dbe6:	1d1a      	adds	r2, r3, #4
 800dbe8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800dbec:	bf28      	it	cs
 800dbee:	2200      	movcs	r2, #0
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	b292      	uxth	r2, r2
 800dbf4:	2107      	movs	r1, #7
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	f7ff fe58 	bl	800d8ac <uxr_buffer_submessage_header>
 800dbfc:	9904      	ldr	r1, [sp, #16]
 800dbfe:	aa07      	add	r2, sp, #28
 800dc00:	4628      	mov	r0, r5
 800dc02:	f7ff fceb 	bl	800d5dc <uxr_init_base_object_request>
 800dc06:	4604      	mov	r4, r0
 800dc08:	b318      	cbz	r0, 800dc52 <uxr_prepare_output_stream_fragmented+0x146>
 800dc0a:	a907      	add	r1, sp, #28
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f000 ff0d 	bl	800ea2c <uxr_serialize_WRITE_DATA_Payload_Data>
 800dc12:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800dc16:	4630      	mov	r0, r6
 800dc18:	1a52      	subs	r2, r2, r1
 800dc1a:	f7fe fabd 	bl	800c198 <ucdr_init_buffer>
 800dc1e:	9b05      	ldr	r3, [sp, #20]
 800dc20:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800dc24:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dc26:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800dc2a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800dc2c:	491b      	ldr	r1, [pc, #108]	@ (800dc9c <uxr_prepare_output_stream_fragmented+0x190>)
 800dc2e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800dc32:	4630      	mov	r0, r6
 800dc34:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800dc38:	462a      	mov	r2, r5
 800dc3a:	f7fe fa81 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 800dc3e:	4620      	mov	r0, r4
 800dc40:	b011      	add	sp, #68	@ 0x44
 800dc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc46:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800dc48:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	4798      	blx	r3
 800dc4e:	b920      	cbnz	r0, 800dc5a <uxr_prepare_output_stream_fragmented+0x14e>
 800dc50:	2400      	movs	r4, #0
 800dc52:	4620      	mov	r0, r4
 800dc54:	b011      	add	sp, #68	@ 0x44
 800dc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f003 fe4e 	bl	80118fc <get_available_free_slots>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	f47f af6d 	bne.w	800db40 <uxr_prepare_output_stream_fragmented+0x34>
 800dc66:	e7f3      	b.n	800dc50 <uxr_prepare_output_stream_fragmented+0x144>
 800dc68:	4638      	mov	r0, r7
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	f003 ff5c 	bl	8011b28 <uxr_seq_num_add>
 800dc70:	8921      	ldrh	r1, [r4, #8]
 800dc72:	fbb0 f2f1 	udiv	r2, r0, r1
 800dc76:	fb01 0912 	mls	r9, r1, r2, r0
 800dc7a:	fa1f f289 	uxth.w	r2, r9
 800dc7e:	6863      	ldr	r3, [r4, #4]
 800dc80:	fbb3 f9f1 	udiv	r9, r3, r1
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	fb02 f909 	mul.w	r9, r2, r9
 800dc8a:	f109 0904 	add.w	r9, r9, #4
 800dc8e:	4499      	add	r9, r3
 800dc90:	4607      	mov	r7, r0
 800dc92:	7b23      	ldrb	r3, [r4, #12]
 800dc94:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800dc98:	e76b      	b.n	800db72 <uxr_prepare_output_stream_fragmented+0x66>
 800dc9a:	bf00      	nop
 800dc9c:	0800d999 	.word	0x0800d999

0800dca0 <uxr_serialize_message_header>:
 800dca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dca2:	b083      	sub	sp, #12
 800dca4:	4616      	mov	r6, r2
 800dca6:	4604      	mov	r4, r0
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	460d      	mov	r5, r1
 800dcac:	9f08      	ldr	r7, [sp, #32]
 800dcae:	f7fd fac7 	bl	800b240 <ucdr_serialize_uint8_t>
 800dcb2:	4631      	mov	r1, r6
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f7fd fac3 	bl	800b240 <ucdr_serialize_uint8_t>
 800dcba:	9a01      	ldr	r2, [sp, #4]
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7fd fb6a 	bl	800b398 <ucdr_serialize_endian_uint16_t>
 800dcc4:	062b      	lsls	r3, r5, #24
 800dcc6:	d501      	bpl.n	800dccc <uxr_serialize_message_header+0x2c>
 800dcc8:	b003      	add	sp, #12
 800dcca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dccc:	2204      	movs	r2, #4
 800dcce:	4639      	mov	r1, r7
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	b003      	add	sp, #12
 800dcd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dcd8:	f002 beee 	b.w	8010ab8 <ucdr_serialize_array_uint8_t>

0800dcdc <uxr_deserialize_message_header>:
 800dcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcde:	b083      	sub	sp, #12
 800dce0:	4616      	mov	r6, r2
 800dce2:	4604      	mov	r4, r0
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	460d      	mov	r5, r1
 800dce8:	9f08      	ldr	r7, [sp, #32]
 800dcea:	f7fd fabf 	bl	800b26c <ucdr_deserialize_uint8_t>
 800dcee:	4631      	mov	r1, r6
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f7fd fabb 	bl	800b26c <ucdr_deserialize_uint8_t>
 800dcf6:	9a01      	ldr	r2, [sp, #4]
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f7fd fc40 	bl	800b580 <ucdr_deserialize_endian_uint16_t>
 800dd00:	f995 3000 	ldrsb.w	r3, [r5]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	da01      	bge.n	800dd0c <uxr_deserialize_message_header+0x30>
 800dd08:	b003      	add	sp, #12
 800dd0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd0c:	2204      	movs	r2, #4
 800dd0e:	4639      	mov	r1, r7
 800dd10:	4620      	mov	r0, r4
 800dd12:	b003      	add	sp, #12
 800dd14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd18:	f002 bf32 	b.w	8010b80 <ucdr_deserialize_array_uint8_t>

0800dd1c <uxr_serialize_submessage_header>:
 800dd1c:	b530      	push	{r4, r5, lr}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	4615      	mov	r5, r2
 800dd22:	4604      	mov	r4, r0
 800dd24:	9301      	str	r3, [sp, #4]
 800dd26:	f7fd fa8b 	bl	800b240 <ucdr_serialize_uint8_t>
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f7fd fa87 	bl	800b240 <ucdr_serialize_uint8_t>
 800dd32:	9a01      	ldr	r2, [sp, #4]
 800dd34:	2101      	movs	r1, #1
 800dd36:	4620      	mov	r0, r4
 800dd38:	b003      	add	sp, #12
 800dd3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd3e:	f7fd bb2b 	b.w	800b398 <ucdr_serialize_endian_uint16_t>
 800dd42:	bf00      	nop

0800dd44 <uxr_deserialize_submessage_header>:
 800dd44:	b530      	push	{r4, r5, lr}
 800dd46:	b083      	sub	sp, #12
 800dd48:	4615      	mov	r5, r2
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	9301      	str	r3, [sp, #4]
 800dd4e:	f7fd fa8d 	bl	800b26c <ucdr_deserialize_uint8_t>
 800dd52:	4629      	mov	r1, r5
 800dd54:	4620      	mov	r0, r4
 800dd56:	f7fd fa89 	bl	800b26c <ucdr_deserialize_uint8_t>
 800dd5a:	9a01      	ldr	r2, [sp, #4]
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	4620      	mov	r0, r4
 800dd60:	b003      	add	sp, #12
 800dd62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd66:	f7fd bc0b 	b.w	800b580 <ucdr_deserialize_endian_uint16_t>
 800dd6a:	bf00      	nop

0800dd6c <uxr_serialize_CLIENT_Representation>:
 800dd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd70:	2204      	movs	r2, #4
 800dd72:	460e      	mov	r6, r1
 800dd74:	4605      	mov	r5, r0
 800dd76:	f002 fe9f 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	1d31      	adds	r1, r6, #4
 800dd80:	4628      	mov	r0, r5
 800dd82:	f002 fe99 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800dd86:	4038      	ands	r0, r7
 800dd88:	2202      	movs	r2, #2
 800dd8a:	1db1      	adds	r1, r6, #6
 800dd8c:	b2c7      	uxtb	r7, r0
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f002 fe92 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800dd94:	2204      	movs	r2, #4
 800dd96:	4007      	ands	r7, r0
 800dd98:	f106 0108 	add.w	r1, r6, #8
 800dd9c:	4628      	mov	r0, r5
 800dd9e:	f002 fe8b 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800dda2:	7b31      	ldrb	r1, [r6, #12]
 800dda4:	4007      	ands	r7, r0
 800dda6:	4628      	mov	r0, r5
 800dda8:	f7fd fa4a 	bl	800b240 <ucdr_serialize_uint8_t>
 800ddac:	7b71      	ldrb	r1, [r6, #13]
 800ddae:	4007      	ands	r7, r0
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f7fd fa17 	bl	800b1e4 <ucdr_serialize_bool>
 800ddb6:	7b73      	ldrb	r3, [r6, #13]
 800ddb8:	ea07 0800 	and.w	r8, r7, r0
 800ddbc:	b93b      	cbnz	r3, 800ddce <uxr_serialize_CLIENT_Representation+0x62>
 800ddbe:	8bb1      	ldrh	r1, [r6, #28]
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	f7fd fa69 	bl	800b298 <ucdr_serialize_uint16_t>
 800ddc6:	ea08 0000 	and.w	r0, r8, r0
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	6931      	ldr	r1, [r6, #16]
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	f7fd fc4b 	bl	800b66c <ucdr_serialize_uint32_t>
 800ddd6:	6933      	ldr	r3, [r6, #16]
 800ddd8:	b1e3      	cbz	r3, 800de14 <uxr_serialize_CLIENT_Representation+0xa8>
 800ddda:	b1c0      	cbz	r0, 800de0e <uxr_serialize_CLIENT_Representation+0xa2>
 800dddc:	4637      	mov	r7, r6
 800ddde:	f04f 0900 	mov.w	r9, #0
 800dde2:	e001      	b.n	800dde8 <uxr_serialize_CLIENT_Representation+0x7c>
 800dde4:	3708      	adds	r7, #8
 800dde6:	b194      	cbz	r4, 800de0e <uxr_serialize_CLIENT_Representation+0xa2>
 800dde8:	6979      	ldr	r1, [r7, #20]
 800ddea:	4628      	mov	r0, r5
 800ddec:	f002 ff84 	bl	8010cf8 <ucdr_serialize_string>
 800ddf0:	69b9      	ldr	r1, [r7, #24]
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	f002 ff7f 	bl	8010cf8 <ucdr_serialize_string>
 800ddfa:	6933      	ldr	r3, [r6, #16]
 800ddfc:	f109 0901 	add.w	r9, r9, #1
 800de00:	4004      	ands	r4, r0
 800de02:	4599      	cmp	r9, r3
 800de04:	b2e4      	uxtb	r4, r4
 800de06:	d3ed      	bcc.n	800dde4 <uxr_serialize_CLIENT_Representation+0x78>
 800de08:	ea08 0804 	and.w	r8, r8, r4
 800de0c:	e7d7      	b.n	800ddbe <uxr_serialize_CLIENT_Representation+0x52>
 800de0e:	f04f 0800 	mov.w	r8, #0
 800de12:	e7d4      	b.n	800ddbe <uxr_serialize_CLIENT_Representation+0x52>
 800de14:	ea08 0800 	and.w	r8, r8, r0
 800de18:	e7d1      	b.n	800ddbe <uxr_serialize_CLIENT_Representation+0x52>
 800de1a:	bf00      	nop

0800de1c <uxr_deserialize_CLIENT_Representation>:
 800de1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de20:	2204      	movs	r2, #4
 800de22:	460c      	mov	r4, r1
 800de24:	4605      	mov	r5, r0
 800de26:	f002 feab 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800de2a:	2202      	movs	r2, #2
 800de2c:	4607      	mov	r7, r0
 800de2e:	1d21      	adds	r1, r4, #4
 800de30:	4628      	mov	r0, r5
 800de32:	f002 fea5 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800de36:	4038      	ands	r0, r7
 800de38:	2202      	movs	r2, #2
 800de3a:	1da1      	adds	r1, r4, #6
 800de3c:	b2c6      	uxtb	r6, r0
 800de3e:	4628      	mov	r0, r5
 800de40:	f002 fe9e 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800de44:	2204      	movs	r2, #4
 800de46:	4006      	ands	r6, r0
 800de48:	f104 0108 	add.w	r1, r4, #8
 800de4c:	4628      	mov	r0, r5
 800de4e:	f002 fe97 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800de52:	f104 010c 	add.w	r1, r4, #12
 800de56:	4006      	ands	r6, r0
 800de58:	4628      	mov	r0, r5
 800de5a:	f7fd fa07 	bl	800b26c <ucdr_deserialize_uint8_t>
 800de5e:	f104 010d 	add.w	r1, r4, #13
 800de62:	ea06 0700 	and.w	r7, r6, r0
 800de66:	4628      	mov	r0, r5
 800de68:	f7fd f9d2 	bl	800b210 <ucdr_deserialize_bool>
 800de6c:	7b63      	ldrb	r3, [r4, #13]
 800de6e:	4007      	ands	r7, r0
 800de70:	b93b      	cbnz	r3, 800de82 <uxr_deserialize_CLIENT_Representation+0x66>
 800de72:	f104 011c 	add.w	r1, r4, #28
 800de76:	4628      	mov	r0, r5
 800de78:	f7fd fb0e 	bl	800b498 <ucdr_deserialize_uint16_t>
 800de7c:	4038      	ands	r0, r7
 800de7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de82:	f104 0110 	add.w	r1, r4, #16
 800de86:	4628      	mov	r0, r5
 800de88:	f7fd fd20 	bl	800b8cc <ucdr_deserialize_uint32_t>
 800de8c:	6923      	ldr	r3, [r4, #16]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d903      	bls.n	800de9a <uxr_deserialize_CLIENT_Representation+0x7e>
 800de92:	2301      	movs	r3, #1
 800de94:	75ab      	strb	r3, [r5, #22]
 800de96:	2700      	movs	r7, #0
 800de98:	e7eb      	b.n	800de72 <uxr_deserialize_CLIENT_Representation+0x56>
 800de9a:	b30b      	cbz	r3, 800dee0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d0fa      	beq.n	800de96 <uxr_deserialize_CLIENT_Representation+0x7a>
 800dea0:	46a0      	mov	r8, r4
 800dea2:	f04f 0900 	mov.w	r9, #0
 800dea6:	e001      	b.n	800deac <uxr_deserialize_CLIENT_Representation+0x90>
 800dea8:	2e00      	cmp	r6, #0
 800deaa:	d0f4      	beq.n	800de96 <uxr_deserialize_CLIENT_Representation+0x7a>
 800deac:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800deb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800deb4:	4628      	mov	r0, r5
 800deb6:	f002 ff2f 	bl	8010d18 <ucdr_deserialize_string>
 800deba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800debe:	4606      	mov	r6, r0
 800dec0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800dec4:	4628      	mov	r0, r5
 800dec6:	f002 ff27 	bl	8010d18 <ucdr_deserialize_string>
 800deca:	6923      	ldr	r3, [r4, #16]
 800decc:	f109 0901 	add.w	r9, r9, #1
 800ded0:	4006      	ands	r6, r0
 800ded2:	4599      	cmp	r9, r3
 800ded4:	f108 0808 	add.w	r8, r8, #8
 800ded8:	b2f6      	uxtb	r6, r6
 800deda:	d3e5      	bcc.n	800dea8 <uxr_deserialize_CLIENT_Representation+0x8c>
 800dedc:	4037      	ands	r7, r6
 800dede:	e7c8      	b.n	800de72 <uxr_deserialize_CLIENT_Representation+0x56>
 800dee0:	4007      	ands	r7, r0
 800dee2:	e7c6      	b.n	800de72 <uxr_deserialize_CLIENT_Representation+0x56>

0800dee4 <uxr_serialize_AGENT_Representation>:
 800dee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dee8:	2204      	movs	r2, #4
 800deea:	460f      	mov	r7, r1
 800deec:	4605      	mov	r5, r0
 800deee:	f002 fde3 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800def2:	2202      	movs	r2, #2
 800def4:	4604      	mov	r4, r0
 800def6:	1d39      	adds	r1, r7, #4
 800def8:	4628      	mov	r0, r5
 800defa:	f002 fddd 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800defe:	4020      	ands	r0, r4
 800df00:	2202      	movs	r2, #2
 800df02:	1db9      	adds	r1, r7, #6
 800df04:	b2c4      	uxtb	r4, r0
 800df06:	4628      	mov	r0, r5
 800df08:	f002 fdd6 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800df0c:	7a39      	ldrb	r1, [r7, #8]
 800df0e:	4004      	ands	r4, r0
 800df10:	4628      	mov	r0, r5
 800df12:	f7fd f967 	bl	800b1e4 <ucdr_serialize_bool>
 800df16:	7a3b      	ldrb	r3, [r7, #8]
 800df18:	ea00 0804 	and.w	r8, r0, r4
 800df1c:	b913      	cbnz	r3, 800df24 <uxr_serialize_AGENT_Representation+0x40>
 800df1e:	4640      	mov	r0, r8
 800df20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df24:	68f9      	ldr	r1, [r7, #12]
 800df26:	4628      	mov	r0, r5
 800df28:	f7fd fba0 	bl	800b66c <ucdr_serialize_uint32_t>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	b303      	cbz	r3, 800df72 <uxr_serialize_AGENT_Representation+0x8e>
 800df30:	b1d0      	cbz	r0, 800df68 <uxr_serialize_AGENT_Representation+0x84>
 800df32:	463e      	mov	r6, r7
 800df34:	f04f 0900 	mov.w	r9, #0
 800df38:	e001      	b.n	800df3e <uxr_serialize_AGENT_Representation+0x5a>
 800df3a:	3608      	adds	r6, #8
 800df3c:	b1a4      	cbz	r4, 800df68 <uxr_serialize_AGENT_Representation+0x84>
 800df3e:	6931      	ldr	r1, [r6, #16]
 800df40:	4628      	mov	r0, r5
 800df42:	f002 fed9 	bl	8010cf8 <ucdr_serialize_string>
 800df46:	6971      	ldr	r1, [r6, #20]
 800df48:	4604      	mov	r4, r0
 800df4a:	4628      	mov	r0, r5
 800df4c:	f002 fed4 	bl	8010cf8 <ucdr_serialize_string>
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f109 0901 	add.w	r9, r9, #1
 800df56:	4004      	ands	r4, r0
 800df58:	4599      	cmp	r9, r3
 800df5a:	b2e4      	uxtb	r4, r4
 800df5c:	d3ed      	bcc.n	800df3a <uxr_serialize_AGENT_Representation+0x56>
 800df5e:	ea08 0804 	and.w	r8, r8, r4
 800df62:	4640      	mov	r0, r8
 800df64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df68:	f04f 0800 	mov.w	r8, #0
 800df6c:	4640      	mov	r0, r8
 800df6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df72:	ea08 0800 	and.w	r8, r8, r0
 800df76:	e7d2      	b.n	800df1e <uxr_serialize_AGENT_Representation+0x3a>

0800df78 <uxr_serialize_DATAWRITER_Representation>:
 800df78:	b570      	push	{r4, r5, r6, lr}
 800df7a:	460d      	mov	r5, r1
 800df7c:	7809      	ldrb	r1, [r1, #0]
 800df7e:	4606      	mov	r6, r0
 800df80:	f7fd f95e 	bl	800b240 <ucdr_serialize_uint8_t>
 800df84:	4604      	mov	r4, r0
 800df86:	b130      	cbz	r0, 800df96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800df88:	782b      	ldrb	r3, [r5, #0]
 800df8a:	2b02      	cmp	r3, #2
 800df8c:	d00c      	beq.n	800dfa8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800df8e:	2b03      	cmp	r3, #3
 800df90:	d010      	beq.n	800dfb4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800df92:	2b01      	cmp	r3, #1
 800df94:	d008      	beq.n	800dfa8 <uxr_serialize_DATAWRITER_Representation+0x30>
 800df96:	2202      	movs	r2, #2
 800df98:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800df9c:	4630      	mov	r0, r6
 800df9e:	f002 fd8b 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800dfa2:	4020      	ands	r0, r4
 800dfa4:	b2c0      	uxtb	r0, r0
 800dfa6:	bd70      	pop	{r4, r5, r6, pc}
 800dfa8:	6869      	ldr	r1, [r5, #4]
 800dfaa:	4630      	mov	r0, r6
 800dfac:	f002 fea4 	bl	8010cf8 <ucdr_serialize_string>
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	e7f0      	b.n	800df96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800dfbc:	3104      	adds	r1, #4
 800dfbe:	f002 fe6f 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	e7e7      	b.n	800df96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dfc6:	bf00      	nop

0800dfc8 <uxr_serialize_ObjectVariant.part.0>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	780b      	ldrb	r3, [r1, #0]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	460c      	mov	r4, r1
 800dfd0:	4605      	mov	r5, r0
 800dfd2:	2b0d      	cmp	r3, #13
 800dfd4:	d854      	bhi.n	800e080 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800dfd6:	e8df f003 	tbb	[pc, r3]
 800dfda:	0730      	.short	0x0730
 800dfdc:	07071b1b 	.word	0x07071b1b
 800dfe0:	0c530707 	.word	0x0c530707
 800dfe4:	494e0c0c 	.word	0x494e0c0c
 800dfe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfec:	3104      	adds	r1, #4
 800dfee:	f7ff bfc3 	b.w	800df78 <uxr_serialize_DATAWRITER_Representation>
 800dff2:	7909      	ldrb	r1, [r1, #4]
 800dff4:	f7fd f924 	bl	800b240 <ucdr_serialize_uint8_t>
 800dff8:	b1e8      	cbz	r0, 800e036 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800dffa:	7923      	ldrb	r3, [r4, #4]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d001      	beq.n	800e004 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800e000:	2b02      	cmp	r3, #2
 800e002:	d13d      	bne.n	800e080 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800e004:	68a1      	ldr	r1, [r4, #8]
 800e006:	4628      	mov	r0, r5
 800e008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e00c:	f002 be74 	b.w	8010cf8 <ucdr_serialize_string>
 800e010:	7909      	ldrb	r1, [r1, #4]
 800e012:	f7fd f915 	bl	800b240 <ucdr_serialize_uint8_t>
 800e016:	4606      	mov	r6, r0
 800e018:	b120      	cbz	r0, 800e024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e01a:	7923      	ldrb	r3, [r4, #4]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d039      	beq.n	800e094 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800e020:	2b03      	cmp	r3, #3
 800e022:	d02f      	beq.n	800e084 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800e024:	2202      	movs	r2, #2
 800e026:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800e02a:	4628      	mov	r0, r5
 800e02c:	f002 fd44 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e030:	4030      	ands	r0, r6
 800e032:	b2c0      	uxtb	r0, r0
 800e034:	bd70      	pop	{r4, r5, r6, pc}
 800e036:	2000      	movs	r0, #0
 800e038:	bd70      	pop	{r4, r5, r6, pc}
 800e03a:	7909      	ldrb	r1, [r1, #4]
 800e03c:	f7fd f900 	bl	800b240 <ucdr_serialize_uint8_t>
 800e040:	4606      	mov	r6, r0
 800e042:	b158      	cbz	r0, 800e05c <uxr_serialize_ObjectVariant.part.0+0x94>
 800e044:	7923      	ldrb	r3, [r4, #4]
 800e046:	2b02      	cmp	r3, #2
 800e048:	d003      	beq.n	800e052 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d028      	beq.n	800e0a0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d104      	bne.n	800e05c <uxr_serialize_ObjectVariant.part.0+0x94>
 800e052:	68a1      	ldr	r1, [r4, #8]
 800e054:	4628      	mov	r0, r5
 800e056:	f002 fe4f 	bl	8010cf8 <ucdr_serialize_string>
 800e05a:	4606      	mov	r6, r0
 800e05c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800e060:	4628      	mov	r0, r5
 800e062:	f7fd fe29 	bl	800bcb8 <ucdr_serialize_int16_t>
 800e066:	4030      	ands	r0, r6
 800e068:	b2c0      	uxtb	r0, r0
 800e06a:	bd70      	pop	{r4, r5, r6, pc}
 800e06c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e070:	3104      	adds	r1, #4
 800e072:	f7ff be7b 	b.w	800dd6c <uxr_serialize_CLIENT_Representation>
 800e076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e07a:	3104      	adds	r1, #4
 800e07c:	f7ff bf32 	b.w	800dee4 <uxr_serialize_AGENT_Representation>
 800e080:	2001      	movs	r0, #1
 800e082:	bd70      	pop	{r4, r5, r6, pc}
 800e084:	68a2      	ldr	r2, [r4, #8]
 800e086:	f104 010c 	add.w	r1, r4, #12
 800e08a:	4628      	mov	r0, r5
 800e08c:	f002 fe08 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800e090:	4606      	mov	r6, r0
 800e092:	e7c7      	b.n	800e024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e094:	68a1      	ldr	r1, [r4, #8]
 800e096:	4628      	mov	r0, r5
 800e098:	f002 fe2e 	bl	8010cf8 <ucdr_serialize_string>
 800e09c:	4606      	mov	r6, r0
 800e09e:	e7c1      	b.n	800e024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800e0a0:	68a2      	ldr	r2, [r4, #8]
 800e0a2:	f104 010c 	add.w	r1, r4, #12
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f002 fdfa 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	e7d5      	b.n	800e05c <uxr_serialize_ObjectVariant.part.0+0x94>

0800e0b0 <uxr_deserialize_DATAWRITER_Representation>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	4606      	mov	r6, r0
 800e0b4:	460d      	mov	r5, r1
 800e0b6:	f7fd f8d9 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	b130      	cbz	r0, 800e0cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e0be:	782b      	ldrb	r3, [r5, #0]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d00c      	beq.n	800e0de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e0c4:	2b03      	cmp	r3, #3
 800e0c6:	d012      	beq.n	800e0ee <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d008      	beq.n	800e0de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800e0cc:	2202      	movs	r2, #2
 800e0ce:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	f002 fd54 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e0d8:	4020      	ands	r0, r4
 800e0da:	b2c0      	uxtb	r0, r0
 800e0dc:	bd70      	pop	{r4, r5, r6, pc}
 800e0de:	6869      	ldr	r1, [r5, #4]
 800e0e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f002 fe17 	bl	8010d18 <ucdr_deserialize_string>
 800e0ea:	4604      	mov	r4, r0
 800e0ec:	e7ee      	b.n	800e0cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e0ee:	1d2b      	adds	r3, r5, #4
 800e0f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0f4:	f105 0108 	add.w	r1, r5, #8
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f002 fde3 	bl	8010cc4 <ucdr_deserialize_sequence_uint8_t>
 800e0fe:	4604      	mov	r4, r0
 800e100:	e7e4      	b.n	800e0cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800e102:	bf00      	nop

0800e104 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800e104:	b570      	push	{r4, r5, r6, lr}
 800e106:	460d      	mov	r5, r1
 800e108:	7809      	ldrb	r1, [r1, #0]
 800e10a:	4606      	mov	r6, r0
 800e10c:	f7fd f86a 	bl	800b1e4 <ucdr_serialize_bool>
 800e110:	782b      	ldrb	r3, [r5, #0]
 800e112:	4604      	mov	r4, r0
 800e114:	b94b      	cbnz	r3, 800e12a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800e116:	7a29      	ldrb	r1, [r5, #8]
 800e118:	4630      	mov	r0, r6
 800e11a:	f7fd f863 	bl	800b1e4 <ucdr_serialize_bool>
 800e11e:	7a2b      	ldrb	r3, [r5, #8]
 800e120:	4004      	ands	r4, r0
 800e122:	b2e4      	uxtb	r4, r4
 800e124:	b943      	cbnz	r3, 800e138 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800e126:	4620      	mov	r0, r4
 800e128:	bd70      	pop	{r4, r5, r6, pc}
 800e12a:	6869      	ldr	r1, [r5, #4]
 800e12c:	4630      	mov	r0, r6
 800e12e:	f002 fde3 	bl	8010cf8 <ucdr_serialize_string>
 800e132:	4004      	ands	r4, r0
 800e134:	b2e4      	uxtb	r4, r4
 800e136:	e7ee      	b.n	800e116 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800e138:	68e9      	ldr	r1, [r5, #12]
 800e13a:	4630      	mov	r0, r6
 800e13c:	f002 fddc 	bl	8010cf8 <ucdr_serialize_string>
 800e140:	4004      	ands	r4, r0
 800e142:	4620      	mov	r0, r4
 800e144:	bd70      	pop	{r4, r5, r6, pc}
 800e146:	bf00      	nop

0800e148 <uxr_serialize_OBJK_Topic_Binary>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	460d      	mov	r5, r1
 800e14c:	6809      	ldr	r1, [r1, #0]
 800e14e:	4606      	mov	r6, r0
 800e150:	f002 fdd2 	bl	8010cf8 <ucdr_serialize_string>
 800e154:	7929      	ldrb	r1, [r5, #4]
 800e156:	4604      	mov	r4, r0
 800e158:	4630      	mov	r0, r6
 800e15a:	f7fd f843 	bl	800b1e4 <ucdr_serialize_bool>
 800e15e:	792b      	ldrb	r3, [r5, #4]
 800e160:	4004      	ands	r4, r0
 800e162:	b2e4      	uxtb	r4, r4
 800e164:	b943      	cbnz	r3, 800e178 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800e166:	7b29      	ldrb	r1, [r5, #12]
 800e168:	4630      	mov	r0, r6
 800e16a:	f7fd f83b 	bl	800b1e4 <ucdr_serialize_bool>
 800e16e:	7b2b      	ldrb	r3, [r5, #12]
 800e170:	4004      	ands	r4, r0
 800e172:	b93b      	cbnz	r3, 800e184 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800e174:	4620      	mov	r0, r4
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	68a9      	ldr	r1, [r5, #8]
 800e17a:	4630      	mov	r0, r6
 800e17c:	f002 fdbc 	bl	8010cf8 <ucdr_serialize_string>
 800e180:	4004      	ands	r4, r0
 800e182:	e7f0      	b.n	800e166 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800e184:	6929      	ldr	r1, [r5, #16]
 800e186:	4630      	mov	r0, r6
 800e188:	f002 fdb6 	bl	8010cf8 <ucdr_serialize_string>
 800e18c:	4004      	ands	r4, r0
 800e18e:	b2e4      	uxtb	r4, r4
 800e190:	4620      	mov	r0, r4
 800e192:	bd70      	pop	{r4, r5, r6, pc}

0800e194 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	460c      	mov	r4, r1
 800e19a:	7809      	ldrb	r1, [r1, #0]
 800e19c:	4606      	mov	r6, r0
 800e19e:	f7fd f821 	bl	800b1e4 <ucdr_serialize_bool>
 800e1a2:	7823      	ldrb	r3, [r4, #0]
 800e1a4:	4605      	mov	r5, r0
 800e1a6:	b96b      	cbnz	r3, 800e1c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800e1a8:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	f7fd f819 	bl	800b1e4 <ucdr_serialize_bool>
 800e1b2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e1b6:	4005      	ands	r5, r0
 800e1b8:	b2ed      	uxtb	r5, r5
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d169      	bne.n	800e292 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800e1be:	4628      	mov	r0, r5
 800e1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1c4:	6861      	ldr	r1, [r4, #4]
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7fd fa50 	bl	800b66c <ucdr_serialize_uint32_t>
 800e1cc:	6863      	ldr	r3, [r4, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d06b      	beq.n	800e2aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d067      	beq.n	800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e1d6:	68a1      	ldr	r1, [r4, #8]
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f002 fd8d 	bl	8010cf8 <ucdr_serialize_string>
 800e1de:	6863      	ldr	r3, [r4, #4]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d953      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d05e      	beq.n	800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e1e8:	68e1      	ldr	r1, [r4, #12]
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f002 fd84 	bl	8010cf8 <ucdr_serialize_string>
 800e1f0:	6863      	ldr	r3, [r4, #4]
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d94a      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d055      	beq.n	800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e1fa:	6921      	ldr	r1, [r4, #16]
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f002 fd7b 	bl	8010cf8 <ucdr_serialize_string>
 800e202:	6863      	ldr	r3, [r4, #4]
 800e204:	2b03      	cmp	r3, #3
 800e206:	d941      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e208:	2800      	cmp	r0, #0
 800e20a:	d04c      	beq.n	800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e20c:	6961      	ldr	r1, [r4, #20]
 800e20e:	4630      	mov	r0, r6
 800e210:	f002 fd72 	bl	8010cf8 <ucdr_serialize_string>
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	2b04      	cmp	r3, #4
 800e218:	d938      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e21a:	2800      	cmp	r0, #0
 800e21c:	d043      	beq.n	800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e21e:	69a1      	ldr	r1, [r4, #24]
 800e220:	4630      	mov	r0, r6
 800e222:	f002 fd69 	bl	8010cf8 <ucdr_serialize_string>
 800e226:	6863      	ldr	r3, [r4, #4]
 800e228:	2b05      	cmp	r3, #5
 800e22a:	d92f      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d03a      	beq.n	800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e230:	69e1      	ldr	r1, [r4, #28]
 800e232:	4630      	mov	r0, r6
 800e234:	f002 fd60 	bl	8010cf8 <ucdr_serialize_string>
 800e238:	6863      	ldr	r3, [r4, #4]
 800e23a:	2b06      	cmp	r3, #6
 800e23c:	d926      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e23e:	b390      	cbz	r0, 800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e240:	6a21      	ldr	r1, [r4, #32]
 800e242:	4630      	mov	r0, r6
 800e244:	f002 fd58 	bl	8010cf8 <ucdr_serialize_string>
 800e248:	6863      	ldr	r3, [r4, #4]
 800e24a:	2b07      	cmp	r3, #7
 800e24c:	d91e      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e24e:	b350      	cbz	r0, 800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e250:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e252:	4630      	mov	r0, r6
 800e254:	f002 fd50 	bl	8010cf8 <ucdr_serialize_string>
 800e258:	6863      	ldr	r3, [r4, #4]
 800e25a:	2b08      	cmp	r3, #8
 800e25c:	d916      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e25e:	b310      	cbz	r0, 800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e260:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e262:	4630      	mov	r0, r6
 800e264:	f002 fd48 	bl	8010cf8 <ucdr_serialize_string>
 800e268:	6863      	ldr	r3, [r4, #4]
 800e26a:	2b09      	cmp	r3, #9
 800e26c:	d90e      	bls.n	800e28c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800e26e:	b1d0      	cbz	r0, 800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e270:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800e274:	2709      	movs	r7, #9
 800e276:	e000      	b.n	800e27a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800e278:	b1a8      	cbz	r0, 800e2a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800e27a:	f858 1b04 	ldr.w	r1, [r8], #4
 800e27e:	4630      	mov	r0, r6
 800e280:	f002 fd3a 	bl	8010cf8 <ucdr_serialize_string>
 800e284:	6862      	ldr	r2, [r4, #4]
 800e286:	3701      	adds	r7, #1
 800e288:	4297      	cmp	r7, r2
 800e28a:	d3f5      	bcc.n	800e278 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800e28c:	4005      	ands	r5, r0
 800e28e:	b2ed      	uxtb	r5, r5
 800e290:	e78a      	b.n	800e1a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e292:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e294:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800e298:	4630      	mov	r0, r6
 800e29a:	f002 fd01 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800e29e:	4005      	ands	r5, r0
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a6:	2500      	movs	r5, #0
 800e2a8:	e77e      	b.n	800e1a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800e2aa:	4028      	ands	r0, r5
 800e2ac:	b2c5      	uxtb	r5, r0
 800e2ae:	e77b      	b.n	800e1a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800e2b0 <uxr_serialize_OBJK_Publisher_Binary>:
 800e2b0:	b570      	push	{r4, r5, r6, lr}
 800e2b2:	460d      	mov	r5, r1
 800e2b4:	7809      	ldrb	r1, [r1, #0]
 800e2b6:	4606      	mov	r6, r0
 800e2b8:	f7fc ff94 	bl	800b1e4 <ucdr_serialize_bool>
 800e2bc:	782b      	ldrb	r3, [r5, #0]
 800e2be:	4604      	mov	r4, r0
 800e2c0:	b94b      	cbnz	r3, 800e2d6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800e2c2:	7a29      	ldrb	r1, [r5, #8]
 800e2c4:	4630      	mov	r0, r6
 800e2c6:	f7fc ff8d 	bl	800b1e4 <ucdr_serialize_bool>
 800e2ca:	7a2b      	ldrb	r3, [r5, #8]
 800e2cc:	4004      	ands	r4, r0
 800e2ce:	b2e4      	uxtb	r4, r4
 800e2d0:	b943      	cbnz	r3, 800e2e4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	bd70      	pop	{r4, r5, r6, pc}
 800e2d6:	6869      	ldr	r1, [r5, #4]
 800e2d8:	4630      	mov	r0, r6
 800e2da:	f002 fd0d 	bl	8010cf8 <ucdr_serialize_string>
 800e2de:	4004      	ands	r4, r0
 800e2e0:	b2e4      	uxtb	r4, r4
 800e2e2:	e7ee      	b.n	800e2c2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800e2e4:	f105 010c 	add.w	r1, r5, #12
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7ff ff53 	bl	800e194 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800e2ee:	4004      	ands	r4, r0
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	bd70      	pop	{r4, r5, r6, pc}

0800e2f4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800e2f4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800e2f8:	4688      	mov	r8, r1
 800e2fa:	8809      	ldrh	r1, [r1, #0]
 800e2fc:	4681      	mov	r9, r0
 800e2fe:	f7fc ffcb 	bl	800b298 <ucdr_serialize_uint16_t>
 800e302:	f898 1002 	ldrb.w	r1, [r8, #2]
 800e306:	4606      	mov	r6, r0
 800e308:	4648      	mov	r0, r9
 800e30a:	f7fc ff6b 	bl	800b1e4 <ucdr_serialize_bool>
 800e30e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800e312:	4006      	ands	r6, r0
 800e314:	b2f5      	uxtb	r5, r6
 800e316:	b9eb      	cbnz	r3, 800e354 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800e318:	f898 1006 	ldrb.w	r1, [r8, #6]
 800e31c:	4648      	mov	r0, r9
 800e31e:	f7fc ff61 	bl	800b1e4 <ucdr_serialize_bool>
 800e322:	f898 3006 	ldrb.w	r3, [r8, #6]
 800e326:	4005      	ands	r5, r0
 800e328:	bb7b      	cbnz	r3, 800e38a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800e32a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800e32e:	4648      	mov	r0, r9
 800e330:	f7fc ff58 	bl	800b1e4 <ucdr_serialize_bool>
 800e334:	f898 300c 	ldrb.w	r3, [r8, #12]
 800e338:	4005      	ands	r5, r0
 800e33a:	b9f3      	cbnz	r3, 800e37a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800e33c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800e340:	4648      	mov	r0, r9
 800e342:	f7fc ff4f 	bl	800b1e4 <ucdr_serialize_bool>
 800e346:	f898 3014 	ldrb.w	r3, [r8, #20]
 800e34a:	4005      	ands	r5, r0
 800e34c:	b94b      	cbnz	r3, 800e362 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800e34e:	4628      	mov	r0, r5
 800e350:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e354:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800e358:	4648      	mov	r0, r9
 800e35a:	f7fc ff9d 	bl	800b298 <ucdr_serialize_uint16_t>
 800e35e:	4005      	ands	r5, r0
 800e360:	e7da      	b.n	800e318 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800e362:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e366:	f108 011c 	add.w	r1, r8, #28
 800e36a:	4648      	mov	r0, r9
 800e36c:	f002 fc98 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800e370:	4028      	ands	r0, r5
 800e372:	b2c5      	uxtb	r5, r0
 800e374:	4628      	mov	r0, r5
 800e376:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e37a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e37e:	4648      	mov	r0, r9
 800e380:	f7fd f974 	bl	800b66c <ucdr_serialize_uint32_t>
 800e384:	4028      	ands	r0, r5
 800e386:	b2c5      	uxtb	r5, r0
 800e388:	e7d8      	b.n	800e33c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800e38a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e38e:	4648      	mov	r0, r9
 800e390:	f7fd f96c 	bl	800b66c <ucdr_serialize_uint32_t>
 800e394:	4028      	ands	r0, r5
 800e396:	b2c5      	uxtb	r5, r0
 800e398:	e7c7      	b.n	800e32a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800e39a:	bf00      	nop

0800e39c <uxr_serialize_OBJK_DataWriter_Binary>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	2202      	movs	r2, #2
 800e3a0:	460d      	mov	r5, r1
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	f002 fb88 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e3a8:	78a9      	ldrb	r1, [r5, #2]
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f7fc ff19 	bl	800b1e4 <ucdr_serialize_bool>
 800e3b2:	78ab      	ldrb	r3, [r5, #2]
 800e3b4:	4004      	ands	r4, r0
 800e3b6:	b2e4      	uxtb	r4, r4
 800e3b8:	b90b      	cbnz	r3, 800e3be <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3be:	f105 0108 	add.w	r1, r5, #8
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7ff ff96 	bl	800e2f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e3c8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800e3cc:	4607      	mov	r7, r0
 800e3ce:	4630      	mov	r0, r6
 800e3d0:	f7fc ff08 	bl	800b1e4 <ucdr_serialize_bool>
 800e3d4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800e3d8:	4038      	ands	r0, r7
 800e3da:	b2c7      	uxtb	r7, r0
 800e3dc:	b913      	cbnz	r3, 800e3e4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800e3de:	403c      	ands	r4, r7
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3e4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f7fd fb95 	bl	800bb18 <ucdr_serialize_uint64_t>
 800e3ee:	4007      	ands	r7, r0
 800e3f0:	e7f5      	b.n	800e3de <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800e3f2:	bf00      	nop

0800e3f4 <uxr_deserialize_ObjectVariant>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	4605      	mov	r5, r0
 800e3f8:	460e      	mov	r6, r1
 800e3fa:	f7fc ff37 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e3fe:	b168      	cbz	r0, 800e41c <uxr_deserialize_ObjectVariant+0x28>
 800e400:	7833      	ldrb	r3, [r6, #0]
 800e402:	3b01      	subs	r3, #1
 800e404:	4604      	mov	r4, r0
 800e406:	2b0d      	cmp	r3, #13
 800e408:	d809      	bhi.n	800e41e <uxr_deserialize_ObjectVariant+0x2a>
 800e40a:	e8df f003 	tbb	[pc, r3]
 800e40e:	0a41      	.short	0x0a41
 800e410:	0a0a2323 	.word	0x0a0a2323
 800e414:	10080a0a 	.word	0x10080a0a
 800e418:	565c1010 	.word	0x565c1010
 800e41c:	2400      	movs	r4, #0
 800e41e:	4620      	mov	r0, r4
 800e420:	bd70      	pop	{r4, r5, r6, pc}
 800e422:	1d31      	adds	r1, r6, #4
 800e424:	4628      	mov	r0, r5
 800e426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e42a:	f7ff be41 	b.w	800e0b0 <uxr_deserialize_DATAWRITER_Representation>
 800e42e:	1d31      	adds	r1, r6, #4
 800e430:	4628      	mov	r0, r5
 800e432:	f7fc ff1b 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e436:	2800      	cmp	r0, #0
 800e438:	d0f0      	beq.n	800e41c <uxr_deserialize_ObjectVariant+0x28>
 800e43a:	7933      	ldrb	r3, [r6, #4]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d001      	beq.n	800e444 <uxr_deserialize_ObjectVariant+0x50>
 800e440:	2b02      	cmp	r3, #2
 800e442:	d1ec      	bne.n	800e41e <uxr_deserialize_ObjectVariant+0x2a>
 800e444:	68b1      	ldr	r1, [r6, #8]
 800e446:	4628      	mov	r0, r5
 800e448:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e450:	f002 bc62 	b.w	8010d18 <ucdr_deserialize_string>
 800e454:	1d31      	adds	r1, r6, #4
 800e456:	4628      	mov	r0, r5
 800e458:	f7fc ff08 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e45c:	4604      	mov	r4, r0
 800e45e:	b170      	cbz	r0, 800e47e <uxr_deserialize_ObjectVariant+0x8a>
 800e460:	7933      	ldrb	r3, [r6, #4]
 800e462:	2b02      	cmp	r3, #2
 800e464:	d04c      	beq.n	800e500 <uxr_deserialize_ObjectVariant+0x10c>
 800e466:	2b03      	cmp	r3, #3
 800e468:	d109      	bne.n	800e47e <uxr_deserialize_ObjectVariant+0x8a>
 800e46a:	f106 0308 	add.w	r3, r6, #8
 800e46e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e472:	f106 010c 	add.w	r1, r6, #12
 800e476:	4628      	mov	r0, r5
 800e478:	f002 fc24 	bl	8010cc4 <ucdr_deserialize_sequence_uint8_t>
 800e47c:	4604      	mov	r4, r0
 800e47e:	2202      	movs	r2, #2
 800e480:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800e484:	4628      	mov	r0, r5
 800e486:	f002 fb7b 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e48a:	4020      	ands	r0, r4
 800e48c:	b2c4      	uxtb	r4, r0
 800e48e:	e7c6      	b.n	800e41e <uxr_deserialize_ObjectVariant+0x2a>
 800e490:	1d31      	adds	r1, r6, #4
 800e492:	4628      	mov	r0, r5
 800e494:	f7fc feea 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e498:	4604      	mov	r4, r0
 800e49a:	b130      	cbz	r0, 800e4aa <uxr_deserialize_ObjectVariant+0xb6>
 800e49c:	7933      	ldrb	r3, [r6, #4]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d036      	beq.n	800e510 <uxr_deserialize_ObjectVariant+0x11c>
 800e4a2:	2b03      	cmp	r3, #3
 800e4a4:	d03c      	beq.n	800e520 <uxr_deserialize_ObjectVariant+0x12c>
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d032      	beq.n	800e510 <uxr_deserialize_ObjectVariant+0x11c>
 800e4aa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800e4ae:	4628      	mov	r0, r5
 800e4b0:	f7fd fc82 	bl	800bdb8 <ucdr_deserialize_int16_t>
 800e4b4:	4020      	ands	r0, r4
 800e4b6:	b2c4      	uxtb	r4, r0
 800e4b8:	e7b1      	b.n	800e41e <uxr_deserialize_ObjectVariant+0x2a>
 800e4ba:	1d31      	adds	r1, r6, #4
 800e4bc:	4628      	mov	r0, r5
 800e4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4c2:	f7ff bcab 	b.w	800de1c <uxr_deserialize_CLIENT_Representation>
 800e4c6:	2204      	movs	r2, #4
 800e4c8:	18b1      	adds	r1, r6, r2
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	f002 fb58 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e4d0:	2202      	movs	r2, #2
 800e4d2:	f106 0108 	add.w	r1, r6, #8
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4628      	mov	r0, r5
 800e4da:	f002 fb51 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e4de:	2202      	movs	r2, #2
 800e4e0:	4004      	ands	r4, r0
 800e4e2:	f106 010a 	add.w	r1, r6, #10
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	f002 fb4a 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e4ec:	b2e4      	uxtb	r4, r4
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	f106 010c 	add.w	r1, r6, #12
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	401c      	ands	r4, r3
 800e4f8:	f7fc fe8a 	bl	800b210 <ucdr_deserialize_bool>
 800e4fc:	4004      	ands	r4, r0
 800e4fe:	e78e      	b.n	800e41e <uxr_deserialize_ObjectVariant+0x2a>
 800e500:	68b1      	ldr	r1, [r6, #8]
 800e502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e506:	4628      	mov	r0, r5
 800e508:	f002 fc06 	bl	8010d18 <ucdr_deserialize_string>
 800e50c:	4604      	mov	r4, r0
 800e50e:	e7b6      	b.n	800e47e <uxr_deserialize_ObjectVariant+0x8a>
 800e510:	68b1      	ldr	r1, [r6, #8]
 800e512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e516:	4628      	mov	r0, r5
 800e518:	f002 fbfe 	bl	8010d18 <ucdr_deserialize_string>
 800e51c:	4604      	mov	r4, r0
 800e51e:	e7c4      	b.n	800e4aa <uxr_deserialize_ObjectVariant+0xb6>
 800e520:	f106 0308 	add.w	r3, r6, #8
 800e524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e528:	f106 010c 	add.w	r1, r6, #12
 800e52c:	4628      	mov	r0, r5
 800e52e:	f002 fbc9 	bl	8010cc4 <ucdr_deserialize_sequence_uint8_t>
 800e532:	4604      	mov	r4, r0
 800e534:	e7b9      	b.n	800e4aa <uxr_deserialize_ObjectVariant+0xb6>
 800e536:	bf00      	nop

0800e538 <uxr_deserialize_BaseObjectRequest>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	2202      	movs	r2, #2
 800e53c:	4605      	mov	r5, r0
 800e53e:	460e      	mov	r6, r1
 800e540:	f002 fb1e 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e544:	2202      	movs	r2, #2
 800e546:	4604      	mov	r4, r0
 800e548:	18b1      	adds	r1, r6, r2
 800e54a:	4628      	mov	r0, r5
 800e54c:	f002 fb18 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e550:	4020      	ands	r0, r4
 800e552:	b2c0      	uxtb	r0, r0
 800e554:	bd70      	pop	{r4, r5, r6, pc}
 800e556:	bf00      	nop

0800e558 <uxr_serialize_ActivityInfoVariant>:
 800e558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e55c:	460d      	mov	r5, r1
 800e55e:	7809      	ldrb	r1, [r1, #0]
 800e560:	4607      	mov	r7, r0
 800e562:	f7fc fe6d 	bl	800b240 <ucdr_serialize_uint8_t>
 800e566:	4681      	mov	r9, r0
 800e568:	b138      	cbz	r0, 800e57a <uxr_serialize_ActivityInfoVariant+0x22>
 800e56a:	782b      	ldrb	r3, [r5, #0]
 800e56c:	2b06      	cmp	r3, #6
 800e56e:	f000 8082 	beq.w	800e676 <uxr_serialize_ActivityInfoVariant+0x11e>
 800e572:	2b0d      	cmp	r3, #13
 800e574:	d016      	beq.n	800e5a4 <uxr_serialize_ActivityInfoVariant+0x4c>
 800e576:	2b05      	cmp	r3, #5
 800e578:	d002      	beq.n	800e580 <uxr_serialize_ActivityInfoVariant+0x28>
 800e57a:	4648      	mov	r0, r9
 800e57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e580:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e584:	4638      	mov	r0, r7
 800e586:	f7fd fb97 	bl	800bcb8 <ucdr_serialize_int16_t>
 800e58a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800e58e:	4681      	mov	r9, r0
 800e590:	4638      	mov	r0, r7
 800e592:	f7fd fac1 	bl	800bb18 <ucdr_serialize_uint64_t>
 800e596:	ea09 0000 	and.w	r0, r9, r0
 800e59a:	fa5f f980 	uxtb.w	r9, r0
 800e59e:	4648      	mov	r0, r9
 800e5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5a4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e5a8:	4638      	mov	r0, r7
 800e5aa:	f7fd fb85 	bl	800bcb8 <ucdr_serialize_int16_t>
 800e5ae:	68e9      	ldr	r1, [r5, #12]
 800e5b0:	4681      	mov	r9, r0
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	f7fd f85a 	bl	800b66c <ucdr_serialize_uint32_t>
 800e5b8:	68eb      	ldr	r3, [r5, #12]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d0eb      	beq.n	800e596 <uxr_serialize_ActivityInfoVariant+0x3e>
 800e5be:	b320      	cbz	r0, 800e60a <uxr_serialize_ActivityInfoVariant+0xb2>
 800e5c0:	f105 080c 	add.w	r8, r5, #12
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800e5ca:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800e5ce:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800e5d2:	4638      	mov	r0, r7
 800e5d4:	f7fc fe34 	bl	800b240 <ucdr_serialize_uint8_t>
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	d053      	beq.n	800e684 <uxr_serialize_ActivityInfoVariant+0x12c>
 800e5dc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800e5e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800e5e4:	0074      	lsls	r4, r6, #1
 800e5e6:	00c9      	lsls	r1, r1, #3
 800e5e8:	2b03      	cmp	r3, #3
 800e5ea:	d854      	bhi.n	800e696 <uxr_serialize_ActivityInfoVariant+0x13e>
 800e5ec:	e8df f003 	tbb	[pc, r3]
 800e5f0:	02102132 	.word	0x02102132
 800e5f4:	4441      	add	r1, r8
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	6889      	ldr	r1, [r1, #8]
 800e5fa:	f002 fb7d 	bl	8010cf8 <ucdr_serialize_string>
 800e5fe:	68ea      	ldr	r2, [r5, #12]
 800e600:	3601      	adds	r6, #1
 800e602:	4296      	cmp	r6, r2
 800e604:	d242      	bcs.n	800e68c <uxr_serialize_ActivityInfoVariant+0x134>
 800e606:	2800      	cmp	r0, #0
 800e608:	d1dd      	bne.n	800e5c6 <uxr_serialize_ActivityInfoVariant+0x6e>
 800e60a:	f04f 0900 	mov.w	r9, #0
 800e60e:	e7b4      	b.n	800e57a <uxr_serialize_ActivityInfoVariant+0x22>
 800e610:	3108      	adds	r1, #8
 800e612:	4441      	add	r1, r8
 800e614:	2210      	movs	r2, #16
 800e616:	4638      	mov	r0, r7
 800e618:	f002 fa4e 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e61c:	4434      	add	r4, r6
 800e61e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e622:	4604      	mov	r4, r0
 800e624:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e626:	4638      	mov	r0, r7
 800e628:	f7fd f820 	bl	800b66c <ucdr_serialize_uint32_t>
 800e62c:	4020      	ands	r0, r4
 800e62e:	b2c0      	uxtb	r0, r0
 800e630:	e7e5      	b.n	800e5fe <uxr_serialize_ActivityInfoVariant+0xa6>
 800e632:	3108      	adds	r1, #8
 800e634:	4441      	add	r1, r8
 800e636:	2204      	movs	r2, #4
 800e638:	4638      	mov	r0, r7
 800e63a:	f002 fa3d 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e63e:	4434      	add	r4, r6
 800e640:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e644:	4604      	mov	r4, r0
 800e646:	8b19      	ldrh	r1, [r3, #24]
 800e648:	4638      	mov	r0, r7
 800e64a:	f7fc fe25 	bl	800b298 <ucdr_serialize_uint16_t>
 800e64e:	4020      	ands	r0, r4
 800e650:	b2c0      	uxtb	r0, r0
 800e652:	e7d4      	b.n	800e5fe <uxr_serialize_ActivityInfoVariant+0xa6>
 800e654:	3108      	adds	r1, #8
 800e656:	4441      	add	r1, r8
 800e658:	2202      	movs	r2, #2
 800e65a:	4638      	mov	r0, r7
 800e65c:	f002 fa2c 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e660:	4434      	add	r4, r6
 800e662:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e666:	4604      	mov	r4, r0
 800e668:	7d99      	ldrb	r1, [r3, #22]
 800e66a:	4638      	mov	r0, r7
 800e66c:	f7fc fde8 	bl	800b240 <ucdr_serialize_uint8_t>
 800e670:	4020      	ands	r0, r4
 800e672:	b2c0      	uxtb	r0, r0
 800e674:	e7c3      	b.n	800e5fe <uxr_serialize_ActivityInfoVariant+0xa6>
 800e676:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e67a:	4638      	mov	r0, r7
 800e67c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e680:	f7fd bb1a 	b.w	800bcb8 <ucdr_serialize_int16_t>
 800e684:	68ea      	ldr	r2, [r5, #12]
 800e686:	3601      	adds	r6, #1
 800e688:	42b2      	cmp	r2, r6
 800e68a:	d8be      	bhi.n	800e60a <uxr_serialize_ActivityInfoVariant+0xb2>
 800e68c:	ea09 0900 	and.w	r9, r9, r0
 800e690:	fa5f f989 	uxtb.w	r9, r9
 800e694:	e771      	b.n	800e57a <uxr_serialize_ActivityInfoVariant+0x22>
 800e696:	68eb      	ldr	r3, [r5, #12]
 800e698:	3601      	adds	r6, #1
 800e69a:	429e      	cmp	r6, r3
 800e69c:	f10a 0a18 	add.w	sl, sl, #24
 800e6a0:	d395      	bcc.n	800e5ce <uxr_serialize_ActivityInfoVariant+0x76>
 800e6a2:	e76a      	b.n	800e57a <uxr_serialize_ActivityInfoVariant+0x22>

0800e6a4 <uxr_deserialize_BaseObjectReply>:
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	2202      	movs	r2, #2
 800e6aa:	4606      	mov	r6, r0
 800e6ac:	460f      	mov	r7, r1
 800e6ae:	f002 fa67 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e6b2:	2202      	movs	r2, #2
 800e6b4:	18b9      	adds	r1, r7, r2
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f002 fa61 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e6be:	1d39      	adds	r1, r7, #4
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f7fc fdd2 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e6c8:	1d79      	adds	r1, r7, #5
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4630      	mov	r0, r6
 800e6ce:	f7fc fdcd 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e6d2:	ea05 0508 	and.w	r5, r5, r8
 800e6d6:	402c      	ands	r4, r5
 800e6d8:	4020      	ands	r0, r4
 800e6da:	b2c0      	uxtb	r0, r0
 800e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e6e0 <uxr_serialize_ReadSpecification>:
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	460e      	mov	r6, r1
 800e6e6:	7809      	ldrb	r1, [r1, #0]
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	f7fc fda9 	bl	800b240 <ucdr_serialize_uint8_t>
 800e6ee:	7871      	ldrb	r1, [r6, #1]
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4638      	mov	r0, r7
 800e6f4:	f7fc fda4 	bl	800b240 <ucdr_serialize_uint8_t>
 800e6f8:	78b1      	ldrb	r1, [r6, #2]
 800e6fa:	4004      	ands	r4, r0
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	f7fc fd71 	bl	800b1e4 <ucdr_serialize_bool>
 800e702:	78b3      	ldrb	r3, [r6, #2]
 800e704:	b2e4      	uxtb	r4, r4
 800e706:	4004      	ands	r4, r0
 800e708:	b94b      	cbnz	r3, 800e71e <uxr_serialize_ReadSpecification+0x3e>
 800e70a:	7a31      	ldrb	r1, [r6, #8]
 800e70c:	4638      	mov	r0, r7
 800e70e:	f7fc fd69 	bl	800b1e4 <ucdr_serialize_bool>
 800e712:	7a33      	ldrb	r3, [r6, #8]
 800e714:	4004      	ands	r4, r0
 800e716:	b943      	cbnz	r3, 800e72a <uxr_serialize_ReadSpecification+0x4a>
 800e718:	4620      	mov	r0, r4
 800e71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e71e:	6871      	ldr	r1, [r6, #4]
 800e720:	4638      	mov	r0, r7
 800e722:	f002 fae9 	bl	8010cf8 <ucdr_serialize_string>
 800e726:	4004      	ands	r4, r0
 800e728:	e7ef      	b.n	800e70a <uxr_serialize_ReadSpecification+0x2a>
 800e72a:	8971      	ldrh	r1, [r6, #10]
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7fc fdb3 	bl	800b298 <ucdr_serialize_uint16_t>
 800e732:	89b1      	ldrh	r1, [r6, #12]
 800e734:	4605      	mov	r5, r0
 800e736:	4638      	mov	r0, r7
 800e738:	f7fc fdae 	bl	800b298 <ucdr_serialize_uint16_t>
 800e73c:	89f1      	ldrh	r1, [r6, #14]
 800e73e:	4005      	ands	r5, r0
 800e740:	4638      	mov	r0, r7
 800e742:	f7fc fda9 	bl	800b298 <ucdr_serialize_uint16_t>
 800e746:	8a31      	ldrh	r1, [r6, #16]
 800e748:	4680      	mov	r8, r0
 800e74a:	4638      	mov	r0, r7
 800e74c:	f7fc fda4 	bl	800b298 <ucdr_serialize_uint16_t>
 800e750:	b2ed      	uxtb	r5, r5
 800e752:	4025      	ands	r5, r4
 800e754:	ea08 0505 	and.w	r5, r8, r5
 800e758:	ea00 0405 	and.w	r4, r0, r5
 800e75c:	4620      	mov	r0, r4
 800e75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e762:	bf00      	nop

0800e764 <uxr_serialize_CREATE_CLIENT_Payload>:
 800e764:	f7ff bb02 	b.w	800dd6c <uxr_serialize_CLIENT_Representation>

0800e768 <uxr_serialize_CREATE_Payload>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	2202      	movs	r2, #2
 800e76c:	4607      	mov	r7, r0
 800e76e:	460e      	mov	r6, r1
 800e770:	f002 f9a2 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e774:	2202      	movs	r2, #2
 800e776:	18b1      	adds	r1, r6, r2
 800e778:	4605      	mov	r5, r0
 800e77a:	4638      	mov	r0, r7
 800e77c:	f002 f99c 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e780:	7931      	ldrb	r1, [r6, #4]
 800e782:	4604      	mov	r4, r0
 800e784:	4638      	mov	r0, r7
 800e786:	f7fc fd5b 	bl	800b240 <ucdr_serialize_uint8_t>
 800e78a:	b170      	cbz	r0, 800e7aa <uxr_serialize_CREATE_Payload+0x42>
 800e78c:	7933      	ldrb	r3, [r6, #4]
 800e78e:	402c      	ands	r4, r5
 800e790:	3b01      	subs	r3, #1
 800e792:	b2e4      	uxtb	r4, r4
 800e794:	2b0d      	cmp	r3, #13
 800e796:	d809      	bhi.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e798:	e8df f003 	tbb	[pc, r3]
 800e79c:	23230a4c 	.word	0x23230a4c
 800e7a0:	0a0a0a0a 	.word	0x0a0a0a0a
 800e7a4:	12121208 	.word	0x12121208
 800e7a8:	3e45      	.short	0x3e45
 800e7aa:	2400      	movs	r4, #0
 800e7ac:	4620      	mov	r0, r4
 800e7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b0:	f106 0108 	add.w	r1, r6, #8
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	f7ff fbdf 	bl	800df78 <uxr_serialize_DATAWRITER_Representation>
 800e7ba:	4004      	ands	r4, r0
 800e7bc:	4620      	mov	r0, r4
 800e7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7c0:	7a31      	ldrb	r1, [r6, #8]
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	f7fc fd3c 	bl	800b240 <ucdr_serialize_uint8_t>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d0ee      	beq.n	800e7aa <uxr_serialize_CREATE_Payload+0x42>
 800e7cc:	7a33      	ldrb	r3, [r6, #8]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d001      	beq.n	800e7d6 <uxr_serialize_CREATE_Payload+0x6e>
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d1ea      	bne.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e7d6:	68f1      	ldr	r1, [r6, #12]
 800e7d8:	4638      	mov	r0, r7
 800e7da:	f002 fa8d 	bl	8010cf8 <ucdr_serialize_string>
 800e7de:	4004      	ands	r4, r0
 800e7e0:	e7e4      	b.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e7e2:	7a31      	ldrb	r1, [r6, #8]
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	f7fc fd2b 	bl	800b240 <ucdr_serialize_uint8_t>
 800e7ea:	4605      	mov	r5, r0
 800e7ec:	b158      	cbz	r0, 800e806 <uxr_serialize_CREATE_Payload+0x9e>
 800e7ee:	7a33      	ldrb	r3, [r6, #8]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d034      	beq.n	800e85e <uxr_serialize_CREATE_Payload+0xf6>
 800e7f4:	2b03      	cmp	r3, #3
 800e7f6:	d106      	bne.n	800e806 <uxr_serialize_CREATE_Payload+0x9e>
 800e7f8:	68f2      	ldr	r2, [r6, #12]
 800e7fa:	f106 0110 	add.w	r1, r6, #16
 800e7fe:	4638      	mov	r0, r7
 800e800:	f002 fa4e 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800e804:	4605      	mov	r5, r0
 800e806:	2202      	movs	r2, #2
 800e808:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800e80c:	4638      	mov	r0, r7
 800e80e:	f002 f953 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e812:	4028      	ands	r0, r5
 800e814:	4004      	ands	r4, r0
 800e816:	e7c9      	b.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e818:	f106 0108 	add.w	r1, r6, #8
 800e81c:	4638      	mov	r0, r7
 800e81e:	f7ff faa5 	bl	800dd6c <uxr_serialize_CLIENT_Representation>
 800e822:	4004      	ands	r4, r0
 800e824:	e7c2      	b.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e826:	f106 0108 	add.w	r1, r6, #8
 800e82a:	4638      	mov	r0, r7
 800e82c:	f7ff fb5a 	bl	800dee4 <uxr_serialize_AGENT_Representation>
 800e830:	4004      	ands	r4, r0
 800e832:	e7bb      	b.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e834:	7a31      	ldrb	r1, [r6, #8]
 800e836:	4638      	mov	r0, r7
 800e838:	f7fc fd02 	bl	800b240 <ucdr_serialize_uint8_t>
 800e83c:	4605      	mov	r5, r0
 800e83e:	b130      	cbz	r0, 800e84e <uxr_serialize_CREATE_Payload+0xe6>
 800e840:	7a33      	ldrb	r3, [r6, #8]
 800e842:	2b02      	cmp	r3, #2
 800e844:	d011      	beq.n	800e86a <uxr_serialize_CREATE_Payload+0x102>
 800e846:	2b03      	cmp	r3, #3
 800e848:	d015      	beq.n	800e876 <uxr_serialize_CREATE_Payload+0x10e>
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d00d      	beq.n	800e86a <uxr_serialize_CREATE_Payload+0x102>
 800e84e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800e852:	4638      	mov	r0, r7
 800e854:	f7fd fa30 	bl	800bcb8 <ucdr_serialize_int16_t>
 800e858:	4028      	ands	r0, r5
 800e85a:	4004      	ands	r4, r0
 800e85c:	e7a6      	b.n	800e7ac <uxr_serialize_CREATE_Payload+0x44>
 800e85e:	68f1      	ldr	r1, [r6, #12]
 800e860:	4638      	mov	r0, r7
 800e862:	f002 fa49 	bl	8010cf8 <ucdr_serialize_string>
 800e866:	4605      	mov	r5, r0
 800e868:	e7cd      	b.n	800e806 <uxr_serialize_CREATE_Payload+0x9e>
 800e86a:	68f1      	ldr	r1, [r6, #12]
 800e86c:	4638      	mov	r0, r7
 800e86e:	f002 fa43 	bl	8010cf8 <ucdr_serialize_string>
 800e872:	4605      	mov	r5, r0
 800e874:	e7eb      	b.n	800e84e <uxr_serialize_CREATE_Payload+0xe6>
 800e876:	68f2      	ldr	r2, [r6, #12]
 800e878:	f106 0110 	add.w	r1, r6, #16
 800e87c:	4638      	mov	r0, r7
 800e87e:	f002 fa0f 	bl	8010ca0 <ucdr_serialize_sequence_uint8_t>
 800e882:	4605      	mov	r5, r0
 800e884:	e7e3      	b.n	800e84e <uxr_serialize_CREATE_Payload+0xe6>
 800e886:	bf00      	nop

0800e888 <uxr_deserialize_GET_INFO_Payload>:
 800e888:	b570      	push	{r4, r5, r6, lr}
 800e88a:	2202      	movs	r2, #2
 800e88c:	4605      	mov	r5, r0
 800e88e:	460e      	mov	r6, r1
 800e890:	f002 f976 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e894:	2202      	movs	r2, #2
 800e896:	18b1      	adds	r1, r6, r2
 800e898:	4604      	mov	r4, r0
 800e89a:	4628      	mov	r0, r5
 800e89c:	f002 f970 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e8a0:	1d31      	adds	r1, r6, #4
 800e8a2:	4004      	ands	r4, r0
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	f7fd f811 	bl	800b8cc <ucdr_deserialize_uint32_t>
 800e8aa:	b2e4      	uxtb	r4, r4
 800e8ac:	4020      	ands	r0, r4
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}

0800e8b0 <uxr_serialize_DELETE_Payload>:
 800e8b0:	b570      	push	{r4, r5, r6, lr}
 800e8b2:	2202      	movs	r2, #2
 800e8b4:	4605      	mov	r5, r0
 800e8b6:	460e      	mov	r6, r1
 800e8b8:	f002 f8fe 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e8bc:	2202      	movs	r2, #2
 800e8be:	4604      	mov	r4, r0
 800e8c0:	18b1      	adds	r1, r6, r2
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	f002 f8f8 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e8c8:	4020      	ands	r0, r4
 800e8ca:	b2c0      	uxtb	r0, r0
 800e8cc:	bd70      	pop	{r4, r5, r6, pc}
 800e8ce:	bf00      	nop

0800e8d0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800e8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	460e      	mov	r6, r1
 800e8d8:	f7fc fcc8 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e8dc:	1c71      	adds	r1, r6, #1
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	f7fc fcc3 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e8e6:	2204      	movs	r2, #4
 800e8e8:	18b1      	adds	r1, r6, r2
 800e8ea:	4680      	mov	r8, r0
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	f002 f947 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e8f2:	f106 0108 	add.w	r1, r6, #8
 800e8f6:	4607      	mov	r7, r0
 800e8f8:	2202      	movs	r2, #2
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f002 f940 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e900:	ea04 0308 	and.w	r3, r4, r8
 800e904:	b2db      	uxtb	r3, r3
 800e906:	ea03 0407 	and.w	r4, r3, r7
 800e90a:	2202      	movs	r2, #2
 800e90c:	4607      	mov	r7, r0
 800e90e:	f106 010a 	add.w	r1, r6, #10
 800e912:	4628      	mov	r0, r5
 800e914:	f002 f934 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e918:	f106 010c 	add.w	r1, r6, #12
 800e91c:	4603      	mov	r3, r0
 800e91e:	4628      	mov	r0, r5
 800e920:	461d      	mov	r5, r3
 800e922:	f7fc fc75 	bl	800b210 <ucdr_deserialize_bool>
 800e926:	403c      	ands	r4, r7
 800e928:	4025      	ands	r5, r4
 800e92a:	4028      	ands	r0, r5
 800e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e930 <uxr_deserialize_STATUS_Payload>:
 800e930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e934:	2202      	movs	r2, #2
 800e936:	4606      	mov	r6, r0
 800e938:	460f      	mov	r7, r1
 800e93a:	f002 f921 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e93e:	2202      	movs	r2, #2
 800e940:	18b9      	adds	r1, r7, r2
 800e942:	4605      	mov	r5, r0
 800e944:	4630      	mov	r0, r6
 800e946:	f002 f91b 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800e94a:	1d39      	adds	r1, r7, #4
 800e94c:	4680      	mov	r8, r0
 800e94e:	4630      	mov	r0, r6
 800e950:	f7fc fc8c 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e954:	1d79      	adds	r1, r7, #5
 800e956:	4604      	mov	r4, r0
 800e958:	4630      	mov	r0, r6
 800e95a:	f7fc fc87 	bl	800b26c <ucdr_deserialize_uint8_t>
 800e95e:	ea05 0508 	and.w	r5, r5, r8
 800e962:	402c      	ands	r4, r5
 800e964:	4020      	ands	r0, r4
 800e966:	b2c0      	uxtb	r0, r0
 800e968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e96c <uxr_serialize_INFO_Payload>:
 800e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e970:	2202      	movs	r2, #2
 800e972:	460c      	mov	r4, r1
 800e974:	4605      	mov	r5, r0
 800e976:	f002 f89f 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e97a:	2202      	movs	r2, #2
 800e97c:	18a1      	adds	r1, r4, r2
 800e97e:	4680      	mov	r8, r0
 800e980:	4628      	mov	r0, r5
 800e982:	f002 f899 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800e986:	7921      	ldrb	r1, [r4, #4]
 800e988:	4607      	mov	r7, r0
 800e98a:	4628      	mov	r0, r5
 800e98c:	f7fc fc58 	bl	800b240 <ucdr_serialize_uint8_t>
 800e990:	7961      	ldrb	r1, [r4, #5]
 800e992:	4606      	mov	r6, r0
 800e994:	4628      	mov	r0, r5
 800e996:	f7fc fc53 	bl	800b240 <ucdr_serialize_uint8_t>
 800e99a:	ea08 0807 	and.w	r8, r8, r7
 800e99e:	ea06 0608 	and.w	r6, r6, r8
 800e9a2:	4006      	ands	r6, r0
 800e9a4:	7a21      	ldrb	r1, [r4, #8]
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f7fc fc1c 	bl	800b1e4 <ucdr_serialize_bool>
 800e9ac:	7a23      	ldrb	r3, [r4, #8]
 800e9ae:	b2f7      	uxtb	r7, r6
 800e9b0:	4606      	mov	r6, r0
 800e9b2:	b96b      	cbnz	r3, 800e9d0 <uxr_serialize_INFO_Payload+0x64>
 800e9b4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f7fc fc13 	bl	800b1e4 <ucdr_serialize_bool>
 800e9be:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800e9c2:	4030      	ands	r0, r6
 800e9c4:	b2c6      	uxtb	r6, r0
 800e9c6:	b983      	cbnz	r3, 800e9ea <uxr_serialize_INFO_Payload+0x7e>
 800e9c8:	ea06 0007 	and.w	r0, r6, r7
 800e9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d0:	7b21      	ldrb	r1, [r4, #12]
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	f7fc fc34 	bl	800b240 <ucdr_serialize_uint8_t>
 800e9d8:	b188      	cbz	r0, 800e9fe <uxr_serialize_INFO_Payload+0x92>
 800e9da:	f104 010c 	add.w	r1, r4, #12
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f7ff faf2 	bl	800dfc8 <uxr_serialize_ObjectVariant.part.0>
 800e9e4:	4030      	ands	r0, r6
 800e9e6:	b2c6      	uxtb	r6, r0
 800e9e8:	e7e4      	b.n	800e9b4 <uxr_serialize_INFO_Payload+0x48>
 800e9ea:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800e9ee:	4628      	mov	r0, r5
 800e9f0:	f7ff fdb2 	bl	800e558 <uxr_serialize_ActivityInfoVariant>
 800e9f4:	4006      	ands	r6, r0
 800e9f6:	ea06 0007 	and.w	r0, r6, r7
 800e9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9fe:	4606      	mov	r6, r0
 800ea00:	e7d8      	b.n	800e9b4 <uxr_serialize_INFO_Payload+0x48>
 800ea02:	bf00      	nop

0800ea04 <uxr_serialize_READ_DATA_Payload>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	2202      	movs	r2, #2
 800ea08:	4605      	mov	r5, r0
 800ea0a:	460e      	mov	r6, r1
 800ea0c:	f002 f854 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800ea10:	2202      	movs	r2, #2
 800ea12:	18b1      	adds	r1, r6, r2
 800ea14:	4604      	mov	r4, r0
 800ea16:	4628      	mov	r0, r5
 800ea18:	f002 f84e 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800ea1c:	1d31      	adds	r1, r6, #4
 800ea1e:	4004      	ands	r4, r0
 800ea20:	4628      	mov	r0, r5
 800ea22:	f7ff fe5d 	bl	800e6e0 <uxr_serialize_ReadSpecification>
 800ea26:	b2e4      	uxtb	r4, r4
 800ea28:	4020      	ands	r0, r4
 800ea2a:	bd70      	pop	{r4, r5, r6, pc}

0800ea2c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	2202      	movs	r2, #2
 800ea30:	4605      	mov	r5, r0
 800ea32:	460e      	mov	r6, r1
 800ea34:	f002 f840 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800ea38:	2202      	movs	r2, #2
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	18b1      	adds	r1, r6, r2
 800ea3e:	4628      	mov	r0, r5
 800ea40:	f002 f83a 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800ea44:	4020      	ands	r0, r4
 800ea46:	b2c0      	uxtb	r0, r0
 800ea48:	bd70      	pop	{r4, r5, r6, pc}
 800ea4a:	bf00      	nop

0800ea4c <uxr_serialize_ACKNACK_Payload>:
 800ea4c:	b570      	push	{r4, r5, r6, lr}
 800ea4e:	460c      	mov	r4, r1
 800ea50:	460e      	mov	r6, r1
 800ea52:	f834 1b02 	ldrh.w	r1, [r4], #2
 800ea56:	4605      	mov	r5, r0
 800ea58:	f7fc fc1e 	bl	800b298 <ucdr_serialize_uint16_t>
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	4621      	mov	r1, r4
 800ea60:	4604      	mov	r4, r0
 800ea62:	4628      	mov	r0, r5
 800ea64:	f002 f828 	bl	8010ab8 <ucdr_serialize_array_uint8_t>
 800ea68:	7931      	ldrb	r1, [r6, #4]
 800ea6a:	4004      	ands	r4, r0
 800ea6c:	4628      	mov	r0, r5
 800ea6e:	f7fc fbe7 	bl	800b240 <ucdr_serialize_uint8_t>
 800ea72:	b2e4      	uxtb	r4, r4
 800ea74:	4020      	ands	r0, r4
 800ea76:	bd70      	pop	{r4, r5, r6, pc}

0800ea78 <uxr_deserialize_ACKNACK_Payload>:
 800ea78:	b570      	push	{r4, r5, r6, lr}
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	460e      	mov	r6, r1
 800ea7e:	f7fc fd0b 	bl	800b498 <ucdr_deserialize_uint16_t>
 800ea82:	2202      	movs	r2, #2
 800ea84:	18b1      	adds	r1, r6, r2
 800ea86:	4604      	mov	r4, r0
 800ea88:	4628      	mov	r0, r5
 800ea8a:	f002 f879 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800ea8e:	1d31      	adds	r1, r6, #4
 800ea90:	4004      	ands	r4, r0
 800ea92:	4628      	mov	r0, r5
 800ea94:	f7fc fbea 	bl	800b26c <ucdr_deserialize_uint8_t>
 800ea98:	b2e4      	uxtb	r4, r4
 800ea9a:	4020      	ands	r0, r4
 800ea9c:	bd70      	pop	{r4, r5, r6, pc}
 800ea9e:	bf00      	nop

0800eaa0 <uxr_serialize_HEARTBEAT_Payload>:
 800eaa0:	b570      	push	{r4, r5, r6, lr}
 800eaa2:	460d      	mov	r5, r1
 800eaa4:	8809      	ldrh	r1, [r1, #0]
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	f7fc fbf6 	bl	800b298 <ucdr_serialize_uint16_t>
 800eaac:	8869      	ldrh	r1, [r5, #2]
 800eaae:	4604      	mov	r4, r0
 800eab0:	4630      	mov	r0, r6
 800eab2:	f7fc fbf1 	bl	800b298 <ucdr_serialize_uint16_t>
 800eab6:	7929      	ldrb	r1, [r5, #4]
 800eab8:	4004      	ands	r4, r0
 800eaba:	4630      	mov	r0, r6
 800eabc:	f7fc fbc0 	bl	800b240 <ucdr_serialize_uint8_t>
 800eac0:	b2e4      	uxtb	r4, r4
 800eac2:	4020      	ands	r0, r4
 800eac4:	bd70      	pop	{r4, r5, r6, pc}
 800eac6:	bf00      	nop

0800eac8 <uxr_deserialize_HEARTBEAT_Payload>:
 800eac8:	b570      	push	{r4, r5, r6, lr}
 800eaca:	4605      	mov	r5, r0
 800eacc:	460e      	mov	r6, r1
 800eace:	f7fc fce3 	bl	800b498 <ucdr_deserialize_uint16_t>
 800ead2:	1cb1      	adds	r1, r6, #2
 800ead4:	4604      	mov	r4, r0
 800ead6:	4628      	mov	r0, r5
 800ead8:	f7fc fcde 	bl	800b498 <ucdr_deserialize_uint16_t>
 800eadc:	1d31      	adds	r1, r6, #4
 800eade:	4004      	ands	r4, r0
 800eae0:	4628      	mov	r0, r5
 800eae2:	f7fc fbc3 	bl	800b26c <ucdr_deserialize_uint8_t>
 800eae6:	b2e4      	uxtb	r4, r4
 800eae8:	4020      	ands	r0, r4
 800eaea:	bd70      	pop	{r4, r5, r6, pc}

0800eaec <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800eaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	460e      	mov	r6, r1
 800eaf4:	f7fd fa6c 	bl	800bfd0 <ucdr_deserialize_int32_t>
 800eaf8:	1d31      	adds	r1, r6, #4
 800eafa:	4607      	mov	r7, r0
 800eafc:	4628      	mov	r0, r5
 800eafe:	f7fc fee5 	bl	800b8cc <ucdr_deserialize_uint32_t>
 800eb02:	f106 0108 	add.w	r1, r6, #8
 800eb06:	4680      	mov	r8, r0
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7fd fa61 	bl	800bfd0 <ucdr_deserialize_int32_t>
 800eb0e:	f106 010c 	add.w	r1, r6, #12
 800eb12:	4604      	mov	r4, r0
 800eb14:	4628      	mov	r0, r5
 800eb16:	f7fc fed9 	bl	800b8cc <ucdr_deserialize_uint32_t>
 800eb1a:	ea07 0708 	and.w	r7, r7, r8
 800eb1e:	403c      	ands	r4, r7
 800eb20:	f106 0110 	add.w	r1, r6, #16
 800eb24:	4004      	ands	r4, r0
 800eb26:	4628      	mov	r0, r5
 800eb28:	f7fd fa52 	bl	800bfd0 <ucdr_deserialize_int32_t>
 800eb2c:	f106 0114 	add.w	r1, r6, #20
 800eb30:	4607      	mov	r7, r0
 800eb32:	4628      	mov	r0, r5
 800eb34:	f7fc feca 	bl	800b8cc <ucdr_deserialize_uint32_t>
 800eb38:	b2e4      	uxtb	r4, r4
 800eb3a:	403c      	ands	r4, r7
 800eb3c:	4020      	ands	r0, r4
 800eb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb42:	bf00      	nop

0800eb44 <uxr_deserialize_SampleIdentity>:
 800eb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb48:	220c      	movs	r2, #12
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	460d      	mov	r5, r1
 800eb4e:	f002 f817 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800eb52:	2203      	movs	r2, #3
 800eb54:	f105 010c 	add.w	r1, r5, #12
 800eb58:	4607      	mov	r7, r0
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f002 f810 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 800eb60:	f105 010f 	add.w	r1, r5, #15
 800eb64:	4680      	mov	r8, r0
 800eb66:	4620      	mov	r0, r4
 800eb68:	f7fc fb80 	bl	800b26c <ucdr_deserialize_uint8_t>
 800eb6c:	f105 0110 	add.w	r1, r5, #16
 800eb70:	4606      	mov	r6, r0
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7fd fa2c 	bl	800bfd0 <ucdr_deserialize_int32_t>
 800eb78:	f105 0114 	add.w	r1, r5, #20
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	4620      	mov	r0, r4
 800eb80:	ea07 0708 	and.w	r7, r7, r8
 800eb84:	461c      	mov	r4, r3
 800eb86:	f7fc fea1 	bl	800b8cc <ucdr_deserialize_uint32_t>
 800eb8a:	403e      	ands	r6, r7
 800eb8c:	4034      	ands	r4, r6
 800eb8e:	4020      	ands	r0, r4
 800eb90:	b2c0      	uxtb	r0, r0
 800eb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb96:	bf00      	nop

0800eb98 <rcl_convert_rmw_ret_to_rcl_ret>:
 800eb98:	280b      	cmp	r0, #11
 800eb9a:	dc0d      	bgt.n	800ebb8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	db09      	blt.n	800ebb4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800eba0:	280b      	cmp	r0, #11
 800eba2:	d807      	bhi.n	800ebb4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800eba4:	e8df f000 	tbb	[pc, r0]
 800eba8:	07060607 	.word	0x07060607
 800ebac:	06060606 	.word	0x06060606
 800ebb0:	07070606 	.word	0x07070606
 800ebb4:	2001      	movs	r0, #1
 800ebb6:	4770      	bx	lr
 800ebb8:	28cb      	cmp	r0, #203	@ 0xcb
 800ebba:	bf18      	it	ne
 800ebbc:	2001      	movne	r0, #1
 800ebbe:	4770      	bx	lr

0800ebc0 <rcl_get_zero_initialized_context>:
 800ebc0:	4a03      	ldr	r2, [pc, #12]	@ (800ebd0 <rcl_get_zero_initialized_context+0x10>)
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ebc8:	e883 0003 	stmia.w	r3, {r0, r1}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	4770      	bx	lr
 800ebd0:	0801529c 	.word	0x0801529c

0800ebd4 <rcl_context_is_valid>:
 800ebd4:	b118      	cbz	r0, 800ebde <rcl_context_is_valid+0xa>
 800ebd6:	6840      	ldr	r0, [r0, #4]
 800ebd8:	3800      	subs	r0, #0
 800ebda:	bf18      	it	ne
 800ebdc:	2001      	movne	r0, #1
 800ebde:	4770      	bx	lr

0800ebe0 <__cleanup_context>:
 800ebe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	6800      	ldr	r0, [r0, #0]
 800ebe8:	2300      	movs	r3, #0
 800ebea:	6073      	str	r3, [r6, #4]
 800ebec:	2800      	cmp	r0, #0
 800ebee:	d049      	beq.n	800ec84 <__cleanup_context+0xa4>
 800ebf0:	6947      	ldr	r7, [r0, #20]
 800ebf2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ebf6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ebfa:	b137      	cbz	r7, 800ec0a <__cleanup_context+0x2a>
 800ebfc:	3014      	adds	r0, #20
 800ebfe:	f000 f9a5 	bl	800ef4c <rcl_init_options_fini>
 800ec02:	4607      	mov	r7, r0
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d144      	bne.n	800ec92 <__cleanup_context+0xb2>
 800ec08:	6830      	ldr	r0, [r6, #0]
 800ec0a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ec0c:	b143      	cbz	r3, 800ec20 <__cleanup_context+0x40>
 800ec0e:	3028      	adds	r0, #40	@ 0x28
 800ec10:	f001 fc38 	bl	8010484 <rmw_context_fini>
 800ec14:	b118      	cbz	r0, 800ec1e <__cleanup_context+0x3e>
 800ec16:	2f00      	cmp	r7, #0
 800ec18:	d03e      	beq.n	800ec98 <__cleanup_context+0xb8>
 800ec1a:	f7fb fde5 	bl	800a7e8 <rcutils_reset_error>
 800ec1e:	6830      	ldr	r0, [r6, #0]
 800ec20:	6a03      	ldr	r3, [r0, #32]
 800ec22:	b1db      	cbz	r3, 800ec5c <__cleanup_context+0x7c>
 800ec24:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800ec28:	2a01      	cmp	r2, #1
 800ec2a:	f17c 0100 	sbcs.w	r1, ip, #0
 800ec2e:	db11      	blt.n	800ec54 <__cleanup_context+0x74>
 800ec30:	2400      	movs	r4, #0
 800ec32:	4625      	mov	r5, r4
 800ec34:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ec38:	4649      	mov	r1, r9
 800ec3a:	b1b8      	cbz	r0, 800ec6c <__cleanup_context+0x8c>
 800ec3c:	47c0      	blx	r8
 800ec3e:	6833      	ldr	r3, [r6, #0]
 800ec40:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800ec44:	3401      	adds	r4, #1
 800ec46:	f145 0500 	adc.w	r5, r5, #0
 800ec4a:	4294      	cmp	r4, r2
 800ec4c:	eb75 010c 	sbcs.w	r1, r5, ip
 800ec50:	6a1b      	ldr	r3, [r3, #32]
 800ec52:	dbef      	blt.n	800ec34 <__cleanup_context+0x54>
 800ec54:	4618      	mov	r0, r3
 800ec56:	4649      	mov	r1, r9
 800ec58:	47c0      	blx	r8
 800ec5a:	6830      	ldr	r0, [r6, #0]
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	47c0      	blx	r8
 800ec60:	2300      	movs	r3, #0
 800ec62:	e9c6 3300 	strd	r3, r3, [r6]
 800ec66:	4638      	mov	r0, r7
 800ec68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec6c:	3401      	adds	r4, #1
 800ec6e:	f145 0500 	adc.w	r5, r5, #0
 800ec72:	4294      	cmp	r4, r2
 800ec74:	eb75 010c 	sbcs.w	r1, r5, ip
 800ec78:	dbdc      	blt.n	800ec34 <__cleanup_context+0x54>
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	4649      	mov	r1, r9
 800ec7e:	47c0      	blx	r8
 800ec80:	6830      	ldr	r0, [r6, #0]
 800ec82:	e7eb      	b.n	800ec5c <__cleanup_context+0x7c>
 800ec84:	4607      	mov	r7, r0
 800ec86:	2300      	movs	r3, #0
 800ec88:	e9c6 3300 	strd	r3, r3, [r6]
 800ec8c:	4638      	mov	r0, r7
 800ec8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec92:	f7fb fda9 	bl	800a7e8 <rcutils_reset_error>
 800ec96:	e7b7      	b.n	800ec08 <__cleanup_context+0x28>
 800ec98:	f7ff ff7e 	bl	800eb98 <rcl_convert_rmw_ret_to_rcl_ret>
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	e7bc      	b.n	800ec1a <__cleanup_context+0x3a>

0800eca0 <rcl_init>:
 800eca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eca4:	1e05      	subs	r5, r0, #0
 800eca6:	b09c      	sub	sp, #112	@ 0x70
 800eca8:	460e      	mov	r6, r1
 800ecaa:	4690      	mov	r8, r2
 800ecac:	461f      	mov	r7, r3
 800ecae:	f340 8099 	ble.w	800ede4 <rcl_init+0x144>
 800ecb2:	2900      	cmp	r1, #0
 800ecb4:	f000 8099 	beq.w	800edea <rcl_init+0x14a>
 800ecb8:	f1a1 0e04 	sub.w	lr, r1, #4
 800ecbc:	f04f 0c00 	mov.w	ip, #0
 800ecc0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800ecc4:	f10c 0c01 	add.w	ip, ip, #1
 800ecc8:	2c00      	cmp	r4, #0
 800ecca:	f000 808e 	beq.w	800edea <rcl_init+0x14a>
 800ecce:	4565      	cmp	r5, ip
 800ecd0:	d1f6      	bne.n	800ecc0 <rcl_init+0x20>
 800ecd2:	f1b8 0f00 	cmp.w	r8, #0
 800ecd6:	f000 8088 	beq.w	800edea <rcl_init+0x14a>
 800ecda:	f8d8 4000 	ldr.w	r4, [r8]
 800ecde:	2c00      	cmp	r4, #0
 800ece0:	f000 8083 	beq.w	800edea <rcl_init+0x14a>
 800ece4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ece6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800ecea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecee:	6823      	ldr	r3, [r4, #0]
 800ecf0:	f8cc 3000 	str.w	r3, [ip]
 800ecf4:	a817      	add	r0, sp, #92	@ 0x5c
 800ecf6:	f7fb fd51 	bl	800a79c <rcutils_allocator_is_valid>
 800ecfa:	2800      	cmp	r0, #0
 800ecfc:	d075      	beq.n	800edea <rcl_init+0x14a>
 800ecfe:	2f00      	cmp	r7, #0
 800ed00:	d073      	beq.n	800edea <rcl_init+0x14a>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d175      	bne.n	800edf4 <rcl_init+0x154>
 800ed08:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800ed0c:	2178      	movs	r1, #120	@ 0x78
 800ed0e:	2001      	movs	r0, #1
 800ed10:	4798      	blx	r3
 800ed12:	4604      	mov	r4, r0
 800ed14:	6038      	str	r0, [r7, #0]
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f000 80a0 	beq.w	800ee5c <rcl_init+0x1bc>
 800ed1c:	a802      	add	r0, sp, #8
 800ed1e:	f000 ffcb 	bl	800fcb8 <rmw_get_zero_initialized_context>
 800ed22:	a902      	add	r1, sp, #8
 800ed24:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ed28:	2250      	movs	r2, #80	@ 0x50
 800ed2a:	ac17      	add	r4, sp, #92	@ 0x5c
 800ed2c:	f005 fa1f 	bl	801416e <memcpy>
 800ed30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed32:	f8d7 e000 	ldr.w	lr, [r7]
 800ed36:	46f4      	mov	ip, lr
 800ed38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	f8cc 3000 	str.w	r3, [ip]
 800ed42:	f10e 0114 	add.w	r1, lr, #20
 800ed46:	4640      	mov	r0, r8
 800ed48:	f000 f92a 	bl	800efa0 <rcl_init_options_copy>
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	2800      	cmp	r0, #0
 800ed50:	d144      	bne.n	800eddc <rcl_init+0x13c>
 800ed52:	f8d7 9000 	ldr.w	r9, [r7]
 800ed56:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800ed5a:	f8c9 0020 	str.w	r0, [r9, #32]
 800ed5e:	f8c9 5018 	str.w	r5, [r9, #24]
 800ed62:	f8c9 801c 	str.w	r8, [r9, #28]
 800ed66:	2d00      	cmp	r5, #0
 800ed68:	d04b      	beq.n	800ee02 <rcl_init+0x162>
 800ed6a:	2e00      	cmp	r6, #0
 800ed6c:	d049      	beq.n	800ee02 <rcl_init+0x162>
 800ed6e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800ed72:	2104      	movs	r1, #4
 800ed74:	4628      	mov	r0, r5
 800ed76:	4798      	blx	r3
 800ed78:	f8c9 0020 	str.w	r0, [r9, #32]
 800ed7c:	f8d7 9000 	ldr.w	r9, [r7]
 800ed80:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800ed84:	46ca      	mov	sl, r9
 800ed86:	b343      	cbz	r3, 800edda <rcl_init+0x13a>
 800ed88:	2d01      	cmp	r5, #1
 800ed8a:	f178 0300 	sbcs.w	r3, r8, #0
 800ed8e:	db38      	blt.n	800ee02 <rcl_init+0x162>
 800ed90:	2400      	movs	r4, #0
 800ed92:	3e04      	subs	r6, #4
 800ed94:	46a1      	mov	r9, r4
 800ed96:	e00b      	b.n	800edb0 <rcl_init+0x110>
 800ed98:	6831      	ldr	r1, [r6, #0]
 800ed9a:	f005 f9e8 	bl	801416e <memcpy>
 800ed9e:	3401      	adds	r4, #1
 800eda0:	f149 0900 	adc.w	r9, r9, #0
 800eda4:	45c8      	cmp	r8, r9
 800eda6:	bf08      	it	eq
 800eda8:	42a5      	cmpeq	r5, r4
 800edaa:	d028      	beq.n	800edfe <rcl_init+0x15e>
 800edac:	f8d7 a000 	ldr.w	sl, [r7]
 800edb0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800edb4:	f7f1 fa36 	bl	8000224 <strlen>
 800edb8:	1c42      	adds	r2, r0, #1
 800edba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800edbc:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800edbe:	f8da a020 	ldr.w	sl, [sl, #32]
 800edc2:	9201      	str	r2, [sp, #4]
 800edc4:	4610      	mov	r0, r2
 800edc6:	4798      	blx	r3
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	9a01      	ldr	r2, [sp, #4]
 800edd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d1de      	bne.n	800ed98 <rcl_init+0xf8>
 800edda:	240a      	movs	r4, #10
 800eddc:	4638      	mov	r0, r7
 800edde:	f7ff feff 	bl	800ebe0 <__cleanup_context>
 800ede2:	e003      	b.n	800edec <rcl_init+0x14c>
 800ede4:	2900      	cmp	r1, #0
 800ede6:	f43f af74 	beq.w	800ecd2 <rcl_init+0x32>
 800edea:	240b      	movs	r4, #11
 800edec:	4620      	mov	r0, r4
 800edee:	b01c      	add	sp, #112	@ 0x70
 800edf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf4:	2464      	movs	r4, #100	@ 0x64
 800edf6:	4620      	mov	r0, r4
 800edf8:	b01c      	add	sp, #112	@ 0x70
 800edfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edfe:	f8d7 9000 	ldr.w	r9, [r7]
 800ee02:	491d      	ldr	r1, [pc, #116]	@ (800ee78 <rcl_init+0x1d8>)
 800ee04:	680b      	ldr	r3, [r1, #0]
 800ee06:	3301      	adds	r3, #1
 800ee08:	d023      	beq.n	800ee52 <rcl_init+0x1b2>
 800ee0a:	600b      	str	r3, [r1, #0]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	2400      	movs	r4, #0
 800ee10:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ee14:	607b      	str	r3, [r7, #4]
 800ee16:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ee18:	6182      	str	r2, [r0, #24]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	61c4      	str	r4, [r0, #28]
 800ee1e:	d01f      	beq.n	800ee60 <rcl_init+0x1c0>
 800ee20:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800ee24:	b94b      	cbnz	r3, 800ee3a <rcl_init+0x19a>
 800ee26:	3030      	adds	r0, #48	@ 0x30
 800ee28:	f000 f926 	bl	800f078 <rcl_get_localhost_only>
 800ee2c:	4604      	mov	r4, r0
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d1d4      	bne.n	800eddc <rcl_init+0x13c>
 800ee32:	f8d7 9000 	ldr.w	r9, [r7]
 800ee36:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ee3a:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800ee3e:	3018      	adds	r0, #24
 800ee40:	f001 f9ea 	bl	8010218 <rmw_init>
 800ee44:	4604      	mov	r4, r0
 800ee46:	2800      	cmp	r0, #0
 800ee48:	d0d0      	beq.n	800edec <rcl_init+0x14c>
 800ee4a:	f7ff fea5 	bl	800eb98 <rcl_convert_rmw_ret_to_rcl_ret>
 800ee4e:	4604      	mov	r4, r0
 800ee50:	e7c4      	b.n	800eddc <rcl_init+0x13c>
 800ee52:	2201      	movs	r2, #1
 800ee54:	461c      	mov	r4, r3
 800ee56:	600a      	str	r2, [r1, #0]
 800ee58:	4613      	mov	r3, r2
 800ee5a:	e7d9      	b.n	800ee10 <rcl_init+0x170>
 800ee5c:	240a      	movs	r4, #10
 800ee5e:	e7c5      	b.n	800edec <rcl_init+0x14c>
 800ee60:	3024      	adds	r0, #36	@ 0x24
 800ee62:	f003 fb13 	bl	801248c <rcl_get_default_domain_id>
 800ee66:	4604      	mov	r4, r0
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d1b7      	bne.n	800eddc <rcl_init+0x13c>
 800ee6c:	f8d7 9000 	ldr.w	r9, [r7]
 800ee70:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800ee74:	e7d4      	b.n	800ee20 <rcl_init+0x180>
 800ee76:	bf00      	nop
 800ee78:	20010d1c 	.word	0x20010d1c

0800ee7c <rcl_get_zero_initialized_init_options>:
 800ee7c:	2000      	movs	r0, #0
 800ee7e:	4770      	bx	lr

0800ee80 <rcl_init_options_init>:
 800ee80:	b084      	sub	sp, #16
 800ee82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee84:	b097      	sub	sp, #92	@ 0x5c
 800ee86:	ae1d      	add	r6, sp, #116	@ 0x74
 800ee88:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	d058      	beq.n	800ef42 <rcl_init_options_init+0xc2>
 800ee90:	6803      	ldr	r3, [r0, #0]
 800ee92:	4605      	mov	r5, r0
 800ee94:	b133      	cbz	r3, 800eea4 <rcl_init_options_init+0x24>
 800ee96:	2464      	movs	r4, #100	@ 0x64
 800ee98:	4620      	mov	r0, r4
 800ee9a:	b017      	add	sp, #92	@ 0x5c
 800ee9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eea0:	b004      	add	sp, #16
 800eea2:	4770      	bx	lr
 800eea4:	4630      	mov	r0, r6
 800eea6:	f7fb fc79 	bl	800a79c <rcutils_allocator_is_valid>
 800eeaa:	2800      	cmp	r0, #0
 800eeac:	d049      	beq.n	800ef42 <rcl_init_options_init+0xc2>
 800eeae:	46b4      	mov	ip, r6
 800eeb0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eeb4:	ac11      	add	r4, sp, #68	@ 0x44
 800eeb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eeb8:	f8dc 3000 	ldr.w	r3, [ip]
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800eec0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eec2:	2050      	movs	r0, #80	@ 0x50
 800eec4:	4798      	blx	r3
 800eec6:	4604      	mov	r4, r0
 800eec8:	6028      	str	r0, [r5, #0]
 800eeca:	2800      	cmp	r0, #0
 800eecc:	d03b      	beq.n	800ef46 <rcl_init_options_init+0xc6>
 800eece:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800eed2:	4686      	mov	lr, r0
 800eed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eed8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eedc:	f8dc 3000 	ldr.w	r3, [ip]
 800eee0:	f8ce 3000 	str.w	r3, [lr]
 800eee4:	a802      	add	r0, sp, #8
 800eee6:	f000 fef7 	bl	800fcd8 <rmw_get_zero_initialized_init_options>
 800eeea:	f10d 0e08 	add.w	lr, sp, #8
 800eeee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eef2:	f104 0c18 	add.w	ip, r4, #24
 800eef6:	682f      	ldr	r7, [r5, #0]
 800eef8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eefc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ef08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ef0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ef10:	ac20      	add	r4, sp, #128	@ 0x80
 800ef12:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ef16:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ef1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ef1e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ef22:	f107 0018 	add.w	r0, r7, #24
 800ef26:	f001 f855 	bl	800ffd4 <rmw_init_options_init>
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d0b3      	beq.n	800ee98 <rcl_init_options_init+0x18>
 800ef30:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ef32:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ef34:	6828      	ldr	r0, [r5, #0]
 800ef36:	4798      	blx	r3
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7ff fe2d 	bl	800eb98 <rcl_convert_rmw_ret_to_rcl_ret>
 800ef3e:	4604      	mov	r4, r0
 800ef40:	e7aa      	b.n	800ee98 <rcl_init_options_init+0x18>
 800ef42:	240b      	movs	r4, #11
 800ef44:	e7a8      	b.n	800ee98 <rcl_init_options_init+0x18>
 800ef46:	240a      	movs	r4, #10
 800ef48:	e7a6      	b.n	800ee98 <rcl_init_options_init+0x18>
 800ef4a:	bf00      	nop

0800ef4c <rcl_init_options_fini>:
 800ef4c:	b530      	push	{r4, r5, lr}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	b1f0      	cbz	r0, 800ef90 <rcl_init_options_fini+0x44>
 800ef52:	6803      	ldr	r3, [r0, #0]
 800ef54:	4604      	mov	r4, r0
 800ef56:	b1db      	cbz	r3, 800ef90 <rcl_init_options_fini+0x44>
 800ef58:	469c      	mov	ip, r3
 800ef5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef5e:	f10d 0e04 	add.w	lr, sp, #4
 800ef62:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ef66:	f8dc 3000 	ldr.w	r3, [ip]
 800ef6a:	f8ce 3000 	str.w	r3, [lr]
 800ef6e:	a801      	add	r0, sp, #4
 800ef70:	f7fb fc14 	bl	800a79c <rcutils_allocator_is_valid>
 800ef74:	b160      	cbz	r0, 800ef90 <rcl_init_options_fini+0x44>
 800ef76:	6820      	ldr	r0, [r4, #0]
 800ef78:	3018      	adds	r0, #24
 800ef7a:	f001 f901 	bl	8010180 <rmw_init_options_fini>
 800ef7e:	4605      	mov	r5, r0
 800ef80:	b950      	cbnz	r0, 800ef98 <rcl_init_options_fini+0x4c>
 800ef82:	6820      	ldr	r0, [r4, #0]
 800ef84:	9b02      	ldr	r3, [sp, #8]
 800ef86:	9905      	ldr	r1, [sp, #20]
 800ef88:	4798      	blx	r3
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	b007      	add	sp, #28
 800ef8e:	bd30      	pop	{r4, r5, pc}
 800ef90:	250b      	movs	r5, #11
 800ef92:	4628      	mov	r0, r5
 800ef94:	b007      	add	sp, #28
 800ef96:	bd30      	pop	{r4, r5, pc}
 800ef98:	f7ff fdfe 	bl	800eb98 <rcl_convert_rmw_ret_to_rcl_ret>
 800ef9c:	4605      	mov	r5, r0
 800ef9e:	e7f8      	b.n	800ef92 <rcl_init_options_fini+0x46>

0800efa0 <rcl_init_options_copy>:
 800efa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa4:	b094      	sub	sp, #80	@ 0x50
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d058      	beq.n	800f05c <rcl_init_options_copy+0xbc>
 800efaa:	4604      	mov	r4, r0
 800efac:	6800      	ldr	r0, [r0, #0]
 800efae:	2800      	cmp	r0, #0
 800efb0:	d054      	beq.n	800f05c <rcl_init_options_copy+0xbc>
 800efb2:	460e      	mov	r6, r1
 800efb4:	f7fb fbf2 	bl	800a79c <rcutils_allocator_is_valid>
 800efb8:	2800      	cmp	r0, #0
 800efba:	d04f      	beq.n	800f05c <rcl_init_options_copy+0xbc>
 800efbc:	2e00      	cmp	r6, #0
 800efbe:	d04d      	beq.n	800f05c <rcl_init_options_copy+0xbc>
 800efc0:	6833      	ldr	r3, [r6, #0]
 800efc2:	b123      	cbz	r3, 800efce <rcl_init_options_copy+0x2e>
 800efc4:	2464      	movs	r4, #100	@ 0x64
 800efc6:	4620      	mov	r0, r4
 800efc8:	b014      	add	sp, #80	@ 0x50
 800efca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efce:	6827      	ldr	r7, [r4, #0]
 800efd0:	46bc      	mov	ip, r7
 800efd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800efd6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800efd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efda:	f8dc 3000 	ldr.w	r3, [ip]
 800efde:	f8d7 8000 	ldr.w	r8, [r7]
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	4619      	mov	r1, r3
 800efe6:	2050      	movs	r0, #80	@ 0x50
 800efe8:	47c0      	blx	r8
 800efea:	4605      	mov	r5, r0
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	b3d0      	cbz	r0, 800f066 <rcl_init_options_copy+0xc6>
 800eff0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800eff4:	4686      	mov	lr, r0
 800eff6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800effa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800effe:	f8dc 3000 	ldr.w	r3, [ip]
 800f002:	f8ce 3000 	str.w	r3, [lr]
 800f006:	4668      	mov	r0, sp
 800f008:	f000 fe66 	bl	800fcd8 <rmw_get_zero_initialized_init_options>
 800f00c:	46ee      	mov	lr, sp
 800f00e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f012:	f105 0c18 	add.w	ip, r5, #24
 800f016:	6824      	ldr	r4, [r4, #0]
 800f018:	6835      	ldr	r5, [r6, #0]
 800f01a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f01e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f022:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f026:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f02a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f02e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f032:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f036:	f104 0018 	add.w	r0, r4, #24
 800f03a:	f105 0118 	add.w	r1, r5, #24
 800f03e:	f001 f82b 	bl	8010098 <rmw_init_options_copy>
 800f042:	4604      	mov	r4, r0
 800f044:	2800      	cmp	r0, #0
 800f046:	d0be      	beq.n	800efc6 <rcl_init_options_copy+0x26>
 800f048:	f7fb fbb6 	bl	800a7b8 <rcutils_get_error_string>
 800f04c:	f7fb fbcc 	bl	800a7e8 <rcutils_reset_error>
 800f050:	4630      	mov	r0, r6
 800f052:	f7ff ff7b 	bl	800ef4c <rcl_init_options_fini>
 800f056:	b140      	cbz	r0, 800f06a <rcl_init_options_copy+0xca>
 800f058:	4604      	mov	r4, r0
 800f05a:	e7b4      	b.n	800efc6 <rcl_init_options_copy+0x26>
 800f05c:	240b      	movs	r4, #11
 800f05e:	4620      	mov	r0, r4
 800f060:	b014      	add	sp, #80	@ 0x50
 800f062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f066:	240a      	movs	r4, #10
 800f068:	e7ad      	b.n	800efc6 <rcl_init_options_copy+0x26>
 800f06a:	4620      	mov	r0, r4
 800f06c:	b014      	add	sp, #80	@ 0x50
 800f06e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f072:	f7ff bd91 	b.w	800eb98 <rcl_convert_rmw_ret_to_rcl_ret>
 800f076:	bf00      	nop

0800f078 <rcl_get_localhost_only>:
 800f078:	b510      	push	{r4, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	2300      	movs	r3, #0
 800f07e:	9301      	str	r3, [sp, #4]
 800f080:	b1b8      	cbz	r0, 800f0b2 <rcl_get_localhost_only+0x3a>
 800f082:	4604      	mov	r4, r0
 800f084:	a901      	add	r1, sp, #4
 800f086:	480c      	ldr	r0, [pc, #48]	@ (800f0b8 <rcl_get_localhost_only+0x40>)
 800f088:	f000 fb2a 	bl	800f6e0 <rcutils_get_env>
 800f08c:	b110      	cbz	r0, 800f094 <rcl_get_localhost_only+0x1c>
 800f08e:	2001      	movs	r0, #1
 800f090:	b002      	add	sp, #8
 800f092:	bd10      	pop	{r4, pc}
 800f094:	9b01      	ldr	r3, [sp, #4]
 800f096:	b113      	cbz	r3, 800f09e <rcl_get_localhost_only+0x26>
 800f098:	781a      	ldrb	r2, [r3, #0]
 800f09a:	2a31      	cmp	r2, #49	@ 0x31
 800f09c:	d004      	beq.n	800f0a8 <rcl_get_localhost_only+0x30>
 800f09e:	2302      	movs	r3, #2
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	7023      	strb	r3, [r4, #0]
 800f0a4:	b002      	add	sp, #8
 800f0a6:	bd10      	pop	{r4, pc}
 800f0a8:	785b      	ldrb	r3, [r3, #1]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1f7      	bne.n	800f09e <rcl_get_localhost_only+0x26>
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e7f6      	b.n	800f0a0 <rcl_get_localhost_only+0x28>
 800f0b2:	200b      	movs	r0, #11
 800f0b4:	b002      	add	sp, #8
 800f0b6:	bd10      	pop	{r4, pc}
 800f0b8:	080152a4 	.word	0x080152a4

0800f0bc <rcl_get_zero_initialized_node>:
 800f0bc:	4a03      	ldr	r2, [pc, #12]	@ (800f0cc <rcl_get_zero_initialized_node+0x10>)
 800f0be:	4603      	mov	r3, r0
 800f0c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	4770      	bx	lr
 800f0cc:	080152cc 	.word	0x080152cc

0800f0d0 <rcl_node_init>:
 800f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	b0a9      	sub	sp, #164	@ 0xa4
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800f0dc:	a823      	add	r0, sp, #140	@ 0x8c
 800f0de:	460e      	mov	r6, r1
 800f0e0:	4615      	mov	r5, r2
 800f0e2:	461f      	mov	r7, r3
 800f0e4:	f003 fbfa 	bl	80128dc <rcl_guard_condition_get_default_options>
 800f0e8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ec:	f000 80e6 	beq.w	800f2bc <rcl_node_init+0x1ec>
 800f0f0:	4640      	mov	r0, r8
 800f0f2:	f7fb fb53 	bl	800a79c <rcutils_allocator_is_valid>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	f000 80e0 	beq.w	800f2bc <rcl_node_init+0x1ec>
 800f0fc:	2e00      	cmp	r6, #0
 800f0fe:	f000 80dd 	beq.w	800f2bc <rcl_node_init+0x1ec>
 800f102:	2d00      	cmp	r5, #0
 800f104:	f000 80da 	beq.w	800f2bc <rcl_node_init+0x1ec>
 800f108:	2c00      	cmp	r4, #0
 800f10a:	f000 80d7 	beq.w	800f2bc <rcl_node_init+0x1ec>
 800f10e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f112:	f1b9 0f00 	cmp.w	r9, #0
 800f116:	f040 80fd 	bne.w	800f314 <rcl_node_init+0x244>
 800f11a:	2f00      	cmp	r7, #0
 800f11c:	f000 80ce 	beq.w	800f2bc <rcl_node_init+0x1ec>
 800f120:	4638      	mov	r0, r7
 800f122:	f7ff fd57 	bl	800ebd4 <rcl_context_is_valid>
 800f126:	4682      	mov	sl, r0
 800f128:	2800      	cmp	r0, #0
 800f12a:	f000 80cd 	beq.w	800f2c8 <rcl_node_init+0x1f8>
 800f12e:	464a      	mov	r2, r9
 800f130:	a922      	add	r1, sp, #136	@ 0x88
 800f132:	4630      	mov	r0, r6
 800f134:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800f138:	f000 fec4 	bl	800fec4 <rmw_validate_node_name>
 800f13c:	4681      	mov	r9, r0
 800f13e:	2800      	cmp	r0, #0
 800f140:	f040 80be 	bne.w	800f2c0 <rcl_node_init+0x1f0>
 800f144:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f146:	2800      	cmp	r0, #0
 800f148:	f040 80f0 	bne.w	800f32c <rcl_node_init+0x25c>
 800f14c:	4628      	mov	r0, r5
 800f14e:	f7f1 f869 	bl	8000224 <strlen>
 800f152:	2800      	cmp	r0, #0
 800f154:	f040 80bb 	bne.w	800f2ce <rcl_node_init+0x1fe>
 800f158:	4d7c      	ldr	r5, [pc, #496]	@ (800f34c <rcl_node_init+0x27c>)
 800f15a:	a922      	add	r1, sp, #136	@ 0x88
 800f15c:	2200      	movs	r2, #0
 800f15e:	4628      	mov	r0, r5
 800f160:	f000 fe92 	bl	800fe88 <rmw_validate_namespace>
 800f164:	4681      	mov	r9, r0
 800f166:	2800      	cmp	r0, #0
 800f168:	f040 80aa 	bne.w	800f2c0 <rcl_node_init+0x1f0>
 800f16c:	4682      	mov	sl, r0
 800f16e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f170:	2800      	cmp	r0, #0
 800f172:	f040 80e0 	bne.w	800f336 <rcl_node_init+0x266>
 800f176:	f8d8 3000 	ldr.w	r3, [r8]
 800f17a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f17e:	2078      	movs	r0, #120	@ 0x78
 800f180:	4798      	blx	r3
 800f182:	4681      	mov	r9, r0
 800f184:	6060      	str	r0, [r4, #4]
 800f186:	2800      	cmp	r0, #0
 800f188:	f000 80ca 	beq.w	800f320 <rcl_node_init+0x250>
 800f18c:	2200      	movs	r2, #0
 800f18e:	2300      	movs	r3, #0
 800f190:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800f194:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800f198:	a808      	add	r0, sp, #32
 800f19a:	f000 f907 	bl	800f3ac <rcl_node_get_default_options>
 800f19e:	a908      	add	r1, sp, #32
 800f1a0:	4648      	mov	r0, r9
 800f1a2:	2268      	movs	r2, #104	@ 0x68
 800f1a4:	f004 ffe3 	bl	801416e <memcpy>
 800f1a8:	6861      	ldr	r1, [r4, #4]
 800f1aa:	6027      	str	r7, [r4, #0]
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	f000 f90b 	bl	800f3c8 <rcl_node_options_copy>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d158      	bne.n	800f268 <rcl_node_init+0x198>
 800f1b6:	4628      	mov	r0, r5
 800f1b8:	f7f1 f834 	bl	8000224 <strlen>
 800f1bc:	4428      	add	r0, r5
 800f1be:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800f1c2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800f1c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800f1c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f1cc:	9300      	str	r3, [sp, #0]
 800f1ce:	bf0c      	ite	eq
 800f1d0:	4b5f      	ldreq	r3, [pc, #380]	@ (800f350 <rcl_node_init+0x280>)
 800f1d2:	4b60      	ldrne	r3, [pc, #384]	@ (800f354 <rcl_node_init+0x284>)
 800f1d4:	9302      	str	r3, [sp, #8]
 800f1d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f1da:	9301      	str	r3, [sp, #4]
 800f1dc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f1e0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f1e4:	f000 fa94 	bl	800f710 <rcutils_format_string_limit>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800f1ee:	6818      	ldr	r0, [r3, #0]
 800f1f0:	4631      	mov	r1, r6
 800f1f2:	3028      	adds	r0, #40	@ 0x28
 800f1f4:	462a      	mov	r2, r5
 800f1f6:	6866      	ldr	r6, [r4, #4]
 800f1f8:	f001 fa62 	bl	80106c0 <rmw_create_node>
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	66b0      	str	r0, [r6, #104]	@ 0x68
 800f200:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f202:	2800      	cmp	r0, #0
 800f204:	d032      	beq.n	800f26c <rcl_node_init+0x19c>
 800f206:	f001 faef 	bl	80107e8 <rmw_node_get_graph_guard_condition>
 800f20a:	4681      	mov	r9, r0
 800f20c:	b360      	cbz	r0, 800f268 <rcl_node_init+0x198>
 800f20e:	f8d8 3000 	ldr.w	r3, [r8]
 800f212:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f216:	6866      	ldr	r6, [r4, #4]
 800f218:	2008      	movs	r0, #8
 800f21a:	4798      	blx	r3
 800f21c:	6863      	ldr	r3, [r4, #4]
 800f21e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800f220:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800f224:	f1bb 0f00 	cmp.w	fp, #0
 800f228:	d020      	beq.n	800f26c <rcl_node_init+0x19c>
 800f22a:	a806      	add	r0, sp, #24
 800f22c:	f003 fac6 	bl	80127bc <rcl_get_zero_initialized_guard_condition>
 800f230:	a806      	add	r0, sp, #24
 800f232:	c803      	ldmia	r0, {r0, r1}
 800f234:	6863      	ldr	r3, [r4, #4]
 800f236:	46c4      	mov	ip, r8
 800f238:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800f23c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f240:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f244:	ae23      	add	r6, sp, #140	@ 0x8c
 800f246:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f248:	f8dc 3000 	ldr.w	r3, [ip]
 800f24c:	6033      	str	r3, [r6, #0]
 800f24e:	ab28      	add	r3, sp, #160	@ 0xa0
 800f250:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f254:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f258:	4649      	mov	r1, r9
 800f25a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f25c:	463a      	mov	r2, r7
 800f25e:	4670      	mov	r0, lr
 800f260:	f003 fab6 	bl	80127d0 <rcl_guard_condition_init_from_rmw>
 800f264:	4681      	mov	r9, r0
 800f266:	b328      	cbz	r0, 800f2b4 <rcl_node_init+0x1e4>
 800f268:	6863      	ldr	r3, [r4, #4]
 800f26a:	b1f3      	cbz	r3, 800f2aa <rcl_node_init+0x1da>
 800f26c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f26e:	b128      	cbz	r0, 800f27c <rcl_node_init+0x1ac>
 800f270:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f274:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f278:	4798      	blx	r3
 800f27a:	6863      	ldr	r3, [r4, #4]
 800f27c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800f27e:	b110      	cbz	r0, 800f286 <rcl_node_init+0x1b6>
 800f280:	f001 fa36 	bl	80106f0 <rmw_destroy_node>
 800f284:	6863      	ldr	r3, [r4, #4]
 800f286:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f288:	b148      	cbz	r0, 800f29e <rcl_node_init+0x1ce>
 800f28a:	f003 fb01 	bl	8012890 <rcl_guard_condition_fini>
 800f28e:	6863      	ldr	r3, [r4, #4]
 800f290:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f294:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800f296:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f29a:	4798      	blx	r3
 800f29c:	6863      	ldr	r3, [r4, #4]
 800f29e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f2a8:	4798      	blx	r3
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e9c4 3300 	strd	r3, r3, [r4]
 800f2b0:	f04f 0901 	mov.w	r9, #1
 800f2b4:	f1ba 0f00 	cmp.w	sl, #0
 800f2b8:	d125      	bne.n	800f306 <rcl_node_init+0x236>
 800f2ba:	e001      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f2bc:	f04f 090b 	mov.w	r9, #11
 800f2c0:	4648      	mov	r0, r9
 800f2c2:	b029      	add	sp, #164	@ 0xa4
 800f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800f2cc:	e7f8      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f2ce:	782b      	ldrb	r3, [r5, #0]
 800f2d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f2d2:	f43f af42 	beq.w	800f15a <rcl_node_init+0x8a>
 800f2d6:	9503      	str	r5, [sp, #12]
 800f2d8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	4b1e      	ldr	r3, [pc, #120]	@ (800f358 <rcl_node_init+0x288>)
 800f2e0:	9302      	str	r3, [sp, #8]
 800f2e2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f2e6:	9301      	str	r3, [sp, #4]
 800f2e8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f2ec:	f000 fa10 	bl	800f710 <rcutils_format_string_limit>
 800f2f0:	4605      	mov	r5, r0
 800f2f2:	b340      	cbz	r0, 800f346 <rcl_node_init+0x276>
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	a922      	add	r1, sp, #136	@ 0x88
 800f2f8:	9222      	str	r2, [sp, #136]	@ 0x88
 800f2fa:	f000 fdc5 	bl	800fe88 <rmw_validate_namespace>
 800f2fe:	4681      	mov	r9, r0
 800f300:	2800      	cmp	r0, #0
 800f302:	f43f af34 	beq.w	800f16e <rcl_node_init+0x9e>
 800f306:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f30a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f30e:	4628      	mov	r0, r5
 800f310:	4798      	blx	r3
 800f312:	e7d5      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f314:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800f318:	4648      	mov	r0, r9
 800f31a:	b029      	add	sp, #164	@ 0xa4
 800f31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f320:	f04f 090a 	mov.w	r9, #10
 800f324:	f1ba 0f00 	cmp.w	sl, #0
 800f328:	d1ed      	bne.n	800f306 <rcl_node_init+0x236>
 800f32a:	e7c9      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f32c:	f000 fe1c 	bl	800ff68 <rmw_node_name_validation_result_string>
 800f330:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800f334:	e7c4      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f336:	f000 fdb9 	bl	800feac <rmw_namespace_validation_result_string>
 800f33a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800f33e:	f1ba 0f00 	cmp.w	sl, #0
 800f342:	d1e0      	bne.n	800f306 <rcl_node_init+0x236>
 800f344:	e7bc      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f346:	f04f 090a 	mov.w	r9, #10
 800f34a:	e7b9      	b.n	800f2c0 <rcl_node_init+0x1f0>
 800f34c:	080152bc 	.word	0x080152bc
 800f350:	08015140 	.word	0x08015140
 800f354:	080152c4 	.word	0x080152c4
 800f358:	080152c0 	.word	0x080152c0

0800f35c <rcl_node_is_valid>:
 800f35c:	b130      	cbz	r0, 800f36c <rcl_node_is_valid+0x10>
 800f35e:	6843      	ldr	r3, [r0, #4]
 800f360:	b123      	cbz	r3, 800f36c <rcl_node_is_valid+0x10>
 800f362:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f364:	b113      	cbz	r3, 800f36c <rcl_node_is_valid+0x10>
 800f366:	6800      	ldr	r0, [r0, #0]
 800f368:	f7ff bc34 	b.w	800ebd4 <rcl_context_is_valid>
 800f36c:	2000      	movs	r0, #0
 800f36e:	4770      	bx	lr

0800f370 <rcl_node_get_name>:
 800f370:	b120      	cbz	r0, 800f37c <rcl_node_get_name+0xc>
 800f372:	6840      	ldr	r0, [r0, #4]
 800f374:	b110      	cbz	r0, 800f37c <rcl_node_get_name+0xc>
 800f376:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f378:	b100      	cbz	r0, 800f37c <rcl_node_get_name+0xc>
 800f37a:	6880      	ldr	r0, [r0, #8]
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop

0800f380 <rcl_node_get_namespace>:
 800f380:	b120      	cbz	r0, 800f38c <rcl_node_get_namespace+0xc>
 800f382:	6840      	ldr	r0, [r0, #4]
 800f384:	b110      	cbz	r0, 800f38c <rcl_node_get_namespace+0xc>
 800f386:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f388:	b100      	cbz	r0, 800f38c <rcl_node_get_namespace+0xc>
 800f38a:	68c0      	ldr	r0, [r0, #12]
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop

0800f390 <rcl_node_get_options>:
 800f390:	b128      	cbz	r0, 800f39e <rcl_node_get_options+0xe>
 800f392:	6840      	ldr	r0, [r0, #4]
 800f394:	b118      	cbz	r0, 800f39e <rcl_node_get_options+0xe>
 800f396:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800f398:	2b00      	cmp	r3, #0
 800f39a:	bf08      	it	eq
 800f39c:	2000      	moveq	r0, #0
 800f39e:	4770      	bx	lr

0800f3a0 <rcl_node_get_rmw_handle>:
 800f3a0:	b110      	cbz	r0, 800f3a8 <rcl_node_get_rmw_handle+0x8>
 800f3a2:	6840      	ldr	r0, [r0, #4]
 800f3a4:	b100      	cbz	r0, 800f3a8 <rcl_node_get_rmw_handle+0x8>
 800f3a6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800f3a8:	4770      	bx	lr
 800f3aa:	bf00      	nop

0800f3ac <rcl_node_get_default_options>:
 800f3ac:	b510      	push	{r4, lr}
 800f3ae:	2268      	movs	r2, #104	@ 0x68
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	f004 fe12 	bl	8013fdc <memset>
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f7fb f9e1 	bl	800a780 <rcutils_get_default_allocator>
 800f3be:	2301      	movs	r3, #1
 800f3c0:	7523      	strb	r3, [r4, #20]
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	bd10      	pop	{r4, pc}
 800f3c6:	bf00      	nop

0800f3c8 <rcl_node_options_copy>:
 800f3c8:	b1d0      	cbz	r0, 800f400 <rcl_node_options_copy+0x38>
 800f3ca:	b570      	push	{r4, r5, r6, lr}
 800f3cc:	460c      	mov	r4, r1
 800f3ce:	b1a9      	cbz	r1, 800f3fc <rcl_node_options_copy+0x34>
 800f3d0:	4288      	cmp	r0, r1
 800f3d2:	4684      	mov	ip, r0
 800f3d4:	d012      	beq.n	800f3fc <rcl_node_options_copy+0x34>
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	8a86      	ldrh	r6, [r0, #20]
 800f3da:	468e      	mov	lr, r1
 800f3dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f3de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f3e2:	682b      	ldr	r3, [r5, #0]
 800f3e4:	f8ce 3000 	str.w	r3, [lr]
 800f3e8:	f10c 0118 	add.w	r1, ip, #24
 800f3ec:	2250      	movs	r2, #80	@ 0x50
 800f3ee:	82a6      	strh	r6, [r4, #20]
 800f3f0:	f104 0018 	add.w	r0, r4, #24
 800f3f4:	f004 febb 	bl	801416e <memcpy>
 800f3f8:	2000      	movs	r0, #0
 800f3fa:	bd70      	pop	{r4, r5, r6, pc}
 800f3fc:	200b      	movs	r0, #11
 800f3fe:	bd70      	pop	{r4, r5, r6, pc}
 800f400:	200b      	movs	r0, #11
 800f402:	4770      	bx	lr

0800f404 <rcl_node_resolve_name>:
 800f404:	b082      	sub	sp, #8
 800f406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40a:	b091      	sub	sp, #68	@ 0x44
 800f40c:	ac1a      	add	r4, sp, #104	@ 0x68
 800f40e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f412:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800f416:	2800      	cmp	r0, #0
 800f418:	d03b      	beq.n	800f492 <rcl_node_resolve_name+0x8e>
 800f41a:	460c      	mov	r4, r1
 800f41c:	4605      	mov	r5, r0
 800f41e:	f7ff ffb7 	bl	800f390 <rcl_node_get_options>
 800f422:	2800      	cmp	r0, #0
 800f424:	d037      	beq.n	800f496 <rcl_node_resolve_name+0x92>
 800f426:	4628      	mov	r0, r5
 800f428:	f7ff ffa2 	bl	800f370 <rcl_node_get_name>
 800f42c:	4606      	mov	r6, r0
 800f42e:	4628      	mov	r0, r5
 800f430:	f7ff ffa6 	bl	800f380 <rcl_node_get_namespace>
 800f434:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800f438:	4681      	mov	r9, r0
 800f43a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f43e:	ad0b      	add	r5, sp, #44	@ 0x2c
 800f440:	46ac      	mov	ip, r5
 800f442:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f446:	f8de 3000 	ldr.w	r3, [lr]
 800f44a:	f8cc 3000 	str.w	r3, [ip]
 800f44e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f450:	b1fb      	cbz	r3, 800f492 <rcl_node_resolve_name+0x8e>
 800f452:	468a      	mov	sl, r1
 800f454:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800f458:	f000 fab2 	bl	800f9c0 <rcutils_get_zero_initialized_string_map>
 800f45c:	ab10      	add	r3, sp, #64	@ 0x40
 800f45e:	9008      	str	r0, [sp, #32]
 800f460:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f464:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f468:	2100      	movs	r1, #0
 800f46a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f46e:	a808      	add	r0, sp, #32
 800f470:	f000 fb1e 	bl	800fab0 <rcutils_string_map_init>
 800f474:	4607      	mov	r7, r0
 800f476:	b180      	cbz	r0, 800f49a <rcl_node_resolve_name+0x96>
 800f478:	f7fb f99e 	bl	800a7b8 <rcutils_get_error_string>
 800f47c:	f7fb f9b4 	bl	800a7e8 <rcutils_reset_error>
 800f480:	2f0a      	cmp	r7, #10
 800f482:	bf18      	it	ne
 800f484:	2701      	movne	r7, #1
 800f486:	4638      	mov	r0, r7
 800f488:	b011      	add	sp, #68	@ 0x44
 800f48a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48e:	b002      	add	sp, #8
 800f490:	4770      	bx	lr
 800f492:	270b      	movs	r7, #11
 800f494:	e7f7      	b.n	800f486 <rcl_node_resolve_name+0x82>
 800f496:	2701      	movs	r7, #1
 800f498:	e7f5      	b.n	800f486 <rcl_node_resolve_name+0x82>
 800f49a:	9009      	str	r0, [sp, #36]	@ 0x24
 800f49c:	9007      	str	r0, [sp, #28]
 800f49e:	a808      	add	r0, sp, #32
 800f4a0:	f003 f986 	bl	80127b0 <rcl_get_default_topic_name_substitutions>
 800f4a4:	4607      	mov	r7, r0
 800f4a6:	b1a8      	cbz	r0, 800f4d4 <rcl_node_resolve_name+0xd0>
 800f4a8:	280a      	cmp	r0, #10
 800f4aa:	9c07      	ldr	r4, [sp, #28]
 800f4ac:	d000      	beq.n	800f4b0 <rcl_node_resolve_name+0xac>
 800f4ae:	2701      	movs	r7, #1
 800f4b0:	a808      	add	r0, sp, #32
 800f4b2:	f000 fb3d 	bl	800fb30 <rcutils_string_map_fini>
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d13d      	bne.n	800f536 <rcl_node_resolve_name+0x132>
 800f4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4bc:	4659      	mov	r1, fp
 800f4be:	47d0      	blx	sl
 800f4c0:	4659      	mov	r1, fp
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	47d0      	blx	sl
 800f4c6:	f1b8 0f00 	cmp.w	r8, #0
 800f4ca:	d0dc      	beq.n	800f486 <rcl_node_resolve_name+0x82>
 800f4cc:	2f67      	cmp	r7, #103	@ 0x67
 800f4ce:	bf08      	it	eq
 800f4d0:	2768      	moveq	r7, #104	@ 0x68
 800f4d2:	e7d8      	b.n	800f486 <rcl_node_resolve_name+0x82>
 800f4d4:	ab09      	add	r3, sp, #36	@ 0x24
 800f4d6:	9305      	str	r3, [sp, #20]
 800f4d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4da:	46ec      	mov	ip, sp
 800f4dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4e0:	682b      	ldr	r3, [r5, #0]
 800f4e2:	f8cc 3000 	str.w	r3, [ip]
 800f4e6:	464a      	mov	r2, r9
 800f4e8:	4631      	mov	r1, r6
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	ab08      	add	r3, sp, #32
 800f4ee:	f003 f801 	bl	80124f4 <rcl_expand_topic_name>
 800f4f2:	4607      	mov	r7, r0
 800f4f4:	b9b8      	cbnz	r0, 800f526 <rcl_node_resolve_name+0x122>
 800f4f6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800f4f8:	9009      	str	r0, [sp, #36]	@ 0x24
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	a90a      	add	r1, sp, #40	@ 0x28
 800f4fe:	4620      	mov	r0, r4
 800f500:	f000 fbfe 	bl	800fd00 <rmw_validate_full_topic_name>
 800f504:	b988      	cbnz	r0, 800f52a <rcl_node_resolve_name+0x126>
 800f506:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f508:	b9d5      	cbnz	r5, 800f540 <rcl_node_resolve_name+0x13c>
 800f50a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f50c:	a808      	add	r0, sp, #32
 800f50e:	601c      	str	r4, [r3, #0]
 800f510:	f000 fb0e 	bl	800fb30 <rcutils_string_map_fini>
 800f514:	4607      	mov	r7, r0
 800f516:	b1a8      	cbz	r0, 800f544 <rcl_node_resolve_name+0x140>
 800f518:	f7fb f94e 	bl	800a7b8 <rcutils_get_error_string>
 800f51c:	462c      	mov	r4, r5
 800f51e:	f7fb f963 	bl	800a7e8 <rcutils_reset_error>
 800f522:	2701      	movs	r7, #1
 800f524:	e7c9      	b.n	800f4ba <rcl_node_resolve_name+0xb6>
 800f526:	9c07      	ldr	r4, [sp, #28]
 800f528:	e7c2      	b.n	800f4b0 <rcl_node_resolve_name+0xac>
 800f52a:	f7fb f945 	bl	800a7b8 <rcutils_get_error_string>
 800f52e:	2701      	movs	r7, #1
 800f530:	f7fb f95a 	bl	800a7e8 <rcutils_reset_error>
 800f534:	e7bc      	b.n	800f4b0 <rcl_node_resolve_name+0xac>
 800f536:	f7fb f93f 	bl	800a7b8 <rcutils_get_error_string>
 800f53a:	f7fb f955 	bl	800a7e8 <rcutils_reset_error>
 800f53e:	e7bc      	b.n	800f4ba <rcl_node_resolve_name+0xb6>
 800f540:	2767      	movs	r7, #103	@ 0x67
 800f542:	e7b5      	b.n	800f4b0 <rcl_node_resolve_name+0xac>
 800f544:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f546:	4659      	mov	r1, fp
 800f548:	47d0      	blx	sl
 800f54a:	4659      	mov	r1, fp
 800f54c:	4638      	mov	r0, r7
 800f54e:	47d0      	blx	sl
 800f550:	e799      	b.n	800f486 <rcl_node_resolve_name+0x82>
 800f552:	bf00      	nop

0800f554 <rcl_get_system_time>:
 800f554:	4608      	mov	r0, r1
 800f556:	f000 bb5f 	b.w	800fc18 <rcutils_system_time_now>
 800f55a:	bf00      	nop

0800f55c <rcl_get_steady_time>:
 800f55c:	4608      	mov	r0, r1
 800f55e:	f000 bb83 	b.w	800fc68 <rcutils_steady_time_now>
 800f562:	bf00      	nop

0800f564 <rcl_get_ros_time>:
 800f564:	7a03      	ldrb	r3, [r0, #8]
 800f566:	b510      	push	{r4, lr}
 800f568:	460c      	mov	r4, r1
 800f56a:	b133      	cbz	r3, 800f57a <rcl_get_ros_time+0x16>
 800f56c:	2105      	movs	r1, #5
 800f56e:	f000 f881 	bl	800f674 <__atomic_load_8>
 800f572:	e9c4 0100 	strd	r0, r1, [r4]
 800f576:	2000      	movs	r0, #0
 800f578:	bd10      	pop	{r4, pc}
 800f57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f57e:	4608      	mov	r0, r1
 800f580:	f000 bb4a 	b.w	800fc18 <rcutils_system_time_now>

0800f584 <rcl_clock_init>:
 800f584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f586:	4605      	mov	r5, r0
 800f588:	4610      	mov	r0, r2
 800f58a:	4614      	mov	r4, r2
 800f58c:	460e      	mov	r6, r1
 800f58e:	f7fb f905 	bl	800a79c <rcutils_allocator_is_valid>
 800f592:	b128      	cbz	r0, 800f5a0 <rcl_clock_init+0x1c>
 800f594:	2d03      	cmp	r5, #3
 800f596:	d803      	bhi.n	800f5a0 <rcl_clock_init+0x1c>
 800f598:	e8df f005 	tbb	[pc, r5]
 800f59c:	06532e1d 	.word	0x06532e1d
 800f5a0:	f04f 0c0b 	mov.w	ip, #11
 800f5a4:	4660      	mov	r0, ip
 800f5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a8:	2e00      	cmp	r6, #0
 800f5aa:	d0f9      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f5ac:	2c00      	cmp	r4, #0
 800f5ae:	d0f7      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f5b6:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800f66c <rcl_clock_init+0xe8>
 800f5ba:	6133      	str	r3, [r6, #16]
 800f5bc:	f106 0514 	add.w	r5, r6, #20
 800f5c0:	469c      	mov	ip, r3
 800f5c2:	2703      	movs	r7, #3
 800f5c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5c8:	6823      	ldr	r3, [r4, #0]
 800f5ca:	602b      	str	r3, [r5, #0]
 800f5cc:	7037      	strb	r7, [r6, #0]
 800f5ce:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f5d2:	4660      	mov	r0, ip
 800f5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d6:	2e00      	cmp	r6, #0
 800f5d8:	d0e2      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	7033      	strb	r3, [r6, #0]
 800f5de:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f5e2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f5e6:	469c      	mov	ip, r3
 800f5e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5ea:	f106 0514 	add.w	r5, r6, #20
 800f5ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f5f0:	6823      	ldr	r3, [r4, #0]
 800f5f2:	602b      	str	r3, [r5, #0]
 800f5f4:	4660      	mov	r0, ip
 800f5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5f8:	2e00      	cmp	r6, #0
 800f5fa:	d0d1      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f5fc:	2c00      	cmp	r4, #0
 800f5fe:	d0cf      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f600:	2700      	movs	r7, #0
 800f602:	7037      	strb	r7, [r6, #0]
 800f604:	46a4      	mov	ip, r4
 800f606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f60a:	f106 0514 	add.w	r5, r6, #20
 800f60e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f612:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f618:	f8dc 3000 	ldr.w	r3, [ip]
 800f61c:	602b      	str	r3, [r5, #0]
 800f61e:	6921      	ldr	r1, [r4, #16]
 800f620:	6823      	ldr	r3, [r4, #0]
 800f622:	2010      	movs	r0, #16
 800f624:	4798      	blx	r3
 800f626:	6130      	str	r0, [r6, #16]
 800f628:	b1d0      	cbz	r0, 800f660 <rcl_clock_init+0xdc>
 800f62a:	2200      	movs	r2, #0
 800f62c:	2300      	movs	r3, #0
 800f62e:	e9c0 2300 	strd	r2, r3, [r0]
 800f632:	2301      	movs	r3, #1
 800f634:	7207      	strb	r7, [r0, #8]
 800f636:	4a0c      	ldr	r2, [pc, #48]	@ (800f668 <rcl_clock_init+0xe4>)
 800f638:	7033      	strb	r3, [r6, #0]
 800f63a:	46bc      	mov	ip, r7
 800f63c:	60f2      	str	r2, [r6, #12]
 800f63e:	4660      	mov	r0, ip
 800f640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f642:	2e00      	cmp	r6, #0
 800f644:	d0ac      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f646:	2c00      	cmp	r4, #0
 800f648:	d0aa      	beq.n	800f5a0 <rcl_clock_init+0x1c>
 800f64a:	2300      	movs	r3, #0
 800f64c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f650:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800f670 <rcl_clock_init+0xec>
 800f654:	6133      	str	r3, [r6, #16]
 800f656:	f106 0514 	add.w	r5, r6, #20
 800f65a:	469c      	mov	ip, r3
 800f65c:	2702      	movs	r7, #2
 800f65e:	e7b1      	b.n	800f5c4 <rcl_clock_init+0x40>
 800f660:	f04f 0c0a 	mov.w	ip, #10
 800f664:	e79e      	b.n	800f5a4 <rcl_clock_init+0x20>
 800f666:	bf00      	nop
 800f668:	0800f565 	.word	0x0800f565
 800f66c:	0800f55d 	.word	0x0800f55d
 800f670:	0800f555 	.word	0x0800f555

0800f674 <__atomic_load_8>:
 800f674:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f678:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800f67c:	4a15      	ldr	r2, [pc, #84]	@ (800f6d4 <__atomic_load_8+0x60>)
 800f67e:	4b16      	ldr	r3, [pc, #88]	@ (800f6d8 <__atomic_load_8+0x64>)
 800f680:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f684:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f688:	fb02 f101 	mul.w	r1, r2, r1
 800f68c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f690:	fba3 2301 	umull	r2, r3, r3, r1
 800f694:	091b      	lsrs	r3, r3, #4
 800f696:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f69a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800f69e:	b4d0      	push	{r4, r6, r7}
 800f6a0:	4c0e      	ldr	r4, [pc, #56]	@ (800f6dc <__atomic_load_8+0x68>)
 800f6a2:	1ac9      	subs	r1, r1, r3
 800f6a4:	1862      	adds	r2, r4, r1
 800f6a6:	f04f 0c01 	mov.w	ip, #1
 800f6aa:	e8d2 3f4f 	ldrexb	r3, [r2]
 800f6ae:	e8c2 cf46 	strexb	r6, ip, [r2]
 800f6b2:	2e00      	cmp	r6, #0
 800f6b4:	d1f9      	bne.n	800f6aa <__atomic_load_8+0x36>
 800f6b6:	f3bf 8f5b 	dmb	ish
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1f4      	bne.n	800f6aa <__atomic_load_8+0x36>
 800f6c0:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f6c4:	f3bf 8f5b 	dmb	ish
 800f6c8:	5463      	strb	r3, [r4, r1]
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	4639      	mov	r1, r7
 800f6ce:	bcd0      	pop	{r4, r6, r7}
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	27d4eb2d 	.word	0x27d4eb2d
 800f6d8:	b21642c9 	.word	0xb21642c9
 800f6dc:	20010d20 	.word	0x20010d20

0800f6e0 <rcutils_get_env>:
 800f6e0:	b168      	cbz	r0, 800f6fe <rcutils_get_env+0x1e>
 800f6e2:	b510      	push	{r4, lr}
 800f6e4:	460c      	mov	r4, r1
 800f6e6:	b129      	cbz	r1, 800f6f4 <rcutils_get_env+0x14>
 800f6e8:	f004 f8d4 	bl	8013894 <getenv>
 800f6ec:	b120      	cbz	r0, 800f6f8 <rcutils_get_env+0x18>
 800f6ee:	6020      	str	r0, [r4, #0]
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	bd10      	pop	{r4, pc}
 800f6f4:	4803      	ldr	r0, [pc, #12]	@ (800f704 <rcutils_get_env+0x24>)
 800f6f6:	bd10      	pop	{r4, pc}
 800f6f8:	4b03      	ldr	r3, [pc, #12]	@ (800f708 <rcutils_get_env+0x28>)
 800f6fa:	6023      	str	r3, [r4, #0]
 800f6fc:	bd10      	pop	{r4, pc}
 800f6fe:	4803      	ldr	r0, [pc, #12]	@ (800f70c <rcutils_get_env+0x2c>)
 800f700:	4770      	bx	lr
 800f702:	bf00      	nop
 800f704:	080152f0 	.word	0x080152f0
 800f708:	08015414 	.word	0x08015414
 800f70c:	080152d4 	.word	0x080152d4

0800f710 <rcutils_format_string_limit>:
 800f710:	b40f      	push	{r0, r1, r2, r3}
 800f712:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f714:	b083      	sub	sp, #12
 800f716:	ac08      	add	r4, sp, #32
 800f718:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800f71a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f71e:	b34e      	cbz	r6, 800f774 <rcutils_format_string_limit+0x64>
 800f720:	a808      	add	r0, sp, #32
 800f722:	f7fb f83b 	bl	800a79c <rcutils_allocator_is_valid>
 800f726:	b328      	cbz	r0, 800f774 <rcutils_format_string_limit+0x64>
 800f728:	2100      	movs	r1, #0
 800f72a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800f72c:	4632      	mov	r2, r6
 800f72e:	4608      	mov	r0, r1
 800f730:	e9cd 3300 	strd	r3, r3, [sp]
 800f734:	f000 f8f4 	bl	800f920 <rcutils_vsnprintf>
 800f738:	1c43      	adds	r3, r0, #1
 800f73a:	4605      	mov	r5, r0
 800f73c:	d01a      	beq.n	800f774 <rcutils_format_string_limit+0x64>
 800f73e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f740:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f742:	1c47      	adds	r7, r0, #1
 800f744:	429f      	cmp	r7, r3
 800f746:	bf84      	itt	hi
 800f748:	461f      	movhi	r7, r3
 800f74a:	f103 35ff 	addhi.w	r5, r3, #4294967295
 800f74e:	4638      	mov	r0, r7
 800f750:	9b08      	ldr	r3, [sp, #32]
 800f752:	4798      	blx	r3
 800f754:	4604      	mov	r4, r0
 800f756:	b168      	cbz	r0, 800f774 <rcutils_format_string_limit+0x64>
 800f758:	9b01      	ldr	r3, [sp, #4]
 800f75a:	4632      	mov	r2, r6
 800f75c:	4639      	mov	r1, r7
 800f75e:	f000 f8df 	bl	800f920 <rcutils_vsnprintf>
 800f762:	2800      	cmp	r0, #0
 800f764:	db02      	blt.n	800f76c <rcutils_format_string_limit+0x5c>
 800f766:	2300      	movs	r3, #0
 800f768:	5563      	strb	r3, [r4, r5]
 800f76a:	e004      	b.n	800f776 <rcutils_format_string_limit+0x66>
 800f76c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f76e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f770:	4620      	mov	r0, r4
 800f772:	4798      	blx	r3
 800f774:	2400      	movs	r4, #0
 800f776:	4620      	mov	r0, r4
 800f778:	b003      	add	sp, #12
 800f77a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f77e:	b004      	add	sp, #16
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop

0800f784 <rcutils_repl_str>:
 800f784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f788:	ed2d 8b02 	vpush	{d8}
 800f78c:	b087      	sub	sp, #28
 800f78e:	4680      	mov	r8, r0
 800f790:	4608      	mov	r0, r1
 800f792:	f8cd 8004 	str.w	r8, [sp, #4]
 800f796:	ee08 2a10 	vmov	s16, r2
 800f79a:	468a      	mov	sl, r1
 800f79c:	4699      	mov	r9, r3
 800f79e:	f7f0 fd41 	bl	8000224 <strlen>
 800f7a2:	2600      	movs	r6, #0
 800f7a4:	4647      	mov	r7, r8
 800f7a6:	9002      	str	r0, [sp, #8]
 800f7a8:	46b3      	mov	fp, r6
 800f7aa:	2510      	movs	r5, #16
 800f7ac:	46b0      	mov	r8, r6
 800f7ae:	e01d      	b.n	800f7ec <rcutils_repl_str+0x68>
 800f7b0:	f10b 0b01 	add.w	fp, fp, #1
 800f7b4:	455e      	cmp	r6, fp
 800f7b6:	d211      	bcs.n	800f7dc <rcutils_repl_str+0x58>
 800f7b8:	442e      	add	r6, r5
 800f7ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f7be:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f7c2:	00b1      	lsls	r1, r6, #2
 800f7c4:	4798      	blx	r3
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	f000 8088 	beq.w	800f8dc <rcutils_repl_str+0x158>
 800f7cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7d0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	bf28      	it	cs
 800f7d8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800f7dc:	9a01      	ldr	r2, [sp, #4]
 800f7de:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800f7e2:	1aa2      	subs	r2, r4, r2
 800f7e4:	f843 2c04 	str.w	r2, [r3, #-4]
 800f7e8:	9b02      	ldr	r3, [sp, #8]
 800f7ea:	18e7      	adds	r7, r4, r3
 800f7ec:	4651      	mov	r1, sl
 800f7ee:	4638      	mov	r0, r7
 800f7f0:	f004 fc1b 	bl	801402a <strstr>
 800f7f4:	4604      	mov	r4, r0
 800f7f6:	4640      	mov	r0, r8
 800f7f8:	2c00      	cmp	r4, #0
 800f7fa:	d1d9      	bne.n	800f7b0 <rcutils_repl_str+0x2c>
 800f7fc:	46b8      	mov	r8, r7
 800f7fe:	4607      	mov	r7, r0
 800f800:	4640      	mov	r0, r8
 800f802:	f7f0 fd0f 	bl	8000224 <strlen>
 800f806:	9b01      	ldr	r3, [sp, #4]
 800f808:	eba8 0303 	sub.w	r3, r8, r3
 800f80c:	181c      	adds	r4, r3, r0
 800f80e:	9404      	str	r4, [sp, #16]
 800f810:	f1bb 0f00 	cmp.w	fp, #0
 800f814:	d04a      	beq.n	800f8ac <rcutils_repl_str+0x128>
 800f816:	ee18 0a10 	vmov	r0, s16
 800f81a:	f7f0 fd03 	bl	8000224 <strlen>
 800f81e:	9b02      	ldr	r3, [sp, #8]
 800f820:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f824:	1ac3      	subs	r3, r0, r3
 800f826:	fb0b 4303 	mla	r3, fp, r3, r4
 800f82a:	461a      	mov	r2, r3
 800f82c:	9305      	str	r3, [sp, #20]
 800f82e:	4606      	mov	r6, r0
 800f830:	f8d9 3000 	ldr.w	r3, [r9]
 800f834:	1c50      	adds	r0, r2, #1
 800f836:	4798      	blx	r3
 800f838:	9003      	str	r0, [sp, #12]
 800f83a:	2800      	cmp	r0, #0
 800f83c:	d04f      	beq.n	800f8de <rcutils_repl_str+0x15a>
 800f83e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f842:	683a      	ldr	r2, [r7, #0]
 800f844:	4641      	mov	r1, r8
 800f846:	f004 fc92 	bl	801416e <memcpy>
 800f84a:	683d      	ldr	r5, [r7, #0]
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	9701      	str	r7, [sp, #4]
 800f850:	46ba      	mov	sl, r7
 800f852:	441d      	add	r5, r3
 800f854:	9f02      	ldr	r7, [sp, #8]
 800f856:	f8cd 9008 	str.w	r9, [sp, #8]
 800f85a:	2401      	movs	r4, #1
 800f85c:	46d1      	mov	r9, sl
 800f85e:	ee18 aa10 	vmov	sl, s16
 800f862:	e00a      	b.n	800f87a <rcutils_repl_str+0xf6>
 800f864:	f8d9 5000 	ldr.w	r5, [r9]
 800f868:	1aaa      	subs	r2, r5, r2
 800f86a:	1885      	adds	r5, r0, r2
 800f86c:	f004 fc7f 	bl	801416e <memcpy>
 800f870:	45a3      	cmp	fp, r4
 800f872:	f104 0201 	add.w	r2, r4, #1
 800f876:	d935      	bls.n	800f8e4 <rcutils_repl_str+0x160>
 800f878:	4614      	mov	r4, r2
 800f87a:	4632      	mov	r2, r6
 800f87c:	4651      	mov	r1, sl
 800f87e:	4628      	mov	r0, r5
 800f880:	f004 fc75 	bl	801416e <memcpy>
 800f884:	f859 2b04 	ldr.w	r2, [r9], #4
 800f888:	45a3      	cmp	fp, r4
 800f88a:	443a      	add	r2, r7
 800f88c:	eb05 0006 	add.w	r0, r5, r6
 800f890:	eb08 0102 	add.w	r1, r8, r2
 800f894:	d1e6      	bne.n	800f864 <rcutils_repl_str+0xe0>
 800f896:	9b04      	ldr	r3, [sp, #16]
 800f898:	1a9a      	subs	r2, r3, r2
 800f89a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f89e:	f004 fc66 	bl	801416e <memcpy>
 800f8a2:	9a03      	ldr	r2, [sp, #12]
 800f8a4:	9905      	ldr	r1, [sp, #20]
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	5453      	strb	r3, [r2, r1]
 800f8aa:	e00b      	b.n	800f8c4 <rcutils_repl_str+0x140>
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	f8d9 3000 	ldr.w	r3, [r9]
 800f8b2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f8b6:	3001      	adds	r0, #1
 800f8b8:	4798      	blx	r3
 800f8ba:	9003      	str	r0, [sp, #12]
 800f8bc:	b110      	cbz	r0, 800f8c4 <rcutils_repl_str+0x140>
 800f8be:	9901      	ldr	r1, [sp, #4]
 800f8c0:	f004 fc4d 	bl	801415e <strcpy>
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f8ca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f8ce:	4798      	blx	r3
 800f8d0:	9803      	ldr	r0, [sp, #12]
 800f8d2:	b007      	add	sp, #28
 800f8d4:	ecbd 8b02 	vpop	{d8}
 800f8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8dc:	4647      	mov	r7, r8
 800f8de:	2300      	movs	r3, #0
 800f8e0:	9303      	str	r3, [sp, #12]
 800f8e2:	e7ef      	b.n	800f8c4 <rcutils_repl_str+0x140>
 800f8e4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f8e8:	e7db      	b.n	800f8a2 <rcutils_repl_str+0x11e>
 800f8ea:	bf00      	nop

0800f8ec <rcutils_snprintf>:
 800f8ec:	b40c      	push	{r2, r3}
 800f8ee:	b530      	push	{r4, r5, lr}
 800f8f0:	b083      	sub	sp, #12
 800f8f2:	ab06      	add	r3, sp, #24
 800f8f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8f8:	9301      	str	r3, [sp, #4]
 800f8fa:	b152      	cbz	r2, 800f912 <rcutils_snprintf+0x26>
 800f8fc:	b138      	cbz	r0, 800f90e <rcutils_snprintf+0x22>
 800f8fe:	b141      	cbz	r1, 800f912 <rcutils_snprintf+0x26>
 800f900:	f004 fb5e 	bl	8013fc0 <vsniprintf>
 800f904:	b003      	add	sp, #12
 800f906:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f90a:	b002      	add	sp, #8
 800f90c:	4770      	bx	lr
 800f90e:	2900      	cmp	r1, #0
 800f910:	d0f6      	beq.n	800f900 <rcutils_snprintf+0x14>
 800f912:	f004 fbf7 	bl	8014104 <__errno>
 800f916:	2316      	movs	r3, #22
 800f918:	6003      	str	r3, [r0, #0]
 800f91a:	f04f 30ff 	mov.w	r0, #4294967295
 800f91e:	e7f1      	b.n	800f904 <rcutils_snprintf+0x18>

0800f920 <rcutils_vsnprintf>:
 800f920:	b570      	push	{r4, r5, r6, lr}
 800f922:	b13a      	cbz	r2, 800f934 <rcutils_vsnprintf+0x14>
 800f924:	b120      	cbz	r0, 800f930 <rcutils_vsnprintf+0x10>
 800f926:	b129      	cbz	r1, 800f934 <rcutils_vsnprintf+0x14>
 800f928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f92c:	f004 bb48 	b.w	8013fc0 <vsniprintf>
 800f930:	2900      	cmp	r1, #0
 800f932:	d0f9      	beq.n	800f928 <rcutils_vsnprintf+0x8>
 800f934:	f004 fbe6 	bl	8014104 <__errno>
 800f938:	2316      	movs	r3, #22
 800f93a:	6003      	str	r3, [r0, #0]
 800f93c:	f04f 30ff 	mov.w	r0, #4294967295
 800f940:	bd70      	pop	{r4, r5, r6, pc}
 800f942:	bf00      	nop

0800f944 <rcutils_strdup>:
 800f944:	b084      	sub	sp, #16
 800f946:	b570      	push	{r4, r5, r6, lr}
 800f948:	b082      	sub	sp, #8
 800f94a:	ac07      	add	r4, sp, #28
 800f94c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f950:	4605      	mov	r5, r0
 800f952:	b1b0      	cbz	r0, 800f982 <rcutils_strdup+0x3e>
 800f954:	f7f0 fc66 	bl	8000224 <strlen>
 800f958:	1c42      	adds	r2, r0, #1
 800f95a:	9b07      	ldr	r3, [sp, #28]
 800f95c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f95e:	9201      	str	r2, [sp, #4]
 800f960:	4606      	mov	r6, r0
 800f962:	4610      	mov	r0, r2
 800f964:	4798      	blx	r3
 800f966:	4604      	mov	r4, r0
 800f968:	b128      	cbz	r0, 800f976 <rcutils_strdup+0x32>
 800f96a:	9a01      	ldr	r2, [sp, #4]
 800f96c:	4629      	mov	r1, r5
 800f96e:	f004 fbfe 	bl	801416e <memcpy>
 800f972:	2300      	movs	r3, #0
 800f974:	55a3      	strb	r3, [r4, r6]
 800f976:	4620      	mov	r0, r4
 800f978:	b002      	add	sp, #8
 800f97a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f97e:	b004      	add	sp, #16
 800f980:	4770      	bx	lr
 800f982:	4604      	mov	r4, r0
 800f984:	e7f7      	b.n	800f976 <rcutils_strdup+0x32>
 800f986:	bf00      	nop

0800f988 <rcutils_strndup>:
 800f988:	b082      	sub	sp, #8
 800f98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98c:	ac06      	add	r4, sp, #24
 800f98e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f992:	4605      	mov	r5, r0
 800f994:	b188      	cbz	r0, 800f9ba <rcutils_strndup+0x32>
 800f996:	1c4f      	adds	r7, r1, #1
 800f998:	460e      	mov	r6, r1
 800f99a:	4638      	mov	r0, r7
 800f99c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f99e:	4790      	blx	r2
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	b128      	cbz	r0, 800f9b0 <rcutils_strndup+0x28>
 800f9a4:	463a      	mov	r2, r7
 800f9a6:	4629      	mov	r1, r5
 800f9a8:	f004 fbe1 	bl	801416e <memcpy>
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	55a3      	strb	r3, [r4, r6]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9b6:	b002      	add	sp, #8
 800f9b8:	4770      	bx	lr
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	e7f8      	b.n	800f9b0 <rcutils_strndup+0x28>
 800f9be:	bf00      	nop

0800f9c0 <rcutils_get_zero_initialized_string_map>:
 800f9c0:	4b01      	ldr	r3, [pc, #4]	@ (800f9c8 <rcutils_get_zero_initialized_string_map+0x8>)
 800f9c2:	2000      	movs	r0, #0
 800f9c4:	6018      	str	r0, [r3, #0]
 800f9c6:	4770      	bx	lr
 800f9c8:	20010d38 	.word	0x20010d38

0800f9cc <rcutils_string_map_reserve>:
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d05f      	beq.n	800fa90 <rcutils_string_map_reserve+0xc4>
 800f9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	6801      	ldr	r1, [r0, #0]
 800f9d8:	b082      	sub	sp, #8
 800f9da:	4605      	mov	r5, r0
 800f9dc:	b129      	cbz	r1, 800f9ea <rcutils_string_map_reserve+0x1e>
 800f9de:	68cb      	ldr	r3, [r1, #12]
 800f9e0:	42a3      	cmp	r3, r4
 800f9e2:	d906      	bls.n	800f9f2 <rcutils_string_map_reserve+0x26>
 800f9e4:	461c      	mov	r4, r3
 800f9e6:	2900      	cmp	r1, #0
 800f9e8:	d1f9      	bne.n	800f9de <rcutils_string_map_reserve+0x12>
 800f9ea:	201f      	movs	r0, #31
 800f9ec:	b002      	add	sp, #8
 800f9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f2:	688b      	ldr	r3, [r1, #8]
 800f9f4:	42a3      	cmp	r3, r4
 800f9f6:	d047      	beq.n	800fa88 <rcutils_string_map_reserve+0xbc>
 800f9f8:	6a0e      	ldr	r6, [r1, #32]
 800f9fa:	2c00      	cmp	r4, #0
 800f9fc:	d034      	beq.n	800fa68 <rcutils_string_map_reserve+0x9c>
 800f9fe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800fa02:	d243      	bcs.n	800fa8c <rcutils_string_map_reserve+0xc0>
 800fa04:	00a7      	lsls	r7, r4, #2
 800fa06:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800fa0a:	6808      	ldr	r0, [r1, #0]
 800fa0c:	4632      	mov	r2, r6
 800fa0e:	4639      	mov	r1, r7
 800fa10:	47c0      	blx	r8
 800fa12:	2800      	cmp	r0, #0
 800fa14:	d03a      	beq.n	800fa8c <rcutils_string_map_reserve+0xc0>
 800fa16:	682b      	ldr	r3, [r5, #0]
 800fa18:	4632      	mov	r2, r6
 800fa1a:	6018      	str	r0, [r3, #0]
 800fa1c:	4639      	mov	r1, r7
 800fa1e:	6858      	ldr	r0, [r3, #4]
 800fa20:	47c0      	blx	r8
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d032      	beq.n	800fa8c <rcutils_string_map_reserve+0xc0>
 800fa26:	682d      	ldr	r5, [r5, #0]
 800fa28:	68ab      	ldr	r3, [r5, #8]
 800fa2a:	6068      	str	r0, [r5, #4]
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	d226      	bcs.n	800fa7e <rcutils_string_map_reserve+0xb2>
 800fa30:	682a      	ldr	r2, [r5, #0]
 800fa32:	eb00 0c07 	add.w	ip, r0, r7
 800fa36:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800fa3a:	45e6      	cmp	lr, ip
 800fa3c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800fa40:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800fa44:	d203      	bcs.n	800fa4e <rcutils_string_map_reserve+0x82>
 800fa46:	eb02 0c07 	add.w	ip, r2, r7
 800fa4a:	4566      	cmp	r6, ip
 800fa4c:	d322      	bcc.n	800fa94 <rcutils_string_map_reserve+0xc8>
 800fa4e:	1ae3      	subs	r3, r4, r3
 800fa50:	009a      	lsls	r2, r3, #2
 800fa52:	4670      	mov	r0, lr
 800fa54:	2100      	movs	r1, #0
 800fa56:	9201      	str	r2, [sp, #4]
 800fa58:	f004 fac0 	bl	8013fdc <memset>
 800fa5c:	9a01      	ldr	r2, [sp, #4]
 800fa5e:	2100      	movs	r1, #0
 800fa60:	4630      	mov	r0, r6
 800fa62:	f004 fabb 	bl	8013fdc <memset>
 800fa66:	e00a      	b.n	800fa7e <rcutils_string_map_reserve+0xb2>
 800fa68:	694f      	ldr	r7, [r1, #20]
 800fa6a:	6808      	ldr	r0, [r1, #0]
 800fa6c:	4631      	mov	r1, r6
 800fa6e:	47b8      	blx	r7
 800fa70:	682b      	ldr	r3, [r5, #0]
 800fa72:	4631      	mov	r1, r6
 800fa74:	6858      	ldr	r0, [r3, #4]
 800fa76:	601c      	str	r4, [r3, #0]
 800fa78:	47b8      	blx	r7
 800fa7a:	682d      	ldr	r5, [r5, #0]
 800fa7c:	606c      	str	r4, [r5, #4]
 800fa7e:	2000      	movs	r0, #0
 800fa80:	60ac      	str	r4, [r5, #8]
 800fa82:	b002      	add	sp, #8
 800fa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa88:	2000      	movs	r0, #0
 800fa8a:	e7af      	b.n	800f9ec <rcutils_string_map_reserve+0x20>
 800fa8c:	200a      	movs	r0, #10
 800fa8e:	e7ad      	b.n	800f9ec <rcutils_string_map_reserve+0x20>
 800fa90:	200b      	movs	r0, #11
 800fa92:	4770      	bx	lr
 800fa94:	1f0b      	subs	r3, r1, #4
 800fa96:	4418      	add	r0, r3
 800fa98:	4413      	add	r3, r2
 800fa9a:	3a04      	subs	r2, #4
 800fa9c:	4417      	add	r7, r2
 800fa9e:	2200      	movs	r2, #0
 800faa0:	f843 2f04 	str.w	r2, [r3, #4]!
 800faa4:	42bb      	cmp	r3, r7
 800faa6:	f840 2f04 	str.w	r2, [r0, #4]!
 800faaa:	d1f9      	bne.n	800faa0 <rcutils_string_map_reserve+0xd4>
 800faac:	e7e7      	b.n	800fa7e <rcutils_string_map_reserve+0xb2>
 800faae:	bf00      	nop

0800fab0 <rcutils_string_map_init>:
 800fab0:	b082      	sub	sp, #8
 800fab2:	b570      	push	{r4, r5, r6, lr}
 800fab4:	ac04      	add	r4, sp, #16
 800fab6:	e884 000c 	stmia.w	r4, {r2, r3}
 800faba:	b380      	cbz	r0, 800fb1e <rcutils_string_map_init+0x6e>
 800fabc:	6806      	ldr	r6, [r0, #0]
 800fabe:	4604      	mov	r4, r0
 800fac0:	b12e      	cbz	r6, 800face <rcutils_string_map_init+0x1e>
 800fac2:	251e      	movs	r5, #30
 800fac4:	4628      	mov	r0, r5
 800fac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800faca:	b002      	add	sp, #8
 800facc:	4770      	bx	lr
 800face:	a804      	add	r0, sp, #16
 800fad0:	460d      	mov	r5, r1
 800fad2:	f7fa fe63 	bl	800a79c <rcutils_allocator_is_valid>
 800fad6:	b310      	cbz	r0, 800fb1e <rcutils_string_map_init+0x6e>
 800fad8:	9b04      	ldr	r3, [sp, #16]
 800fada:	9908      	ldr	r1, [sp, #32]
 800fadc:	2024      	movs	r0, #36	@ 0x24
 800fade:	4798      	blx	r3
 800fae0:	6020      	str	r0, [r4, #0]
 800fae2:	b310      	cbz	r0, 800fb2a <rcutils_string_map_init+0x7a>
 800fae4:	f10d 0e10 	add.w	lr, sp, #16
 800fae8:	e9c0 6600 	strd	r6, r6, [r0]
 800faec:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800faf0:	f100 0c10 	add.w	ip, r0, #16
 800faf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800faf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fafc:	f8de 3000 	ldr.w	r3, [lr]
 800fb00:	f8cc 3000 	str.w	r3, [ip]
 800fb04:	4629      	mov	r1, r5
 800fb06:	4620      	mov	r0, r4
 800fb08:	f7ff ff60 	bl	800f9cc <rcutils_string_map_reserve>
 800fb0c:	4605      	mov	r5, r0
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d0d8      	beq.n	800fac4 <rcutils_string_map_init+0x14>
 800fb12:	9b05      	ldr	r3, [sp, #20]
 800fb14:	9908      	ldr	r1, [sp, #32]
 800fb16:	6820      	ldr	r0, [r4, #0]
 800fb18:	4798      	blx	r3
 800fb1a:	6026      	str	r6, [r4, #0]
 800fb1c:	e7d2      	b.n	800fac4 <rcutils_string_map_init+0x14>
 800fb1e:	250b      	movs	r5, #11
 800fb20:	4628      	mov	r0, r5
 800fb22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb26:	b002      	add	sp, #8
 800fb28:	4770      	bx	lr
 800fb2a:	250a      	movs	r5, #10
 800fb2c:	e7ca      	b.n	800fac4 <rcutils_string_map_init+0x14>
 800fb2e:	bf00      	nop

0800fb30 <rcutils_string_map_fini>:
 800fb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb34:	b082      	sub	sp, #8
 800fb36:	2800      	cmp	r0, #0
 800fb38:	d03a      	beq.n	800fbb0 <rcutils_string_map_fini+0x80>
 800fb3a:	6804      	ldr	r4, [r0, #0]
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	2c00      	cmp	r4, #0
 800fb40:	d032      	beq.n	800fba8 <rcutils_string_map_fini+0x78>
 800fb42:	68a3      	ldr	r3, [r4, #8]
 800fb44:	b32b      	cbz	r3, 800fb92 <rcutils_string_map_fini+0x62>
 800fb46:	2500      	movs	r5, #0
 800fb48:	6822      	ldr	r2, [r4, #0]
 800fb4a:	462f      	mov	r7, r5
 800fb4c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800fb50:	b1e0      	cbz	r0, 800fb8c <rcutils_string_map_fini+0x5c>
 800fb52:	6a21      	ldr	r1, [r4, #32]
 800fb54:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800fb58:	9101      	str	r1, [sp, #4]
 800fb5a:	47c0      	blx	r8
 800fb5c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fb60:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800fb64:	9901      	ldr	r1, [sp, #4]
 800fb66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb6a:	47c0      	blx	r8
 800fb6c:	68e3      	ldr	r3, [r4, #12]
 800fb6e:	6862      	ldr	r2, [r4, #4]
 800fb70:	3b01      	subs	r3, #1
 800fb72:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800fb76:	60e3      	str	r3, [r4, #12]
 800fb78:	6834      	ldr	r4, [r6, #0]
 800fb7a:	68a3      	ldr	r3, [r4, #8]
 800fb7c:	3501      	adds	r5, #1
 800fb7e:	429d      	cmp	r5, r3
 800fb80:	d207      	bcs.n	800fb92 <rcutils_string_map_fini+0x62>
 800fb82:	6822      	ldr	r2, [r4, #0]
 800fb84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d1e2      	bne.n	800fb52 <rcutils_string_map_fini+0x22>
 800fb8c:	3501      	adds	r5, #1
 800fb8e:	429d      	cmp	r5, r3
 800fb90:	d3dc      	bcc.n	800fb4c <rcutils_string_map_fini+0x1c>
 800fb92:	2100      	movs	r1, #0
 800fb94:	4630      	mov	r0, r6
 800fb96:	f7ff ff19 	bl	800f9cc <rcutils_string_map_reserve>
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	b920      	cbnz	r0, 800fba8 <rcutils_string_map_fini+0x78>
 800fb9e:	6830      	ldr	r0, [r6, #0]
 800fba0:	6943      	ldr	r3, [r0, #20]
 800fba2:	6a01      	ldr	r1, [r0, #32]
 800fba4:	4798      	blx	r3
 800fba6:	6034      	str	r4, [r6, #0]
 800fba8:	4620      	mov	r0, r4
 800fbaa:	b002      	add	sp, #8
 800fbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbb0:	240b      	movs	r4, #11
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	b002      	add	sp, #8
 800fbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbba:	bf00      	nop

0800fbbc <rcutils_string_map_getn>:
 800fbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc0:	b300      	cbz	r0, 800fc04 <rcutils_string_map_getn+0x48>
 800fbc2:	6807      	ldr	r7, [r0, #0]
 800fbc4:	b1ff      	cbz	r7, 800fc06 <rcutils_string_map_getn+0x4a>
 800fbc6:	4688      	mov	r8, r1
 800fbc8:	b1e1      	cbz	r1, 800fc04 <rcutils_string_map_getn+0x48>
 800fbca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800fbce:	683e      	ldr	r6, [r7, #0]
 800fbd0:	f1ba 0f00 	cmp.w	sl, #0
 800fbd4:	d016      	beq.n	800fc04 <rcutils_string_map_getn+0x48>
 800fbd6:	4691      	mov	r9, r2
 800fbd8:	3e04      	subs	r6, #4
 800fbda:	2400      	movs	r4, #0
 800fbdc:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800fbe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	3401      	adds	r4, #1
 800fbe8:	b155      	cbz	r5, 800fc00 <rcutils_string_map_getn+0x44>
 800fbea:	f7f0 fb1b 	bl	8000224 <strlen>
 800fbee:	4548      	cmp	r0, r9
 800fbf0:	4602      	mov	r2, r0
 800fbf2:	4629      	mov	r1, r5
 800fbf4:	bf38      	it	cc
 800fbf6:	464a      	movcc	r2, r9
 800fbf8:	4640      	mov	r0, r8
 800fbfa:	f004 fa04 	bl	8014006 <strncmp>
 800fbfe:	b128      	cbz	r0, 800fc0c <rcutils_string_map_getn+0x50>
 800fc00:	45a2      	cmp	sl, r4
 800fc02:	d1eb      	bne.n	800fbdc <rcutils_string_map_getn+0x20>
 800fc04:	2700      	movs	r7, #0
 800fc06:	4638      	mov	r0, r7
 800fc08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f853 700b 	ldr.w	r7, [r3, fp]
 800fc12:	4638      	mov	r0, r7
 800fc14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fc18 <rcutils_system_time_now>:
 800fc18:	b308      	cbz	r0, 800fc5e <rcutils_system_time_now+0x46>
 800fc1a:	b570      	push	{r4, r5, r6, lr}
 800fc1c:	b084      	sub	sp, #16
 800fc1e:	4604      	mov	r4, r0
 800fc20:	4669      	mov	r1, sp
 800fc22:	2001      	movs	r0, #1
 800fc24:	f7f2 fe28 	bl	8002878 <clock_gettime>
 800fc28:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fc2c:	2d00      	cmp	r5, #0
 800fc2e:	db13      	blt.n	800fc58 <rcutils_system_time_now+0x40>
 800fc30:	9902      	ldr	r1, [sp, #8]
 800fc32:	2900      	cmp	r1, #0
 800fc34:	db0d      	blt.n	800fc52 <rcutils_system_time_now+0x3a>
 800fc36:	4e0b      	ldr	r6, [pc, #44]	@ (800fc64 <rcutils_system_time_now+0x4c>)
 800fc38:	fba3 3206 	umull	r3, r2, r3, r6
 800fc3c:	185b      	adds	r3, r3, r1
 800fc3e:	fb06 2205 	mla	r2, r6, r5, r2
 800fc42:	f04f 0000 	mov.w	r0, #0
 800fc46:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fc4a:	e9c4 3200 	strd	r3, r2, [r4]
 800fc4e:	b004      	add	sp, #16
 800fc50:	bd70      	pop	{r4, r5, r6, pc}
 800fc52:	ea53 0205 	orrs.w	r2, r3, r5
 800fc56:	d1ee      	bne.n	800fc36 <rcutils_system_time_now+0x1e>
 800fc58:	2002      	movs	r0, #2
 800fc5a:	b004      	add	sp, #16
 800fc5c:	bd70      	pop	{r4, r5, r6, pc}
 800fc5e:	200b      	movs	r0, #11
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	3b9aca00 	.word	0x3b9aca00

0800fc68 <rcutils_steady_time_now>:
 800fc68:	b308      	cbz	r0, 800fcae <rcutils_steady_time_now+0x46>
 800fc6a:	b570      	push	{r4, r5, r6, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	4604      	mov	r4, r0
 800fc70:	4669      	mov	r1, sp
 800fc72:	2000      	movs	r0, #0
 800fc74:	f7f2 fe00 	bl	8002878 <clock_gettime>
 800fc78:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fc7c:	2d00      	cmp	r5, #0
 800fc7e:	db13      	blt.n	800fca8 <rcutils_steady_time_now+0x40>
 800fc80:	9902      	ldr	r1, [sp, #8]
 800fc82:	2900      	cmp	r1, #0
 800fc84:	db0d      	blt.n	800fca2 <rcutils_steady_time_now+0x3a>
 800fc86:	4e0b      	ldr	r6, [pc, #44]	@ (800fcb4 <rcutils_steady_time_now+0x4c>)
 800fc88:	fba3 3206 	umull	r3, r2, r3, r6
 800fc8c:	185b      	adds	r3, r3, r1
 800fc8e:	fb06 2205 	mla	r2, r6, r5, r2
 800fc92:	f04f 0000 	mov.w	r0, #0
 800fc96:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fc9a:	e9c4 3200 	strd	r3, r2, [r4]
 800fc9e:	b004      	add	sp, #16
 800fca0:	bd70      	pop	{r4, r5, r6, pc}
 800fca2:	ea53 0205 	orrs.w	r2, r3, r5
 800fca6:	d1ee      	bne.n	800fc86 <rcutils_steady_time_now+0x1e>
 800fca8:	2002      	movs	r0, #2
 800fcaa:	b004      	add	sp, #16
 800fcac:	bd70      	pop	{r4, r5, r6, pc}
 800fcae:	200b      	movs	r0, #11
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	3b9aca00 	.word	0x3b9aca00

0800fcb8 <rmw_get_zero_initialized_context>:
 800fcb8:	b510      	push	{r4, lr}
 800fcba:	4604      	mov	r4, r0
 800fcbc:	3010      	adds	r0, #16
 800fcbe:	f000 f80b 	bl	800fcd8 <rmw_get_zero_initialized_init_options>
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	2100      	movs	r1, #0
 800fcc8:	e9c4 0100 	strd	r0, r1, [r4]
 800fccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800fcd0:	60a3      	str	r3, [r4, #8]
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	bd10      	pop	{r4, pc}
 800fcd6:	bf00      	nop

0800fcd8 <rmw_get_zero_initialized_init_options>:
 800fcd8:	b510      	push	{r4, lr}
 800fcda:	2238      	movs	r2, #56	@ 0x38
 800fcdc:	4604      	mov	r4, r0
 800fcde:	2100      	movs	r1, #0
 800fce0:	f004 f97c 	bl	8013fdc <memset>
 800fce4:	f104 0010 	add.w	r0, r4, #16
 800fce8:	f000 f806 	bl	800fcf8 <rmw_get_default_security_options>
 800fcec:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf0:	60e3      	str	r3, [r4, #12]
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	bd10      	pop	{r4, pc}
 800fcf6:	bf00      	nop

0800fcf8 <rmw_get_default_security_options>:
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	7002      	strb	r2, [r0, #0]
 800fcfc:	6042      	str	r2, [r0, #4]
 800fcfe:	4770      	bx	lr

0800fd00 <rmw_validate_full_topic_name>:
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d057      	beq.n	800fdb4 <rmw_validate_full_topic_name+0xb4>
 800fd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd08:	460d      	mov	r5, r1
 800fd0a:	2900      	cmp	r1, #0
 800fd0c:	d054      	beq.n	800fdb8 <rmw_validate_full_topic_name+0xb8>
 800fd0e:	4616      	mov	r6, r2
 800fd10:	4604      	mov	r4, r0
 800fd12:	f7f0 fa87 	bl	8000224 <strlen>
 800fd16:	b148      	cbz	r0, 800fd2c <rmw_validate_full_topic_name+0x2c>
 800fd18:	7823      	ldrb	r3, [r4, #0]
 800fd1a:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd1c:	d00d      	beq.n	800fd3a <rmw_validate_full_topic_name+0x3a>
 800fd1e:	2302      	movs	r3, #2
 800fd20:	602b      	str	r3, [r5, #0]
 800fd22:	b13e      	cbz	r6, 800fd34 <rmw_validate_full_topic_name+0x34>
 800fd24:	2000      	movs	r0, #0
 800fd26:	6030      	str	r0, [r6, #0]
 800fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	2e00      	cmp	r6, #0
 800fd32:	d1f7      	bne.n	800fd24 <rmw_validate_full_topic_name+0x24>
 800fd34:	2000      	movs	r0, #0
 800fd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3a:	1e43      	subs	r3, r0, #1
 800fd3c:	5ce2      	ldrb	r2, [r4, r3]
 800fd3e:	2a2f      	cmp	r2, #47	@ 0x2f
 800fd40:	d03c      	beq.n	800fdbc <rmw_validate_full_topic_name+0xbc>
 800fd42:	1e63      	subs	r3, r4, #1
 800fd44:	eb03 0800 	add.w	r8, r3, r0
 800fd48:	f1c4 0e01 	rsb	lr, r4, #1
 800fd4c:	eb0e 0703 	add.w	r7, lr, r3
 800fd50:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fd54:	f021 0220 	bic.w	r2, r1, #32
 800fd58:	3a41      	subs	r2, #65	@ 0x41
 800fd5a:	2a19      	cmp	r2, #25
 800fd5c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800fd60:	d90b      	bls.n	800fd7a <rmw_validate_full_topic_name+0x7a>
 800fd62:	295f      	cmp	r1, #95	@ 0x5f
 800fd64:	d009      	beq.n	800fd7a <rmw_validate_full_topic_name+0x7a>
 800fd66:	f1bc 0f0a 	cmp.w	ip, #10
 800fd6a:	d906      	bls.n	800fd7a <rmw_validate_full_topic_name+0x7a>
 800fd6c:	2304      	movs	r3, #4
 800fd6e:	602b      	str	r3, [r5, #0]
 800fd70:	2e00      	cmp	r6, #0
 800fd72:	d0df      	beq.n	800fd34 <rmw_validate_full_topic_name+0x34>
 800fd74:	6037      	str	r7, [r6, #0]
 800fd76:	2000      	movs	r0, #0
 800fd78:	e7d6      	b.n	800fd28 <rmw_validate_full_topic_name+0x28>
 800fd7a:	4543      	cmp	r3, r8
 800fd7c:	d1e6      	bne.n	800fd4c <rmw_validate_full_topic_name+0x4c>
 800fd7e:	4f1a      	ldr	r7, [pc, #104]	@ (800fde8 <rmw_validate_full_topic_name+0xe8>)
 800fd80:	2301      	movs	r3, #1
 800fd82:	e004      	b.n	800fd8e <rmw_validate_full_topic_name+0x8e>
 800fd84:	4298      	cmp	r0, r3
 800fd86:	f104 0401 	add.w	r4, r4, #1
 800fd8a:	d91c      	bls.n	800fdc6 <rmw_validate_full_topic_name+0xc6>
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	4298      	cmp	r0, r3
 800fd90:	f103 0201 	add.w	r2, r3, #1
 800fd94:	d0f6      	beq.n	800fd84 <rmw_validate_full_topic_name+0x84>
 800fd96:	7821      	ldrb	r1, [r4, #0]
 800fd98:	292f      	cmp	r1, #47	@ 0x2f
 800fd9a:	d1f3      	bne.n	800fd84 <rmw_validate_full_topic_name+0x84>
 800fd9c:	7861      	ldrb	r1, [r4, #1]
 800fd9e:	292f      	cmp	r1, #47	@ 0x2f
 800fda0:	d01c      	beq.n	800fddc <rmw_validate_full_topic_name+0xdc>
 800fda2:	5dc9      	ldrb	r1, [r1, r7]
 800fda4:	0749      	lsls	r1, r1, #29
 800fda6:	d5ed      	bpl.n	800fd84 <rmw_validate_full_topic_name+0x84>
 800fda8:	2206      	movs	r2, #6
 800fdaa:	602a      	str	r2, [r5, #0]
 800fdac:	2e00      	cmp	r6, #0
 800fdae:	d0c1      	beq.n	800fd34 <rmw_validate_full_topic_name+0x34>
 800fdb0:	6033      	str	r3, [r6, #0]
 800fdb2:	e7bf      	b.n	800fd34 <rmw_validate_full_topic_name+0x34>
 800fdb4:	200b      	movs	r0, #11
 800fdb6:	4770      	bx	lr
 800fdb8:	200b      	movs	r0, #11
 800fdba:	e7b5      	b.n	800fd28 <rmw_validate_full_topic_name+0x28>
 800fdbc:	2203      	movs	r2, #3
 800fdbe:	602a      	str	r2, [r5, #0]
 800fdc0:	2e00      	cmp	r6, #0
 800fdc2:	d1f5      	bne.n	800fdb0 <rmw_validate_full_topic_name+0xb0>
 800fdc4:	e7b6      	b.n	800fd34 <rmw_validate_full_topic_name+0x34>
 800fdc6:	28f7      	cmp	r0, #247	@ 0xf7
 800fdc8:	d802      	bhi.n	800fdd0 <rmw_validate_full_topic_name+0xd0>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	6028      	str	r0, [r5, #0]
 800fdce:	e7ab      	b.n	800fd28 <rmw_validate_full_topic_name+0x28>
 800fdd0:	2307      	movs	r3, #7
 800fdd2:	602b      	str	r3, [r5, #0]
 800fdd4:	2e00      	cmp	r6, #0
 800fdd6:	d0ad      	beq.n	800fd34 <rmw_validate_full_topic_name+0x34>
 800fdd8:	23f6      	movs	r3, #246	@ 0xf6
 800fdda:	e7e9      	b.n	800fdb0 <rmw_validate_full_topic_name+0xb0>
 800fddc:	2205      	movs	r2, #5
 800fdde:	602a      	str	r2, [r5, #0]
 800fde0:	2e00      	cmp	r6, #0
 800fde2:	d1e5      	bne.n	800fdb0 <rmw_validate_full_topic_name+0xb0>
 800fde4:	e7a6      	b.n	800fd34 <rmw_validate_full_topic_name+0x34>
 800fde6:	bf00      	nop
 800fde8:	08015cd4 	.word	0x08015cd4

0800fdec <rmw_validate_namespace_with_size>:
 800fdec:	b340      	cbz	r0, 800fe40 <rmw_validate_namespace_with_size+0x54>
 800fdee:	b570      	push	{r4, r5, r6, lr}
 800fdf0:	4614      	mov	r4, r2
 800fdf2:	b0c2      	sub	sp, #264	@ 0x108
 800fdf4:	b332      	cbz	r2, 800fe44 <rmw_validate_namespace_with_size+0x58>
 800fdf6:	2901      	cmp	r1, #1
 800fdf8:	460d      	mov	r5, r1
 800fdfa:	461e      	mov	r6, r3
 800fdfc:	d102      	bne.n	800fe04 <rmw_validate_namespace_with_size+0x18>
 800fdfe:	7803      	ldrb	r3, [r0, #0]
 800fe00:	2b2f      	cmp	r3, #47	@ 0x2f
 800fe02:	d012      	beq.n	800fe2a <rmw_validate_namespace_with_size+0x3e>
 800fe04:	aa01      	add	r2, sp, #4
 800fe06:	4669      	mov	r1, sp
 800fe08:	f7ff ff7a 	bl	800fd00 <rmw_validate_full_topic_name>
 800fe0c:	b978      	cbnz	r0, 800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe0e:	9b00      	ldr	r3, [sp, #0]
 800fe10:	b14b      	cbz	r3, 800fe26 <rmw_validate_namespace_with_size+0x3a>
 800fe12:	2b07      	cmp	r3, #7
 800fe14:	d007      	beq.n	800fe26 <rmw_validate_namespace_with_size+0x3a>
 800fe16:	1e5a      	subs	r2, r3, #1
 800fe18:	2a05      	cmp	r2, #5
 800fe1a:	d82b      	bhi.n	800fe74 <rmw_validate_namespace_with_size+0x88>
 800fe1c:	e8df f002 	tbb	[pc, r2]
 800fe20:	1e212427 	.word	0x1e212427
 800fe24:	141b      	.short	0x141b
 800fe26:	2df5      	cmp	r5, #245	@ 0xf5
 800fe28:	d803      	bhi.n	800fe32 <rmw_validate_namespace_with_size+0x46>
 800fe2a:	2000      	movs	r0, #0
 800fe2c:	6020      	str	r0, [r4, #0]
 800fe2e:	b042      	add	sp, #264	@ 0x108
 800fe30:	bd70      	pop	{r4, r5, r6, pc}
 800fe32:	2307      	movs	r3, #7
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	2e00      	cmp	r6, #0
 800fe38:	d0f9      	beq.n	800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe3a:	23f4      	movs	r3, #244	@ 0xf4
 800fe3c:	6033      	str	r3, [r6, #0]
 800fe3e:	e7f6      	b.n	800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe40:	200b      	movs	r0, #11
 800fe42:	4770      	bx	lr
 800fe44:	200b      	movs	r0, #11
 800fe46:	e7f2      	b.n	800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe48:	2306      	movs	r3, #6
 800fe4a:	6023      	str	r3, [r4, #0]
 800fe4c:	2e00      	cmp	r6, #0
 800fe4e:	d0ee      	beq.n	800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe50:	9b01      	ldr	r3, [sp, #4]
 800fe52:	6033      	str	r3, [r6, #0]
 800fe54:	e7eb      	b.n	800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe56:	2305      	movs	r3, #5
 800fe58:	6023      	str	r3, [r4, #0]
 800fe5a:	e7f7      	b.n	800fe4c <rmw_validate_namespace_with_size+0x60>
 800fe5c:	2304      	movs	r3, #4
 800fe5e:	6023      	str	r3, [r4, #0]
 800fe60:	e7f4      	b.n	800fe4c <rmw_validate_namespace_with_size+0x60>
 800fe62:	2303      	movs	r3, #3
 800fe64:	6023      	str	r3, [r4, #0]
 800fe66:	e7f1      	b.n	800fe4c <rmw_validate_namespace_with_size+0x60>
 800fe68:	2302      	movs	r3, #2
 800fe6a:	6023      	str	r3, [r4, #0]
 800fe6c:	e7ee      	b.n	800fe4c <rmw_validate_namespace_with_size+0x60>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	e7eb      	b.n	800fe4c <rmw_validate_namespace_with_size+0x60>
 800fe74:	4a03      	ldr	r2, [pc, #12]	@ (800fe84 <rmw_validate_namespace_with_size+0x98>)
 800fe76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fe7a:	a802      	add	r0, sp, #8
 800fe7c:	f7ff fd36 	bl	800f8ec <rcutils_snprintf>
 800fe80:	2001      	movs	r0, #1
 800fe82:	e7d4      	b.n	800fe2e <rmw_validate_namespace_with_size+0x42>
 800fe84:	0801530c 	.word	0x0801530c

0800fe88 <rmw_validate_namespace>:
 800fe88:	b168      	cbz	r0, 800fea6 <rmw_validate_namespace+0x1e>
 800fe8a:	b570      	push	{r4, r5, r6, lr}
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	4616      	mov	r6, r2
 800fe90:	4604      	mov	r4, r0
 800fe92:	f7f0 f9c7 	bl	8000224 <strlen>
 800fe96:	4633      	mov	r3, r6
 800fe98:	4601      	mov	r1, r0
 800fe9a:	462a      	mov	r2, r5
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fea2:	f7ff bfa3 	b.w	800fdec <rmw_validate_namespace_with_size>
 800fea6:	200b      	movs	r0, #11
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop

0800feac <rmw_namespace_validation_result_string>:
 800feac:	2807      	cmp	r0, #7
 800feae:	bf9a      	itte	ls
 800feb0:	4b02      	ldrls	r3, [pc, #8]	@ (800febc <rmw_namespace_validation_result_string+0x10>)
 800feb2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800feb6:	4802      	ldrhi	r0, [pc, #8]	@ (800fec0 <rmw_namespace_validation_result_string+0x14>)
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	08015504 	.word	0x08015504
 800fec0:	0801535c 	.word	0x0801535c

0800fec4 <rmw_validate_node_name>:
 800fec4:	2800      	cmp	r0, #0
 800fec6:	d03b      	beq.n	800ff40 <rmw_validate_node_name+0x7c>
 800fec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fecc:	460d      	mov	r5, r1
 800fece:	2900      	cmp	r1, #0
 800fed0:	d038      	beq.n	800ff44 <rmw_validate_node_name+0x80>
 800fed2:	4616      	mov	r6, r2
 800fed4:	4604      	mov	r4, r0
 800fed6:	f7f0 f9a5 	bl	8000224 <strlen>
 800feda:	b1e0      	cbz	r0, 800ff16 <rmw_validate_node_name+0x52>
 800fedc:	1e63      	subs	r3, r4, #1
 800fede:	eb03 0800 	add.w	r8, r3, r0
 800fee2:	f1c4 0101 	rsb	r1, r4, #1
 800fee6:	18cf      	adds	r7, r1, r3
 800fee8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800feec:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800fef0:	f02e 0c20 	bic.w	ip, lr, #32
 800fef4:	2a09      	cmp	r2, #9
 800fef6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800fefa:	d914      	bls.n	800ff26 <rmw_validate_node_name+0x62>
 800fefc:	f1bc 0f19 	cmp.w	ip, #25
 800ff00:	d911      	bls.n	800ff26 <rmw_validate_node_name+0x62>
 800ff02:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800ff06:	d00e      	beq.n	800ff26 <rmw_validate_node_name+0x62>
 800ff08:	2302      	movs	r3, #2
 800ff0a:	602b      	str	r3, [r5, #0]
 800ff0c:	b106      	cbz	r6, 800ff10 <rmw_validate_node_name+0x4c>
 800ff0e:	6037      	str	r7, [r6, #0]
 800ff10:	2000      	movs	r0, #0
 800ff12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff16:	2301      	movs	r3, #1
 800ff18:	602b      	str	r3, [r5, #0]
 800ff1a:	2e00      	cmp	r6, #0
 800ff1c:	d0f8      	beq.n	800ff10 <rmw_validate_node_name+0x4c>
 800ff1e:	2000      	movs	r0, #0
 800ff20:	6030      	str	r0, [r6, #0]
 800ff22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff26:	4543      	cmp	r3, r8
 800ff28:	d1dd      	bne.n	800fee6 <rmw_validate_node_name+0x22>
 800ff2a:	7822      	ldrb	r2, [r4, #0]
 800ff2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff64 <rmw_validate_node_name+0xa0>)
 800ff2e:	5cd3      	ldrb	r3, [r2, r3]
 800ff30:	f013 0304 	ands.w	r3, r3, #4
 800ff34:	d110      	bne.n	800ff58 <rmw_validate_node_name+0x94>
 800ff36:	28ff      	cmp	r0, #255	@ 0xff
 800ff38:	d806      	bhi.n	800ff48 <rmw_validate_node_name+0x84>
 800ff3a:	602b      	str	r3, [r5, #0]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	e7e8      	b.n	800ff12 <rmw_validate_node_name+0x4e>
 800ff40:	200b      	movs	r0, #11
 800ff42:	4770      	bx	lr
 800ff44:	200b      	movs	r0, #11
 800ff46:	e7e4      	b.n	800ff12 <rmw_validate_node_name+0x4e>
 800ff48:	2204      	movs	r2, #4
 800ff4a:	602a      	str	r2, [r5, #0]
 800ff4c:	2e00      	cmp	r6, #0
 800ff4e:	d0df      	beq.n	800ff10 <rmw_validate_node_name+0x4c>
 800ff50:	22fe      	movs	r2, #254	@ 0xfe
 800ff52:	6032      	str	r2, [r6, #0]
 800ff54:	4618      	mov	r0, r3
 800ff56:	e7dc      	b.n	800ff12 <rmw_validate_node_name+0x4e>
 800ff58:	2303      	movs	r3, #3
 800ff5a:	602b      	str	r3, [r5, #0]
 800ff5c:	2e00      	cmp	r6, #0
 800ff5e:	d1de      	bne.n	800ff1e <rmw_validate_node_name+0x5a>
 800ff60:	e7d6      	b.n	800ff10 <rmw_validate_node_name+0x4c>
 800ff62:	bf00      	nop
 800ff64:	08015cd4 	.word	0x08015cd4

0800ff68 <rmw_node_name_validation_result_string>:
 800ff68:	2804      	cmp	r0, #4
 800ff6a:	bf9a      	itte	ls
 800ff6c:	4b02      	ldrls	r3, [pc, #8]	@ (800ff78 <rmw_node_name_validation_result_string+0x10>)
 800ff6e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ff72:	4802      	ldrhi	r0, [pc, #8]	@ (800ff7c <rmw_node_name_validation_result_string+0x14>)
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	08015610 	.word	0x08015610
 800ff7c:	08015524 	.word	0x08015524

0800ff80 <get_memory>:
 800ff80:	4603      	mov	r3, r0
 800ff82:	6840      	ldr	r0, [r0, #4]
 800ff84:	b158      	cbz	r0, 800ff9e <get_memory+0x1e>
 800ff86:	6842      	ldr	r2, [r0, #4]
 800ff88:	605a      	str	r2, [r3, #4]
 800ff8a:	b10a      	cbz	r2, 800ff90 <get_memory+0x10>
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	6011      	str	r1, [r2, #0]
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	6042      	str	r2, [r0, #4]
 800ff94:	b102      	cbz	r2, 800ff98 <get_memory+0x18>
 800ff96:	6010      	str	r0, [r2, #0]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	6002      	str	r2, [r0, #0]
 800ff9c:	6018      	str	r0, [r3, #0]
 800ff9e:	4770      	bx	lr

0800ffa0 <put_memory>:
 800ffa0:	680b      	ldr	r3, [r1, #0]
 800ffa2:	b10b      	cbz	r3, 800ffa8 <put_memory+0x8>
 800ffa4:	684a      	ldr	r2, [r1, #4]
 800ffa6:	605a      	str	r2, [r3, #4]
 800ffa8:	684a      	ldr	r2, [r1, #4]
 800ffaa:	b102      	cbz	r2, 800ffae <put_memory+0xe>
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	6803      	ldr	r3, [r0, #0]
 800ffb0:	428b      	cmp	r3, r1
 800ffb2:	6843      	ldr	r3, [r0, #4]
 800ffb4:	bf08      	it	eq
 800ffb6:	6002      	streq	r2, [r0, #0]
 800ffb8:	604b      	str	r3, [r1, #4]
 800ffba:	b103      	cbz	r3, 800ffbe <put_memory+0x1e>
 800ffbc:	6019      	str	r1, [r3, #0]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	600b      	str	r3, [r1, #0]
 800ffc2:	6041      	str	r1, [r0, #4]
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop

0800ffc8 <rmw_get_implementation_identifier>:
 800ffc8:	4b01      	ldr	r3, [pc, #4]	@ (800ffd0 <rmw_get_implementation_identifier+0x8>)
 800ffca:	6818      	ldr	r0, [r3, #0]
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	0801563c 	.word	0x0801563c

0800ffd4 <rmw_init_options_init>:
 800ffd4:	b084      	sub	sp, #16
 800ffd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd8:	b083      	sub	sp, #12
 800ffda:	ad09      	add	r5, sp, #36	@ 0x24
 800ffdc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ffe0:	b130      	cbz	r0, 800fff0 <rmw_init_options_init+0x1c>
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f7fa fbd9 	bl	800a79c <rcutils_allocator_is_valid>
 800ffea:	b108      	cbz	r0, 800fff0 <rmw_init_options_init+0x1c>
 800ffec:	68a6      	ldr	r6, [r4, #8]
 800ffee:	b12e      	cbz	r6, 800fffc <rmw_init_options_init+0x28>
 800fff0:	200b      	movs	r0, #11
 800fff2:	b003      	add	sp, #12
 800fff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fff8:	b004      	add	sp, #16
 800fffa:	4770      	bx	lr
 800fffc:	2200      	movs	r2, #0
 800fffe:	2300      	movs	r3, #0
 8010000:	e9c4 2300 	strd	r2, r3, [r4]
 8010004:	4b20      	ldr	r3, [pc, #128]	@ (8010088 <rmw_init_options_init+0xb4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	60a3      	str	r3, [r4, #8]
 801000a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801000c:	f104 0c20 	add.w	ip, r4, #32
 8010010:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010014:	466f      	mov	r7, sp
 8010016:	682b      	ldr	r3, [r5, #0]
 8010018:	f8cc 3000 	str.w	r3, [ip]
 801001c:	4638      	mov	r0, r7
 801001e:	61e6      	str	r6, [r4, #28]
 8010020:	60e6      	str	r6, [r4, #12]
 8010022:	f7ff fe69 	bl	800fcf8 <rmw_get_default_security_options>
 8010026:	e897 0003 	ldmia.w	r7, {r0, r1}
 801002a:	f104 0310 	add.w	r3, r4, #16
 801002e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010032:	2203      	movs	r2, #3
 8010034:	4815      	ldr	r0, [pc, #84]	@ (801008c <rmw_init_options_init+0xb8>)
 8010036:	4916      	ldr	r1, [pc, #88]	@ (8010090 <rmw_init_options_init+0xbc>)
 8010038:	7626      	strb	r6, [r4, #24]
 801003a:	f7fa feaf 	bl	800ad9c <rmw_uxrce_init_init_options_impl_memory>
 801003e:	4813      	ldr	r0, [pc, #76]	@ (801008c <rmw_init_options_init+0xb8>)
 8010040:	f7ff ff9e 	bl	800ff80 <get_memory>
 8010044:	b1f0      	cbz	r0, 8010084 <rmw_init_options_init+0xb0>
 8010046:	4a13      	ldr	r2, [pc, #76]	@ (8010094 <rmw_init_options_init+0xc0>)
 8010048:	6883      	ldr	r3, [r0, #8]
 801004a:	6851      	ldr	r1, [r2, #4]
 801004c:	7810      	ldrb	r0, [r2, #0]
 801004e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010050:	7418      	strb	r0, [r3, #16]
 8010052:	6159      	str	r1, [r3, #20]
 8010054:	68d1      	ldr	r1, [r2, #12]
 8010056:	61d9      	str	r1, [r3, #28]
 8010058:	6911      	ldr	r1, [r2, #16]
 801005a:	6219      	str	r1, [r3, #32]
 801005c:	6951      	ldr	r1, [r2, #20]
 801005e:	6892      	ldr	r2, [r2, #8]
 8010060:	619a      	str	r2, [r3, #24]
 8010062:	6259      	str	r1, [r3, #36]	@ 0x24
 8010064:	f7fd fc82 	bl	800d96c <uxr_nanos>
 8010068:	f003 fd1a 	bl	8013aa0 <srand>
 801006c:	f003 fd46 	bl	8013afc <rand>
 8010070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010072:	6298      	str	r0, [r3, #40]	@ 0x28
 8010074:	2800      	cmp	r0, #0
 8010076:	d0f9      	beq.n	801006c <rmw_init_options_init+0x98>
 8010078:	2000      	movs	r0, #0
 801007a:	b003      	add	sp, #12
 801007c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010080:	b004      	add	sp, #16
 8010082:	4770      	bx	lr
 8010084:	2001      	movs	r0, #1
 8010086:	e7b4      	b.n	800fff2 <rmw_init_options_init+0x1e>
 8010088:	0801563c 	.word	0x0801563c
 801008c:	20010c8c 	.word	0x20010c8c
 8010090:	2000c528 	.word	0x2000c528
 8010094:	2000c3b4 	.word	0x2000c3b4

08010098 <rmw_init_options_copy>:
 8010098:	b570      	push	{r4, r5, r6, lr}
 801009a:	b088      	sub	sp, #32
 801009c:	b160      	cbz	r0, 80100b8 <rmw_init_options_copy+0x20>
 801009e:	460d      	mov	r5, r1
 80100a0:	b151      	cbz	r1, 80100b8 <rmw_init_options_copy+0x20>
 80100a2:	4604      	mov	r4, r0
 80100a4:	6880      	ldr	r0, [r0, #8]
 80100a6:	b128      	cbz	r0, 80100b4 <rmw_init_options_copy+0x1c>
 80100a8:	4b33      	ldr	r3, [pc, #204]	@ (8010178 <rmw_init_options_copy+0xe0>)
 80100aa:	6819      	ldr	r1, [r3, #0]
 80100ac:	f7f0 f8b0 	bl	8000210 <strcmp>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d154      	bne.n	801015e <rmw_init_options_copy+0xc6>
 80100b4:	68ab      	ldr	r3, [r5, #8]
 80100b6:	b11b      	cbz	r3, 80100c0 <rmw_init_options_copy+0x28>
 80100b8:	240b      	movs	r4, #11
 80100ba:	4620      	mov	r0, r4
 80100bc:	b008      	add	sp, #32
 80100be:	bd70      	pop	{r4, r5, r6, pc}
 80100c0:	4623      	mov	r3, r4
 80100c2:	462a      	mov	r2, r5
 80100c4:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 80100c8:	f8d3 c000 	ldr.w	ip, [r3]
 80100cc:	6858      	ldr	r0, [r3, #4]
 80100ce:	6899      	ldr	r1, [r3, #8]
 80100d0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80100d4:	f8c2 e00c 	str.w	lr, [r2, #12]
 80100d8:	3310      	adds	r3, #16
 80100da:	42b3      	cmp	r3, r6
 80100dc:	f8c2 c000 	str.w	ip, [r2]
 80100e0:	6050      	str	r0, [r2, #4]
 80100e2:	6091      	str	r1, [r2, #8]
 80100e4:	f102 0210 	add.w	r2, r2, #16
 80100e8:	d1ee      	bne.n	80100c8 <rmw_init_options_copy+0x30>
 80100ea:	6819      	ldr	r1, [r3, #0]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	6053      	str	r3, [r2, #4]
 80100f0:	6011      	str	r1, [r2, #0]
 80100f2:	f104 0e20 	add.w	lr, r4, #32
 80100f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80100fa:	f10d 0c0c 	add.w	ip, sp, #12
 80100fe:	4666      	mov	r6, ip
 8010100:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010104:	f8de 3000 	ldr.w	r3, [lr]
 8010108:	f8cc 3000 	str.w	r3, [ip]
 801010c:	4630      	mov	r0, r6
 801010e:	f7fa fb45 	bl	800a79c <rcutils_allocator_is_valid>
 8010112:	2800      	cmp	r0, #0
 8010114:	d0d0      	beq.n	80100b8 <rmw_init_options_copy+0x20>
 8010116:	ab08      	add	r3, sp, #32
 8010118:	e913 0003 	ldmdb	r3, {r0, r1}
 801011c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010120:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010124:	69e0      	ldr	r0, [r4, #28]
 8010126:	f7ff fc0d 	bl	800f944 <rcutils_strdup>
 801012a:	61e8      	str	r0, [r5, #28]
 801012c:	69e3      	ldr	r3, [r4, #28]
 801012e:	b103      	cbz	r3, 8010132 <rmw_init_options_copy+0x9a>
 8010130:	b1f8      	cbz	r0, 8010172 <rmw_init_options_copy+0xda>
 8010132:	4812      	ldr	r0, [pc, #72]	@ (801017c <rmw_init_options_copy+0xe4>)
 8010134:	f7ff ff24 	bl	800ff80 <get_memory>
 8010138:	b1a8      	cbz	r0, 8010166 <rmw_init_options_copy+0xce>
 801013a:	6883      	ldr	r3, [r0, #8]
 801013c:	636b      	str	r3, [r5, #52]	@ 0x34
 801013e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010140:	f102 0c10 	add.w	ip, r2, #16
 8010144:	f103 0510 	add.w	r5, r3, #16
 8010148:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801014c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801014e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010152:	2400      	movs	r4, #0
 8010154:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010158:	4620      	mov	r0, r4
 801015a:	b008      	add	sp, #32
 801015c:	bd70      	pop	{r4, r5, r6, pc}
 801015e:	240c      	movs	r4, #12
 8010160:	4620      	mov	r0, r4
 8010162:	b008      	add	sp, #32
 8010164:	bd70      	pop	{r4, r5, r6, pc}
 8010166:	9b04      	ldr	r3, [sp, #16]
 8010168:	9907      	ldr	r1, [sp, #28]
 801016a:	69e8      	ldr	r0, [r5, #28]
 801016c:	4798      	blx	r3
 801016e:	2401      	movs	r4, #1
 8010170:	e7a3      	b.n	80100ba <rmw_init_options_copy+0x22>
 8010172:	240a      	movs	r4, #10
 8010174:	e7a1      	b.n	80100ba <rmw_init_options_copy+0x22>
 8010176:	bf00      	nop
 8010178:	0801563c 	.word	0x0801563c
 801017c:	20010c8c 	.word	0x20010c8c

08010180 <rmw_init_options_fini>:
 8010180:	2800      	cmp	r0, #0
 8010182:	d041      	beq.n	8010208 <rmw_init_options_fini+0x88>
 8010184:	b510      	push	{r4, lr}
 8010186:	4604      	mov	r4, r0
 8010188:	b08e      	sub	sp, #56	@ 0x38
 801018a:	3020      	adds	r0, #32
 801018c:	f7fa fb06 	bl	800a79c <rcutils_allocator_is_valid>
 8010190:	b380      	cbz	r0, 80101f4 <rmw_init_options_fini+0x74>
 8010192:	68a0      	ldr	r0, [r4, #8]
 8010194:	b120      	cbz	r0, 80101a0 <rmw_init_options_fini+0x20>
 8010196:	4b1e      	ldr	r3, [pc, #120]	@ (8010210 <rmw_init_options_fini+0x90>)
 8010198:	6819      	ldr	r1, [r3, #0]
 801019a:	f7f0 f839 	bl	8000210 <strcmp>
 801019e:	bb88      	cbnz	r0, 8010204 <rmw_init_options_fini+0x84>
 80101a0:	4b1c      	ldr	r3, [pc, #112]	@ (8010214 <rmw_init_options_fini+0x94>)
 80101a2:	6819      	ldr	r1, [r3, #0]
 80101a4:	b351      	cbz	r1, 80101fc <rmw_init_options_fini+0x7c>
 80101a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80101a8:	e001      	b.n	80101ae <rmw_init_options_fini+0x2e>
 80101aa:	6849      	ldr	r1, [r1, #4]
 80101ac:	b331      	cbz	r1, 80101fc <rmw_init_options_fini+0x7c>
 80101ae:	688b      	ldr	r3, [r1, #8]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d1fa      	bne.n	80101aa <rmw_init_options_fini+0x2a>
 80101b4:	4817      	ldr	r0, [pc, #92]	@ (8010214 <rmw_init_options_fini+0x94>)
 80101b6:	f7ff fef3 	bl	800ffa0 <put_memory>
 80101ba:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80101bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80101be:	69e0      	ldr	r0, [r4, #28]
 80101c0:	4798      	blx	r3
 80101c2:	4668      	mov	r0, sp
 80101c4:	f7ff fd88 	bl	800fcd8 <rmw_get_zero_initialized_init_options>
 80101c8:	46ee      	mov	lr, sp
 80101ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101ce:	46a4      	mov	ip, r4
 80101d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80101e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80101ec:	2300      	movs	r3, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	b00e      	add	sp, #56	@ 0x38
 80101f2:	bd10      	pop	{r4, pc}
 80101f4:	230b      	movs	r3, #11
 80101f6:	4618      	mov	r0, r3
 80101f8:	b00e      	add	sp, #56	@ 0x38
 80101fa:	bd10      	pop	{r4, pc}
 80101fc:	2301      	movs	r3, #1
 80101fe:	4618      	mov	r0, r3
 8010200:	b00e      	add	sp, #56	@ 0x38
 8010202:	bd10      	pop	{r4, pc}
 8010204:	230c      	movs	r3, #12
 8010206:	e7f2      	b.n	80101ee <rmw_init_options_fini+0x6e>
 8010208:	230b      	movs	r3, #11
 801020a:	4618      	mov	r0, r3
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	0801563c 	.word	0x0801563c
 8010214:	20010c8c 	.word	0x20010c8c

08010218 <rmw_init>:
 8010218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801021c:	b083      	sub	sp, #12
 801021e:	2800      	cmp	r0, #0
 8010220:	f000 80d3 	beq.w	80103ca <rmw_init+0x1b2>
 8010224:	460e      	mov	r6, r1
 8010226:	2900      	cmp	r1, #0
 8010228:	f000 80cf 	beq.w	80103ca <rmw_init+0x1b2>
 801022c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801022e:	4605      	mov	r5, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	f000 80ca 	beq.w	80103ca <rmw_init+0x1b2>
 8010236:	4b78      	ldr	r3, [pc, #480]	@ (8010418 <rmw_init+0x200>)
 8010238:	6880      	ldr	r0, [r0, #8]
 801023a:	681f      	ldr	r7, [r3, #0]
 801023c:	b128      	cbz	r0, 801024a <rmw_init+0x32>
 801023e:	4639      	mov	r1, r7
 8010240:	f7ef ffe6 	bl	8000210 <strcmp>
 8010244:	2800      	cmp	r0, #0
 8010246:	f040 80ca 	bne.w	80103de <rmw_init+0x1c6>
 801024a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801024e:	4c73      	ldr	r4, [pc, #460]	@ (801041c <rmw_init+0x204>)
 8010250:	4973      	ldr	r1, [pc, #460]	@ (8010420 <rmw_init+0x208>)
 8010252:	4874      	ldr	r0, [pc, #464]	@ (8010424 <rmw_init+0x20c>)
 8010254:	60b7      	str	r7, [r6, #8]
 8010256:	e9c6 2300 	strd	r2, r3, [r6]
 801025a:	68eb      	ldr	r3, [r5, #12]
 801025c:	64b3      	str	r3, [r6, #72]	@ 0x48
 801025e:	2201      	movs	r2, #1
 8010260:	f7fa fd3c 	bl	800acdc <rmw_uxrce_init_session_memory>
 8010264:	4620      	mov	r0, r4
 8010266:	4970      	ldr	r1, [pc, #448]	@ (8010428 <rmw_init+0x210>)
 8010268:	2204      	movs	r2, #4
 801026a:	f7fa fd77 	bl	800ad5c <rmw_uxrce_init_static_input_buffer_memory>
 801026e:	f04f 0800 	mov.w	r8, #0
 8010272:	486c      	ldr	r0, [pc, #432]	@ (8010424 <rmw_init+0x20c>)
 8010274:	f884 800d 	strb.w	r8, [r4, #13]
 8010278:	f7ff fe82 	bl	800ff80 <get_memory>
 801027c:	2800      	cmp	r0, #0
 801027e:	f000 80a9 	beq.w	80103d4 <rmw_init+0x1bc>
 8010282:	6884      	ldr	r4, [r0, #8]
 8010284:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010286:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010288:	f890 c010 	ldrb.w	ip, [r0, #16]
 801028c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010290:	9101      	str	r1, [sp, #4]
 8010292:	6a00      	ldr	r0, [r0, #32]
 8010294:	9000      	str	r0, [sp, #0]
 8010296:	f104 0910 	add.w	r9, r4, #16
 801029a:	4661      	mov	r1, ip
 801029c:	4648      	mov	r0, r9
 801029e:	f000 fdbf 	bl	8010e20 <uxr_set_custom_transport_callbacks>
 80102a2:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80102a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80102aa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 80102ae:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 80102b2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 80102b6:	495d      	ldr	r1, [pc, #372]	@ (801042c <rmw_init+0x214>)
 80102b8:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 80102bc:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 80102c0:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 80102c4:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 80102c8:	4859      	ldr	r0, [pc, #356]	@ (8010430 <rmw_init+0x218>)
 80102ca:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 80102ce:	2201      	movs	r2, #1
 80102d0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 80102d2:	f7fa fce3 	bl	800ac9c <rmw_uxrce_init_node_memory>
 80102d6:	4957      	ldr	r1, [pc, #348]	@ (8010434 <rmw_init+0x21c>)
 80102d8:	4857      	ldr	r0, [pc, #348]	@ (8010438 <rmw_init+0x220>)
 80102da:	2205      	movs	r2, #5
 80102dc:	f7fa fcbe 	bl	800ac5c <rmw_uxrce_init_subscription_memory>
 80102e0:	4956      	ldr	r1, [pc, #344]	@ (801043c <rmw_init+0x224>)
 80102e2:	4857      	ldr	r0, [pc, #348]	@ (8010440 <rmw_init+0x228>)
 80102e4:	220a      	movs	r2, #10
 80102e6:	f7fa fc99 	bl	800ac1c <rmw_uxrce_init_publisher_memory>
 80102ea:	4956      	ldr	r1, [pc, #344]	@ (8010444 <rmw_init+0x22c>)
 80102ec:	4856      	ldr	r0, [pc, #344]	@ (8010448 <rmw_init+0x230>)
 80102ee:	2201      	movs	r2, #1
 80102f0:	f7fa fc54 	bl	800ab9c <rmw_uxrce_init_service_memory>
 80102f4:	4955      	ldr	r1, [pc, #340]	@ (801044c <rmw_init+0x234>)
 80102f6:	4856      	ldr	r0, [pc, #344]	@ (8010450 <rmw_init+0x238>)
 80102f8:	2201      	movs	r2, #1
 80102fa:	f7fa fc6f 	bl	800abdc <rmw_uxrce_init_client_memory>
 80102fe:	4955      	ldr	r1, [pc, #340]	@ (8010454 <rmw_init+0x23c>)
 8010300:	4855      	ldr	r0, [pc, #340]	@ (8010458 <rmw_init+0x240>)
 8010302:	220f      	movs	r2, #15
 8010304:	f7fa fd0a 	bl	800ad1c <rmw_uxrce_init_topic_memory>
 8010308:	4954      	ldr	r1, [pc, #336]	@ (801045c <rmw_init+0x244>)
 801030a:	4855      	ldr	r0, [pc, #340]	@ (8010460 <rmw_init+0x248>)
 801030c:	2203      	movs	r2, #3
 801030e:	f7fa fd45 	bl	800ad9c <rmw_uxrce_init_init_options_impl_memory>
 8010312:	4954      	ldr	r1, [pc, #336]	@ (8010464 <rmw_init+0x24c>)
 8010314:	4854      	ldr	r0, [pc, #336]	@ (8010468 <rmw_init+0x250>)
 8010316:	2204      	movs	r2, #4
 8010318:	f7fa fd60 	bl	800addc <rmw_uxrce_init_wait_set_memory>
 801031c:	4953      	ldr	r1, [pc, #332]	@ (801046c <rmw_init+0x254>)
 801031e:	4854      	ldr	r0, [pc, #336]	@ (8010470 <rmw_init+0x258>)
 8010320:	2204      	movs	r2, #4
 8010322:	f7fa fd7b 	bl	800ae1c <rmw_uxrce_init_guard_condition_memory>
 8010326:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010328:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801032a:	4642      	mov	r2, r8
 801032c:	f000 fb06 	bl	801093c <rmw_uxrce_transport_init>
 8010330:	4607      	mov	r7, r0
 8010332:	2800      	cmp	r0, #0
 8010334:	d158      	bne.n	80103e8 <rmw_init+0x1d0>
 8010336:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010338:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801033c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801033e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010342:	4628      	mov	r0, r5
 8010344:	f7fc f9b0 	bl	800c6a8 <uxr_init_session>
 8010348:	494a      	ldr	r1, [pc, #296]	@ (8010474 <rmw_init+0x25c>)
 801034a:	4622      	mov	r2, r4
 801034c:	4628      	mov	r0, r5
 801034e:	f7fc f9cf 	bl	800c6f0 <uxr_set_topic_callback>
 8010352:	4949      	ldr	r1, [pc, #292]	@ (8010478 <rmw_init+0x260>)
 8010354:	463a      	mov	r2, r7
 8010356:	4628      	mov	r0, r5
 8010358:	f7fc f9c6 	bl	800c6e8 <uxr_set_status_callback>
 801035c:	4947      	ldr	r1, [pc, #284]	@ (801047c <rmw_init+0x264>)
 801035e:	463a      	mov	r2, r7
 8010360:	4628      	mov	r0, r5
 8010362:	f7fc f9c9 	bl	800c6f8 <uxr_set_request_callback>
 8010366:	4946      	ldr	r1, [pc, #280]	@ (8010480 <rmw_init+0x268>)
 8010368:	463a      	mov	r2, r7
 801036a:	4628      	mov	r0, r5
 801036c:	f7fc f9c8 	bl	800c700 <uxr_set_reply_callback>
 8010370:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010374:	2304      	movs	r3, #4
 8010376:	0092      	lsls	r2, r2, #2
 8010378:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801037c:	4628      	mov	r0, r5
 801037e:	f7fc f9fd 	bl	800c77c <uxr_create_input_reliable_stream>
 8010382:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010386:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801038a:	0092      	lsls	r2, r2, #2
 801038c:	2304      	movs	r3, #4
 801038e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010392:	4628      	mov	r0, r5
 8010394:	f7fc f9ca 	bl	800c72c <uxr_create_output_reliable_stream>
 8010398:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801039c:	4628      	mov	r0, r5
 801039e:	f7fc f9e7 	bl	800c770 <uxr_create_input_best_effort_stream>
 80103a2:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 80103a6:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 80103aa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 80103ae:	3114      	adds	r1, #20
 80103b0:	4628      	mov	r0, r5
 80103b2:	f7fc f9a9 	bl	800c708 <uxr_create_output_best_effort_stream>
 80103b6:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 80103ba:	4628      	mov	r0, r5
 80103bc:	f7fc fefa 	bl	800d1b4 <uxr_create_session>
 80103c0:	b1f8      	cbz	r0, 8010402 <rmw_init+0x1ea>
 80103c2:	4638      	mov	r0, r7
 80103c4:	b003      	add	sp, #12
 80103c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103ca:	270b      	movs	r7, #11
 80103cc:	4638      	mov	r0, r7
 80103ce:	b003      	add	sp, #12
 80103d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103d4:	2701      	movs	r7, #1
 80103d6:	4638      	mov	r0, r7
 80103d8:	b003      	add	sp, #12
 80103da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103de:	270c      	movs	r7, #12
 80103e0:	4638      	mov	r0, r7
 80103e2:	b003      	add	sp, #12
 80103e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103e8:	4648      	mov	r0, r9
 80103ea:	f000 fd5b 	bl	8010ea4 <uxr_close_custom_transport>
 80103ee:	480d      	ldr	r0, [pc, #52]	@ (8010424 <rmw_init+0x20c>)
 80103f0:	4621      	mov	r1, r4
 80103f2:	f7ff fdd5 	bl	800ffa0 <put_memory>
 80103f6:	4638      	mov	r0, r7
 80103f8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 80103fc:	b003      	add	sp, #12
 80103fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010402:	4648      	mov	r0, r9
 8010404:	f000 fd4e 	bl	8010ea4 <uxr_close_custom_transport>
 8010408:	4806      	ldr	r0, [pc, #24]	@ (8010424 <rmw_init+0x20c>)
 801040a:	4621      	mov	r1, r4
 801040c:	f7ff fdc8 	bl	800ffa0 <put_memory>
 8010410:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010412:	2701      	movs	r7, #1
 8010414:	e7d5      	b.n	80103c2 <rmw_init+0x1aa>
 8010416:	bf00      	nop
 8010418:	0801563c 	.word	0x0801563c
 801041c:	20010cdc 	.word	0x20010cdc
 8010420:	2000cf88 	.word	0x2000cf88
 8010424:	20010ccc 	.word	0x20010ccc
 8010428:	2000e530 	.word	0x2000e530
 801042c:	2000c5ac 	.word	0x2000c5ac
 8010430:	20010c9c 	.word	0x20010c9c
 8010434:	20010630 	.word	0x20010630
 8010438:	20010cec 	.word	0x20010cec
 801043c:	2000c650 	.word	0x2000c650
 8010440:	20010cac 	.word	0x20010cac
 8010444:	2000cec0 	.word	0x2000cec0
 8010448:	20010cbc 	.word	0x20010cbc
 801044c:	2000c3e0 	.word	0x2000c3e0
 8010450:	2000c3d0 	.word	0x2000c3d0
 8010454:	20010a68 	.word	0x20010a68
 8010458:	20010cfc 	.word	0x20010cfc
 801045c:	2000c528 	.word	0x2000c528
 8010460:	20010c8c 	.word	0x20010c8c
 8010464:	20010c0c 	.word	0x20010c0c
 8010468:	20010d0c 	.word	0x20010d0c
 801046c:	2000c4a8 	.word	0x2000c4a8
 8010470:	20010c7c 	.word	0x20010c7c
 8010474:	08012ac1 	.word	0x08012ac1
 8010478:	08012ab9 	.word	0x08012ab9
 801047c:	08012b59 	.word	0x08012b59
 8010480:	08012bf5 	.word	0x08012bf5

08010484 <rmw_context_fini>:
 8010484:	4b17      	ldr	r3, [pc, #92]	@ (80104e4 <rmw_context_fini+0x60>)
 8010486:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010488:	b570      	push	{r4, r5, r6, lr}
 801048a:	681c      	ldr	r4, [r3, #0]
 801048c:	4605      	mov	r5, r0
 801048e:	b334      	cbz	r4, 80104de <rmw_context_fini+0x5a>
 8010490:	2600      	movs	r6, #0
 8010492:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010496:	6902      	ldr	r2, [r0, #16]
 8010498:	428a      	cmp	r2, r1
 801049a:	d018      	beq.n	80104ce <rmw_context_fini+0x4a>
 801049c:	2c00      	cmp	r4, #0
 801049e:	d1f8      	bne.n	8010492 <rmw_context_fini+0xe>
 80104a0:	b189      	cbz	r1, 80104c6 <rmw_context_fini+0x42>
 80104a2:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 80104a6:	789b      	ldrb	r3, [r3, #2]
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 80104ae:	bf14      	ite	ne
 80104b0:	210a      	movne	r1, #10
 80104b2:	2100      	moveq	r1, #0
 80104b4:	f7fc fe56 	bl	800d164 <uxr_delete_session_retries>
 80104b8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80104ba:	f7fa fccf 	bl	800ae5c <rmw_uxrce_fini_session_memory>
 80104be:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80104c0:	3010      	adds	r0, #16
 80104c2:	f000 fcef 	bl	8010ea4 <uxr_close_custom_transport>
 80104c6:	2300      	movs	r3, #0
 80104c8:	64eb      	str	r3, [r5, #76]	@ 0x4c
 80104ca:	4630      	mov	r0, r6
 80104cc:	bd70      	pop	{r4, r5, r6, pc}
 80104ce:	3018      	adds	r0, #24
 80104d0:	f000 f90e 	bl	80106f0 <rmw_destroy_node>
 80104d4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80104d6:	4606      	mov	r6, r0
 80104d8:	2c00      	cmp	r4, #0
 80104da:	d1da      	bne.n	8010492 <rmw_context_fini+0xe>
 80104dc:	e7e0      	b.n	80104a0 <rmw_context_fini+0x1c>
 80104de:	4626      	mov	r6, r4
 80104e0:	e7de      	b.n	80104a0 <rmw_context_fini+0x1c>
 80104e2:	bf00      	nop
 80104e4:	20010c9c 	.word	0x20010c9c

080104e8 <create_topic>:
 80104e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ec:	4605      	mov	r5, r0
 80104ee:	b084      	sub	sp, #16
 80104f0:	4822      	ldr	r0, [pc, #136]	@ (801057c <create_topic+0x94>)
 80104f2:	460f      	mov	r7, r1
 80104f4:	4616      	mov	r6, r2
 80104f6:	f7ff fd43 	bl	800ff80 <get_memory>
 80104fa:	4604      	mov	r4, r0
 80104fc:	2800      	cmp	r0, #0
 80104fe:	d039      	beq.n	8010574 <create_topic+0x8c>
 8010500:	692b      	ldr	r3, [r5, #16]
 8010502:	6884      	ldr	r4, [r0, #8]
 8010504:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8010584 <create_topic+0x9c>
 8010508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801050c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8010510:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8010514:	1c42      	adds	r2, r0, #1
 8010516:	2102      	movs	r1, #2
 8010518:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801051c:	f7fc f806 	bl	800c52c <uxr_object_id>
 8010520:	223c      	movs	r2, #60	@ 0x3c
 8010522:	6120      	str	r0, [r4, #16]
 8010524:	4641      	mov	r1, r8
 8010526:	4638      	mov	r0, r7
 8010528:	f7fa fdd0 	bl	800b0cc <generate_topic_name>
 801052c:	b1f0      	cbz	r0, 801056c <create_topic+0x84>
 801052e:	4f14      	ldr	r7, [pc, #80]	@ (8010580 <create_topic+0x98>)
 8010530:	4630      	mov	r0, r6
 8010532:	2264      	movs	r2, #100	@ 0x64
 8010534:	4639      	mov	r1, r7
 8010536:	f7fa fd99 	bl	800b06c <generate_type_name>
 801053a:	b1b8      	cbz	r0, 801056c <create_topic+0x84>
 801053c:	6928      	ldr	r0, [r5, #16]
 801053e:	2306      	movs	r3, #6
 8010540:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010544:	f8cd 8000 	str.w	r8, [sp]
 8010548:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801054c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010550:	6811      	ldr	r1, [r2, #0]
 8010552:	696b      	ldr	r3, [r5, #20]
 8010554:	6922      	ldr	r2, [r4, #16]
 8010556:	f7fb ff0d 	bl	800c374 <uxr_buffer_create_topic_bin>
 801055a:	4602      	mov	r2, r0
 801055c:	6928      	ldr	r0, [r5, #16]
 801055e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010562:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8010566:	f7fa fd4b 	bl	800b000 <run_xrce_session>
 801056a:	b918      	cbnz	r0, 8010574 <create_topic+0x8c>
 801056c:	4620      	mov	r0, r4
 801056e:	f7fa fceb 	bl	800af48 <rmw_uxrce_fini_topic_memory>
 8010572:	2400      	movs	r4, #0
 8010574:	4620      	mov	r0, r4
 8010576:	b004      	add	sp, #16
 8010578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801057c:	20010cfc 	.word	0x20010cfc
 8010580:	20010d78 	.word	0x20010d78
 8010584:	20010d3c 	.word	0x20010d3c

08010588 <destroy_topic>:
 8010588:	b538      	push	{r3, r4, r5, lr}
 801058a:	6985      	ldr	r5, [r0, #24]
 801058c:	b1d5      	cbz	r5, 80105c4 <destroy_topic+0x3c>
 801058e:	4604      	mov	r4, r0
 8010590:	6928      	ldr	r0, [r5, #16]
 8010592:	6922      	ldr	r2, [r4, #16]
 8010594:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010598:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801059c:	6819      	ldr	r1, [r3, #0]
 801059e:	f7fb fe6b 	bl	800c278 <uxr_buffer_delete_entity>
 80105a2:	4602      	mov	r2, r0
 80105a4:	6928      	ldr	r0, [r5, #16]
 80105a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80105aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80105ae:	f7fa fd27 	bl	800b000 <run_xrce_session>
 80105b2:	2800      	cmp	r0, #0
 80105b4:	4620      	mov	r0, r4
 80105b6:	bf14      	ite	ne
 80105b8:	2400      	movne	r4, #0
 80105ba:	2402      	moveq	r4, #2
 80105bc:	f7fa fcc4 	bl	800af48 <rmw_uxrce_fini_topic_memory>
 80105c0:	4620      	mov	r0, r4
 80105c2:	bd38      	pop	{r3, r4, r5, pc}
 80105c4:	2401      	movs	r4, #1
 80105c6:	4620      	mov	r0, r4
 80105c8:	bd38      	pop	{r3, r4, r5, pc}
 80105ca:	bf00      	nop

080105cc <create_node>:
 80105cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105d0:	b083      	sub	sp, #12
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d05f      	beq.n	8010696 <create_node+0xca>
 80105d6:	4606      	mov	r6, r0
 80105d8:	4835      	ldr	r0, [pc, #212]	@ (80106b0 <create_node+0xe4>)
 80105da:	460f      	mov	r7, r1
 80105dc:	4690      	mov	r8, r2
 80105de:	461d      	mov	r5, r3
 80105e0:	f7ff fcce 	bl	800ff80 <get_memory>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d056      	beq.n	8010696 <create_node+0xca>
 80105e8:	6884      	ldr	r4, [r0, #8]
 80105ea:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80105ec:	6123      	str	r3, [r4, #16]
 80105ee:	f7ff fceb 	bl	800ffc8 <rmw_get_implementation_identifier>
 80105f2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 80105f6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80105fa:	f8c4 9020 	str.w	r9, [r4, #32]
 80105fe:	4630      	mov	r0, r6
 8010600:	f7ef fe10 	bl	8000224 <strlen>
 8010604:	1c42      	adds	r2, r0, #1
 8010606:	2a3c      	cmp	r2, #60	@ 0x3c
 8010608:	f104 0518 	add.w	r5, r4, #24
 801060c:	d840      	bhi.n	8010690 <create_node+0xc4>
 801060e:	4648      	mov	r0, r9
 8010610:	4631      	mov	r1, r6
 8010612:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8010616:	f003 fdaa 	bl	801416e <memcpy>
 801061a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801061e:	4638      	mov	r0, r7
 8010620:	f7ef fe00 	bl	8000224 <strlen>
 8010624:	1c42      	adds	r2, r0, #1
 8010626:	2a3c      	cmp	r2, #60	@ 0x3c
 8010628:	d832      	bhi.n	8010690 <create_node+0xc4>
 801062a:	4639      	mov	r1, r7
 801062c:	4648      	mov	r0, r9
 801062e:	f003 fd9e 	bl	801416e <memcpy>
 8010632:	6923      	ldr	r3, [r4, #16]
 8010634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010638:	2101      	movs	r1, #1
 801063a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801063e:	1842      	adds	r2, r0, r1
 8010640:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 8010644:	f7fb ff72 	bl	800c52c <uxr_object_id>
 8010648:	6160      	str	r0, [r4, #20]
 801064a:	783b      	ldrb	r3, [r7, #0]
 801064c:	2b2f      	cmp	r3, #47	@ 0x2f
 801064e:	d127      	bne.n	80106a0 <create_node+0xd4>
 8010650:	787b      	ldrb	r3, [r7, #1]
 8010652:	bb2b      	cbnz	r3, 80106a0 <create_node+0xd4>
 8010654:	4a17      	ldr	r2, [pc, #92]	@ (80106b4 <create_node+0xe8>)
 8010656:	4818      	ldr	r0, [pc, #96]	@ (80106b8 <create_node+0xec>)
 8010658:	4633      	mov	r3, r6
 801065a:	213c      	movs	r1, #60	@ 0x3c
 801065c:	f003 fc0e 	bl	8013e7c <sniprintf>
 8010660:	6920      	ldr	r0, [r4, #16]
 8010662:	4915      	ldr	r1, [pc, #84]	@ (80106b8 <create_node+0xec>)
 8010664:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8010668:	9100      	str	r1, [sp, #0]
 801066a:	2106      	movs	r1, #6
 801066c:	9101      	str	r1, [sp, #4]
 801066e:	6811      	ldr	r1, [r2, #0]
 8010670:	6962      	ldr	r2, [r4, #20]
 8010672:	fa1f f388 	uxth.w	r3, r8
 8010676:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801067a:	f7fb fe49 	bl	800c310 <uxr_buffer_create_participant_bin>
 801067e:	4602      	mov	r2, r0
 8010680:	6920      	ldr	r0, [r4, #16]
 8010682:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8010686:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801068a:	f7fa fcb9 	bl	800b000 <run_xrce_session>
 801068e:	b918      	cbnz	r0, 8010698 <create_node+0xcc>
 8010690:	4628      	mov	r0, r5
 8010692:	f7fa fbe9 	bl	800ae68 <rmw_uxrce_fini_node_memory>
 8010696:	2500      	movs	r5, #0
 8010698:	4628      	mov	r0, r5
 801069a:	b003      	add	sp, #12
 801069c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106a0:	4a06      	ldr	r2, [pc, #24]	@ (80106bc <create_node+0xf0>)
 80106a2:	9600      	str	r6, [sp, #0]
 80106a4:	463b      	mov	r3, r7
 80106a6:	213c      	movs	r1, #60	@ 0x3c
 80106a8:	4803      	ldr	r0, [pc, #12]	@ (80106b8 <create_node+0xec>)
 80106aa:	f003 fbe7 	bl	8013e7c <sniprintf>
 80106ae:	e7d7      	b.n	8010660 <create_node+0x94>
 80106b0:	20010c9c 	.word	0x20010c9c
 80106b4:	08015134 	.word	0x08015134
 80106b8:	20010ddc 	.word	0x20010ddc
 80106bc:	080152c4 	.word	0x080152c4

080106c0 <rmw_create_node>:
 80106c0:	b199      	cbz	r1, 80106ea <rmw_create_node+0x2a>
 80106c2:	780b      	ldrb	r3, [r1, #0]
 80106c4:	468c      	mov	ip, r1
 80106c6:	b183      	cbz	r3, 80106ea <rmw_create_node+0x2a>
 80106c8:	b410      	push	{r4}
 80106ca:	4614      	mov	r4, r2
 80106cc:	b14a      	cbz	r2, 80106e2 <rmw_create_node+0x22>
 80106ce:	7813      	ldrb	r3, [r2, #0]
 80106d0:	b13b      	cbz	r3, 80106e2 <rmw_create_node+0x22>
 80106d2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80106d4:	4603      	mov	r3, r0
 80106d6:	4621      	mov	r1, r4
 80106d8:	4660      	mov	r0, ip
 80106da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106de:	f7ff bf75 	b.w	80105cc <create_node>
 80106e2:	2000      	movs	r0, #0
 80106e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106e8:	4770      	bx	lr
 80106ea:	2000      	movs	r0, #0
 80106ec:	4770      	bx	lr
 80106ee:	bf00      	nop

080106f0 <rmw_destroy_node>:
 80106f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106f2:	b328      	cbz	r0, 8010740 <rmw_destroy_node+0x50>
 80106f4:	4607      	mov	r7, r0
 80106f6:	6800      	ldr	r0, [r0, #0]
 80106f8:	b120      	cbz	r0, 8010704 <rmw_destroy_node+0x14>
 80106fa:	4b36      	ldr	r3, [pc, #216]	@ (80107d4 <rmw_destroy_node+0xe4>)
 80106fc:	6819      	ldr	r1, [r3, #0]
 80106fe:	f7ef fd87 	bl	8000210 <strcmp>
 8010702:	b9e8      	cbnz	r0, 8010740 <rmw_destroy_node+0x50>
 8010704:	687d      	ldr	r5, [r7, #4]
 8010706:	b1dd      	cbz	r5, 8010740 <rmw_destroy_node+0x50>
 8010708:	4b33      	ldr	r3, [pc, #204]	@ (80107d8 <rmw_destroy_node+0xe8>)
 801070a:	681c      	ldr	r4, [r3, #0]
 801070c:	2c00      	cmp	r4, #0
 801070e:	d05f      	beq.n	80107d0 <rmw_destroy_node+0xe0>
 8010710:	2600      	movs	r6, #0
 8010712:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010716:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801071a:	429d      	cmp	r5, r3
 801071c:	d013      	beq.n	8010746 <rmw_destroy_node+0x56>
 801071e:	2c00      	cmp	r4, #0
 8010720:	d1f7      	bne.n	8010712 <rmw_destroy_node+0x22>
 8010722:	4b2e      	ldr	r3, [pc, #184]	@ (80107dc <rmw_destroy_node+0xec>)
 8010724:	681c      	ldr	r4, [r3, #0]
 8010726:	b1c4      	cbz	r4, 801075a <rmw_destroy_node+0x6a>
 8010728:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801072c:	6a0b      	ldr	r3, [r1, #32]
 801072e:	429d      	cmp	r5, r3
 8010730:	d1f9      	bne.n	8010726 <rmw_destroy_node+0x36>
 8010732:	317c      	adds	r1, #124	@ 0x7c
 8010734:	4638      	mov	r0, r7
 8010736:	f000 f8a1 	bl	801087c <rmw_destroy_subscription>
 801073a:	2801      	cmp	r0, #1
 801073c:	4606      	mov	r6, r0
 801073e:	d1f2      	bne.n	8010726 <rmw_destroy_node+0x36>
 8010740:	2601      	movs	r6, #1
 8010742:	4630      	mov	r0, r6
 8010744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010746:	3184      	adds	r1, #132	@ 0x84
 8010748:	4638      	mov	r0, r7
 801074a:	f7fa f9d5 	bl	800aaf8 <rmw_destroy_publisher>
 801074e:	2801      	cmp	r0, #1
 8010750:	4606      	mov	r6, r0
 8010752:	d0f5      	beq.n	8010740 <rmw_destroy_node+0x50>
 8010754:	2c00      	cmp	r4, #0
 8010756:	d1dc      	bne.n	8010712 <rmw_destroy_node+0x22>
 8010758:	e7e3      	b.n	8010722 <rmw_destroy_node+0x32>
 801075a:	4b21      	ldr	r3, [pc, #132]	@ (80107e0 <rmw_destroy_node+0xf0>)
 801075c:	681c      	ldr	r4, [r3, #0]
 801075e:	b16c      	cbz	r4, 801077c <rmw_destroy_node+0x8c>
 8010760:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010764:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010766:	429d      	cmp	r5, r3
 8010768:	d1f9      	bne.n	801075e <rmw_destroy_node+0x6e>
 801076a:	317c      	adds	r1, #124	@ 0x7c
 801076c:	4638      	mov	r0, r7
 801076e:	f000 f841 	bl	80107f4 <rmw_destroy_service>
 8010772:	2801      	cmp	r0, #1
 8010774:	4606      	mov	r6, r0
 8010776:	d0e3      	beq.n	8010740 <rmw_destroy_node+0x50>
 8010778:	2c00      	cmp	r4, #0
 801077a:	d1f1      	bne.n	8010760 <rmw_destroy_node+0x70>
 801077c:	4b19      	ldr	r3, [pc, #100]	@ (80107e4 <rmw_destroy_node+0xf4>)
 801077e:	681c      	ldr	r4, [r3, #0]
 8010780:	b16c      	cbz	r4, 801079e <rmw_destroy_node+0xae>
 8010782:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010786:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 8010788:	429d      	cmp	r5, r3
 801078a:	d1f9      	bne.n	8010780 <rmw_destroy_node+0x90>
 801078c:	317c      	adds	r1, #124	@ 0x7c
 801078e:	4638      	mov	r0, r7
 8010790:	f002 fa7a 	bl	8012c88 <rmw_destroy_client>
 8010794:	2801      	cmp	r0, #1
 8010796:	4606      	mov	r6, r0
 8010798:	d0d2      	beq.n	8010740 <rmw_destroy_node+0x50>
 801079a:	2c00      	cmp	r4, #0
 801079c:	d1f1      	bne.n	8010782 <rmw_destroy_node+0x92>
 801079e:	6928      	ldr	r0, [r5, #16]
 80107a0:	696a      	ldr	r2, [r5, #20]
 80107a2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80107a6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80107aa:	6819      	ldr	r1, [r3, #0]
 80107ac:	f7fb fd64 	bl	800c278 <uxr_buffer_delete_entity>
 80107b0:	4602      	mov	r2, r0
 80107b2:	6928      	ldr	r0, [r5, #16]
 80107b4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80107b8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80107bc:	f7fa fc20 	bl	800b000 <run_xrce_session>
 80107c0:	2800      	cmp	r0, #0
 80107c2:	bf08      	it	eq
 80107c4:	2602      	moveq	r6, #2
 80107c6:	4638      	mov	r0, r7
 80107c8:	f7fa fb4e 	bl	800ae68 <rmw_uxrce_fini_node_memory>
 80107cc:	4630      	mov	r0, r6
 80107ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d0:	4626      	mov	r6, r4
 80107d2:	e7a6      	b.n	8010722 <rmw_destroy_node+0x32>
 80107d4:	0801563c 	.word	0x0801563c
 80107d8:	20010cac 	.word	0x20010cac
 80107dc:	20010cec 	.word	0x20010cec
 80107e0:	20010cbc 	.word	0x20010cbc
 80107e4:	2000c3d0 	.word	0x2000c3d0

080107e8 <rmw_node_get_graph_guard_condition>:
 80107e8:	6843      	ldr	r3, [r0, #4]
 80107ea:	6918      	ldr	r0, [r3, #16]
 80107ec:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 80107f0:	4770      	bx	lr
 80107f2:	bf00      	nop

080107f4 <rmw_destroy_service>:
 80107f4:	b570      	push	{r4, r5, r6, lr}
 80107f6:	b128      	cbz	r0, 8010804 <rmw_destroy_service+0x10>
 80107f8:	4604      	mov	r4, r0
 80107fa:	6800      	ldr	r0, [r0, #0]
 80107fc:	460d      	mov	r5, r1
 80107fe:	f7fa fc7f 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 8010802:	b910      	cbnz	r0, 801080a <rmw_destroy_service+0x16>
 8010804:	2401      	movs	r4, #1
 8010806:	4620      	mov	r0, r4
 8010808:	bd70      	pop	{r4, r5, r6, pc}
 801080a:	6863      	ldr	r3, [r4, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d0f9      	beq.n	8010804 <rmw_destroy_service+0x10>
 8010810:	2d00      	cmp	r5, #0
 8010812:	d0f7      	beq.n	8010804 <rmw_destroy_service+0x10>
 8010814:	6828      	ldr	r0, [r5, #0]
 8010816:	f7fa fc73 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 801081a:	2800      	cmp	r0, #0
 801081c:	d0f2      	beq.n	8010804 <rmw_destroy_service+0x10>
 801081e:	686e      	ldr	r6, [r5, #4]
 8010820:	2e00      	cmp	r6, #0
 8010822:	d0ef      	beq.n	8010804 <rmw_destroy_service+0x10>
 8010824:	6864      	ldr	r4, [r4, #4]
 8010826:	6932      	ldr	r2, [r6, #16]
 8010828:	6920      	ldr	r0, [r4, #16]
 801082a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801082e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010832:	6819      	ldr	r1, [r3, #0]
 8010834:	f001 f882 	bl	801193c <uxr_buffer_cancel_data>
 8010838:	4602      	mov	r2, r0
 801083a:	6920      	ldr	r0, [r4, #16]
 801083c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010840:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010844:	f7fa fbdc 	bl	800b000 <run_xrce_session>
 8010848:	6920      	ldr	r0, [r4, #16]
 801084a:	6932      	ldr	r2, [r6, #16]
 801084c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010850:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010854:	6819      	ldr	r1, [r3, #0]
 8010856:	f7fb fd0f 	bl	800c278 <uxr_buffer_delete_entity>
 801085a:	4602      	mov	r2, r0
 801085c:	6920      	ldr	r0, [r4, #16]
 801085e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010862:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8010866:	f7fa fbcb 	bl	800b000 <run_xrce_session>
 801086a:	2800      	cmp	r0, #0
 801086c:	4628      	mov	r0, r5
 801086e:	bf14      	ite	ne
 8010870:	2400      	movne	r4, #0
 8010872:	2402      	moveq	r4, #2
 8010874:	f7fa fb3c 	bl	800aef0 <rmw_uxrce_fini_service_memory>
 8010878:	e7c5      	b.n	8010806 <rmw_destroy_service+0x12>
 801087a:	bf00      	nop

0801087c <rmw_destroy_subscription>:
 801087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801087e:	b128      	cbz	r0, 801088c <rmw_destroy_subscription+0x10>
 8010880:	4604      	mov	r4, r0
 8010882:	6800      	ldr	r0, [r0, #0]
 8010884:	460d      	mov	r5, r1
 8010886:	f7fa fc3b 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 801088a:	b910      	cbnz	r0, 8010892 <rmw_destroy_subscription+0x16>
 801088c:	2401      	movs	r4, #1
 801088e:	4620      	mov	r0, r4
 8010890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010892:	6863      	ldr	r3, [r4, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d0f9      	beq.n	801088c <rmw_destroy_subscription+0x10>
 8010898:	2d00      	cmp	r5, #0
 801089a:	d0f7      	beq.n	801088c <rmw_destroy_subscription+0x10>
 801089c:	6828      	ldr	r0, [r5, #0]
 801089e:	f7fa fc2f 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 80108a2:	2800      	cmp	r0, #0
 80108a4:	d0f2      	beq.n	801088c <rmw_destroy_subscription+0x10>
 80108a6:	686c      	ldr	r4, [r5, #4]
 80108a8:	2c00      	cmp	r4, #0
 80108aa:	d0ef      	beq.n	801088c <rmw_destroy_subscription+0x10>
 80108ac:	6a26      	ldr	r6, [r4, #32]
 80108ae:	6962      	ldr	r2, [r4, #20]
 80108b0:	6930      	ldr	r0, [r6, #16]
 80108b2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80108b6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108ba:	6819      	ldr	r1, [r3, #0]
 80108bc:	f001 f83e 	bl	801193c <uxr_buffer_cancel_data>
 80108c0:	4602      	mov	r2, r0
 80108c2:	6930      	ldr	r0, [r6, #16]
 80108c4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80108c8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80108cc:	f7fa fb98 	bl	800b000 <run_xrce_session>
 80108d0:	69e0      	ldr	r0, [r4, #28]
 80108d2:	f7ff fe59 	bl	8010588 <destroy_topic>
 80108d6:	6a23      	ldr	r3, [r4, #32]
 80108d8:	6962      	ldr	r2, [r4, #20]
 80108da:	6918      	ldr	r0, [r3, #16]
 80108dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80108e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80108e4:	6819      	ldr	r1, [r3, #0]
 80108e6:	f7fb fcc7 	bl	800c278 <uxr_buffer_delete_entity>
 80108ea:	6a23      	ldr	r3, [r4, #32]
 80108ec:	6922      	ldr	r2, [r4, #16]
 80108ee:	691b      	ldr	r3, [r3, #16]
 80108f0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 80108f4:	4604      	mov	r4, r0
 80108f6:	6809      	ldr	r1, [r1, #0]
 80108f8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80108fc:	f7fb fcbc 	bl	800c278 <uxr_buffer_delete_entity>
 8010900:	6937      	ldr	r7, [r6, #16]
 8010902:	4622      	mov	r2, r4
 8010904:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8010908:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801090c:	4604      	mov	r4, r0
 801090e:	4638      	mov	r0, r7
 8010910:	f7fa fb76 	bl	800b000 <run_xrce_session>
 8010914:	6936      	ldr	r6, [r6, #16]
 8010916:	4622      	mov	r2, r4
 8010918:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801091c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8010920:	4604      	mov	r4, r0
 8010922:	4630      	mov	r0, r6
 8010924:	f7fa fb6c 	bl	800b000 <run_xrce_session>
 8010928:	b12c      	cbz	r4, 8010936 <rmw_destroy_subscription+0xba>
 801092a:	b120      	cbz	r0, 8010936 <rmw_destroy_subscription+0xba>
 801092c:	2400      	movs	r4, #0
 801092e:	4628      	mov	r0, r5
 8010930:	f7fa fac8 	bl	800aec4 <rmw_uxrce_fini_subscription_memory>
 8010934:	e7ab      	b.n	801088e <rmw_destroy_subscription+0x12>
 8010936:	2402      	movs	r4, #2
 8010938:	e7f9      	b.n	801092e <rmw_destroy_subscription+0xb2>
 801093a:	bf00      	nop

0801093c <rmw_uxrce_transport_init>:
 801093c:	b508      	push	{r3, lr}
 801093e:	b108      	cbz	r0, 8010944 <rmw_uxrce_transport_init+0x8>
 8010940:	f100 0210 	add.w	r2, r0, #16
 8010944:	b139      	cbz	r1, 8010956 <rmw_uxrce_transport_init+0x1a>
 8010946:	6949      	ldr	r1, [r1, #20]
 8010948:	4610      	mov	r0, r2
 801094a:	f000 fa77 	bl	8010e3c <uxr_init_custom_transport>
 801094e:	f080 0001 	eor.w	r0, r0, #1
 8010952:	b2c0      	uxtb	r0, r0
 8010954:	bd08      	pop	{r3, pc}
 8010956:	4b04      	ldr	r3, [pc, #16]	@ (8010968 <rmw_uxrce_transport_init+0x2c>)
 8010958:	4610      	mov	r0, r2
 801095a:	6859      	ldr	r1, [r3, #4]
 801095c:	f000 fa6e 	bl	8010e3c <uxr_init_custom_transport>
 8010960:	f080 0001 	eor.w	r0, r0, #1
 8010964:	b2c0      	uxtb	r0, r0
 8010966:	bd08      	pop	{r3, pc}
 8010968:	2000c3b4 	.word	0x2000c3b4

0801096c <rmw_uros_epoch_nanos>:
 801096c:	4b05      	ldr	r3, [pc, #20]	@ (8010984 <rmw_uros_epoch_nanos+0x18>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	b123      	cbz	r3, 801097c <rmw_uros_epoch_nanos+0x10>
 8010972:	6898      	ldr	r0, [r3, #8]
 8010974:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010978:	f7fb bf1c 	b.w	800c7b4 <uxr_epoch_nanos>
 801097c:	2000      	movs	r0, #0
 801097e:	2100      	movs	r1, #0
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	20010ccc 	.word	0x20010ccc

08010988 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8010988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801098c:	6805      	ldr	r5, [r0, #0]
 801098e:	4604      	mov	r4, r0
 8010990:	4628      	mov	r0, r5
 8010992:	460e      	mov	r6, r1
 8010994:	f7ef fc3c 	bl	8000210 <strcmp>
 8010998:	b1c8      	cbz	r0, 80109ce <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 801099a:	4b11      	ldr	r3, [pc, #68]	@ (80109e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	429d      	cmp	r5, r3
 80109a0:	d112      	bne.n	80109c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80109a2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80109a6:	f8d8 4000 	ldr.w	r4, [r8]
 80109aa:	b16c      	cbz	r4, 80109c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80109ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80109b0:	2700      	movs	r7, #0
 80109b2:	3d04      	subs	r5, #4
 80109b4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80109b8:	4631      	mov	r1, r6
 80109ba:	f7ef fc29 	bl	8000210 <strcmp>
 80109be:	00bb      	lsls	r3, r7, #2
 80109c0:	b140      	cbz	r0, 80109d4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80109c2:	3701      	adds	r7, #1
 80109c4:	42bc      	cmp	r4, r7
 80109c6:	d1f5      	bne.n	80109b4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80109c8:	2000      	movs	r0, #0
 80109ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ce:	4620      	mov	r0, r4
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80109d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109dc:	58d3      	ldr	r3, [r2, r3]
 80109de:	4718      	bx	r3
 80109e0:	2000016c 	.word	0x2000016c

080109e4 <std_msgs__msg__Int32__init>:
 80109e4:	3800      	subs	r0, #0
 80109e6:	bf18      	it	ne
 80109e8:	2001      	movne	r0, #1
 80109ea:	4770      	bx	lr

080109ec <std_msgs__msg__Int32__fini>:
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop

080109f0 <ucdr_serialize_endian_array_char>:
 80109f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f4:	4619      	mov	r1, r3
 80109f6:	461f      	mov	r7, r3
 80109f8:	4605      	mov	r5, r0
 80109fa:	4690      	mov	r8, r2
 80109fc:	f7fb fb78 	bl	800c0f0 <ucdr_check_buffer_available_for>
 8010a00:	b9e0      	cbnz	r0, 8010a3c <ucdr_serialize_endian_array_char+0x4c>
 8010a02:	463e      	mov	r6, r7
 8010a04:	e009      	b.n	8010a1a <ucdr_serialize_endian_array_char+0x2a>
 8010a06:	68a8      	ldr	r0, [r5, #8]
 8010a08:	f003 fbb1 	bl	801416e <memcpy>
 8010a0c:	68ab      	ldr	r3, [r5, #8]
 8010a0e:	6928      	ldr	r0, [r5, #16]
 8010a10:	4423      	add	r3, r4
 8010a12:	4420      	add	r0, r4
 8010a14:	1b36      	subs	r6, r6, r4
 8010a16:	60ab      	str	r3, [r5, #8]
 8010a18:	6128      	str	r0, [r5, #16]
 8010a1a:	4631      	mov	r1, r6
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f7fb fbee 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 8010a24:	1bb9      	subs	r1, r7, r6
 8010a26:	4441      	add	r1, r8
 8010a28:	4604      	mov	r4, r0
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	d1ea      	bne.n	8010a06 <ucdr_serialize_endian_array_char+0x16>
 8010a30:	2301      	movs	r3, #1
 8010a32:	7da8      	ldrb	r0, [r5, #22]
 8010a34:	756b      	strb	r3, [r5, #21]
 8010a36:	4058      	eors	r0, r3
 8010a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a3c:	463a      	mov	r2, r7
 8010a3e:	68a8      	ldr	r0, [r5, #8]
 8010a40:	4641      	mov	r1, r8
 8010a42:	f003 fb94 	bl	801416e <memcpy>
 8010a46:	68aa      	ldr	r2, [r5, #8]
 8010a48:	692b      	ldr	r3, [r5, #16]
 8010a4a:	443a      	add	r2, r7
 8010a4c:	443b      	add	r3, r7
 8010a4e:	60aa      	str	r2, [r5, #8]
 8010a50:	612b      	str	r3, [r5, #16]
 8010a52:	e7ed      	b.n	8010a30 <ucdr_serialize_endian_array_char+0x40>

08010a54 <ucdr_deserialize_endian_array_char>:
 8010a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a58:	4619      	mov	r1, r3
 8010a5a:	461f      	mov	r7, r3
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	4690      	mov	r8, r2
 8010a60:	f7fb fb46 	bl	800c0f0 <ucdr_check_buffer_available_for>
 8010a64:	b9e0      	cbnz	r0, 8010aa0 <ucdr_deserialize_endian_array_char+0x4c>
 8010a66:	463e      	mov	r6, r7
 8010a68:	e009      	b.n	8010a7e <ucdr_deserialize_endian_array_char+0x2a>
 8010a6a:	68a9      	ldr	r1, [r5, #8]
 8010a6c:	f003 fb7f 	bl	801416e <memcpy>
 8010a70:	68ab      	ldr	r3, [r5, #8]
 8010a72:	6928      	ldr	r0, [r5, #16]
 8010a74:	4423      	add	r3, r4
 8010a76:	4420      	add	r0, r4
 8010a78:	1b36      	subs	r6, r6, r4
 8010a7a:	60ab      	str	r3, [r5, #8]
 8010a7c:	6128      	str	r0, [r5, #16]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	4631      	mov	r1, r6
 8010a82:	4628      	mov	r0, r5
 8010a84:	f7fb fbbc 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 8010a88:	4604      	mov	r4, r0
 8010a8a:	1bb8      	subs	r0, r7, r6
 8010a8c:	4440      	add	r0, r8
 8010a8e:	4622      	mov	r2, r4
 8010a90:	2c00      	cmp	r4, #0
 8010a92:	d1ea      	bne.n	8010a6a <ucdr_deserialize_endian_array_char+0x16>
 8010a94:	2301      	movs	r3, #1
 8010a96:	7da8      	ldrb	r0, [r5, #22]
 8010a98:	756b      	strb	r3, [r5, #21]
 8010a9a:	4058      	eors	r0, r3
 8010a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa0:	463a      	mov	r2, r7
 8010aa2:	68a9      	ldr	r1, [r5, #8]
 8010aa4:	4640      	mov	r0, r8
 8010aa6:	f003 fb62 	bl	801416e <memcpy>
 8010aaa:	68aa      	ldr	r2, [r5, #8]
 8010aac:	692b      	ldr	r3, [r5, #16]
 8010aae:	443a      	add	r2, r7
 8010ab0:	443b      	add	r3, r7
 8010ab2:	60aa      	str	r2, [r5, #8]
 8010ab4:	612b      	str	r3, [r5, #16]
 8010ab6:	e7ed      	b.n	8010a94 <ucdr_deserialize_endian_array_char+0x40>

08010ab8 <ucdr_serialize_array_uint8_t>:
 8010ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abc:	4688      	mov	r8, r1
 8010abe:	4611      	mov	r1, r2
 8010ac0:	4617      	mov	r7, r2
 8010ac2:	4605      	mov	r5, r0
 8010ac4:	f7fb fb14 	bl	800c0f0 <ucdr_check_buffer_available_for>
 8010ac8:	b9e0      	cbnz	r0, 8010b04 <ucdr_serialize_array_uint8_t+0x4c>
 8010aca:	463e      	mov	r6, r7
 8010acc:	e009      	b.n	8010ae2 <ucdr_serialize_array_uint8_t+0x2a>
 8010ace:	68a8      	ldr	r0, [r5, #8]
 8010ad0:	f003 fb4d 	bl	801416e <memcpy>
 8010ad4:	68aa      	ldr	r2, [r5, #8]
 8010ad6:	692b      	ldr	r3, [r5, #16]
 8010ad8:	4422      	add	r2, r4
 8010ada:	4423      	add	r3, r4
 8010adc:	1b36      	subs	r6, r6, r4
 8010ade:	60aa      	str	r2, [r5, #8]
 8010ae0:	612b      	str	r3, [r5, #16]
 8010ae2:	4631      	mov	r1, r6
 8010ae4:	2201      	movs	r2, #1
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f7fb fb8a 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 8010aec:	1bb9      	subs	r1, r7, r6
 8010aee:	4441      	add	r1, r8
 8010af0:	4604      	mov	r4, r0
 8010af2:	4602      	mov	r2, r0
 8010af4:	2800      	cmp	r0, #0
 8010af6:	d1ea      	bne.n	8010ace <ucdr_serialize_array_uint8_t+0x16>
 8010af8:	2301      	movs	r3, #1
 8010afa:	7da8      	ldrb	r0, [r5, #22]
 8010afc:	756b      	strb	r3, [r5, #21]
 8010afe:	4058      	eors	r0, r3
 8010b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b04:	463a      	mov	r2, r7
 8010b06:	68a8      	ldr	r0, [r5, #8]
 8010b08:	4641      	mov	r1, r8
 8010b0a:	f003 fb30 	bl	801416e <memcpy>
 8010b0e:	68aa      	ldr	r2, [r5, #8]
 8010b10:	692b      	ldr	r3, [r5, #16]
 8010b12:	443a      	add	r2, r7
 8010b14:	443b      	add	r3, r7
 8010b16:	60aa      	str	r2, [r5, #8]
 8010b18:	612b      	str	r3, [r5, #16]
 8010b1a:	e7ed      	b.n	8010af8 <ucdr_serialize_array_uint8_t+0x40>

08010b1c <ucdr_serialize_endian_array_uint8_t>:
 8010b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b20:	4619      	mov	r1, r3
 8010b22:	461f      	mov	r7, r3
 8010b24:	4605      	mov	r5, r0
 8010b26:	4690      	mov	r8, r2
 8010b28:	f7fb fae2 	bl	800c0f0 <ucdr_check_buffer_available_for>
 8010b2c:	b9e0      	cbnz	r0, 8010b68 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010b2e:	463e      	mov	r6, r7
 8010b30:	e009      	b.n	8010b46 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010b32:	68a8      	ldr	r0, [r5, #8]
 8010b34:	f003 fb1b 	bl	801416e <memcpy>
 8010b38:	68ab      	ldr	r3, [r5, #8]
 8010b3a:	6928      	ldr	r0, [r5, #16]
 8010b3c:	4423      	add	r3, r4
 8010b3e:	4420      	add	r0, r4
 8010b40:	1b36      	subs	r6, r6, r4
 8010b42:	60ab      	str	r3, [r5, #8]
 8010b44:	6128      	str	r0, [r5, #16]
 8010b46:	4631      	mov	r1, r6
 8010b48:	2201      	movs	r2, #1
 8010b4a:	4628      	mov	r0, r5
 8010b4c:	f7fb fb58 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 8010b50:	1bb9      	subs	r1, r7, r6
 8010b52:	4441      	add	r1, r8
 8010b54:	4604      	mov	r4, r0
 8010b56:	4602      	mov	r2, r0
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	d1ea      	bne.n	8010b32 <ucdr_serialize_endian_array_uint8_t+0x16>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	7da8      	ldrb	r0, [r5, #22]
 8010b60:	756b      	strb	r3, [r5, #21]
 8010b62:	4058      	eors	r0, r3
 8010b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b68:	463a      	mov	r2, r7
 8010b6a:	68a8      	ldr	r0, [r5, #8]
 8010b6c:	4641      	mov	r1, r8
 8010b6e:	f003 fafe 	bl	801416e <memcpy>
 8010b72:	68aa      	ldr	r2, [r5, #8]
 8010b74:	692b      	ldr	r3, [r5, #16]
 8010b76:	443a      	add	r2, r7
 8010b78:	443b      	add	r3, r7
 8010b7a:	60aa      	str	r2, [r5, #8]
 8010b7c:	612b      	str	r3, [r5, #16]
 8010b7e:	e7ed      	b.n	8010b5c <ucdr_serialize_endian_array_uint8_t+0x40>

08010b80 <ucdr_deserialize_array_uint8_t>:
 8010b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b84:	4688      	mov	r8, r1
 8010b86:	4611      	mov	r1, r2
 8010b88:	4617      	mov	r7, r2
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	f7fb fab0 	bl	800c0f0 <ucdr_check_buffer_available_for>
 8010b90:	b9e0      	cbnz	r0, 8010bcc <ucdr_deserialize_array_uint8_t+0x4c>
 8010b92:	463e      	mov	r6, r7
 8010b94:	e009      	b.n	8010baa <ucdr_deserialize_array_uint8_t+0x2a>
 8010b96:	68a9      	ldr	r1, [r5, #8]
 8010b98:	f003 fae9 	bl	801416e <memcpy>
 8010b9c:	68aa      	ldr	r2, [r5, #8]
 8010b9e:	692b      	ldr	r3, [r5, #16]
 8010ba0:	4422      	add	r2, r4
 8010ba2:	4423      	add	r3, r4
 8010ba4:	1b36      	subs	r6, r6, r4
 8010ba6:	60aa      	str	r2, [r5, #8]
 8010ba8:	612b      	str	r3, [r5, #16]
 8010baa:	2201      	movs	r2, #1
 8010bac:	4631      	mov	r1, r6
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f7fb fb26 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 8010bb4:	4604      	mov	r4, r0
 8010bb6:	1bb8      	subs	r0, r7, r6
 8010bb8:	4440      	add	r0, r8
 8010bba:	4622      	mov	r2, r4
 8010bbc:	2c00      	cmp	r4, #0
 8010bbe:	d1ea      	bne.n	8010b96 <ucdr_deserialize_array_uint8_t+0x16>
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	7da8      	ldrb	r0, [r5, #22]
 8010bc4:	756b      	strb	r3, [r5, #21]
 8010bc6:	4058      	eors	r0, r3
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	463a      	mov	r2, r7
 8010bce:	68a9      	ldr	r1, [r5, #8]
 8010bd0:	4640      	mov	r0, r8
 8010bd2:	f003 facc 	bl	801416e <memcpy>
 8010bd6:	68aa      	ldr	r2, [r5, #8]
 8010bd8:	692b      	ldr	r3, [r5, #16]
 8010bda:	443a      	add	r2, r7
 8010bdc:	443b      	add	r3, r7
 8010bde:	60aa      	str	r2, [r5, #8]
 8010be0:	612b      	str	r3, [r5, #16]
 8010be2:	e7ed      	b.n	8010bc0 <ucdr_deserialize_array_uint8_t+0x40>

08010be4 <ucdr_deserialize_endian_array_uint8_t>:
 8010be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010be8:	4619      	mov	r1, r3
 8010bea:	461f      	mov	r7, r3
 8010bec:	4605      	mov	r5, r0
 8010bee:	4690      	mov	r8, r2
 8010bf0:	f7fb fa7e 	bl	800c0f0 <ucdr_check_buffer_available_for>
 8010bf4:	b9e0      	cbnz	r0, 8010c30 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010bf6:	463e      	mov	r6, r7
 8010bf8:	e009      	b.n	8010c0e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010bfa:	68a9      	ldr	r1, [r5, #8]
 8010bfc:	f003 fab7 	bl	801416e <memcpy>
 8010c00:	68ab      	ldr	r3, [r5, #8]
 8010c02:	6928      	ldr	r0, [r5, #16]
 8010c04:	4423      	add	r3, r4
 8010c06:	4420      	add	r0, r4
 8010c08:	1b36      	subs	r6, r6, r4
 8010c0a:	60ab      	str	r3, [r5, #8]
 8010c0c:	6128      	str	r0, [r5, #16]
 8010c0e:	2201      	movs	r2, #1
 8010c10:	4631      	mov	r1, r6
 8010c12:	4628      	mov	r0, r5
 8010c14:	f7fb faf4 	bl	800c200 <ucdr_check_final_buffer_behavior_array>
 8010c18:	4604      	mov	r4, r0
 8010c1a:	1bb8      	subs	r0, r7, r6
 8010c1c:	4440      	add	r0, r8
 8010c1e:	4622      	mov	r2, r4
 8010c20:	2c00      	cmp	r4, #0
 8010c22:	d1ea      	bne.n	8010bfa <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010c24:	2301      	movs	r3, #1
 8010c26:	7da8      	ldrb	r0, [r5, #22]
 8010c28:	756b      	strb	r3, [r5, #21]
 8010c2a:	4058      	eors	r0, r3
 8010c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c30:	463a      	mov	r2, r7
 8010c32:	68a9      	ldr	r1, [r5, #8]
 8010c34:	4640      	mov	r0, r8
 8010c36:	f003 fa9a 	bl	801416e <memcpy>
 8010c3a:	68aa      	ldr	r2, [r5, #8]
 8010c3c:	692b      	ldr	r3, [r5, #16]
 8010c3e:	443a      	add	r2, r7
 8010c40:	443b      	add	r3, r7
 8010c42:	60aa      	str	r2, [r5, #8]
 8010c44:	612b      	str	r3, [r5, #16]
 8010c46:	e7ed      	b.n	8010c24 <ucdr_deserialize_endian_array_uint8_t+0x40>

08010c48 <ucdr_serialize_sequence_char>:
 8010c48:	b570      	push	{r4, r5, r6, lr}
 8010c4a:	4615      	mov	r5, r2
 8010c4c:	460e      	mov	r6, r1
 8010c4e:	7d01      	ldrb	r1, [r0, #20]
 8010c50:	4604      	mov	r4, r0
 8010c52:	f7fa fda3 	bl	800b79c <ucdr_serialize_endian_uint32_t>
 8010c56:	b90d      	cbnz	r5, 8010c5c <ucdr_serialize_sequence_char+0x14>
 8010c58:	2001      	movs	r0, #1
 8010c5a:	bd70      	pop	{r4, r5, r6, pc}
 8010c5c:	7d21      	ldrb	r1, [r4, #20]
 8010c5e:	462b      	mov	r3, r5
 8010c60:	4632      	mov	r2, r6
 8010c62:	4620      	mov	r0, r4
 8010c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c68:	f7ff bec2 	b.w	80109f0 <ucdr_serialize_endian_array_char>

08010c6c <ucdr_deserialize_sequence_char>:
 8010c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c70:	461d      	mov	r5, r3
 8010c72:	4616      	mov	r6, r2
 8010c74:	460f      	mov	r7, r1
 8010c76:	461a      	mov	r2, r3
 8010c78:	7d01      	ldrb	r1, [r0, #20]
 8010c7a:	4604      	mov	r4, r0
 8010c7c:	f7fa feb6 	bl	800b9ec <ucdr_deserialize_endian_uint32_t>
 8010c80:	682b      	ldr	r3, [r5, #0]
 8010c82:	429e      	cmp	r6, r3
 8010c84:	bf3c      	itt	cc
 8010c86:	2201      	movcc	r2, #1
 8010c88:	75a2      	strbcc	r2, [r4, #22]
 8010c8a:	b913      	cbnz	r3, 8010c92 <ucdr_deserialize_sequence_char+0x26>
 8010c8c:	2001      	movs	r0, #1
 8010c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c92:	7d21      	ldrb	r1, [r4, #20]
 8010c94:	463a      	mov	r2, r7
 8010c96:	4620      	mov	r0, r4
 8010c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c9c:	f7ff beda 	b.w	8010a54 <ucdr_deserialize_endian_array_char>

08010ca0 <ucdr_serialize_sequence_uint8_t>:
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	4615      	mov	r5, r2
 8010ca4:	460e      	mov	r6, r1
 8010ca6:	7d01      	ldrb	r1, [r0, #20]
 8010ca8:	4604      	mov	r4, r0
 8010caa:	f7fa fd77 	bl	800b79c <ucdr_serialize_endian_uint32_t>
 8010cae:	b90d      	cbnz	r5, 8010cb4 <ucdr_serialize_sequence_uint8_t+0x14>
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	7d21      	ldrb	r1, [r4, #20]
 8010cb6:	462b      	mov	r3, r5
 8010cb8:	4632      	mov	r2, r6
 8010cba:	4620      	mov	r0, r4
 8010cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cc0:	f7ff bf2c 	b.w	8010b1c <ucdr_serialize_endian_array_uint8_t>

08010cc4 <ucdr_deserialize_sequence_uint8_t>:
 8010cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc8:	461d      	mov	r5, r3
 8010cca:	4616      	mov	r6, r2
 8010ccc:	460f      	mov	r7, r1
 8010cce:	461a      	mov	r2, r3
 8010cd0:	7d01      	ldrb	r1, [r0, #20]
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	f7fa fe8a 	bl	800b9ec <ucdr_deserialize_endian_uint32_t>
 8010cd8:	682b      	ldr	r3, [r5, #0]
 8010cda:	429e      	cmp	r6, r3
 8010cdc:	bf3c      	itt	cc
 8010cde:	2201      	movcc	r2, #1
 8010ce0:	75a2      	strbcc	r2, [r4, #22]
 8010ce2:	b913      	cbnz	r3, 8010cea <ucdr_deserialize_sequence_uint8_t+0x26>
 8010ce4:	2001      	movs	r0, #1
 8010ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cea:	7d21      	ldrb	r1, [r4, #20]
 8010cec:	463a      	mov	r2, r7
 8010cee:	4620      	mov	r0, r4
 8010cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf4:	f7ff bf76 	b.w	8010be4 <ucdr_deserialize_endian_array_uint8_t>

08010cf8 <ucdr_serialize_string>:
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	b082      	sub	sp, #8
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	4608      	mov	r0, r1
 8010d00:	9101      	str	r1, [sp, #4]
 8010d02:	f7ef fa8f 	bl	8000224 <strlen>
 8010d06:	9901      	ldr	r1, [sp, #4]
 8010d08:	1c42      	adds	r2, r0, #1
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	b002      	add	sp, #8
 8010d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d12:	f7ff bf99 	b.w	8010c48 <ucdr_serialize_sequence_char>
 8010d16:	bf00      	nop

08010d18 <ucdr_deserialize_string>:
 8010d18:	b500      	push	{lr}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	ab01      	add	r3, sp, #4
 8010d1e:	f7ff ffa5 	bl	8010c6c <ucdr_deserialize_sequence_char>
 8010d22:	b003      	add	sp, #12
 8010d24:	f85d fb04 	ldr.w	pc, [sp], #4

08010d28 <get_custom_error>:
 8010d28:	4b01      	ldr	r3, [pc, #4]	@ (8010d30 <get_custom_error+0x8>)
 8010d2a:	7818      	ldrb	r0, [r3, #0]
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	20010e18 	.word	0x20010e18

08010d34 <recv_custom_msg>:
 8010d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d38:	4693      	mov	fp, r2
 8010d3a:	b089      	sub	sp, #36	@ 0x24
 8010d3c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8010d40:	9305      	str	r3, [sp, #20]
 8010d42:	468a      	mov	sl, r1
 8010d44:	2100      	movs	r1, #0
 8010d46:	4604      	mov	r4, r0
 8010d48:	f88d 101e 	strb.w	r1, [sp, #30]
 8010d4c:	b322      	cbz	r2, 8010d98 <recv_custom_msg+0x64>
 8010d4e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010d52:	f10d 081f 	add.w	r8, sp, #31
 8010d56:	af05      	add	r7, sp, #20
 8010d58:	f10d 061e 	add.w	r6, sp, #30
 8010d5c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010d60:	e002      	b.n	8010d68 <recv_custom_msg+0x34>
 8010d62:	9b05      	ldr	r3, [sp, #20]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	dd0f      	ble.n	8010d88 <recv_custom_msg+0x54>
 8010d68:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010d6c:	4623      	mov	r3, r4
 8010d6e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010d72:	e9cd 5600 	strd	r5, r6, [sp]
 8010d76:	4622      	mov	r2, r4
 8010d78:	4648      	mov	r0, r9
 8010d7a:	f001 f8f3 	bl	8011f64 <uxr_read_framed_msg>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d0ef      	beq.n	8010d62 <recv_custom_msg+0x2e>
 8010d82:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010d86:	b1b3      	cbz	r3, 8010db6 <recv_custom_msg+0x82>
 8010d88:	4b0f      	ldr	r3, [pc, #60]	@ (8010dc8 <recv_custom_msg+0x94>)
 8010d8a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010d8e:	701a      	strb	r2, [r3, #0]
 8010d90:	2000      	movs	r0, #0
 8010d92:	b009      	add	sp, #36	@ 0x24
 8010d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d98:	f10d 021f 	add.w	r2, sp, #31
 8010d9c:	9200      	str	r2, [sp, #0]
 8010d9e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010da2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010da6:	4601      	mov	r1, r0
 8010da8:	47a8      	blx	r5
 8010daa:	2800      	cmp	r0, #0
 8010dac:	d0ec      	beq.n	8010d88 <recv_custom_msg+0x54>
 8010dae:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d1e8      	bne.n	8010d88 <recv_custom_msg+0x54>
 8010db6:	f8cb 0000 	str.w	r0, [fp]
 8010dba:	2001      	movs	r0, #1
 8010dbc:	f8ca 4000 	str.w	r4, [sl]
 8010dc0:	b009      	add	sp, #36	@ 0x24
 8010dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20010e18 	.word	0x20010e18

08010dcc <send_custom_msg>:
 8010dcc:	b530      	push	{r4, r5, lr}
 8010dce:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	4615      	mov	r5, r2
 8010dd6:	b974      	cbnz	r4, 8010df6 <send_custom_msg+0x2a>
 8010dd8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010ddc:	f10d 0317 	add.w	r3, sp, #23
 8010de0:	47a0      	blx	r4
 8010de2:	b108      	cbz	r0, 8010de8 <send_custom_msg+0x1c>
 8010de4:	42a8      	cmp	r0, r5
 8010de6:	d015      	beq.n	8010e14 <send_custom_msg+0x48>
 8010de8:	4b0c      	ldr	r3, [pc, #48]	@ (8010e1c <send_custom_msg+0x50>)
 8010dea:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010dee:	701a      	strb	r2, [r3, #0]
 8010df0:	2000      	movs	r0, #0
 8010df2:	b007      	add	sp, #28
 8010df4:	bd30      	pop	{r4, r5, pc}
 8010df6:	460b      	mov	r3, r1
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f10d 0117 	add.w	r1, sp, #23
 8010dfe:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010e02:	4602      	mov	r2, r0
 8010e04:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010e08:	9500      	str	r5, [sp, #0]
 8010e0a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010e0e:	f000 feb1 	bl	8011b74 <uxr_write_framed_msg>
 8010e12:	e7e6      	b.n	8010de2 <send_custom_msg+0x16>
 8010e14:	2001      	movs	r0, #1
 8010e16:	b007      	add	sp, #28
 8010e18:	bd30      	pop	{r4, r5, pc}
 8010e1a:	bf00      	nop
 8010e1c:	20010e18 	.word	0x20010e18

08010e20 <uxr_set_custom_transport_callbacks>:
 8010e20:	b410      	push	{r4}
 8010e22:	9c01      	ldr	r4, [sp, #4]
 8010e24:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010e28:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010e2c:	9b02      	ldr	r3, [sp, #8]
 8010e2e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010e32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e36:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010e3a:	4770      	bx	lr

08010e3c <uxr_init_custom_transport>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010e42:	b303      	cbz	r3, 8010e86 <uxr_init_custom_transport+0x4a>
 8010e44:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010e48:	4604      	mov	r4, r0
 8010e4a:	b1e2      	cbz	r2, 8010e86 <uxr_init_custom_transport+0x4a>
 8010e4c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010e50:	b1ca      	cbz	r2, 8010e86 <uxr_init_custom_transport+0x4a>
 8010e52:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010e56:	b1b2      	cbz	r2, 8010e86 <uxr_init_custom_transport+0x4a>
 8010e58:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010e5c:	4798      	blx	r3
 8010e5e:	4605      	mov	r5, r0
 8010e60:	b188      	cbz	r0, 8010e86 <uxr_init_custom_transport+0x4a>
 8010e62:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010e66:	b98b      	cbnz	r3, 8010e8c <uxr_init_custom_transport+0x50>
 8010e68:	490b      	ldr	r1, [pc, #44]	@ (8010e98 <uxr_init_custom_transport+0x5c>)
 8010e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8010e9c <uxr_init_custom_transport+0x60>)
 8010e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8010ea0 <uxr_init_custom_transport+0x64>)
 8010e6e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010e72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010e76:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010e7a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010e7e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010e82:	4628      	mov	r0, r5
 8010e84:	bd38      	pop	{r3, r4, r5, pc}
 8010e86:	2500      	movs	r5, #0
 8010e88:	4628      	mov	r0, r5
 8010e8a:	bd38      	pop	{r3, r4, r5, pc}
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010e92:	f000 fe69 	bl	8011b68 <uxr_init_framing_io>
 8010e96:	e7e7      	b.n	8010e68 <uxr_init_custom_transport+0x2c>
 8010e98:	08010dcd 	.word	0x08010dcd
 8010e9c:	08010d35 	.word	0x08010d35
 8010ea0:	08010d29 	.word	0x08010d29

08010ea4 <uxr_close_custom_transport>:
 8010ea4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010ea8:	4718      	bx	r3
 8010eaa:	bf00      	nop

08010eac <uxr_init_input_best_effort_stream>:
 8010eac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010eb0:	8003      	strh	r3, [r0, #0]
 8010eb2:	4770      	bx	lr

08010eb4 <uxr_reset_input_best_effort_stream>:
 8010eb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010eb8:	8003      	strh	r3, [r0, #0]
 8010eba:	4770      	bx	lr

08010ebc <uxr_receive_best_effort_message>:
 8010ebc:	b538      	push	{r3, r4, r5, lr}
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	8800      	ldrh	r0, [r0, #0]
 8010ec2:	460d      	mov	r5, r1
 8010ec4:	f000 fe38 	bl	8011b38 <uxr_seq_num_cmp>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8010ed0:	bfb8      	it	lt
 8010ed2:	8025      	strhlt	r5, [r4, #0]
 8010ed4:	bd38      	pop	{r3, r4, r5, pc}
 8010ed6:	bf00      	nop

08010ed8 <on_full_input_buffer>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	4605      	mov	r5, r0
 8010edc:	460c      	mov	r4, r1
 8010ede:	682b      	ldr	r3, [r5, #0]
 8010ee0:	6809      	ldr	r1, [r1, #0]
 8010ee2:	8920      	ldrh	r0, [r4, #8]
 8010ee4:	6862      	ldr	r2, [r4, #4]
 8010ee6:	fbb2 f2f0 	udiv	r2, r2, r0
 8010eea:	eba3 0c01 	sub.w	ip, r3, r1
 8010eee:	fbbc fcf2 	udiv	ip, ip, r2
 8010ef2:	f10c 0c01 	add.w	ip, ip, #1
 8010ef6:	fa1f f38c 	uxth.w	r3, ip
 8010efa:	fbb3 f6f0 	udiv	r6, r3, r0
 8010efe:	fb00 3316 	mls	r3, r0, r6, r3
 8010f02:	b29b      	uxth	r3, r3
 8010f04:	fb02 f303 	mul.w	r3, r2, r3
 8010f08:	1d18      	adds	r0, r3, #4
 8010f0a:	4408      	add	r0, r1
 8010f0c:	7d26      	ldrb	r6, [r4, #20]
 8010f0e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010f12:	b116      	cbz	r6, 8010f1a <on_full_input_buffer+0x42>
 8010f14:	2600      	movs	r6, #0
 8010f16:	f840 6c04 	str.w	r6, [r0, #-4]
 8010f1a:	2a03      	cmp	r2, #3
 8010f1c:	d801      	bhi.n	8010f22 <on_full_input_buffer+0x4a>
 8010f1e:	2001      	movs	r0, #1
 8010f20:	bd70      	pop	{r4, r5, r6, pc}
 8010f22:	3308      	adds	r3, #8
 8010f24:	4419      	add	r1, r3
 8010f26:	4628      	mov	r0, r5
 8010f28:	692b      	ldr	r3, [r5, #16]
 8010f2a:	3a04      	subs	r2, #4
 8010f2c:	f7fb f92c 	bl	800c188 <ucdr_init_buffer_origin>
 8010f30:	4628      	mov	r0, r5
 8010f32:	4903      	ldr	r1, [pc, #12]	@ (8010f40 <on_full_input_buffer+0x68>)
 8010f34:	4622      	mov	r2, r4
 8010f36:	f7fb f903 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	bd70      	pop	{r4, r5, r6, pc}
 8010f3e:	bf00      	nop
 8010f40:	08010ed9 	.word	0x08010ed9

08010f44 <uxr_init_input_reliable_stream>:
 8010f44:	b500      	push	{lr}
 8010f46:	e9c0 1200 	strd	r1, r2, [r0]
 8010f4a:	f04f 0e00 	mov.w	lr, #0
 8010f4e:	9a01      	ldr	r2, [sp, #4]
 8010f50:	8103      	strh	r3, [r0, #8]
 8010f52:	6102      	str	r2, [r0, #16]
 8010f54:	f880 e014 	strb.w	lr, [r0, #20]
 8010f58:	b1d3      	cbz	r3, 8010f90 <uxr_init_input_reliable_stream+0x4c>
 8010f5a:	f8c1 e000 	str.w	lr, [r1]
 8010f5e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010f62:	f1bc 0f01 	cmp.w	ip, #1
 8010f66:	d913      	bls.n	8010f90 <uxr_init_input_reliable_stream+0x4c>
 8010f68:	2301      	movs	r3, #1
 8010f6a:	fbb3 f1fc 	udiv	r1, r3, ip
 8010f6e:	fb0c 3111 	mls	r1, ip, r1, r3
 8010f72:	b289      	uxth	r1, r1
 8010f74:	6842      	ldr	r2, [r0, #4]
 8010f76:	fbb2 f2fc 	udiv	r2, r2, ip
 8010f7a:	fb01 f202 	mul.w	r2, r1, r2
 8010f7e:	6801      	ldr	r1, [r0, #0]
 8010f80:	f841 e002 	str.w	lr, [r1, r2]
 8010f84:	3301      	adds	r3, #1
 8010f86:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	459c      	cmp	ip, r3
 8010f8e:	d8ec      	bhi.n	8010f6a <uxr_init_input_reliable_stream+0x26>
 8010f90:	f04f 33ff 	mov.w	r3, #4294967295
 8010f94:	60c3      	str	r3, [r0, #12]
 8010f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f9a:	bf00      	nop

08010f9c <uxr_reset_input_reliable_stream>:
 8010f9c:	8901      	ldrh	r1, [r0, #8]
 8010f9e:	b1e9      	cbz	r1, 8010fdc <uxr_reset_input_reliable_stream+0x40>
 8010fa0:	f04f 0c00 	mov.w	ip, #0
 8010fa4:	b500      	push	{lr}
 8010fa6:	4663      	mov	r3, ip
 8010fa8:	46e6      	mov	lr, ip
 8010faa:	fbb3 f2f1 	udiv	r2, r3, r1
 8010fae:	fb01 3312 	mls	r3, r1, r2, r3
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	6842      	ldr	r2, [r0, #4]
 8010fb6:	fbb2 f2f1 	udiv	r2, r2, r1
 8010fba:	fb02 f303 	mul.w	r3, r2, r3
 8010fbe:	6802      	ldr	r2, [r0, #0]
 8010fc0:	f842 e003 	str.w	lr, [r2, r3]
 8010fc4:	f10c 0c01 	add.w	ip, ip, #1
 8010fc8:	8901      	ldrh	r1, [r0, #8]
 8010fca:	fa1f f38c 	uxth.w	r3, ip
 8010fce:	4299      	cmp	r1, r3
 8010fd0:	d8eb      	bhi.n	8010faa <uxr_reset_input_reliable_stream+0xe>
 8010fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8010fd6:	60c3      	str	r3, [r0, #12]
 8010fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8010fe0:	60c3      	str	r3, [r0, #12]
 8010fe2:	4770      	bx	lr

08010fe4 <uxr_receive_reliable_message>:
 8010fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fe8:	4604      	mov	r4, r0
 8010fea:	460d      	mov	r5, r1
 8010fec:	8901      	ldrh	r1, [r0, #8]
 8010fee:	8980      	ldrh	r0, [r0, #12]
 8010ff0:	4690      	mov	r8, r2
 8010ff2:	461f      	mov	r7, r3
 8010ff4:	f000 fd98 	bl	8011b28 <uxr_seq_num_add>
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	89a0      	ldrh	r0, [r4, #12]
 8010ffe:	f000 fd9b 	bl	8011b38 <uxr_seq_num_cmp>
 8011002:	2800      	cmp	r0, #0
 8011004:	db0a      	blt.n	801101c <uxr_receive_reliable_message+0x38>
 8011006:	2600      	movs	r6, #0
 8011008:	89e0      	ldrh	r0, [r4, #14]
 801100a:	4629      	mov	r1, r5
 801100c:	f000 fd94 	bl	8011b38 <uxr_seq_num_cmp>
 8011010:	2800      	cmp	r0, #0
 8011012:	da00      	bge.n	8011016 <uxr_receive_reliable_message+0x32>
 8011014:	81e5      	strh	r5, [r4, #14]
 8011016:	4630      	mov	r0, r6
 8011018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801101c:	4630      	mov	r0, r6
 801101e:	4629      	mov	r1, r5
 8011020:	f000 fd8a 	bl	8011b38 <uxr_seq_num_cmp>
 8011024:	2800      	cmp	r0, #0
 8011026:	dbee      	blt.n	8011006 <uxr_receive_reliable_message+0x22>
 8011028:	6923      	ldr	r3, [r4, #16]
 801102a:	4640      	mov	r0, r8
 801102c:	4798      	blx	r3
 801102e:	2101      	movs	r1, #1
 8011030:	4681      	mov	r9, r0
 8011032:	89a0      	ldrh	r0, [r4, #12]
 8011034:	f000 fd78 	bl	8011b28 <uxr_seq_num_add>
 8011038:	f1b9 0f00 	cmp.w	r9, #0
 801103c:	d101      	bne.n	8011042 <uxr_receive_reliable_message+0x5e>
 801103e:	4285      	cmp	r5, r0
 8011040:	d047      	beq.n	80110d2 <uxr_receive_reliable_message+0xee>
 8011042:	8922      	ldrh	r2, [r4, #8]
 8011044:	fbb5 f0f2 	udiv	r0, r5, r2
 8011048:	fb02 5010 	mls	r0, r2, r0, r5
 801104c:	b280      	uxth	r0, r0
 801104e:	6863      	ldr	r3, [r4, #4]
 8011050:	fbb3 f3f2 	udiv	r3, r3, r2
 8011054:	fb00 f303 	mul.w	r3, r0, r3
 8011058:	6820      	ldr	r0, [r4, #0]
 801105a:	3304      	adds	r3, #4
 801105c:	4418      	add	r0, r3
 801105e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1cf      	bne.n	8011006 <uxr_receive_reliable_message+0x22>
 8011066:	4641      	mov	r1, r8
 8011068:	463a      	mov	r2, r7
 801106a:	f003 f880 	bl	801416e <memcpy>
 801106e:	8921      	ldrh	r1, [r4, #8]
 8011070:	fbb5 f2f1 	udiv	r2, r5, r1
 8011074:	fb01 5212 	mls	r2, r1, r2, r5
 8011078:	b292      	uxth	r2, r2
 801107a:	6863      	ldr	r3, [r4, #4]
 801107c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011080:	fb02 f303 	mul.w	r3, r2, r3
 8011084:	6822      	ldr	r2, [r4, #0]
 8011086:	50d7      	str	r7, [r2, r3]
 8011088:	9a08      	ldr	r2, [sp, #32]
 801108a:	2301      	movs	r3, #1
 801108c:	7013      	strb	r3, [r2, #0]
 801108e:	f1b9 0f00 	cmp.w	r9, #0
 8011092:	d0b8      	beq.n	8011006 <uxr_receive_reliable_message+0x22>
 8011094:	89a6      	ldrh	r6, [r4, #12]
 8011096:	4630      	mov	r0, r6
 8011098:	2101      	movs	r1, #1
 801109a:	f000 fd45 	bl	8011b28 <uxr_seq_num_add>
 801109e:	8922      	ldrh	r2, [r4, #8]
 80110a0:	6863      	ldr	r3, [r4, #4]
 80110a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80110a6:	4606      	mov	r6, r0
 80110a8:	fbb0 f0f2 	udiv	r0, r0, r2
 80110ac:	fb02 6010 	mls	r0, r2, r0, r6
 80110b0:	b280      	uxth	r0, r0
 80110b2:	fb00 f303 	mul.w	r3, r0, r3
 80110b6:	6820      	ldr	r0, [r4, #0]
 80110b8:	3304      	adds	r3, #4
 80110ba:	4418      	add	r0, r3
 80110bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d0a0      	beq.n	8011006 <uxr_receive_reliable_message+0x22>
 80110c4:	6923      	ldr	r3, [r4, #16]
 80110c6:	4798      	blx	r3
 80110c8:	2802      	cmp	r0, #2
 80110ca:	d008      	beq.n	80110de <uxr_receive_reliable_message+0xfa>
 80110cc:	2801      	cmp	r0, #1
 80110ce:	d0e2      	beq.n	8011096 <uxr_receive_reliable_message+0xb2>
 80110d0:	e799      	b.n	8011006 <uxr_receive_reliable_message+0x22>
 80110d2:	9b08      	ldr	r3, [sp, #32]
 80110d4:	81a5      	strh	r5, [r4, #12]
 80110d6:	2601      	movs	r6, #1
 80110d8:	f883 9000 	strb.w	r9, [r3]
 80110dc:	e794      	b.n	8011008 <uxr_receive_reliable_message+0x24>
 80110de:	2601      	movs	r6, #1
 80110e0:	e792      	b.n	8011008 <uxr_receive_reliable_message+0x24>
 80110e2:	bf00      	nop

080110e4 <uxr_next_input_reliable_buffer_available>:
 80110e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110e8:	4604      	mov	r4, r0
 80110ea:	460f      	mov	r7, r1
 80110ec:	8980      	ldrh	r0, [r0, #12]
 80110ee:	2101      	movs	r1, #1
 80110f0:	4690      	mov	r8, r2
 80110f2:	f000 fd19 	bl	8011b28 <uxr_seq_num_add>
 80110f6:	8922      	ldrh	r2, [r4, #8]
 80110f8:	fbb0 f6f2 	udiv	r6, r0, r2
 80110fc:	fb02 0616 	mls	r6, r2, r6, r0
 8011100:	b2b6      	uxth	r6, r6
 8011102:	6863      	ldr	r3, [r4, #4]
 8011104:	fbb3 f3f2 	udiv	r3, r3, r2
 8011108:	fb06 f303 	mul.w	r3, r6, r3
 801110c:	6826      	ldr	r6, [r4, #0]
 801110e:	3304      	adds	r3, #4
 8011110:	441e      	add	r6, r3
 8011112:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8011116:	f1b9 0f00 	cmp.w	r9, #0
 801111a:	d023      	beq.n	8011164 <uxr_next_input_reliable_buffer_available+0x80>
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	4605      	mov	r5, r0
 8011120:	4630      	mov	r0, r6
 8011122:	4798      	blx	r3
 8011124:	4682      	mov	sl, r0
 8011126:	b300      	cbz	r0, 801116a <uxr_next_input_reliable_buffer_available+0x86>
 8011128:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801112c:	2101      	movs	r1, #1
 801112e:	4650      	mov	r0, sl
 8011130:	f000 fcfa 	bl	8011b28 <uxr_seq_num_add>
 8011134:	8921      	ldrh	r1, [r4, #8]
 8011136:	fbb0 f2f1 	udiv	r2, r0, r1
 801113a:	4682      	mov	sl, r0
 801113c:	fb01 0212 	mls	r2, r1, r2, r0
 8011140:	e9d4 0300 	ldrd	r0, r3, [r4]
 8011144:	b292      	uxth	r2, r2
 8011146:	fbb3 f3f1 	udiv	r3, r3, r1
 801114a:	fb02 f303 	mul.w	r3, r2, r3
 801114e:	3304      	adds	r3, #4
 8011150:	4418      	add	r0, r3
 8011152:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011156:	b12b      	cbz	r3, 8011164 <uxr_next_input_reliable_buffer_available+0x80>
 8011158:	6923      	ldr	r3, [r4, #16]
 801115a:	4798      	blx	r3
 801115c:	2802      	cmp	r0, #2
 801115e:	d01b      	beq.n	8011198 <uxr_next_input_reliable_buffer_available+0xb4>
 8011160:	2801      	cmp	r0, #1
 8011162:	d0e3      	beq.n	801112c <uxr_next_input_reliable_buffer_available+0x48>
 8011164:	2000      	movs	r0, #0
 8011166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801116a:	464a      	mov	r2, r9
 801116c:	4631      	mov	r1, r6
 801116e:	4638      	mov	r0, r7
 8011170:	f7fb f812 	bl	800c198 <ucdr_init_buffer>
 8011174:	8921      	ldrh	r1, [r4, #8]
 8011176:	fbb5 f2f1 	udiv	r2, r5, r1
 801117a:	fb01 5212 	mls	r2, r1, r2, r5
 801117e:	b292      	uxth	r2, r2
 8011180:	6863      	ldr	r3, [r4, #4]
 8011182:	fbb3 f3f1 	udiv	r3, r3, r1
 8011186:	fb02 f303 	mul.w	r3, r2, r3
 801118a:	6822      	ldr	r2, [r4, #0]
 801118c:	f842 a003 	str.w	sl, [r2, r3]
 8011190:	2001      	movs	r0, #1
 8011192:	81a5      	strh	r5, [r4, #12]
 8011194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011198:	8920      	ldrh	r0, [r4, #8]
 801119a:	fbb5 f3f0 	udiv	r3, r5, r0
 801119e:	fb00 5513 	mls	r5, r0, r3, r5
 80111a2:	b2ad      	uxth	r5, r5
 80111a4:	6863      	ldr	r3, [r4, #4]
 80111a6:	fbb3 f3f0 	udiv	r3, r3, r0
 80111aa:	fb03 f505 	mul.w	r5, r3, r5
 80111ae:	6823      	ldr	r3, [r4, #0]
 80111b0:	2000      	movs	r0, #0
 80111b2:	5158      	str	r0, [r3, r5]
 80111b4:	eb06 0108 	add.w	r1, r6, r8
 80111b8:	eba9 0208 	sub.w	r2, r9, r8
 80111bc:	4638      	mov	r0, r7
 80111be:	f7fa ffeb 	bl	800c198 <ucdr_init_buffer>
 80111c2:	4638      	mov	r0, r7
 80111c4:	4903      	ldr	r1, [pc, #12]	@ (80111d4 <uxr_next_input_reliable_buffer_available+0xf0>)
 80111c6:	4622      	mov	r2, r4
 80111c8:	f7fa ffba 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 80111cc:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80111d0:	2001      	movs	r0, #1
 80111d2:	e7c8      	b.n	8011166 <uxr_next_input_reliable_buffer_available+0x82>
 80111d4:	08010ed9 	.word	0x08010ed9

080111d8 <uxr_process_heartbeat>:
 80111d8:	b538      	push	{r3, r4, r5, lr}
 80111da:	4611      	mov	r1, r2
 80111dc:	4604      	mov	r4, r0
 80111de:	89c0      	ldrh	r0, [r0, #14]
 80111e0:	4615      	mov	r5, r2
 80111e2:	f000 fca9 	bl	8011b38 <uxr_seq_num_cmp>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	bfb8      	it	lt
 80111ea:	81e5      	strhlt	r5, [r4, #14]
 80111ec:	bd38      	pop	{r3, r4, r5, pc}
 80111ee:	bf00      	nop

080111f0 <uxr_compute_acknack>:
 80111f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111f4:	8903      	ldrh	r3, [r0, #8]
 80111f6:	8985      	ldrh	r5, [r0, #12]
 80111f8:	4604      	mov	r4, r0
 80111fa:	460e      	mov	r6, r1
 80111fc:	b1d3      	cbz	r3, 8011234 <uxr_compute_acknack+0x44>
 80111fe:	4628      	mov	r0, r5
 8011200:	2701      	movs	r7, #1
 8011202:	e003      	b.n	801120c <uxr_compute_acknack+0x1c>
 8011204:	4567      	cmp	r7, ip
 8011206:	d215      	bcs.n	8011234 <uxr_compute_acknack+0x44>
 8011208:	89a0      	ldrh	r0, [r4, #12]
 801120a:	3701      	adds	r7, #1
 801120c:	b2b9      	uxth	r1, r7
 801120e:	f000 fc8b 	bl	8011b28 <uxr_seq_num_add>
 8011212:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011216:	fbb0 f3fc 	udiv	r3, r0, ip
 801121a:	fb0c 0313 	mls	r3, ip, r3, r0
 801121e:	b29a      	uxth	r2, r3
 8011220:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011224:	fbb3 f3fc 	udiv	r3, r3, ip
 8011228:	fb02 f303 	mul.w	r3, r2, r3
 801122c:	58cb      	ldr	r3, [r1, r3]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1e8      	bne.n	8011204 <uxr_compute_acknack+0x14>
 8011232:	4605      	mov	r5, r0
 8011234:	8035      	strh	r5, [r6, #0]
 8011236:	2101      	movs	r1, #1
 8011238:	4628      	mov	r0, r5
 801123a:	89e7      	ldrh	r7, [r4, #14]
 801123c:	f000 fc78 	bl	8011b30 <uxr_seq_num_sub>
 8011240:	4601      	mov	r1, r0
 8011242:	4638      	mov	r0, r7
 8011244:	f000 fc74 	bl	8011b30 <uxr_seq_num_sub>
 8011248:	4605      	mov	r5, r0
 801124a:	b318      	cbz	r0, 8011294 <uxr_compute_acknack+0xa4>
 801124c:	f04f 0900 	mov.w	r9, #0
 8011250:	464f      	mov	r7, r9
 8011252:	f04f 0801 	mov.w	r8, #1
 8011256:	fa1f f189 	uxth.w	r1, r9
 801125a:	8830      	ldrh	r0, [r6, #0]
 801125c:	f000 fc64 	bl	8011b28 <uxr_seq_num_add>
 8011260:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011264:	fbb0 f3fc 	udiv	r3, r0, ip
 8011268:	e9d4 1200 	ldrd	r1, r2, [r4]
 801126c:	fb03 001c 	mls	r0, r3, ip, r0
 8011270:	b283      	uxth	r3, r0
 8011272:	fbb2 f2fc 	udiv	r2, r2, ip
 8011276:	fb02 f303 	mul.w	r3, r2, r3
 801127a:	fa08 f209 	lsl.w	r2, r8, r9
 801127e:	58cb      	ldr	r3, [r1, r3]
 8011280:	f109 0901 	add.w	r9, r9, #1
 8011284:	b90b      	cbnz	r3, 801128a <uxr_compute_acknack+0x9a>
 8011286:	4317      	orrs	r7, r2
 8011288:	b2bf      	uxth	r7, r7
 801128a:	454d      	cmp	r5, r9
 801128c:	d1e3      	bne.n	8011256 <uxr_compute_acknack+0x66>
 801128e:	4638      	mov	r0, r7
 8011290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011294:	4607      	mov	r7, r0
 8011296:	4638      	mov	r0, r7
 8011298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801129c <uxr_init_output_best_effort_stream>:
 801129c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80112a0:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80112a4:	6001      	str	r1, [r0, #0]
 80112a6:	7303      	strb	r3, [r0, #12]
 80112a8:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80112ac:	4770      	bx	lr
 80112ae:	bf00      	nop

080112b0 <uxr_reset_output_best_effort_stream>:
 80112b0:	7b02      	ldrb	r2, [r0, #12]
 80112b2:	6042      	str	r2, [r0, #4]
 80112b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80112b8:	81c3      	strh	r3, [r0, #14]
 80112ba:	4770      	bx	lr

080112bc <uxr_prepare_best_effort_buffer_to_write>:
 80112bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112be:	4604      	mov	r4, r0
 80112c0:	b083      	sub	sp, #12
 80112c2:	6840      	ldr	r0, [r0, #4]
 80112c4:	460d      	mov	r5, r1
 80112c6:	4616      	mov	r6, r2
 80112c8:	f7fc fb30 	bl	800d92c <uxr_submessage_padding>
 80112cc:	6863      	ldr	r3, [r4, #4]
 80112ce:	4418      	add	r0, r3
 80112d0:	68a3      	ldr	r3, [r4, #8]
 80112d2:	1942      	adds	r2, r0, r5
 80112d4:	4293      	cmp	r3, r2
 80112d6:	bf2c      	ite	cs
 80112d8:	2701      	movcs	r7, #1
 80112da:	2700      	movcc	r7, #0
 80112dc:	d202      	bcs.n	80112e4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80112de:	4638      	mov	r0, r7
 80112e0:	b003      	add	sp, #12
 80112e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e4:	9000      	str	r0, [sp, #0]
 80112e6:	6821      	ldr	r1, [r4, #0]
 80112e8:	4630      	mov	r0, r6
 80112ea:	2300      	movs	r3, #0
 80112ec:	f7fa ff42 	bl	800c174 <ucdr_init_buffer_origin_offset>
 80112f0:	6861      	ldr	r1, [r4, #4]
 80112f2:	4638      	mov	r0, r7
 80112f4:	4429      	add	r1, r5
 80112f6:	6061      	str	r1, [r4, #4]
 80112f8:	b003      	add	sp, #12
 80112fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112fc <uxr_prepare_best_effort_buffer_to_send>:
 80112fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011300:	4604      	mov	r4, r0
 8011302:	461d      	mov	r5, r3
 8011304:	6840      	ldr	r0, [r0, #4]
 8011306:	7b23      	ldrb	r3, [r4, #12]
 8011308:	4298      	cmp	r0, r3
 801130a:	bf8c      	ite	hi
 801130c:	2601      	movhi	r6, #1
 801130e:	2600      	movls	r6, #0
 8011310:	d802      	bhi.n	8011318 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8011312:	4630      	mov	r0, r6
 8011314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011318:	4688      	mov	r8, r1
 801131a:	89e0      	ldrh	r0, [r4, #14]
 801131c:	2101      	movs	r1, #1
 801131e:	4617      	mov	r7, r2
 8011320:	f000 fc02 	bl	8011b28 <uxr_seq_num_add>
 8011324:	6823      	ldr	r3, [r4, #0]
 8011326:	81e0      	strh	r0, [r4, #14]
 8011328:	8028      	strh	r0, [r5, #0]
 801132a:	f8c8 3000 	str.w	r3, [r8]
 801132e:	6863      	ldr	r3, [r4, #4]
 8011330:	603b      	str	r3, [r7, #0]
 8011332:	7b23      	ldrb	r3, [r4, #12]
 8011334:	6063      	str	r3, [r4, #4]
 8011336:	4630      	mov	r0, r6
 8011338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801133c <on_full_output_buffer>:
 801133c:	b538      	push	{r3, r4, r5, lr}
 801133e:	6802      	ldr	r2, [r0, #0]
 8011340:	460c      	mov	r4, r1
 8011342:	6809      	ldr	r1, [r1, #0]
 8011344:	8923      	ldrh	r3, [r4, #8]
 8011346:	eba2 0c01 	sub.w	ip, r2, r1
 801134a:	6862      	ldr	r2, [r4, #4]
 801134c:	fbb2 f2f3 	udiv	r2, r2, r3
 8011350:	fbbc fcf2 	udiv	ip, ip, r2
 8011354:	f10c 0c01 	add.w	ip, ip, #1
 8011358:	fa1f fc8c 	uxth.w	ip, ip
 801135c:	fbbc fef3 	udiv	lr, ip, r3
 8011360:	fb03 c31e 	mls	r3, r3, lr, ip
 8011364:	b29b      	uxth	r3, r3
 8011366:	fb02 f303 	mul.w	r3, r2, r3
 801136a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801136e:	58ca      	ldr	r2, [r1, r3]
 8011370:	4463      	add	r3, ip
 8011372:	eba2 020c 	sub.w	r2, r2, ip
 8011376:	3308      	adds	r3, #8
 8011378:	4605      	mov	r5, r0
 801137a:	4419      	add	r1, r3
 801137c:	3a04      	subs	r2, #4
 801137e:	6903      	ldr	r3, [r0, #16]
 8011380:	f7fa ff02 	bl	800c188 <ucdr_init_buffer_origin>
 8011384:	4628      	mov	r0, r5
 8011386:	4903      	ldr	r1, [pc, #12]	@ (8011394 <on_full_output_buffer+0x58>)
 8011388:	4622      	mov	r2, r4
 801138a:	f7fa fed9 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 801138e:	2000      	movs	r0, #0
 8011390:	bd38      	pop	{r3, r4, r5, pc}
 8011392:	bf00      	nop
 8011394:	0801133d 	.word	0x0801133d

08011398 <uxr_init_output_reliable_stream>:
 8011398:	b410      	push	{r4}
 801139a:	f89d c004 	ldrb.w	ip, [sp, #4]
 801139e:	8103      	strh	r3, [r0, #8]
 80113a0:	e9c0 1200 	strd	r1, r2, [r0]
 80113a4:	f880 c00c 	strb.w	ip, [r0, #12]
 80113a8:	b1d3      	cbz	r3, 80113e0 <uxr_init_output_reliable_stream+0x48>
 80113aa:	f8c1 c000 	str.w	ip, [r1]
 80113ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80113b2:	f1bc 0f01 	cmp.w	ip, #1
 80113b6:	d913      	bls.n	80113e0 <uxr_init_output_reliable_stream+0x48>
 80113b8:	2301      	movs	r3, #1
 80113ba:	fbb3 f1fc 	udiv	r1, r3, ip
 80113be:	fb0c 3111 	mls	r1, ip, r1, r3
 80113c2:	b289      	uxth	r1, r1
 80113c4:	6842      	ldr	r2, [r0, #4]
 80113c6:	6804      	ldr	r4, [r0, #0]
 80113c8:	fbb2 f2fc 	udiv	r2, r2, ip
 80113cc:	fb01 f202 	mul.w	r2, r1, r2
 80113d0:	7b01      	ldrb	r1, [r0, #12]
 80113d2:	50a1      	str	r1, [r4, r2]
 80113d4:	3301      	adds	r3, #1
 80113d6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	459c      	cmp	ip, r3
 80113de:	d8ec      	bhi.n	80113ba <uxr_init_output_reliable_stream+0x22>
 80113e0:	f04f 32ff 	mov.w	r2, #4294967295
 80113e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80113e8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80113ec:	4905      	ldr	r1, [pc, #20]	@ (8011404 <uxr_init_output_reliable_stream+0x6c>)
 80113ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80113f2:	f8c0 100e 	str.w	r1, [r0, #14]
 80113f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80113fa:	2300      	movs	r3, #0
 80113fc:	8242      	strh	r2, [r0, #18]
 80113fe:	8403      	strh	r3, [r0, #32]
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop
 8011404:	ffff0000 	.word	0xffff0000

08011408 <uxr_reset_output_reliable_stream>:
 8011408:	8901      	ldrh	r1, [r0, #8]
 801140a:	b1b1      	cbz	r1, 801143a <uxr_reset_output_reliable_stream+0x32>
 801140c:	f04f 0c00 	mov.w	ip, #0
 8011410:	4663      	mov	r3, ip
 8011412:	fbb3 f2f1 	udiv	r2, r3, r1
 8011416:	fb01 3312 	mls	r3, r1, r2, r3
 801141a:	b29b      	uxth	r3, r3
 801141c:	6842      	ldr	r2, [r0, #4]
 801141e:	fbb2 f2f1 	udiv	r2, r2, r1
 8011422:	6801      	ldr	r1, [r0, #0]
 8011424:	fb02 f303 	mul.w	r3, r2, r3
 8011428:	7b02      	ldrb	r2, [r0, #12]
 801142a:	50ca      	str	r2, [r1, r3]
 801142c:	f10c 0c01 	add.w	ip, ip, #1
 8011430:	8901      	ldrh	r1, [r0, #8]
 8011432:	fa1f f38c 	uxth.w	r3, ip
 8011436:	4299      	cmp	r1, r3
 8011438:	d8eb      	bhi.n	8011412 <uxr_reset_output_reliable_stream+0xa>
 801143a:	f04f 32ff 	mov.w	r2, #4294967295
 801143e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011442:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011446:	4904      	ldr	r1, [pc, #16]	@ (8011458 <uxr_reset_output_reliable_stream+0x50>)
 8011448:	f8c0 100e 	str.w	r1, [r0, #14]
 801144c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011450:	2300      	movs	r3, #0
 8011452:	8242      	strh	r2, [r0, #18]
 8011454:	8403      	strh	r3, [r0, #32]
 8011456:	4770      	bx	lr
 8011458:	ffff0000 	.word	0xffff0000

0801145c <uxr_prepare_reliable_buffer_to_write>:
 801145c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011460:	4604      	mov	r4, r0
 8011462:	b091      	sub	sp, #68	@ 0x44
 8011464:	8900      	ldrh	r0, [r0, #8]
 8011466:	89e6      	ldrh	r6, [r4, #14]
 8011468:	6823      	ldr	r3, [r4, #0]
 801146a:	9204      	str	r2, [sp, #16]
 801146c:	fbb6 f2f0 	udiv	r2, r6, r0
 8011470:	fb00 6212 	mls	r2, r0, r2, r6
 8011474:	b292      	uxth	r2, r2
 8011476:	6865      	ldr	r5, [r4, #4]
 8011478:	fbb5 f5f0 	udiv	r5, r5, r0
 801147c:	fb05 3202 	mla	r2, r5, r2, r3
 8011480:	3204      	adds	r2, #4
 8011482:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8011486:	f894 900c 	ldrb.w	r9, [r4, #12]
 801148a:	9203      	str	r2, [sp, #12]
 801148c:	468b      	mov	fp, r1
 801148e:	1f2f      	subs	r7, r5, #4
 8011490:	2800      	cmp	r0, #0
 8011492:	f000 814c 	beq.w	801172e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8011496:	f04f 0c00 	mov.w	ip, #0
 801149a:	46e2      	mov	sl, ip
 801149c:	4661      	mov	r1, ip
 801149e:	fbb1 f2f0 	udiv	r2, r1, r0
 80114a2:	fb00 1212 	mls	r2, r0, r2, r1
 80114a6:	b292      	uxth	r2, r2
 80114a8:	fb05 f202 	mul.w	r2, r5, r2
 80114ac:	f10c 0c01 	add.w	ip, ip, #1
 80114b0:	589a      	ldr	r2, [r3, r2]
 80114b2:	454a      	cmp	r2, r9
 80114b4:	bf08      	it	eq
 80114b6:	f10a 0a01 	addeq.w	sl, sl, #1
 80114ba:	fa1f f18c 	uxth.w	r1, ip
 80114be:	bf08      	it	eq
 80114c0:	fa1f fa8a 	uxtheq.w	sl, sl
 80114c4:	4281      	cmp	r1, r0
 80114c6:	d3ea      	bcc.n	801149e <uxr_prepare_reliable_buffer_to_write+0x42>
 80114c8:	4640      	mov	r0, r8
 80114ca:	2104      	movs	r1, #4
 80114cc:	f8cd a014 	str.w	sl, [sp, #20]
 80114d0:	f7fa fe66 	bl	800c1a0 <ucdr_alignment>
 80114d4:	4480      	add	r8, r0
 80114d6:	eb08 020b 	add.w	r2, r8, fp
 80114da:	42ba      	cmp	r2, r7
 80114dc:	f240 80cd 	bls.w	801167a <uxr_prepare_reliable_buffer_to_write+0x21e>
 80114e0:	7b22      	ldrb	r2, [r4, #12]
 80114e2:	445a      	add	r2, fp
 80114e4:	42ba      	cmp	r2, r7
 80114e6:	f240 80b5 	bls.w	8011654 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80114ea:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80114ee:	33fc      	adds	r3, #252	@ 0xfc
 80114f0:	b2ba      	uxth	r2, r7
 80114f2:	4413      	add	r3, r2
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	fb0a f903 	mul.w	r9, sl, r3
 80114fa:	45d9      	cmp	r9, fp
 80114fc:	9305      	str	r3, [sp, #20]
 80114fe:	9306      	str	r3, [sp, #24]
 8011500:	f0c0 80b7 	bcc.w	8011672 <uxr_prepare_reliable_buffer_to_write+0x216>
 8011504:	f108 0304 	add.w	r3, r8, #4
 8011508:	42bb      	cmp	r3, r7
 801150a:	f080 80db 	bcs.w	80116c4 <uxr_prepare_reliable_buffer_to_write+0x268>
 801150e:	f1a2 0904 	sub.w	r9, r2, #4
 8011512:	eba9 0908 	sub.w	r9, r9, r8
 8011516:	9b05      	ldr	r3, [sp, #20]
 8011518:	fa1f f989 	uxth.w	r9, r9
 801151c:	ebab 0b09 	sub.w	fp, fp, r9
 8011520:	fbbb f2f3 	udiv	r2, fp, r3
 8011524:	fb03 b312 	mls	r3, r3, r2, fp
 8011528:	2b00      	cmp	r3, #0
 801152a:	f000 80c8 	beq.w	80116be <uxr_prepare_reliable_buffer_to_write+0x262>
 801152e:	3201      	adds	r2, #1
 8011530:	b292      	uxth	r2, r2
 8011532:	9306      	str	r3, [sp, #24]
 8011534:	4552      	cmp	r2, sl
 8011536:	f200 809c 	bhi.w	8011672 <uxr_prepare_reliable_buffer_to_write+0x216>
 801153a:	f10d 0b20 	add.w	fp, sp, #32
 801153e:	2a00      	cmp	r2, #0
 8011540:	d042      	beq.n	80115c8 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8011542:	f8cd 801c 	str.w	r8, [sp, #28]
 8011546:	f04f 0a00 	mov.w	sl, #0
 801154a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801154e:	9505      	str	r5, [sp, #20]
 8011550:	f10d 0b20 	add.w	fp, sp, #32
 8011554:	4615      	mov	r5, r2
 8011556:	e000      	b.n	801155a <uxr_prepare_reliable_buffer_to_write+0xfe>
 8011558:	46c1      	mov	r9, r8
 801155a:	8920      	ldrh	r0, [r4, #8]
 801155c:	fbb6 f2f0 	udiv	r2, r6, r0
 8011560:	fb00 6112 	mls	r1, r0, r2, r6
 8011564:	b28a      	uxth	r2, r1
 8011566:	6863      	ldr	r3, [r4, #4]
 8011568:	fbb3 f1f0 	udiv	r1, r3, r0
 801156c:	6823      	ldr	r3, [r4, #0]
 801156e:	fb02 f101 	mul.w	r1, r2, r1
 8011572:	3104      	adds	r1, #4
 8011574:	4419      	add	r1, r3
 8011576:	4658      	mov	r0, fp
 8011578:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801157c:	9200      	str	r2, [sp, #0]
 801157e:	2300      	movs	r3, #0
 8011580:	463a      	mov	r2, r7
 8011582:	f7fa fdf7 	bl	800c174 <ucdr_init_buffer_origin_offset>
 8011586:	464a      	mov	r2, r9
 8011588:	2300      	movs	r3, #0
 801158a:	210d      	movs	r1, #13
 801158c:	4658      	mov	r0, fp
 801158e:	f7fc f98d 	bl	800d8ac <uxr_buffer_submessage_header>
 8011592:	8921      	ldrh	r1, [r4, #8]
 8011594:	fbb6 f2f1 	udiv	r2, r6, r1
 8011598:	fb01 6212 	mls	r2, r1, r2, r6
 801159c:	b292      	uxth	r2, r2
 801159e:	6863      	ldr	r3, [r4, #4]
 80115a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80115a4:	fb02 f303 	mul.w	r3, r2, r3
 80115a8:	6822      	ldr	r2, [r4, #0]
 80115aa:	4630      	mov	r0, r6
 80115ac:	50d7      	str	r7, [r2, r3]
 80115ae:	2101      	movs	r1, #1
 80115b0:	f000 faba 	bl	8011b28 <uxr_seq_num_add>
 80115b4:	f10a 0a01 	add.w	sl, sl, #1
 80115b8:	fa1f f38a 	uxth.w	r3, sl
 80115bc:	429d      	cmp	r5, r3
 80115be:	4606      	mov	r6, r0
 80115c0:	d8ca      	bhi.n	8011558 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80115c2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80115c6:	9d05      	ldr	r5, [sp, #20]
 80115c8:	8920      	ldrh	r0, [r4, #8]
 80115ca:	fbb6 f3f0 	udiv	r3, r6, r0
 80115ce:	fb00 6313 	mls	r3, r0, r3, r6
 80115d2:	b299      	uxth	r1, r3
 80115d4:	6863      	ldr	r3, [r4, #4]
 80115d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80115da:	fb01 f303 	mul.w	r3, r1, r3
 80115de:	6821      	ldr	r1, [r4, #0]
 80115e0:	3304      	adds	r3, #4
 80115e2:	4419      	add	r1, r3
 80115e4:	463a      	mov	r2, r7
 80115e6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80115ea:	9000      	str	r0, [sp, #0]
 80115ec:	2300      	movs	r3, #0
 80115ee:	4658      	mov	r0, fp
 80115f0:	f7fa fdc0 	bl	800c174 <ucdr_init_buffer_origin_offset>
 80115f4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80115f8:	4658      	mov	r0, fp
 80115fa:	fa1f f289 	uxth.w	r2, r9
 80115fe:	2302      	movs	r3, #2
 8011600:	210d      	movs	r1, #13
 8011602:	f7fc f953 	bl	800d8ac <uxr_buffer_submessage_header>
 8011606:	9b03      	ldr	r3, [sp, #12]
 8011608:	8927      	ldrh	r7, [r4, #8]
 801160a:	7b20      	ldrb	r0, [r4, #12]
 801160c:	f108 0104 	add.w	r1, r8, #4
 8011610:	440b      	add	r3, r1
 8011612:	4619      	mov	r1, r3
 8011614:	fbb6 f3f7 	udiv	r3, r6, r7
 8011618:	fb07 6313 	mls	r3, r7, r3, r6
 801161c:	f1a5 0208 	sub.w	r2, r5, #8
 8011620:	b29d      	uxth	r5, r3
 8011622:	3004      	adds	r0, #4
 8011624:	6863      	ldr	r3, [r4, #4]
 8011626:	fbb3 f3f7 	udiv	r3, r3, r7
 801162a:	fb05 f303 	mul.w	r3, r5, r3
 801162e:	6825      	ldr	r5, [r4, #0]
 8011630:	4448      	add	r0, r9
 8011632:	50e8      	str	r0, [r5, r3]
 8011634:	9d04      	ldr	r5, [sp, #16]
 8011636:	eba2 0208 	sub.w	r2, r2, r8
 801163a:	4628      	mov	r0, r5
 801163c:	f7fa fdac 	bl	800c198 <ucdr_init_buffer>
 8011640:	4628      	mov	r0, r5
 8011642:	493c      	ldr	r1, [pc, #240]	@ (8011734 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8011644:	4622      	mov	r2, r4
 8011646:	f7fa fd7b 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 801164a:	2001      	movs	r0, #1
 801164c:	81e6      	strh	r6, [r4, #14]
 801164e:	b011      	add	sp, #68	@ 0x44
 8011650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011654:	2101      	movs	r1, #1
 8011656:	89e0      	ldrh	r0, [r4, #14]
 8011658:	f000 fa66 	bl	8011b28 <uxr_seq_num_add>
 801165c:	8921      	ldrh	r1, [r4, #8]
 801165e:	4605      	mov	r5, r0
 8011660:	8a60      	ldrh	r0, [r4, #18]
 8011662:	f000 fa61 	bl	8011b28 <uxr_seq_num_add>
 8011666:	4601      	mov	r1, r0
 8011668:	4628      	mov	r0, r5
 801166a:	f000 fa65 	bl	8011b38 <uxr_seq_num_cmp>
 801166e:	2800      	cmp	r0, #0
 8011670:	dd42      	ble.n	80116f8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8011672:	2000      	movs	r0, #0
 8011674:	b011      	add	sp, #68	@ 0x44
 8011676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167a:	8921      	ldrh	r1, [r4, #8]
 801167c:	8a60      	ldrh	r0, [r4, #18]
 801167e:	9205      	str	r2, [sp, #20]
 8011680:	f000 fa52 	bl	8011b28 <uxr_seq_num_add>
 8011684:	4601      	mov	r1, r0
 8011686:	4630      	mov	r0, r6
 8011688:	f000 fa56 	bl	8011b38 <uxr_seq_num_cmp>
 801168c:	2800      	cmp	r0, #0
 801168e:	9a05      	ldr	r2, [sp, #20]
 8011690:	dcef      	bgt.n	8011672 <uxr_prepare_reliable_buffer_to_write+0x216>
 8011692:	8927      	ldrh	r7, [r4, #8]
 8011694:	fbb6 f3f7 	udiv	r3, r6, r7
 8011698:	fb07 6313 	mls	r3, r7, r3, r6
 801169c:	b29d      	uxth	r5, r3
 801169e:	6863      	ldr	r3, [r4, #4]
 80116a0:	6824      	ldr	r4, [r4, #0]
 80116a2:	fbb3 f3f7 	udiv	r3, r3, r7
 80116a6:	fb05 f303 	mul.w	r3, r5, r3
 80116aa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80116ae:	50e2      	str	r2, [r4, r3]
 80116b0:	2300      	movs	r3, #0
 80116b2:	f8cd 8000 	str.w	r8, [sp]
 80116b6:	f7fa fd5d 	bl	800c174 <ucdr_init_buffer_origin_offset>
 80116ba:	2001      	movs	r0, #1
 80116bc:	e7da      	b.n	8011674 <uxr_prepare_reliable_buffer_to_write+0x218>
 80116be:	b293      	uxth	r3, r2
 80116c0:	461a      	mov	r2, r3
 80116c2:	e737      	b.n	8011534 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80116c4:	4630      	mov	r0, r6
 80116c6:	2101      	movs	r1, #1
 80116c8:	9207      	str	r2, [sp, #28]
 80116ca:	f000 fa2d 	bl	8011b28 <uxr_seq_num_add>
 80116ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80116d2:	fbb0 f1fc 	udiv	r1, r0, ip
 80116d6:	fb0c 0111 	mls	r1, ip, r1, r0
 80116da:	4606      	mov	r6, r0
 80116dc:	b288      	uxth	r0, r1
 80116de:	6863      	ldr	r3, [r4, #4]
 80116e0:	fbb3 f1fc 	udiv	r1, r3, ip
 80116e4:	6823      	ldr	r3, [r4, #0]
 80116e6:	9a07      	ldr	r2, [sp, #28]
 80116e8:	fb00 f101 	mul.w	r1, r0, r1
 80116ec:	3104      	adds	r1, #4
 80116ee:	440b      	add	r3, r1
 80116f0:	9303      	str	r3, [sp, #12]
 80116f2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80116f6:	e70a      	b.n	801150e <uxr_prepare_reliable_buffer_to_write+0xb2>
 80116f8:	8921      	ldrh	r1, [r4, #8]
 80116fa:	fbb5 f3f1 	udiv	r3, r5, r1
 80116fe:	fb01 5313 	mls	r3, r1, r3, r5
 8011702:	b29a      	uxth	r2, r3
 8011704:	6863      	ldr	r3, [r4, #4]
 8011706:	fbb3 f3f1 	udiv	r3, r3, r1
 801170a:	6821      	ldr	r1, [r4, #0]
 801170c:	9804      	ldr	r0, [sp, #16]
 801170e:	fb02 f303 	mul.w	r3, r2, r3
 8011712:	3304      	adds	r3, #4
 8011714:	7b22      	ldrb	r2, [r4, #12]
 8011716:	4419      	add	r1, r3
 8011718:	445a      	add	r2, fp
 801171a:	f841 2c04 	str.w	r2, [r1, #-4]
 801171e:	7b23      	ldrb	r3, [r4, #12]
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	2300      	movs	r3, #0
 8011724:	f7fa fd26 	bl	800c174 <ucdr_init_buffer_origin_offset>
 8011728:	81e5      	strh	r5, [r4, #14]
 801172a:	2001      	movs	r0, #1
 801172c:	e7a2      	b.n	8011674 <uxr_prepare_reliable_buffer_to_write+0x218>
 801172e:	4682      	mov	sl, r0
 8011730:	e6ca      	b.n	80114c8 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8011732:	bf00      	nop
 8011734:	0801133d 	.word	0x0801133d

08011738 <uxr_prepare_next_reliable_buffer_to_send>:
 8011738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801173a:	4604      	mov	r4, r0
 801173c:	460f      	mov	r7, r1
 801173e:	8a00      	ldrh	r0, [r0, #16]
 8011740:	2101      	movs	r1, #1
 8011742:	4616      	mov	r6, r2
 8011744:	461d      	mov	r5, r3
 8011746:	f000 f9ef 	bl	8011b28 <uxr_seq_num_add>
 801174a:	8028      	strh	r0, [r5, #0]
 801174c:	8922      	ldrh	r2, [r4, #8]
 801174e:	fbb0 f3f2 	udiv	r3, r0, r2
 8011752:	fb02 0c13 	mls	ip, r2, r3, r0
 8011756:	fa1f fc8c 	uxth.w	ip, ip
 801175a:	6863      	ldr	r3, [r4, #4]
 801175c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011760:	fb0c fc03 	mul.w	ip, ip, r3
 8011764:	6823      	ldr	r3, [r4, #0]
 8011766:	89e1      	ldrh	r1, [r4, #14]
 8011768:	f10c 0c04 	add.w	ip, ip, #4
 801176c:	4463      	add	r3, ip
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	6823      	ldr	r3, [r4, #0]
 8011772:	449c      	add	ip, r3
 8011774:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8011778:	6033      	str	r3, [r6, #0]
 801177a:	f000 f9dd 	bl	8011b38 <uxr_seq_num_cmp>
 801177e:	2800      	cmp	r0, #0
 8011780:	dd01      	ble.n	8011786 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8011782:	2000      	movs	r0, #0
 8011784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011786:	7b23      	ldrb	r3, [r4, #12]
 8011788:	6832      	ldr	r2, [r6, #0]
 801178a:	429a      	cmp	r2, r3
 801178c:	d9f9      	bls.n	8011782 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801178e:	8a61      	ldrh	r1, [r4, #18]
 8011790:	8a20      	ldrh	r0, [r4, #16]
 8011792:	f000 f9cd 	bl	8011b30 <uxr_seq_num_sub>
 8011796:	8923      	ldrh	r3, [r4, #8]
 8011798:	4283      	cmp	r3, r0
 801179a:	d0f2      	beq.n	8011782 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801179c:	8828      	ldrh	r0, [r5, #0]
 801179e:	89e3      	ldrh	r3, [r4, #14]
 80117a0:	8220      	strh	r0, [r4, #16]
 80117a2:	4298      	cmp	r0, r3
 80117a4:	d001      	beq.n	80117aa <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80117a6:	2001      	movs	r0, #1
 80117a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117aa:	2101      	movs	r1, #1
 80117ac:	f000 f9bc 	bl	8011b28 <uxr_seq_num_add>
 80117b0:	81e0      	strh	r0, [r4, #14]
 80117b2:	2001      	movs	r0, #1
 80117b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117b6:	bf00      	nop

080117b8 <uxr_update_output_stream_heartbeat_timestamp>:
 80117b8:	b570      	push	{r4, r5, r6, lr}
 80117ba:	8a01      	ldrh	r1, [r0, #16]
 80117bc:	4604      	mov	r4, r0
 80117be:	8a40      	ldrh	r0, [r0, #18]
 80117c0:	4615      	mov	r5, r2
 80117c2:	461e      	mov	r6, r3
 80117c4:	f000 f9b8 	bl	8011b38 <uxr_seq_num_cmp>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	db07      	blt.n	80117dc <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80117cc:	f04f 32ff 	mov.w	r2, #4294967295
 80117d0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80117d4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80117d8:	2000      	movs	r0, #0
 80117da:	bd70      	pop	{r4, r5, r6, pc}
 80117dc:	f894 0020 	ldrb.w	r0, [r4, #32]
 80117e0:	b940      	cbnz	r0, 80117f4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80117e2:	2301      	movs	r3, #1
 80117e4:	f884 3020 	strb.w	r3, [r4, #32]
 80117e8:	3564      	adds	r5, #100	@ 0x64
 80117ea:	f146 0600 	adc.w	r6, r6, #0
 80117ee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80117f2:	bd70      	pop	{r4, r5, r6, pc}
 80117f4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 80117f8:	4295      	cmp	r5, r2
 80117fa:	eb76 0303 	sbcs.w	r3, r6, r3
 80117fe:	bfa5      	ittet	ge
 8011800:	3001      	addge	r0, #1
 8011802:	f884 0020 	strbge.w	r0, [r4, #32]
 8011806:	2000      	movlt	r0, #0
 8011808:	2001      	movge	r0, #1
 801180a:	e7ed      	b.n	80117e8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801180c <uxr_begin_output_nack_buffer_it>:
 801180c:	8a40      	ldrh	r0, [r0, #18]
 801180e:	4770      	bx	lr

08011810 <uxr_next_reliable_nack_buffer_to_send>:
 8011810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011814:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8011818:	b082      	sub	sp, #8
 801181a:	f1b8 0f00 	cmp.w	r8, #0
 801181e:	d011      	beq.n	8011844 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8011820:	4604      	mov	r4, r0
 8011822:	8818      	ldrh	r0, [r3, #0]
 8011824:	460e      	mov	r6, r1
 8011826:	4617      	mov	r7, r2
 8011828:	461d      	mov	r5, r3
 801182a:	2101      	movs	r1, #1
 801182c:	f000 f97c 	bl	8011b28 <uxr_seq_num_add>
 8011830:	8028      	strh	r0, [r5, #0]
 8011832:	8a21      	ldrh	r1, [r4, #16]
 8011834:	f000 f980 	bl	8011b38 <uxr_seq_num_cmp>
 8011838:	2800      	cmp	r0, #0
 801183a:	dd07      	ble.n	801184c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801183c:	f04f 0800 	mov.w	r8, #0
 8011840:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8011844:	4640      	mov	r0, r8
 8011846:	b002      	add	sp, #8
 8011848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801184c:	8921      	ldrh	r1, [r4, #8]
 801184e:	8828      	ldrh	r0, [r5, #0]
 8011850:	6823      	ldr	r3, [r4, #0]
 8011852:	fbb0 f2f1 	udiv	r2, r0, r1
 8011856:	fb01 0c12 	mls	ip, r1, r2, r0
 801185a:	fa1f f28c 	uxth.w	r2, ip
 801185e:	9301      	str	r3, [sp, #4]
 8011860:	6863      	ldr	r3, [r4, #4]
 8011862:	fbb3 fcf1 	udiv	ip, r3, r1
 8011866:	9b01      	ldr	r3, [sp, #4]
 8011868:	fb02 fc0c 	mul.w	ip, r2, ip
 801186c:	f10c 0c04 	add.w	ip, ip, #4
 8011870:	4463      	add	r3, ip
 8011872:	6033      	str	r3, [r6, #0]
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	4463      	add	r3, ip
 8011878:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801187c:	603b      	str	r3, [r7, #0]
 801187e:	7b22      	ldrb	r2, [r4, #12]
 8011880:	429a      	cmp	r2, r3
 8011882:	d0d2      	beq.n	801182a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8011884:	4640      	mov	r0, r8
 8011886:	b002      	add	sp, #8
 8011888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801188c <uxr_process_acknack>:
 801188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188e:	4604      	mov	r4, r0
 8011890:	460e      	mov	r6, r1
 8011892:	4610      	mov	r0, r2
 8011894:	2101      	movs	r1, #1
 8011896:	f000 f94b 	bl	8011b30 <uxr_seq_num_sub>
 801189a:	8a61      	ldrh	r1, [r4, #18]
 801189c:	f000 f948 	bl	8011b30 <uxr_seq_num_sub>
 80118a0:	b1c0      	cbz	r0, 80118d4 <uxr_process_acknack+0x48>
 80118a2:	4605      	mov	r5, r0
 80118a4:	2700      	movs	r7, #0
 80118a6:	2101      	movs	r1, #1
 80118a8:	8a60      	ldrh	r0, [r4, #18]
 80118aa:	f000 f93d 	bl	8011b28 <uxr_seq_num_add>
 80118ae:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80118b2:	fbb0 f1fc 	udiv	r1, r0, ip
 80118b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80118ba:	fb0c 0111 	mls	r1, ip, r1, r0
 80118be:	b289      	uxth	r1, r1
 80118c0:	3701      	adds	r7, #1
 80118c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80118c6:	fb01 f303 	mul.w	r3, r1, r3
 80118ca:	42bd      	cmp	r5, r7
 80118cc:	7b21      	ldrb	r1, [r4, #12]
 80118ce:	8260      	strh	r0, [r4, #18]
 80118d0:	50d1      	str	r1, [r2, r3]
 80118d2:	d1e8      	bne.n	80118a6 <uxr_process_acknack+0x1a>
 80118d4:	3e00      	subs	r6, #0
 80118d6:	f04f 0300 	mov.w	r3, #0
 80118da:	bf18      	it	ne
 80118dc:	2601      	movne	r6, #1
 80118de:	f884 3020 	strb.w	r3, [r4, #32]
 80118e2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80118e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080118e8 <uxr_is_output_up_to_date>:
 80118e8:	8a01      	ldrh	r1, [r0, #16]
 80118ea:	8a40      	ldrh	r0, [r0, #18]
 80118ec:	b508      	push	{r3, lr}
 80118ee:	f000 f923 	bl	8011b38 <uxr_seq_num_cmp>
 80118f2:	fab0 f080 	clz	r0, r0
 80118f6:	0940      	lsrs	r0, r0, #5
 80118f8:	bd08      	pop	{r3, pc}
 80118fa:	bf00      	nop

080118fc <get_available_free_slots>:
 80118fc:	8902      	ldrh	r2, [r0, #8]
 80118fe:	b1da      	cbz	r2, 8011938 <get_available_free_slots+0x3c>
 8011900:	b530      	push	{r4, r5, lr}
 8011902:	2100      	movs	r1, #0
 8011904:	6843      	ldr	r3, [r0, #4]
 8011906:	6805      	ldr	r5, [r0, #0]
 8011908:	7b04      	ldrb	r4, [r0, #12]
 801190a:	fbb3 fef2 	udiv	lr, r3, r2
 801190e:	4608      	mov	r0, r1
 8011910:	460b      	mov	r3, r1
 8011912:	fbb3 fcf2 	udiv	ip, r3, r2
 8011916:	fb02 331c 	mls	r3, r2, ip, r3
 801191a:	b29b      	uxth	r3, r3
 801191c:	fb0e f303 	mul.w	r3, lr, r3
 8011920:	3101      	adds	r1, #1
 8011922:	f855 c003 	ldr.w	ip, [r5, r3]
 8011926:	4564      	cmp	r4, ip
 8011928:	bf08      	it	eq
 801192a:	3001      	addeq	r0, #1
 801192c:	b28b      	uxth	r3, r1
 801192e:	bf08      	it	eq
 8011930:	b280      	uxtheq	r0, r0
 8011932:	4293      	cmp	r3, r2
 8011934:	d3ed      	bcc.n	8011912 <get_available_free_slots+0x16>
 8011936:	bd30      	pop	{r4, r5, pc}
 8011938:	4610      	mov	r0, r2
 801193a:	4770      	bx	lr

0801193c <uxr_buffer_cancel_data>:
 801193c:	b510      	push	{r4, lr}
 801193e:	b094      	sub	sp, #80	@ 0x50
 8011940:	2300      	movs	r3, #0
 8011942:	9202      	str	r2, [sp, #8]
 8011944:	9205      	str	r2, [sp, #20]
 8011946:	9301      	str	r3, [sp, #4]
 8011948:	2201      	movs	r2, #1
 801194a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801194e:	f88d 301e 	strb.w	r3, [sp, #30]
 8011952:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8011956:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801195a:	2308      	movs	r3, #8
 801195c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8011960:	9300      	str	r3, [sp, #0]
 8011962:	2210      	movs	r2, #16
 8011964:	ab0c      	add	r3, sp, #48	@ 0x30
 8011966:	4604      	mov	r4, r0
 8011968:	9103      	str	r1, [sp, #12]
 801196a:	f7fb fd01 	bl	800d370 <uxr_prepare_stream_to_write_submessage>
 801196e:	b918      	cbnz	r0, 8011978 <uxr_buffer_cancel_data+0x3c>
 8011970:	4604      	mov	r4, r0
 8011972:	4620      	mov	r0, r4
 8011974:	b014      	add	sp, #80	@ 0x50
 8011976:	bd10      	pop	{r4, pc}
 8011978:	9905      	ldr	r1, [sp, #20]
 801197a:	aa06      	add	r2, sp, #24
 801197c:	4620      	mov	r0, r4
 801197e:	f7fb fe2d 	bl	800d5dc <uxr_init_base_object_request>
 8011982:	a906      	add	r1, sp, #24
 8011984:	4604      	mov	r4, r0
 8011986:	a80c      	add	r0, sp, #48	@ 0x30
 8011988:	f7fd f83c 	bl	800ea04 <uxr_serialize_READ_DATA_Payload>
 801198c:	4620      	mov	r0, r4
 801198e:	b014      	add	sp, #80	@ 0x50
 8011990:	bd10      	pop	{r4, pc}
 8011992:	bf00      	nop

08011994 <read_submessage_format>:
 8011994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011998:	b095      	sub	sp, #84	@ 0x54
 801199a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801199e:	b113      	cbz	r3, 80119a6 <read_submessage_format+0x12>
 80119a0:	b015      	add	sp, #84	@ 0x54
 80119a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119a6:	460c      	mov	r4, r1
 80119a8:	4615      	mov	r5, r2
 80119aa:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80119ae:	4607      	mov	r7, r0
 80119b0:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80119b2:	9004      	str	r0, [sp, #16]
 80119b4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80119b6:	9005      	str	r0, [sp, #20]
 80119b8:	1a52      	subs	r2, r2, r1
 80119ba:	a80c      	add	r0, sp, #48	@ 0x30
 80119bc:	4699      	mov	r9, r3
 80119be:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 80119c2:	f7fa fbe9 	bl	800c198 <ucdr_init_buffer>
 80119c6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80119ca:	a80c      	add	r0, sp, #48	@ 0x30
 80119cc:	f7fa fbb8 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 80119d0:	69e2      	ldr	r2, [r4, #28]
 80119d2:	b19a      	cbz	r2, 80119fc <read_submessage_format+0x68>
 80119d4:	f1b8 0f07 	cmp.w	r8, #7
 80119d8:	f882 9014 	strb.w	r9, [r2, #20]
 80119dc:	d040      	beq.n	8011a60 <read_submessage_format+0xcc>
 80119de:	f1b8 0f08 	cmp.w	r8, #8
 80119e2:	d02e      	beq.n	8011a42 <read_submessage_format+0xae>
 80119e4:	f1b8 0f06 	cmp.w	r8, #6
 80119e8:	d011      	beq.n	8011a0e <read_submessage_format+0x7a>
 80119ea:	2301      	movs	r3, #1
 80119ec:	7513      	strb	r3, [r2, #20]
 80119ee:	4629      	mov	r1, r5
 80119f0:	4620      	mov	r0, r4
 80119f2:	f7fa fc21 	bl	800c238 <ucdr_advance_buffer>
 80119f6:	b015      	add	sp, #84	@ 0x54
 80119f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119fc:	f1b8 0f07 	cmp.w	r8, #7
 8011a00:	d02e      	beq.n	8011a60 <read_submessage_format+0xcc>
 8011a02:	f1b8 0f08 	cmp.w	r8, #8
 8011a06:	d01c      	beq.n	8011a42 <read_submessage_format+0xae>
 8011a08:	f1b8 0f06 	cmp.w	r8, #6
 8011a0c:	d1ef      	bne.n	80119ee <read_submessage_format+0x5a>
 8011a0e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8011a12:	f1b8 0f00 	cmp.w	r8, #0
 8011a16:	d011      	beq.n	8011a3c <read_submessage_format+0xa8>
 8011a18:	ab0c      	add	r3, sp, #48	@ 0x30
 8011a1a:	e9cd 3500 	strd	r3, r5, [sp]
 8011a1e:	2306      	movs	r3, #6
 8011a20:	f88d 3016 	strb.w	r3, [sp, #22]
 8011a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a28:	9302      	str	r3, [sp, #8]
 8011a2a:	4632      	mov	r2, r6
 8011a2c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011a30:	4638      	mov	r0, r7
 8011a32:	47c0      	blx	r8
 8011a34:	2301      	movs	r3, #1
 8011a36:	69e2      	ldr	r2, [r4, #28]
 8011a38:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011a3c:	2a00      	cmp	r2, #0
 8011a3e:	d1d4      	bne.n	80119ea <read_submessage_format+0x56>
 8011a40:	e7d5      	b.n	80119ee <read_submessage_format+0x5a>
 8011a42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d0f8      	beq.n	8011a3c <read_submessage_format+0xa8>
 8011a4a:	a906      	add	r1, sp, #24
 8011a4c:	a80c      	add	r0, sp, #48	@ 0x30
 8011a4e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011a52:	f7fd f877 	bl	800eb44 <uxr_deserialize_SampleIdentity>
 8011a56:	b9a0      	cbnz	r0, 8011a82 <read_submessage_format+0xee>
 8011a58:	69e2      	ldr	r2, [r4, #28]
 8011a5a:	2a00      	cmp	r2, #0
 8011a5c:	d1c5      	bne.n	80119ea <read_submessage_format+0x56>
 8011a5e:	e7c6      	b.n	80119ee <read_submessage_format+0x5a>
 8011a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a64:	b13b      	cbz	r3, 8011a76 <read_submessage_format+0xe2>
 8011a66:	a906      	add	r1, sp, #24
 8011a68:	a80c      	add	r0, sp, #48	@ 0x30
 8011a6a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011a6e:	f7fc fd63 	bl	800e538 <uxr_deserialize_BaseObjectRequest>
 8011a72:	bb60      	cbnz	r0, 8011ace <read_submessage_format+0x13a>
 8011a74:	69e2      	ldr	r2, [r4, #28]
 8011a76:	68a3      	ldr	r3, [r4, #8]
 8011a78:	442b      	add	r3, r5
 8011a7a:	60a3      	str	r3, [r4, #8]
 8011a7c:	2a00      	cmp	r2, #0
 8011a7e:	d1b4      	bne.n	80119ea <read_submessage_format+0x56>
 8011a80:	e7b5      	b.n	80119ee <read_submessage_format+0x5a>
 8011a82:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011a86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011a88:	1a52      	subs	r2, r2, r1
 8011a8a:	eba8 0803 	sub.w	r8, r8, r3
 8011a8e:	a80c      	add	r0, sp, #48	@ 0x30
 8011a90:	f7fa fb82 	bl	800c198 <ucdr_init_buffer>
 8011a94:	44a8      	add	r8, r5
 8011a96:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011a9a:	a80c      	add	r0, sp, #48	@ 0x30
 8011a9c:	f7fa fb50 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 8011aa0:	fa1f f888 	uxth.w	r8, r8
 8011aa4:	ab0c      	add	r3, sp, #48	@ 0x30
 8011aa6:	9300      	str	r3, [sp, #0]
 8011aa8:	f8cd 8004 	str.w	r8, [sp, #4]
 8011aac:	2108      	movs	r1, #8
 8011aae:	f88d 1016 	strb.w	r1, [sp, #22]
 8011ab2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8011ab6:	9102      	str	r1, [sp, #8]
 8011ab8:	ab06      	add	r3, sp, #24
 8011aba:	4632      	mov	r2, r6
 8011abc:	9905      	ldr	r1, [sp, #20]
 8011abe:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8011ac2:	4638      	mov	r0, r7
 8011ac4:	47b0      	blx	r6
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011acc:	e7c4      	b.n	8011a58 <read_submessage_format+0xc4>
 8011ace:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8011ad2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ad4:	1a52      	subs	r2, r2, r1
 8011ad6:	a80c      	add	r0, sp, #48	@ 0x30
 8011ad8:	eba8 0803 	sub.w	r8, r8, r3
 8011adc:	f7fa fb5c 	bl	800c198 <ucdr_init_buffer>
 8011ae0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011ae4:	a80c      	add	r0, sp, #48	@ 0x30
 8011ae6:	f7fa fb2b 	bl	800c140 <ucdr_set_on_full_buffer_callback>
 8011aea:	ab0c      	add	r3, sp, #48	@ 0x30
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011af2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011af6:	44a8      	add	r8, r5
 8011af8:	fa1f f888 	uxth.w	r8, r8
 8011afc:	f8cd 8004 	str.w	r8, [sp, #4]
 8011b00:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011b04:	2107      	movs	r1, #7
 8011b06:	f88d 1016 	strb.w	r1, [sp, #22]
 8011b0a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8011b0e:	9102      	str	r1, [sp, #8]
 8011b10:	4632      	mov	r2, r6
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8011b18:	9905      	ldr	r1, [sp, #20]
 8011b1a:	4638      	mov	r0, r7
 8011b1c:	47b0      	blx	r6
 8011b1e:	2301      	movs	r3, #1
 8011b20:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011b24:	e7a6      	b.n	8011a74 <read_submessage_format+0xe0>
 8011b26:	bf00      	nop

08011b28 <uxr_seq_num_add>:
 8011b28:	4408      	add	r0, r1
 8011b2a:	b280      	uxth	r0, r0
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop

08011b30 <uxr_seq_num_sub>:
 8011b30:	1a40      	subs	r0, r0, r1
 8011b32:	b280      	uxth	r0, r0
 8011b34:	4770      	bx	lr
 8011b36:	bf00      	nop

08011b38 <uxr_seq_num_cmp>:
 8011b38:	4288      	cmp	r0, r1
 8011b3a:	d011      	beq.n	8011b60 <uxr_seq_num_cmp+0x28>
 8011b3c:	d309      	bcc.n	8011b52 <uxr_seq_num_cmp+0x1a>
 8011b3e:	4288      	cmp	r0, r1
 8011b40:	d910      	bls.n	8011b64 <uxr_seq_num_cmp+0x2c>
 8011b42:	1a40      	subs	r0, r0, r1
 8011b44:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8011b48:	bfd4      	ite	le
 8011b4a:	2001      	movle	r0, #1
 8011b4c:	f04f 30ff 	movgt.w	r0, #4294967295
 8011b50:	4770      	bx	lr
 8011b52:	1a0b      	subs	r3, r1, r0
 8011b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011b58:	daf1      	bge.n	8011b3e <uxr_seq_num_cmp+0x6>
 8011b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b5e:	4770      	bx	lr
 8011b60:	2000      	movs	r0, #0
 8011b62:	4770      	bx	lr
 8011b64:	2001      	movs	r0, #1
 8011b66:	4770      	bx	lr

08011b68 <uxr_init_framing_io>:
 8011b68:	2300      	movs	r3, #0
 8011b6a:	7041      	strb	r1, [r0, #1]
 8011b6c:	7003      	strb	r3, [r0, #0]
 8011b6e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop

08011b74 <uxr_write_framed_msg>:
 8011b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b78:	4617      	mov	r7, r2
 8011b7a:	7842      	ldrb	r2, [r0, #1]
 8011b7c:	b083      	sub	sp, #12
 8011b7e:	460e      	mov	r6, r1
 8011b80:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011b84:	469a      	mov	sl, r3
 8011b86:	2901      	cmp	r1, #1
 8011b88:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011b92:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011b96:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011b9a:	f240 8137 	bls.w	8011e0c <uxr_write_framed_msg+0x298>
 8011b9e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011ba2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011ba6:	2901      	cmp	r1, #1
 8011ba8:	f04f 0202 	mov.w	r2, #2
 8011bac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011bb0:	f240 808f 	bls.w	8011cd2 <uxr_write_framed_msg+0x15e>
 8011bb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bb6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011bba:	b2dd      	uxtb	r5, r3
 8011bbc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011bc0:	2203      	movs	r2, #3
 8011bc2:	2901      	cmp	r1, #1
 8011bc4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011bc8:	f240 809a 	bls.w	8011d00 <uxr_write_framed_msg+0x18c>
 8011bcc:	18a1      	adds	r1, r4, r2
 8011bce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011bd0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011bd4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011bd8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011bdc:	3201      	adds	r2, #1
 8011bde:	2801      	cmp	r0, #1
 8011be0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011be4:	f240 80a0 	bls.w	8011d28 <uxr_write_framed_msg+0x1b4>
 8011be8:	18a0      	adds	r0, r4, r2
 8011bea:	3201      	adds	r2, #1
 8011bec:	b2d2      	uxtb	r2, r2
 8011bee:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011bf2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f000 80a9 	beq.w	8011d4e <uxr_write_framed_msg+0x1da>
 8011bfc:	f04f 0900 	mov.w	r9, #0
 8011c00:	46c8      	mov	r8, r9
 8011c02:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011c06:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011c0a:	2901      	cmp	r1, #1
 8011c0c:	f240 80c3 	bls.w	8011d96 <uxr_write_framed_msg+0x222>
 8011c10:	2a29      	cmp	r2, #41	@ 0x29
 8011c12:	f200 809f 	bhi.w	8011d54 <uxr_write_framed_msg+0x1e0>
 8011c16:	18a1      	adds	r1, r4, r2
 8011c18:	3201      	adds	r2, #1
 8011c1a:	b2d2      	uxtb	r2, r2
 8011c1c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011c20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011c24:	ea89 0303 	eor.w	r3, r9, r3
 8011c28:	498c      	ldr	r1, [pc, #560]	@ (8011e5c <uxr_write_framed_msg+0x2e8>)
 8011c2a:	b2db      	uxtb	r3, r3
 8011c2c:	f108 0801 	add.w	r8, r8, #1
 8011c30:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011c34:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011c38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c3a:	4543      	cmp	r3, r8
 8011c3c:	d8e1      	bhi.n	8011c02 <uxr_write_framed_msg+0x8e>
 8011c3e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011c42:	fa5f f889 	uxtb.w	r8, r9
 8011c46:	9301      	str	r3, [sp, #4]
 8011c48:	f04f 0900 	mov.w	r9, #0
 8011c4c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8011c50:	fa5f f18a 	uxtb.w	r1, sl
 8011c54:	2901      	cmp	r1, #1
 8011c56:	d921      	bls.n	8011c9c <uxr_write_framed_msg+0x128>
 8011c58:	2a29      	cmp	r2, #41	@ 0x29
 8011c5a:	f240 80af 	bls.w	8011dbc <uxr_write_framed_msg+0x248>
 8011c5e:	2500      	movs	r5, #0
 8011c60:	e000      	b.n	8011c64 <uxr_write_framed_msg+0xf0>
 8011c62:	b160      	cbz	r0, 8011c7e <uxr_write_framed_msg+0x10a>
 8011c64:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011c68:	1b52      	subs	r2, r2, r5
 8011c6a:	465b      	mov	r3, fp
 8011c6c:	4421      	add	r1, r4
 8011c6e:	4638      	mov	r0, r7
 8011c70:	47b0      	blx	r6
 8011c72:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011c76:	4405      	add	r5, r0
 8011c78:	4295      	cmp	r5, r2
 8011c7a:	d3f2      	bcc.n	8011c62 <uxr_write_framed_msg+0xee>
 8011c7c:	d003      	beq.n	8011c86 <uxr_write_framed_msg+0x112>
 8011c7e:	2000      	movs	r0, #0
 8011c80:	b003      	add	sp, #12
 8011c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c86:	fa5f f18a 	uxtb.w	r1, sl
 8011c8a:	f04f 0300 	mov.w	r3, #0
 8011c8e:	2901      	cmp	r1, #1
 8011c90:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011c94:	f04f 0200 	mov.w	r2, #0
 8011c98:	f200 8090 	bhi.w	8011dbc <uxr_write_framed_msg+0x248>
 8011c9c:	1c51      	adds	r1, r2, #1
 8011c9e:	b2c9      	uxtb	r1, r1
 8011ca0:	2929      	cmp	r1, #41	@ 0x29
 8011ca2:	d8dc      	bhi.n	8011c5e <uxr_write_framed_msg+0xea>
 8011ca4:	18a5      	adds	r5, r4, r2
 8011ca6:	4421      	add	r1, r4
 8011ca8:	3202      	adds	r2, #2
 8011caa:	f088 0820 	eor.w	r8, r8, #32
 8011cae:	4648      	mov	r0, r9
 8011cb0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8011cb4:	b2d2      	uxtb	r2, r2
 8011cb6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8011cba:	f04f 0901 	mov.w	r9, #1
 8011cbe:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011cc2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011cc6:	2800      	cmp	r0, #0
 8011cc8:	f040 8085 	bne.w	8011dd6 <uxr_write_framed_msg+0x262>
 8011ccc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011cd0:	e7bc      	b.n	8011c4c <uxr_write_framed_msg+0xd8>
 8011cd2:	4611      	mov	r1, r2
 8011cd4:	f04f 0c03 	mov.w	ip, #3
 8011cd8:	2204      	movs	r2, #4
 8011cda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011cdc:	4421      	add	r1, r4
 8011cde:	b2dd      	uxtb	r5, r3
 8011ce0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8011ce4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8011ce8:	44a4      	add	ip, r4
 8011cea:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011cee:	f080 0020 	eor.w	r0, r0, #32
 8011cf2:	2901      	cmp	r1, #1
 8011cf4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8011cf8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011cfc:	f63f af66 	bhi.w	8011bcc <uxr_write_framed_msg+0x58>
 8011d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d02:	18a0      	adds	r0, r4, r2
 8011d04:	f085 0520 	eor.w	r5, r5, #32
 8011d08:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011d0c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011d10:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8011d14:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8011d18:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011d1c:	3202      	adds	r2, #2
 8011d1e:	2801      	cmp	r0, #1
 8011d20:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d24:	f63f af60 	bhi.w	8011be8 <uxr_write_framed_msg+0x74>
 8011d28:	1c50      	adds	r0, r2, #1
 8011d2a:	18a5      	adds	r5, r4, r2
 8011d2c:	fa54 f080 	uxtab	r0, r4, r0
 8011d30:	3202      	adds	r2, #2
 8011d32:	f081 0120 	eor.w	r1, r1, #32
 8011d36:	b2d2      	uxtb	r2, r2
 8011d38:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8011d3c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8011d40:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011d44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	f47f af57 	bne.w	8011bfc <uxr_write_framed_msg+0x88>
 8011d4e:	9301      	str	r3, [sp, #4]
 8011d50:	4698      	mov	r8, r3
 8011d52:	e779      	b.n	8011c48 <uxr_write_framed_msg+0xd4>
 8011d54:	2500      	movs	r5, #0
 8011d56:	e001      	b.n	8011d5c <uxr_write_framed_msg+0x1e8>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	d090      	beq.n	8011c7e <uxr_write_framed_msg+0x10a>
 8011d5c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011d60:	1b52      	subs	r2, r2, r5
 8011d62:	465b      	mov	r3, fp
 8011d64:	4421      	add	r1, r4
 8011d66:	4638      	mov	r0, r7
 8011d68:	47b0      	blx	r6
 8011d6a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011d6e:	4405      	add	r5, r0
 8011d70:	4295      	cmp	r5, r2
 8011d72:	d3f1      	bcc.n	8011d58 <uxr_write_framed_msg+0x1e4>
 8011d74:	d183      	bne.n	8011c7e <uxr_write_framed_msg+0x10a>
 8011d76:	f04f 0300 	mov.w	r3, #0
 8011d7a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011d7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011d80:	4543      	cmp	r3, r8
 8011d82:	d964      	bls.n	8011e4e <uxr_write_framed_msg+0x2da>
 8011d84:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011d88:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011d8c:	2901      	cmp	r1, #1
 8011d8e:	f04f 0200 	mov.w	r2, #0
 8011d92:	f63f af3d 	bhi.w	8011c10 <uxr_write_framed_msg+0x9c>
 8011d96:	1c51      	adds	r1, r2, #1
 8011d98:	b2c9      	uxtb	r1, r1
 8011d9a:	2929      	cmp	r1, #41	@ 0x29
 8011d9c:	d8da      	bhi.n	8011d54 <uxr_write_framed_msg+0x1e0>
 8011d9e:	18a0      	adds	r0, r4, r2
 8011da0:	4421      	add	r1, r4
 8011da2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8011da6:	3202      	adds	r2, #2
 8011da8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8011dac:	b2d2      	uxtb	r2, r2
 8011dae:	f083 0020 	eor.w	r0, r3, #32
 8011db2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8011db6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dba:	e733      	b.n	8011c24 <uxr_write_framed_msg+0xb0>
 8011dbc:	18a1      	adds	r1, r4, r2
 8011dbe:	3201      	adds	r2, #1
 8011dc0:	4648      	mov	r0, r9
 8011dc2:	b2d2      	uxtb	r2, r2
 8011dc4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8011dc8:	f04f 0901 	mov.w	r9, #1
 8011dcc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011dd0:	2800      	cmp	r0, #0
 8011dd2:	f43f af7b 	beq.w	8011ccc <uxr_write_framed_msg+0x158>
 8011dd6:	2500      	movs	r5, #0
 8011dd8:	e002      	b.n	8011de0 <uxr_write_framed_msg+0x26c>
 8011dda:	2800      	cmp	r0, #0
 8011ddc:	f43f af4f 	beq.w	8011c7e <uxr_write_framed_msg+0x10a>
 8011de0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8011de4:	1b52      	subs	r2, r2, r5
 8011de6:	465b      	mov	r3, fp
 8011de8:	4421      	add	r1, r4
 8011dea:	4638      	mov	r0, r7
 8011dec:	47b0      	blx	r6
 8011dee:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8011df2:	4405      	add	r5, r0
 8011df4:	4295      	cmp	r5, r2
 8011df6:	d3f0      	bcc.n	8011dda <uxr_write_framed_msg+0x266>
 8011df8:	f47f af41 	bne.w	8011c7e <uxr_write_framed_msg+0x10a>
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8011e02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e04:	b298      	uxth	r0, r3
 8011e06:	b003      	add	sp, #12
 8011e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e0c:	217d      	movs	r1, #125	@ 0x7d
 8011e0e:	f082 0220 	eor.w	r2, r2, #32
 8011e12:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8011e16:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011e1a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8011e1e:	2901      	cmp	r1, #1
 8011e20:	f04f 0203 	mov.w	r2, #3
 8011e24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e28:	d804      	bhi.n	8011e34 <uxr_write_framed_msg+0x2c0>
 8011e2a:	4611      	mov	r1, r2
 8011e2c:	f04f 0c04 	mov.w	ip, #4
 8011e30:	2205      	movs	r2, #5
 8011e32:	e752      	b.n	8011cda <uxr_write_framed_msg+0x166>
 8011e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e36:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8011e3a:	b2dd      	uxtb	r5, r3
 8011e3c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011e40:	2204      	movs	r2, #4
 8011e42:	2901      	cmp	r1, #1
 8011e44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011e48:	f63f aec0 	bhi.w	8011bcc <uxr_write_framed_msg+0x58>
 8011e4c:	e758      	b.n	8011d00 <uxr_write_framed_msg+0x18c>
 8011e4e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011e52:	fa5f f889 	uxtb.w	r8, r9
 8011e56:	9301      	str	r3, [sp, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	e6f5      	b.n	8011c48 <uxr_write_framed_msg+0xd4>
 8011e5c:	08015658 	.word	0x08015658

08011e60 <uxr_framing_read_transport>:
 8011e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e64:	4604      	mov	r4, r0
 8011e66:	b083      	sub	sp, #12
 8011e68:	461f      	mov	r7, r3
 8011e6a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8011e6e:	4689      	mov	r9, r1
 8011e70:	4692      	mov	sl, r2
 8011e72:	f7fb fd61 	bl	800d938 <uxr_millis>
 8011e76:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011e7a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8011e7e:	42b3      	cmp	r3, r6
 8011e80:	4680      	mov	r8, r0
 8011e82:	d061      	beq.n	8011f48 <uxr_framing_read_transport+0xe8>
 8011e84:	d81c      	bhi.n	8011ec0 <uxr_framing_read_transport+0x60>
 8011e86:	1e75      	subs	r5, r6, #1
 8011e88:	1aed      	subs	r5, r5, r3
 8011e8a:	b2ed      	uxtb	r5, r5
 8011e8c:	2600      	movs	r6, #0
 8011e8e:	455d      	cmp	r5, fp
 8011e90:	d81f      	bhi.n	8011ed2 <uxr_framing_read_transport+0x72>
 8011e92:	19ab      	adds	r3, r5, r6
 8011e94:	455b      	cmp	r3, fp
 8011e96:	bf84      	itt	hi
 8011e98:	ebab 0605 	subhi.w	r6, fp, r5
 8011e9c:	b2f6      	uxtbhi	r6, r6
 8011e9e:	b9ed      	cbnz	r5, 8011edc <uxr_framing_read_transport+0x7c>
 8011ea0:	f04f 0b00 	mov.w	fp, #0
 8011ea4:	f7fb fd48 	bl	800d938 <uxr_millis>
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	eba0 0808 	sub.w	r8, r0, r8
 8011eae:	eba3 0308 	sub.w	r3, r3, r8
 8011eb2:	4658      	mov	r0, fp
 8011eb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011eb8:	603b      	str	r3, [r7, #0]
 8011eba:	b003      	add	sp, #12
 8011ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec0:	2e00      	cmp	r6, #0
 8011ec2:	d049      	beq.n	8011f58 <uxr_framing_read_transport+0xf8>
 8011ec4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8011ec8:	b2ed      	uxtb	r5, r5
 8011eca:	3e01      	subs	r6, #1
 8011ecc:	455d      	cmp	r5, fp
 8011ece:	b2f6      	uxtb	r6, r6
 8011ed0:	d9df      	bls.n	8011e92 <uxr_framing_read_transport+0x32>
 8011ed2:	fa5f f58b 	uxtb.w	r5, fp
 8011ed6:	2600      	movs	r6, #0
 8011ed8:	2d00      	cmp	r5, #0
 8011eda:	d0e1      	beq.n	8011ea0 <uxr_framing_read_transport+0x40>
 8011edc:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011ee0:	3102      	adds	r1, #2
 8011ee2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	4421      	add	r1, r4
 8011eea:	462a      	mov	r2, r5
 8011eec:	4650      	mov	r0, sl
 8011eee:	47c8      	blx	r9
 8011ef0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8011f60 <uxr_framing_read_transport+0x100>)
 8011ef6:	4403      	add	r3, r0
 8011ef8:	0859      	lsrs	r1, r3, #1
 8011efa:	fba2 2101 	umull	r2, r1, r2, r1
 8011efe:	0889      	lsrs	r1, r1, #2
 8011f00:	222a      	movs	r2, #42	@ 0x2a
 8011f02:	fb02 3111 	mls	r1, r2, r1, r3
 8011f06:	4683      	mov	fp, r0
 8011f08:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d0c7      	beq.n	8011ea0 <uxr_framing_read_transport+0x40>
 8011f10:	42a8      	cmp	r0, r5
 8011f12:	d1c7      	bne.n	8011ea4 <uxr_framing_read_transport+0x44>
 8011f14:	2e00      	cmp	r6, #0
 8011f16:	d0c5      	beq.n	8011ea4 <uxr_framing_read_transport+0x44>
 8011f18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	3102      	adds	r1, #2
 8011f1e:	4632      	mov	r2, r6
 8011f20:	4421      	add	r1, r4
 8011f22:	2300      	movs	r3, #0
 8011f24:	4650      	mov	r0, sl
 8011f26:	47c8      	blx	r9
 8011f28:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8011f60 <uxr_framing_read_transport+0x100>)
 8011f2e:	180b      	adds	r3, r1, r0
 8011f30:	0859      	lsrs	r1, r3, #1
 8011f32:	fba2 1201 	umull	r1, r2, r2, r1
 8011f36:	0892      	lsrs	r2, r2, #2
 8011f38:	212a      	movs	r1, #42	@ 0x2a
 8011f3a:	fb01 3312 	mls	r3, r1, r2, r3
 8011f3e:	eb00 0b05 	add.w	fp, r0, r5
 8011f42:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8011f46:	e7ad      	b.n	8011ea4 <uxr_framing_read_transport+0x44>
 8011f48:	2600      	movs	r6, #0
 8011f4a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8011f4e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8011f50:	d9bf      	bls.n	8011ed2 <uxr_framing_read_transport+0x72>
 8011f52:	2102      	movs	r1, #2
 8011f54:	2529      	movs	r5, #41	@ 0x29
 8011f56:	e7c4      	b.n	8011ee2 <uxr_framing_read_transport+0x82>
 8011f58:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8011f5c:	b2ed      	uxtb	r5, r5
 8011f5e:	e796      	b.n	8011e8e <uxr_framing_read_transport+0x2e>
 8011f60:	30c30c31 	.word	0x30c30c31

08011f64 <uxr_read_framed_msg>:
 8011f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f68:	461e      	mov	r6, r3
 8011f6a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8011f6e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8011f72:	429d      	cmp	r5, r3
 8011f74:	b083      	sub	sp, #12
 8011f76:	4604      	mov	r4, r0
 8011f78:	4688      	mov	r8, r1
 8011f7a:	4691      	mov	r9, r2
 8011f7c:	f000 8188 	beq.w	8012290 <uxr_read_framed_msg+0x32c>
 8011f80:	7823      	ldrb	r3, [r4, #0]
 8011f82:	4dc1      	ldr	r5, [pc, #772]	@ (8012288 <uxr_read_framed_msg+0x324>)
 8011f84:	4fc1      	ldr	r7, [pc, #772]	@ (801228c <uxr_read_framed_msg+0x328>)
 8011f86:	2b07      	cmp	r3, #7
 8011f88:	d8fd      	bhi.n	8011f86 <uxr_read_framed_msg+0x22>
 8011f8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011f8e:	0115      	.short	0x0115
 8011f90:	00d600f6 	.word	0x00d600f6
 8011f94:	009000b9 	.word	0x009000b9
 8011f98:	0030004d 	.word	0x0030004d
 8011f9c:	0008      	.short	0x0008
 8011f9e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011fa2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011fa6:	4299      	cmp	r1, r3
 8011fa8:	f000 814a 	beq.w	8012240 <uxr_read_framed_msg+0x2dc>
 8011fac:	18e2      	adds	r2, r4, r3
 8011fae:	7892      	ldrb	r2, [r2, #2]
 8011fb0:	2a7d      	cmp	r2, #125	@ 0x7d
 8011fb2:	f000 8199 	beq.w	80122e8 <uxr_read_framed_msg+0x384>
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	0858      	lsrs	r0, r3, #1
 8011fba:	fba5 1000 	umull	r1, r0, r5, r0
 8011fbe:	0880      	lsrs	r0, r0, #2
 8011fc0:	212a      	movs	r1, #42	@ 0x2a
 8011fc2:	fb01 3310 	mls	r3, r1, r0, r3
 8011fc6:	2a7e      	cmp	r2, #126	@ 0x7e
 8011fc8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8011fcc:	f000 8252 	beq.w	8012474 <uxr_read_framed_msg+0x510>
 8011fd0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8011fd2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8011fd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	2200      	movs	r2, #0
 8011fdc:	4299      	cmp	r1, r3
 8011fde:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8011fe0:	7022      	strb	r2, [r4, #0]
 8011fe2:	f000 8179 	beq.w	80122d8 <uxr_read_framed_msg+0x374>
 8011fe6:	2000      	movs	r0, #0
 8011fe8:	b003      	add	sp, #12
 8011fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fee:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011ff2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8011ff6:	4299      	cmp	r1, r3
 8011ff8:	f000 8131 	beq.w	801225e <uxr_read_framed_msg+0x2fa>
 8011ffc:	18e2      	adds	r2, r4, r3
 8011ffe:	7890      	ldrb	r0, [r2, #2]
 8012000:	287d      	cmp	r0, #125	@ 0x7d
 8012002:	f000 8190 	beq.w	8012326 <uxr_read_framed_msg+0x3c2>
 8012006:	3301      	adds	r3, #1
 8012008:	085a      	lsrs	r2, r3, #1
 801200a:	fba5 1202 	umull	r1, r2, r5, r2
 801200e:	0892      	lsrs	r2, r2, #2
 8012010:	212a      	movs	r1, #42	@ 0x2a
 8012012:	fb01 3312 	mls	r3, r1, r2, r3
 8012016:	287e      	cmp	r0, #126	@ 0x7e
 8012018:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801201c:	f000 821a 	beq.w	8012454 <uxr_read_framed_msg+0x4f0>
 8012020:	2307      	movs	r3, #7
 8012022:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012024:	7023      	strb	r3, [r4, #0]
 8012026:	e7ae      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 8012028:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801202a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801202e:	459e      	cmp	lr, r3
 8012030:	d938      	bls.n	80120a4 <uxr_read_framed_msg+0x140>
 8012032:	ee07 8a90 	vmov	s15, r8
 8012036:	212a      	movs	r1, #42	@ 0x2a
 8012038:	e020      	b.n	801207c <uxr_read_framed_msg+0x118>
 801203a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801203e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012042:	f000 80d4 	beq.w	80121ee <uxr_read_framed_msg+0x28a>
 8012046:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801204a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801204e:	f000 8219 	beq.w	8012484 <uxr_read_framed_msg+0x520>
 8012052:	f806 c003 	strb.w	ip, [r6, r3]
 8012056:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801205a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801205c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012060:	ea8a 000c 	eor.w	r0, sl, ip
 8012064:	b2c0      	uxtb	r0, r0
 8012066:	3301      	adds	r3, #1
 8012068:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801206c:	b29b      	uxth	r3, r3
 801206e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012072:	4573      	cmp	r3, lr
 8012074:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012076:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012078:	f080 8120 	bcs.w	80122bc <uxr_read_framed_msg+0x358>
 801207c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012080:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012084:	f100 0c01 	add.w	ip, r0, #1
 8012088:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801208c:	fba5 8202 	umull	r8, r2, r5, r2
 8012090:	0892      	lsrs	r2, r2, #2
 8012092:	4582      	cmp	sl, r0
 8012094:	eb04 0b00 	add.w	fp, r4, r0
 8012098:	fb01 c212 	mls	r2, r1, r2, ip
 801209c:	d1cd      	bne.n	801203a <uxr_read_framed_msg+0xd6>
 801209e:	ee17 8a90 	vmov	r8, s15
 80120a2:	459e      	cmp	lr, r3
 80120a4:	f040 8111 	bne.w	80122ca <uxr_read_framed_msg+0x366>
 80120a8:	2306      	movs	r3, #6
 80120aa:	7023      	strb	r3, [r4, #0]
 80120ac:	e76b      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 80120ae:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80120b2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80120b6:	4298      	cmp	r0, r3
 80120b8:	f000 80c2 	beq.w	8012240 <uxr_read_framed_msg+0x2dc>
 80120bc:	18e2      	adds	r2, r4, r3
 80120be:	7891      	ldrb	r1, [r2, #2]
 80120c0:	297d      	cmp	r1, #125	@ 0x7d
 80120c2:	f000 814c 	beq.w	801235e <uxr_read_framed_msg+0x3fa>
 80120c6:	3301      	adds	r3, #1
 80120c8:	085a      	lsrs	r2, r3, #1
 80120ca:	fba5 0202 	umull	r0, r2, r5, r2
 80120ce:	0892      	lsrs	r2, r2, #2
 80120d0:	202a      	movs	r0, #42	@ 0x2a
 80120d2:	fb00 3312 	mls	r3, r0, r2, r3
 80120d6:	297e      	cmp	r1, #126	@ 0x7e
 80120d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80120dc:	f000 81ca 	beq.w	8012474 <uxr_read_framed_msg+0x510>
 80120e0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80120e2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80120e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	2000      	movs	r0, #0
 80120ec:	428b      	cmp	r3, r1
 80120ee:	8623      	strh	r3, [r4, #48]	@ 0x30
 80120f0:	8660      	strh	r0, [r4, #50]	@ 0x32
 80120f2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80120f4:	f240 80df 	bls.w	80122b6 <uxr_read_framed_msg+0x352>
 80120f8:	7020      	strb	r0, [r4, #0]
 80120fa:	b003      	add	sp, #12
 80120fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012100:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012104:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012108:	4299      	cmp	r1, r3
 801210a:	f000 80a8 	beq.w	801225e <uxr_read_framed_msg+0x2fa>
 801210e:	18e2      	adds	r2, r4, r3
 8012110:	7890      	ldrb	r0, [r2, #2]
 8012112:	287d      	cmp	r0, #125	@ 0x7d
 8012114:	f000 8164 	beq.w	80123e0 <uxr_read_framed_msg+0x47c>
 8012118:	3301      	adds	r3, #1
 801211a:	085a      	lsrs	r2, r3, #1
 801211c:	fba5 1202 	umull	r1, r2, r5, r2
 8012120:	0892      	lsrs	r2, r2, #2
 8012122:	212a      	movs	r1, #42	@ 0x2a
 8012124:	fb01 3312 	mls	r3, r1, r2, r3
 8012128:	287e      	cmp	r0, #126	@ 0x7e
 801212a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801212e:	f000 8191 	beq.w	8012454 <uxr_read_framed_msg+0x4f0>
 8012132:	2304      	movs	r3, #4
 8012134:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012136:	7023      	strb	r3, [r4, #0]
 8012138:	e725      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 801213a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801213e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012142:	4290      	cmp	r0, r2
 8012144:	f000 80b3 	beq.w	80122ae <uxr_read_framed_msg+0x34a>
 8012148:	18a3      	adds	r3, r4, r2
 801214a:	7899      	ldrb	r1, [r3, #2]
 801214c:	297d      	cmp	r1, #125	@ 0x7d
 801214e:	f000 8164 	beq.w	801241a <uxr_read_framed_msg+0x4b6>
 8012152:	3201      	adds	r2, #1
 8012154:	0850      	lsrs	r0, r2, #1
 8012156:	fba5 3000 	umull	r3, r0, r5, r0
 801215a:	0880      	lsrs	r0, r0, #2
 801215c:	232a      	movs	r3, #42	@ 0x2a
 801215e:	fb03 2210 	mls	r2, r3, r0, r2
 8012162:	297e      	cmp	r1, #126	@ 0x7e
 8012164:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012168:	f000 8188 	beq.w	801247c <uxr_read_framed_msg+0x518>
 801216c:	7863      	ldrb	r3, [r4, #1]
 801216e:	428b      	cmp	r3, r1
 8012170:	bf0c      	ite	eq
 8012172:	2303      	moveq	r3, #3
 8012174:	2300      	movne	r3, #0
 8012176:	7023      	strb	r3, [r4, #0]
 8012178:	e705      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 801217a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801217e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012182:	2200      	movs	r2, #0
 8012184:	4299      	cmp	r1, r3
 8012186:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801218a:	d06c      	beq.n	8012266 <uxr_read_framed_msg+0x302>
 801218c:	18e2      	adds	r2, r4, r3
 801218e:	7890      	ldrb	r0, [r2, #2]
 8012190:	287d      	cmp	r0, #125	@ 0x7d
 8012192:	f000 8101 	beq.w	8012398 <uxr_read_framed_msg+0x434>
 8012196:	3301      	adds	r3, #1
 8012198:	085a      	lsrs	r2, r3, #1
 801219a:	fba5 1202 	umull	r1, r2, r5, r2
 801219e:	0892      	lsrs	r2, r2, #2
 80121a0:	212a      	movs	r1, #42	@ 0x2a
 80121a2:	fb01 3312 	mls	r3, r1, r2, r3
 80121a6:	287e      	cmp	r0, #126	@ 0x7e
 80121a8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80121ac:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80121b0:	d059      	beq.n	8012266 <uxr_read_framed_msg+0x302>
 80121b2:	2302      	movs	r3, #2
 80121b4:	7023      	strb	r3, [r4, #0]
 80121b6:	e6e6      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 80121b8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80121bc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80121c0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80121c4:	1c51      	adds	r1, r2, #1
 80121c6:	084b      	lsrs	r3, r1, #1
 80121c8:	fba5 c303 	umull	ip, r3, r5, r3
 80121cc:	089b      	lsrs	r3, r3, #2
 80121ce:	fb0e 1313 	mls	r3, lr, r3, r1
 80121d2:	4592      	cmp	sl, r2
 80121d4:	eb04 0002 	add.w	r0, r4, r2
 80121d8:	b2da      	uxtb	r2, r3
 80121da:	f43f af04 	beq.w	8011fe6 <uxr_read_framed_msg+0x82>
 80121de:	7883      	ldrb	r3, [r0, #2]
 80121e0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80121e4:	2b7e      	cmp	r3, #126	@ 0x7e
 80121e6:	d1ed      	bne.n	80121c4 <uxr_read_framed_msg+0x260>
 80121e8:	2301      	movs	r3, #1
 80121ea:	7023      	strb	r3, [r4, #0]
 80121ec:	e6cb      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 80121ee:	f100 0c01 	add.w	ip, r0, #1
 80121f2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80121f6:	fba5 8202 	umull	r8, r2, r5, r2
 80121fa:	0892      	lsrs	r2, r2, #2
 80121fc:	fb01 c212 	mls	r2, r1, r2, ip
 8012200:	eb04 0c02 	add.w	ip, r4, r2
 8012204:	b2d2      	uxtb	r2, r2
 8012206:	4592      	cmp	sl, r2
 8012208:	f100 0002 	add.w	r0, r0, #2
 801220c:	f43f af47 	beq.w	801209e <uxr_read_framed_msg+0x13a>
 8012210:	0842      	lsrs	r2, r0, #1
 8012212:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012216:	fba5 8202 	umull	r8, r2, r5, r2
 801221a:	0892      	lsrs	r2, r2, #2
 801221c:	fb01 0012 	mls	r0, r1, r2, r0
 8012220:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012224:	f08a 0c20 	eor.w	ip, sl, #32
 8012228:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801222c:	f47f af11 	bne.w	8012052 <uxr_read_framed_msg+0xee>
 8012230:	459e      	cmp	lr, r3
 8012232:	ee17 8a90 	vmov	r8, s15
 8012236:	f43f af37 	beq.w	80120a8 <uxr_read_framed_msg+0x144>
 801223a:	2301      	movs	r3, #1
 801223c:	7023      	strb	r3, [r4, #0]
 801223e:	e6a2      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 8012240:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012242:	9300      	str	r3, [sp, #0]
 8012244:	2301      	movs	r3, #1
 8012246:	9301      	str	r3, [sp, #4]
 8012248:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801224a:	464a      	mov	r2, r9
 801224c:	4641      	mov	r1, r8
 801224e:	4620      	mov	r0, r4
 8012250:	f7ff fe06 	bl	8011e60 <uxr_framing_read_transport>
 8012254:	2800      	cmp	r0, #0
 8012256:	f43f aec6 	beq.w	8011fe6 <uxr_read_framed_msg+0x82>
 801225a:	7823      	ldrb	r3, [r4, #0]
 801225c:	e693      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 801225e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	2302      	movs	r3, #2
 8012264:	e7ef      	b.n	8012246 <uxr_read_framed_msg+0x2e2>
 8012266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	2304      	movs	r3, #4
 801226c:	9301      	str	r3, [sp, #4]
 801226e:	464a      	mov	r2, r9
 8012270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012272:	4641      	mov	r1, r8
 8012274:	4620      	mov	r0, r4
 8012276:	f7ff fdf3 	bl	8011e60 <uxr_framing_read_transport>
 801227a:	2800      	cmp	r0, #0
 801227c:	d1ed      	bne.n	801225a <uxr_read_framed_msg+0x2f6>
 801227e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012282:	2b7e      	cmp	r3, #126	@ 0x7e
 8012284:	d0e9      	beq.n	801225a <uxr_read_framed_msg+0x2f6>
 8012286:	e6ae      	b.n	8011fe6 <uxr_read_framed_msg+0x82>
 8012288:	30c30c31 	.word	0x30c30c31
 801228c:	08015658 	.word	0x08015658
 8012290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012292:	9300      	str	r3, [sp, #0]
 8012294:	2305      	movs	r3, #5
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801229a:	f7ff fde1 	bl	8011e60 <uxr_framing_read_transport>
 801229e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80122a2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80122a6:	429a      	cmp	r2, r3
 80122a8:	f43f ae9d 	beq.w	8011fe6 <uxr_read_framed_msg+0x82>
 80122ac:	e668      	b.n	8011f80 <uxr_read_framed_msg+0x1c>
 80122ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122b0:	9300      	str	r3, [sp, #0]
 80122b2:	2303      	movs	r3, #3
 80122b4:	e7c7      	b.n	8012246 <uxr_read_framed_msg+0x2e2>
 80122b6:	2305      	movs	r3, #5
 80122b8:	7023      	strb	r3, [r4, #0]
 80122ba:	e664      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 80122bc:	ee17 8a90 	vmov	r8, s15
 80122c0:	f43f aef2 	beq.w	80120a8 <uxr_read_framed_msg+0x144>
 80122c4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80122c8:	d08e      	beq.n	80121e8 <uxr_read_framed_msg+0x284>
 80122ca:	ebae 0303 	sub.w	r3, lr, r3
 80122ce:	3302      	adds	r3, #2
 80122d0:	9301      	str	r3, [sp, #4]
 80122d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122d4:	9300      	str	r3, [sp, #0]
 80122d6:	e7b7      	b.n	8012248 <uxr_read_framed_msg+0x2e4>
 80122d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122da:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80122de:	7013      	strb	r3, [r2, #0]
 80122e0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80122e2:	b003      	add	sp, #12
 80122e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122e8:	f103 0c01 	add.w	ip, r3, #1
 80122ec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80122f0:	fba5 0202 	umull	r0, r2, r5, r2
 80122f4:	0892      	lsrs	r2, r2, #2
 80122f6:	202a      	movs	r0, #42	@ 0x2a
 80122f8:	fb00 c212 	mls	r2, r0, r2, ip
 80122fc:	fa5f fc82 	uxtb.w	ip, r2
 8012300:	4561      	cmp	r1, ip
 8012302:	d09d      	beq.n	8012240 <uxr_read_framed_msg+0x2dc>
 8012304:	3302      	adds	r3, #2
 8012306:	4422      	add	r2, r4
 8012308:	0859      	lsrs	r1, r3, #1
 801230a:	7892      	ldrb	r2, [r2, #2]
 801230c:	fba5 c101 	umull	ip, r1, r5, r1
 8012310:	0889      	lsrs	r1, r1, #2
 8012312:	fb00 3311 	mls	r3, r0, r1, r3
 8012316:	2a7e      	cmp	r2, #126	@ 0x7e
 8012318:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801231c:	f000 80aa 	beq.w	8012474 <uxr_read_framed_msg+0x510>
 8012320:	f082 0220 	eor.w	r2, r2, #32
 8012324:	e654      	b.n	8011fd0 <uxr_read_framed_msg+0x6c>
 8012326:	1c58      	adds	r0, r3, #1
 8012328:	0842      	lsrs	r2, r0, #1
 801232a:	fba5 c202 	umull	ip, r2, r5, r2
 801232e:	0892      	lsrs	r2, r2, #2
 8012330:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012334:	fb0c 0212 	mls	r2, ip, r2, r0
 8012338:	b2d0      	uxtb	r0, r2
 801233a:	4281      	cmp	r1, r0
 801233c:	d08f      	beq.n	801225e <uxr_read_framed_msg+0x2fa>
 801233e:	4422      	add	r2, r4
 8012340:	3302      	adds	r3, #2
 8012342:	7890      	ldrb	r0, [r2, #2]
 8012344:	085a      	lsrs	r2, r3, #1
 8012346:	fba5 1202 	umull	r1, r2, r5, r2
 801234a:	0892      	lsrs	r2, r2, #2
 801234c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012350:	287e      	cmp	r0, #126	@ 0x7e
 8012352:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012356:	d07d      	beq.n	8012454 <uxr_read_framed_msg+0x4f0>
 8012358:	f080 0020 	eor.w	r0, r0, #32
 801235c:	e660      	b.n	8012020 <uxr_read_framed_msg+0xbc>
 801235e:	1c59      	adds	r1, r3, #1
 8012360:	084a      	lsrs	r2, r1, #1
 8012362:	fba5 c202 	umull	ip, r2, r5, r2
 8012366:	0892      	lsrs	r2, r2, #2
 8012368:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801236c:	fb0c 1212 	mls	r2, ip, r2, r1
 8012370:	b2d1      	uxtb	r1, r2
 8012372:	4288      	cmp	r0, r1
 8012374:	f43f af64 	beq.w	8012240 <uxr_read_framed_msg+0x2dc>
 8012378:	4422      	add	r2, r4
 801237a:	3302      	adds	r3, #2
 801237c:	7891      	ldrb	r1, [r2, #2]
 801237e:	085a      	lsrs	r2, r3, #1
 8012380:	fba5 0202 	umull	r0, r2, r5, r2
 8012384:	0892      	lsrs	r2, r2, #2
 8012386:	fb0c 3312 	mls	r3, ip, r2, r3
 801238a:	297e      	cmp	r1, #126	@ 0x7e
 801238c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012390:	d070      	beq.n	8012474 <uxr_read_framed_msg+0x510>
 8012392:	f081 0120 	eor.w	r1, r1, #32
 8012396:	e6a3      	b.n	80120e0 <uxr_read_framed_msg+0x17c>
 8012398:	f103 0c01 	add.w	ip, r3, #1
 801239c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80123a0:	fba5 0202 	umull	r0, r2, r5, r2
 80123a4:	0892      	lsrs	r2, r2, #2
 80123a6:	202a      	movs	r0, #42	@ 0x2a
 80123a8:	fb00 c212 	mls	r2, r0, r2, ip
 80123ac:	fa5f fc82 	uxtb.w	ip, r2
 80123b0:	4561      	cmp	r1, ip
 80123b2:	f43f af58 	beq.w	8012266 <uxr_read_framed_msg+0x302>
 80123b6:	4422      	add	r2, r4
 80123b8:	3302      	adds	r3, #2
 80123ba:	7891      	ldrb	r1, [r2, #2]
 80123bc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80123c0:	085a      	lsrs	r2, r3, #1
 80123c2:	fba5 c202 	umull	ip, r2, r5, r2
 80123c6:	0892      	lsrs	r2, r2, #2
 80123c8:	fb00 3312 	mls	r3, r0, r2, r3
 80123cc:	297e      	cmp	r1, #126	@ 0x7e
 80123ce:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123d2:	f43f af48 	beq.w	8012266 <uxr_read_framed_msg+0x302>
 80123d6:	f081 0120 	eor.w	r1, r1, #32
 80123da:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80123de:	e6e8      	b.n	80121b2 <uxr_read_framed_msg+0x24e>
 80123e0:	1c58      	adds	r0, r3, #1
 80123e2:	0842      	lsrs	r2, r0, #1
 80123e4:	fba5 c202 	umull	ip, r2, r5, r2
 80123e8:	0892      	lsrs	r2, r2, #2
 80123ea:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80123ee:	fb0c 0212 	mls	r2, ip, r2, r0
 80123f2:	b2d0      	uxtb	r0, r2
 80123f4:	4281      	cmp	r1, r0
 80123f6:	f43f af32 	beq.w	801225e <uxr_read_framed_msg+0x2fa>
 80123fa:	4422      	add	r2, r4
 80123fc:	3302      	adds	r3, #2
 80123fe:	7890      	ldrb	r0, [r2, #2]
 8012400:	085a      	lsrs	r2, r3, #1
 8012402:	fba5 1202 	umull	r1, r2, r5, r2
 8012406:	0892      	lsrs	r2, r2, #2
 8012408:	fb0c 3312 	mls	r3, ip, r2, r3
 801240c:	287e      	cmp	r0, #126	@ 0x7e
 801240e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012412:	d01f      	beq.n	8012454 <uxr_read_framed_msg+0x4f0>
 8012414:	f080 0020 	eor.w	r0, r0, #32
 8012418:	e68b      	b.n	8012132 <uxr_read_framed_msg+0x1ce>
 801241a:	1c51      	adds	r1, r2, #1
 801241c:	084b      	lsrs	r3, r1, #1
 801241e:	fba5 c303 	umull	ip, r3, r5, r3
 8012422:	089b      	lsrs	r3, r3, #2
 8012424:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012428:	fb0c 1313 	mls	r3, ip, r3, r1
 801242c:	b2d9      	uxtb	r1, r3
 801242e:	4288      	cmp	r0, r1
 8012430:	f43f af3d 	beq.w	80122ae <uxr_read_framed_msg+0x34a>
 8012434:	3202      	adds	r2, #2
 8012436:	4423      	add	r3, r4
 8012438:	0850      	lsrs	r0, r2, #1
 801243a:	789b      	ldrb	r3, [r3, #2]
 801243c:	fba5 1000 	umull	r1, r0, r5, r0
 8012440:	0880      	lsrs	r0, r0, #2
 8012442:	fb0c 2210 	mls	r2, ip, r0, r2
 8012446:	2b7e      	cmp	r3, #126	@ 0x7e
 8012448:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801244c:	d016      	beq.n	801247c <uxr_read_framed_msg+0x518>
 801244e:	f083 0120 	eor.w	r1, r3, #32
 8012452:	e68b      	b.n	801216c <uxr_read_framed_msg+0x208>
 8012454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	2302      	movs	r3, #2
 801245a:	9301      	str	r3, [sp, #4]
 801245c:	464a      	mov	r2, r9
 801245e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012460:	4641      	mov	r1, r8
 8012462:	4620      	mov	r0, r4
 8012464:	f7ff fcfc 	bl	8011e60 <uxr_framing_read_transport>
 8012468:	2800      	cmp	r0, #0
 801246a:	f47f aef6 	bne.w	801225a <uxr_read_framed_msg+0x2f6>
 801246e:	2301      	movs	r3, #1
 8012470:	7023      	strb	r3, [r4, #0]
 8012472:	e588      	b.n	8011f86 <uxr_read_framed_msg+0x22>
 8012474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	2301      	movs	r3, #1
 801247a:	e7ee      	b.n	801245a <uxr_read_framed_msg+0x4f6>
 801247c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801247e:	9300      	str	r3, [sp, #0]
 8012480:	2303      	movs	r3, #3
 8012482:	e7ea      	b.n	801245a <uxr_read_framed_msg+0x4f6>
 8012484:	ee17 8a90 	vmov	r8, s15
 8012488:	e6ae      	b.n	80121e8 <uxr_read_framed_msg+0x284>
 801248a:	bf00      	nop

0801248c <rcl_get_default_domain_id>:
 801248c:	b530      	push	{r4, r5, lr}
 801248e:	b083      	sub	sp, #12
 8012490:	2300      	movs	r3, #0
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	b1d0      	cbz	r0, 80124cc <rcl_get_default_domain_id+0x40>
 8012496:	4604      	mov	r4, r0
 8012498:	4669      	mov	r1, sp
 801249a:	4815      	ldr	r0, [pc, #84]	@ (80124f0 <rcl_get_default_domain_id+0x64>)
 801249c:	f7fd f920 	bl	800f6e0 <rcutils_get_env>
 80124a0:	4602      	mov	r2, r0
 80124a2:	b110      	cbz	r0, 80124aa <rcl_get_default_domain_id+0x1e>
 80124a4:	2001      	movs	r0, #1
 80124a6:	b003      	add	sp, #12
 80124a8:	bd30      	pop	{r4, r5, pc}
 80124aa:	9b00      	ldr	r3, [sp, #0]
 80124ac:	b18b      	cbz	r3, 80124d2 <rcl_get_default_domain_id+0x46>
 80124ae:	7818      	ldrb	r0, [r3, #0]
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d0f8      	beq.n	80124a6 <rcl_get_default_domain_id+0x1a>
 80124b4:	a901      	add	r1, sp, #4
 80124b6:	4618      	mov	r0, r3
 80124b8:	9201      	str	r2, [sp, #4]
 80124ba:	f001 fc01 	bl	8013cc0 <strtoul>
 80124be:	4605      	mov	r5, r0
 80124c0:	b150      	cbz	r0, 80124d8 <rcl_get_default_domain_id+0x4c>
 80124c2:	1c43      	adds	r3, r0, #1
 80124c4:	d00d      	beq.n	80124e2 <rcl_get_default_domain_id+0x56>
 80124c6:	6025      	str	r5, [r4, #0]
 80124c8:	2000      	movs	r0, #0
 80124ca:	e7ec      	b.n	80124a6 <rcl_get_default_domain_id+0x1a>
 80124cc:	200b      	movs	r0, #11
 80124ce:	b003      	add	sp, #12
 80124d0:	bd30      	pop	{r4, r5, pc}
 80124d2:	4618      	mov	r0, r3
 80124d4:	b003      	add	sp, #12
 80124d6:	bd30      	pop	{r4, r5, pc}
 80124d8:	9b01      	ldr	r3, [sp, #4]
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d0f2      	beq.n	80124c6 <rcl_get_default_domain_id+0x3a>
 80124e0:	e7e0      	b.n	80124a4 <rcl_get_default_domain_id+0x18>
 80124e2:	f001 fe0f 	bl	8014104 <__errno>
 80124e6:	6803      	ldr	r3, [r0, #0]
 80124e8:	2b22      	cmp	r3, #34	@ 0x22
 80124ea:	d1ec      	bne.n	80124c6 <rcl_get_default_domain_id+0x3a>
 80124ec:	e7da      	b.n	80124a4 <rcl_get_default_domain_id+0x18>
 80124ee:	bf00      	nop
 80124f0:	08015858 	.word	0x08015858

080124f4 <rcl_expand_topic_name>:
 80124f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f8:	b08b      	sub	sp, #44	@ 0x2c
 80124fa:	9306      	str	r3, [sp, #24]
 80124fc:	2800      	cmp	r0, #0
 80124fe:	f000 80ad 	beq.w	801265c <rcl_expand_topic_name+0x168>
 8012502:	460e      	mov	r6, r1
 8012504:	2900      	cmp	r1, #0
 8012506:	f000 80a9 	beq.w	801265c <rcl_expand_topic_name+0x168>
 801250a:	4617      	mov	r7, r2
 801250c:	2a00      	cmp	r2, #0
 801250e:	f000 80a5 	beq.w	801265c <rcl_expand_topic_name+0x168>
 8012512:	2b00      	cmp	r3, #0
 8012514:	f000 80a2 	beq.w	801265c <rcl_expand_topic_name+0x168>
 8012518:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801251a:	2b00      	cmp	r3, #0
 801251c:	f000 809e 	beq.w	801265c <rcl_expand_topic_name+0x168>
 8012520:	2200      	movs	r2, #0
 8012522:	a909      	add	r1, sp, #36	@ 0x24
 8012524:	4680      	mov	r8, r0
 8012526:	f000 f9f5 	bl	8012914 <rcl_validate_topic_name>
 801252a:	4604      	mov	r4, r0
 801252c:	2800      	cmp	r0, #0
 801252e:	f040 8096 	bne.w	801265e <rcl_expand_topic_name+0x16a>
 8012532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012534:	2b00      	cmp	r3, #0
 8012536:	f040 809a 	bne.w	801266e <rcl_expand_topic_name+0x17a>
 801253a:	4602      	mov	r2, r0
 801253c:	a909      	add	r1, sp, #36	@ 0x24
 801253e:	4630      	mov	r0, r6
 8012540:	f7fd fcc0 	bl	800fec4 <rmw_validate_node_name>
 8012544:	2800      	cmp	r0, #0
 8012546:	f040 808e 	bne.w	8012666 <rcl_expand_topic_name+0x172>
 801254a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801254c:	2a00      	cmp	r2, #0
 801254e:	f040 8093 	bne.w	8012678 <rcl_expand_topic_name+0x184>
 8012552:	a909      	add	r1, sp, #36	@ 0x24
 8012554:	4638      	mov	r0, r7
 8012556:	f7fd fc97 	bl	800fe88 <rmw_validate_namespace>
 801255a:	2800      	cmp	r0, #0
 801255c:	f040 8083 	bne.w	8012666 <rcl_expand_topic_name+0x172>
 8012560:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012562:	2c00      	cmp	r4, #0
 8012564:	f040 80ed 	bne.w	8012742 <rcl_expand_topic_name+0x24e>
 8012568:	217b      	movs	r1, #123	@ 0x7b
 801256a:	4640      	mov	r0, r8
 801256c:	f001 fd3e 	bl	8013fec <strchr>
 8012570:	f898 3000 	ldrb.w	r3, [r8]
 8012574:	2b2f      	cmp	r3, #47	@ 0x2f
 8012576:	4605      	mov	r5, r0
 8012578:	f000 809e 	beq.w	80126b8 <rcl_expand_topic_name+0x1c4>
 801257c:	2b7e      	cmp	r3, #126	@ 0x7e
 801257e:	f040 80a2 	bne.w	80126c6 <rcl_expand_topic_name+0x1d2>
 8012582:	4638      	mov	r0, r7
 8012584:	f7ed fe4e 	bl	8000224 <strlen>
 8012588:	4a82      	ldr	r2, [pc, #520]	@ (8012794 <rcl_expand_topic_name+0x2a0>)
 801258a:	4b83      	ldr	r3, [pc, #524]	@ (8012798 <rcl_expand_topic_name+0x2a4>)
 801258c:	2801      	cmp	r0, #1
 801258e:	bf18      	it	ne
 8012590:	4613      	movne	r3, r2
 8012592:	9302      	str	r3, [sp, #8]
 8012594:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801259c:	f108 0301 	add.w	r3, r8, #1
 80125a0:	9305      	str	r3, [sp, #20]
 80125a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80125a6:	9301      	str	r3, [sp, #4]
 80125a8:	ab14      	add	r3, sp, #80	@ 0x50
 80125aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80125ac:	f7fd f8b0 	bl	800f710 <rcutils_format_string_limit>
 80125b0:	4682      	mov	sl, r0
 80125b2:	2800      	cmp	r0, #0
 80125b4:	f000 80c7 	beq.w	8012746 <rcl_expand_topic_name+0x252>
 80125b8:	2d00      	cmp	r5, #0
 80125ba:	f000 80a2 	beq.w	8012702 <rcl_expand_topic_name+0x20e>
 80125be:	217b      	movs	r1, #123	@ 0x7b
 80125c0:	f001 fd14 	bl	8013fec <strchr>
 80125c4:	46d1      	mov	r9, sl
 80125c6:	4605      	mov	r5, r0
 80125c8:	9407      	str	r4, [sp, #28]
 80125ca:	46d3      	mov	fp, sl
 80125cc:	464c      	mov	r4, r9
 80125ce:	2d00      	cmp	r5, #0
 80125d0:	f000 80be 	beq.w	8012750 <rcl_expand_topic_name+0x25c>
 80125d4:	217d      	movs	r1, #125	@ 0x7d
 80125d6:	4620      	mov	r0, r4
 80125d8:	f001 fd08 	bl	8013fec <strchr>
 80125dc:	eba0 0905 	sub.w	r9, r0, r5
 80125e0:	f109 0a01 	add.w	sl, r9, #1
 80125e4:	486d      	ldr	r0, [pc, #436]	@ (801279c <rcl_expand_topic_name+0x2a8>)
 80125e6:	4652      	mov	r2, sl
 80125e8:	4629      	mov	r1, r5
 80125ea:	f001 fd0c 	bl	8014006 <strncmp>
 80125ee:	2800      	cmp	r0, #0
 80125f0:	d067      	beq.n	80126c2 <rcl_expand_topic_name+0x1ce>
 80125f2:	486b      	ldr	r0, [pc, #428]	@ (80127a0 <rcl_expand_topic_name+0x2ac>)
 80125f4:	4652      	mov	r2, sl
 80125f6:	4629      	mov	r1, r5
 80125f8:	f001 fd05 	bl	8014006 <strncmp>
 80125fc:	b130      	cbz	r0, 801260c <rcl_expand_topic_name+0x118>
 80125fe:	4869      	ldr	r0, [pc, #420]	@ (80127a4 <rcl_expand_topic_name+0x2b0>)
 8012600:	4652      	mov	r2, sl
 8012602:	4629      	mov	r1, r5
 8012604:	f001 fcff 	bl	8014006 <strncmp>
 8012608:	2800      	cmp	r0, #0
 801260a:	d137      	bne.n	801267c <rcl_expand_topic_name+0x188>
 801260c:	46b9      	mov	r9, r7
 801260e:	ab16      	add	r3, sp, #88	@ 0x58
 8012610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012614:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012618:	ab14      	add	r3, sp, #80	@ 0x50
 801261a:	4628      	mov	r0, r5
 801261c:	cb0c      	ldmia	r3, {r2, r3}
 801261e:	4651      	mov	r1, sl
 8012620:	f7fd f9b2 	bl	800f988 <rcutils_strndup>
 8012624:	4605      	mov	r5, r0
 8012626:	2800      	cmp	r0, #0
 8012628:	f000 809c 	beq.w	8012764 <rcl_expand_topic_name+0x270>
 801262c:	464a      	mov	r2, r9
 801262e:	4620      	mov	r0, r4
 8012630:	ab14      	add	r3, sp, #80	@ 0x50
 8012632:	4629      	mov	r1, r5
 8012634:	f7fd f8a6 	bl	800f784 <rcutils_repl_str>
 8012638:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801263a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801263c:	4604      	mov	r4, r0
 801263e:	4628      	mov	r0, r5
 8012640:	4798      	blx	r3
 8012642:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012644:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012646:	4658      	mov	r0, fp
 8012648:	4798      	blx	r3
 801264a:	2c00      	cmp	r4, #0
 801264c:	d07b      	beq.n	8012746 <rcl_expand_topic_name+0x252>
 801264e:	217b      	movs	r1, #123	@ 0x7b
 8012650:	4620      	mov	r0, r4
 8012652:	f001 fccb 	bl	8013fec <strchr>
 8012656:	46a3      	mov	fp, r4
 8012658:	4605      	mov	r5, r0
 801265a:	e7b8      	b.n	80125ce <rcl_expand_topic_name+0xda>
 801265c:	240b      	movs	r4, #11
 801265e:	4620      	mov	r0, r4
 8012660:	b00b      	add	sp, #44	@ 0x2c
 8012662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012666:	f7fc fa97 	bl	800eb98 <rcl_convert_rmw_ret_to_rcl_ret>
 801266a:	4604      	mov	r4, r0
 801266c:	e7f7      	b.n	801265e <rcl_expand_topic_name+0x16a>
 801266e:	2467      	movs	r4, #103	@ 0x67
 8012670:	4620      	mov	r0, r4
 8012672:	b00b      	add	sp, #44	@ 0x2c
 8012674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012678:	24c9      	movs	r4, #201	@ 0xc9
 801267a:	e7f0      	b.n	801265e <rcl_expand_topic_name+0x16a>
 801267c:	f109 32ff 	add.w	r2, r9, #4294967295
 8012680:	9806      	ldr	r0, [sp, #24]
 8012682:	1c69      	adds	r1, r5, #1
 8012684:	f7fd fa9a 	bl	800fbbc <rcutils_string_map_getn>
 8012688:	4681      	mov	r9, r0
 801268a:	2800      	cmp	r0, #0
 801268c:	d1bf      	bne.n	801260e <rcl_expand_topic_name+0x11a>
 801268e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012690:	aa16      	add	r2, sp, #88	@ 0x58
 8012692:	6018      	str	r0, [r3, #0]
 8012694:	ca07      	ldmia	r2, {r0, r1, r2}
 8012696:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801269a:	ab14      	add	r3, sp, #80	@ 0x50
 801269c:	cb0c      	ldmia	r3, {r2, r3}
 801269e:	4651      	mov	r1, sl
 80126a0:	4628      	mov	r0, r5
 80126a2:	f7fd f971 	bl	800f988 <rcutils_strndup>
 80126a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80126a8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80126aa:	4798      	blx	r3
 80126ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80126ae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80126b0:	4658      	mov	r0, fp
 80126b2:	2469      	movs	r4, #105	@ 0x69
 80126b4:	4798      	blx	r3
 80126b6:	e7d2      	b.n	801265e <rcl_expand_topic_name+0x16a>
 80126b8:	2800      	cmp	r0, #0
 80126ba:	d05b      	beq.n	8012774 <rcl_expand_topic_name+0x280>
 80126bc:	46c1      	mov	r9, r8
 80126be:	46a2      	mov	sl, r4
 80126c0:	e782      	b.n	80125c8 <rcl_expand_topic_name+0xd4>
 80126c2:	46b1      	mov	r9, r6
 80126c4:	e7a3      	b.n	801260e <rcl_expand_topic_name+0x11a>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	d1f8      	bne.n	80126bc <rcl_expand_topic_name+0x1c8>
 80126ca:	4638      	mov	r0, r7
 80126cc:	f7ed fdaa 	bl	8000224 <strlen>
 80126d0:	4a35      	ldr	r2, [pc, #212]	@ (80127a8 <rcl_expand_topic_name+0x2b4>)
 80126d2:	4b36      	ldr	r3, [pc, #216]	@ (80127ac <rcl_expand_topic_name+0x2b8>)
 80126d4:	f8cd 8010 	str.w	r8, [sp, #16]
 80126d8:	2801      	cmp	r0, #1
 80126da:	bf18      	it	ne
 80126dc:	4613      	movne	r3, r2
 80126de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80126e2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80126e6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80126e8:	9703      	str	r7, [sp, #12]
 80126ea:	9200      	str	r2, [sp, #0]
 80126ec:	ab14      	add	r3, sp, #80	@ 0x50
 80126ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80126f0:	f7fd f80e 	bl	800f710 <rcutils_format_string_limit>
 80126f4:	4682      	mov	sl, r0
 80126f6:	4653      	mov	r3, sl
 80126f8:	b32b      	cbz	r3, 8012746 <rcl_expand_topic_name+0x252>
 80126fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80126fc:	f8c3 a000 	str.w	sl, [r3]
 8012700:	e7ad      	b.n	801265e <rcl_expand_topic_name+0x16a>
 8012702:	f89a 3000 	ldrb.w	r3, [sl]
 8012706:	2b2f      	cmp	r3, #47	@ 0x2f
 8012708:	d0f7      	beq.n	80126fa <rcl_expand_topic_name+0x206>
 801270a:	4638      	mov	r0, r7
 801270c:	f7ed fd8a 	bl	8000224 <strlen>
 8012710:	4a25      	ldr	r2, [pc, #148]	@ (80127a8 <rcl_expand_topic_name+0x2b4>)
 8012712:	4b26      	ldr	r3, [pc, #152]	@ (80127ac <rcl_expand_topic_name+0x2b8>)
 8012714:	f8cd a010 	str.w	sl, [sp, #16]
 8012718:	2801      	cmp	r0, #1
 801271a:	bf18      	it	ne
 801271c:	4613      	movne	r3, r2
 801271e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8012722:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8012726:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8012728:	9703      	str	r7, [sp, #12]
 801272a:	9200      	str	r2, [sp, #0]
 801272c:	ab14      	add	r3, sp, #80	@ 0x50
 801272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012730:	f7fc ffee 	bl	800f710 <rcutils_format_string_limit>
 8012734:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012736:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8012738:	4605      	mov	r5, r0
 801273a:	4650      	mov	r0, sl
 801273c:	4798      	blx	r3
 801273e:	46aa      	mov	sl, r5
 8012740:	e7d9      	b.n	80126f6 <rcl_expand_topic_name+0x202>
 8012742:	24ca      	movs	r4, #202	@ 0xca
 8012744:	e78b      	b.n	801265e <rcl_expand_topic_name+0x16a>
 8012746:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8012748:	2300      	movs	r3, #0
 801274a:	6013      	str	r3, [r2, #0]
 801274c:	240a      	movs	r4, #10
 801274e:	e786      	b.n	801265e <rcl_expand_topic_name+0x16a>
 8012750:	465b      	mov	r3, fp
 8012752:	9c07      	ldr	r4, [sp, #28]
 8012754:	46da      	mov	sl, fp
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1d3      	bne.n	8012702 <rcl_expand_topic_name+0x20e>
 801275a:	f898 3000 	ldrb.w	r3, [r8]
 801275e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012760:	d0cb      	beq.n	80126fa <rcl_expand_topic_name+0x206>
 8012762:	e7b2      	b.n	80126ca <rcl_expand_topic_name+0x1d6>
 8012764:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8012768:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801276a:	6015      	str	r5, [r2, #0]
 801276c:	4658      	mov	r0, fp
 801276e:	4798      	blx	r3
 8012770:	240a      	movs	r4, #10
 8012772:	e774      	b.n	801265e <rcl_expand_topic_name+0x16a>
 8012774:	ab17      	add	r3, sp, #92	@ 0x5c
 8012776:	e893 0003 	ldmia.w	r3, {r0, r1}
 801277a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801277e:	ab14      	add	r3, sp, #80	@ 0x50
 8012780:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012782:	4640      	mov	r0, r8
 8012784:	f7fd f8de 	bl	800f944 <rcutils_strdup>
 8012788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801278a:	2800      	cmp	r0, #0
 801278c:	6018      	str	r0, [r3, #0]
 801278e:	bf08      	it	eq
 8012790:	240a      	moveq	r4, #10
 8012792:	e764      	b.n	801265e <rcl_expand_topic_name+0x16a>
 8012794:	08015868 	.word	0x08015868
 8012798:	08015130 	.word	0x08015130
 801279c:	08015870 	.word	0x08015870
 80127a0:	08015878 	.word	0x08015878
 80127a4:	08015880 	.word	0x08015880
 80127a8:	080152c4 	.word	0x080152c4
 80127ac:	08015140 	.word	0x08015140

080127b0 <rcl_get_default_topic_name_substitutions>:
 80127b0:	2800      	cmp	r0, #0
 80127b2:	bf0c      	ite	eq
 80127b4:	200b      	moveq	r0, #11
 80127b6:	2000      	movne	r0, #0
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop

080127bc <rcl_get_zero_initialized_guard_condition>:
 80127bc:	4a03      	ldr	r2, [pc, #12]	@ (80127cc <rcl_get_zero_initialized_guard_condition+0x10>)
 80127be:	4603      	mov	r3, r0
 80127c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80127c8:	4618      	mov	r0, r3
 80127ca:	4770      	bx	lr
 80127cc:	0801588c 	.word	0x0801588c

080127d0 <rcl_guard_condition_init_from_rmw>:
 80127d0:	b082      	sub	sp, #8
 80127d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80127dc:	4604      	mov	r4, r0
 80127de:	f84c 3f04 	str.w	r3, [ip, #4]!
 80127e2:	460e      	mov	r6, r1
 80127e4:	4617      	mov	r7, r2
 80127e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127ea:	f10d 0e04 	add.w	lr, sp, #4
 80127ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80127f2:	f8dc 3000 	ldr.w	r3, [ip]
 80127f6:	f8ce 3000 	str.w	r3, [lr]
 80127fa:	a801      	add	r0, sp, #4
 80127fc:	f7f7 ffce 	bl	800a79c <rcutils_allocator_is_valid>
 8012800:	b350      	cbz	r0, 8012858 <rcl_guard_condition_init_from_rmw+0x88>
 8012802:	b34c      	cbz	r4, 8012858 <rcl_guard_condition_init_from_rmw+0x88>
 8012804:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012808:	f1b8 0f00 	cmp.w	r8, #0
 801280c:	d11e      	bne.n	801284c <rcl_guard_condition_init_from_rmw+0x7c>
 801280e:	b31f      	cbz	r7, 8012858 <rcl_guard_condition_init_from_rmw+0x88>
 8012810:	4638      	mov	r0, r7
 8012812:	f7fc f9df 	bl	800ebd4 <rcl_context_is_valid>
 8012816:	b328      	cbz	r0, 8012864 <rcl_guard_condition_init_from_rmw+0x94>
 8012818:	9b01      	ldr	r3, [sp, #4]
 801281a:	9905      	ldr	r1, [sp, #20]
 801281c:	201c      	movs	r0, #28
 801281e:	4798      	blx	r3
 8012820:	4605      	mov	r5, r0
 8012822:	6060      	str	r0, [r4, #4]
 8012824:	b358      	cbz	r0, 801287e <rcl_guard_condition_init_from_rmw+0xae>
 8012826:	b1fe      	cbz	r6, 8012868 <rcl_guard_condition_init_from_rmw+0x98>
 8012828:	6006      	str	r6, [r0, #0]
 801282a:	f880 8004 	strb.w	r8, [r0, #4]
 801282e:	ac01      	add	r4, sp, #4
 8012830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012832:	f105 0c08 	add.w	ip, r5, #8
 8012836:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801283a:	6823      	ldr	r3, [r4, #0]
 801283c:	f8cc 3000 	str.w	r3, [ip]
 8012840:	2000      	movs	r0, #0
 8012842:	b006      	add	sp, #24
 8012844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012848:	b002      	add	sp, #8
 801284a:	4770      	bx	lr
 801284c:	2064      	movs	r0, #100	@ 0x64
 801284e:	b006      	add	sp, #24
 8012850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012854:	b002      	add	sp, #8
 8012856:	4770      	bx	lr
 8012858:	200b      	movs	r0, #11
 801285a:	b006      	add	sp, #24
 801285c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012860:	b002      	add	sp, #8
 8012862:	4770      	bx	lr
 8012864:	2065      	movs	r0, #101	@ 0x65
 8012866:	e7f2      	b.n	801284e <rcl_guard_condition_init_from_rmw+0x7e>
 8012868:	6838      	ldr	r0, [r7, #0]
 801286a:	3028      	adds	r0, #40	@ 0x28
 801286c:	f000 fa50 	bl	8012d10 <rmw_create_guard_condition>
 8012870:	6028      	str	r0, [r5, #0]
 8012872:	6865      	ldr	r5, [r4, #4]
 8012874:	682e      	ldr	r6, [r5, #0]
 8012876:	b126      	cbz	r6, 8012882 <rcl_guard_condition_init_from_rmw+0xb2>
 8012878:	2301      	movs	r3, #1
 801287a:	712b      	strb	r3, [r5, #4]
 801287c:	e7d7      	b.n	801282e <rcl_guard_condition_init_from_rmw+0x5e>
 801287e:	200a      	movs	r0, #10
 8012880:	e7e5      	b.n	801284e <rcl_guard_condition_init_from_rmw+0x7e>
 8012882:	4628      	mov	r0, r5
 8012884:	9b02      	ldr	r3, [sp, #8]
 8012886:	9905      	ldr	r1, [sp, #20]
 8012888:	4798      	blx	r3
 801288a:	6066      	str	r6, [r4, #4]
 801288c:	2001      	movs	r0, #1
 801288e:	e7de      	b.n	801284e <rcl_guard_condition_init_from_rmw+0x7e>

08012890 <rcl_guard_condition_fini>:
 8012890:	b570      	push	{r4, r5, r6, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	b1f0      	cbz	r0, 80128d4 <rcl_guard_condition_fini+0x44>
 8012896:	6843      	ldr	r3, [r0, #4]
 8012898:	4604      	mov	r4, r0
 801289a:	b163      	cbz	r3, 80128b6 <rcl_guard_condition_fini+0x26>
 801289c:	6818      	ldr	r0, [r3, #0]
 801289e:	68de      	ldr	r6, [r3, #12]
 80128a0:	6999      	ldr	r1, [r3, #24]
 80128a2:	b160      	cbz	r0, 80128be <rcl_guard_condition_fini+0x2e>
 80128a4:	791d      	ldrb	r5, [r3, #4]
 80128a6:	b965      	cbnz	r5, 80128c2 <rcl_guard_condition_fini+0x32>
 80128a8:	4618      	mov	r0, r3
 80128aa:	47b0      	blx	r6
 80128ac:	2300      	movs	r3, #0
 80128ae:	4628      	mov	r0, r5
 80128b0:	6063      	str	r3, [r4, #4]
 80128b2:	b002      	add	sp, #8
 80128b4:	bd70      	pop	{r4, r5, r6, pc}
 80128b6:	461d      	mov	r5, r3
 80128b8:	4628      	mov	r0, r5
 80128ba:	b002      	add	sp, #8
 80128bc:	bd70      	pop	{r4, r5, r6, pc}
 80128be:	4605      	mov	r5, r0
 80128c0:	e7f2      	b.n	80128a8 <rcl_guard_condition_fini+0x18>
 80128c2:	9101      	str	r1, [sp, #4]
 80128c4:	f000 fa38 	bl	8012d38 <rmw_destroy_guard_condition>
 80128c8:	1e05      	subs	r5, r0, #0
 80128ca:	6863      	ldr	r3, [r4, #4]
 80128cc:	9901      	ldr	r1, [sp, #4]
 80128ce:	bf18      	it	ne
 80128d0:	2501      	movne	r5, #1
 80128d2:	e7e9      	b.n	80128a8 <rcl_guard_condition_fini+0x18>
 80128d4:	250b      	movs	r5, #11
 80128d6:	4628      	mov	r0, r5
 80128d8:	b002      	add	sp, #8
 80128da:	bd70      	pop	{r4, r5, r6, pc}

080128dc <rcl_guard_condition_get_default_options>:
 80128dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80128de:	b087      	sub	sp, #28
 80128e0:	4606      	mov	r6, r0
 80128e2:	4668      	mov	r0, sp
 80128e4:	f7f7 ff4c 	bl	800a780 <rcutils_get_default_allocator>
 80128e8:	4b09      	ldr	r3, [pc, #36]	@ (8012910 <rcl_guard_condition_get_default_options+0x34>)
 80128ea:	46ee      	mov	lr, sp
 80128ec:	469c      	mov	ip, r3
 80128ee:	461d      	mov	r5, r3
 80128f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80128f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128fa:	4634      	mov	r4, r6
 80128fc:	f8de 7000 	ldr.w	r7, [lr]
 8012900:	f8cc 7000 	str.w	r7, [ip]
 8012904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012906:	4630      	mov	r0, r6
 8012908:	6027      	str	r7, [r4, #0]
 801290a:	b007      	add	sp, #28
 801290c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801290e:	bf00      	nop
 8012910:	20010e1c 	.word	0x20010e1c

08012914 <rcl_validate_topic_name>:
 8012914:	2800      	cmp	r0, #0
 8012916:	d07a      	beq.n	8012a0e <rcl_validate_topic_name+0xfa>
 8012918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801291c:	460e      	mov	r6, r1
 801291e:	2900      	cmp	r1, #0
 8012920:	d07c      	beq.n	8012a1c <rcl_validate_topic_name+0x108>
 8012922:	4617      	mov	r7, r2
 8012924:	4605      	mov	r5, r0
 8012926:	f7ed fc7d 	bl	8000224 <strlen>
 801292a:	b1b0      	cbz	r0, 801295a <rcl_validate_topic_name+0x46>
 801292c:	f895 9000 	ldrb.w	r9, [r5]
 8012930:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8012ab4 <rcl_validate_topic_name+0x1a0>
 8012934:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8012938:	f013 0304 	ands.w	r3, r3, #4
 801293c:	d169      	bne.n	8012a12 <rcl_validate_topic_name+0xfe>
 801293e:	f100 38ff 	add.w	r8, r0, #4294967295
 8012942:	f815 2008 	ldrb.w	r2, [r5, r8]
 8012946:	2a2f      	cmp	r2, #47	@ 0x2f
 8012948:	d10e      	bne.n	8012968 <rcl_validate_topic_name+0x54>
 801294a:	2202      	movs	r2, #2
 801294c:	6032      	str	r2, [r6, #0]
 801294e:	b36f      	cbz	r7, 80129ac <rcl_validate_topic_name+0x98>
 8012950:	f8c7 8000 	str.w	r8, [r7]
 8012954:	4618      	mov	r0, r3
 8012956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801295a:	2301      	movs	r3, #1
 801295c:	6033      	str	r3, [r6, #0]
 801295e:	b32f      	cbz	r7, 80129ac <rcl_validate_topic_name+0x98>
 8012960:	2000      	movs	r0, #0
 8012962:	6038      	str	r0, [r7, #0]
 8012964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012968:	f105 3aff 	add.w	sl, r5, #4294967295
 801296c:	461c      	mov	r4, r3
 801296e:	4619      	mov	r1, r3
 8012970:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8012974:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8012978:	f1be 0f09 	cmp.w	lr, #9
 801297c:	d919      	bls.n	80129b2 <rcl_validate_topic_name+0x9e>
 801297e:	f022 0e20 	bic.w	lr, r2, #32
 8012982:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8012986:	f1be 0f19 	cmp.w	lr, #25
 801298a:	d912      	bls.n	80129b2 <rcl_validate_topic_name+0x9e>
 801298c:	2a5f      	cmp	r2, #95	@ 0x5f
 801298e:	d019      	beq.n	80129c4 <rcl_validate_topic_name+0xb0>
 8012990:	2a2f      	cmp	r2, #47	@ 0x2f
 8012992:	d051      	beq.n	8012a38 <rcl_validate_topic_name+0x124>
 8012994:	2a7e      	cmp	r2, #126	@ 0x7e
 8012996:	d048      	beq.n	8012a2a <rcl_validate_topic_name+0x116>
 8012998:	2a7b      	cmp	r2, #123	@ 0x7b
 801299a:	d054      	beq.n	8012a46 <rcl_validate_topic_name+0x132>
 801299c:	2a7d      	cmp	r2, #125	@ 0x7d
 801299e:	d161      	bne.n	8012a64 <rcl_validate_topic_name+0x150>
 80129a0:	2c00      	cmp	r4, #0
 80129a2:	d155      	bne.n	8012a50 <rcl_validate_topic_name+0x13c>
 80129a4:	2305      	movs	r3, #5
 80129a6:	6033      	str	r3, [r6, #0]
 80129a8:	b107      	cbz	r7, 80129ac <rcl_validate_topic_name+0x98>
 80129aa:	6039      	str	r1, [r7, #0]
 80129ac:	2000      	movs	r0, #0
 80129ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129b2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80129b6:	0752      	lsls	r2, r2, #29
 80129b8:	d504      	bpl.n	80129c4 <rcl_validate_topic_name+0xb0>
 80129ba:	b11c      	cbz	r4, 80129c4 <rcl_validate_topic_name+0xb0>
 80129bc:	b111      	cbz	r1, 80129c4 <rcl_validate_topic_name+0xb0>
 80129be:	1e4a      	subs	r2, r1, #1
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d02d      	beq.n	8012a20 <rcl_validate_topic_name+0x10c>
 80129c4:	3101      	adds	r1, #1
 80129c6:	4288      	cmp	r0, r1
 80129c8:	d1d2      	bne.n	8012970 <rcl_validate_topic_name+0x5c>
 80129ca:	2c00      	cmp	r4, #0
 80129cc:	d145      	bne.n	8012a5a <rcl_validate_topic_name+0x146>
 80129ce:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80129d2:	d04f      	beq.n	8012a74 <rcl_validate_topic_name+0x160>
 80129d4:	4620      	mov	r0, r4
 80129d6:	2301      	movs	r3, #1
 80129d8:	e006      	b.n	80129e8 <rcl_validate_topic_name+0xd4>
 80129da:	428b      	cmp	r3, r1
 80129dc:	f105 0501 	add.w	r5, r5, #1
 80129e0:	f103 0201 	add.w	r2, r3, #1
 80129e4:	d236      	bcs.n	8012a54 <rcl_validate_topic_name+0x140>
 80129e6:	4613      	mov	r3, r2
 80129e8:	4580      	cmp	r8, r0
 80129ea:	f100 0001 	add.w	r0, r0, #1
 80129ee:	d0f4      	beq.n	80129da <rcl_validate_topic_name+0xc6>
 80129f0:	782a      	ldrb	r2, [r5, #0]
 80129f2:	2a2f      	cmp	r2, #47	@ 0x2f
 80129f4:	d1f1      	bne.n	80129da <rcl_validate_topic_name+0xc6>
 80129f6:	786a      	ldrb	r2, [r5, #1]
 80129f8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80129fc:	0754      	lsls	r4, r2, #29
 80129fe:	d5ec      	bpl.n	80129da <rcl_validate_topic_name+0xc6>
 8012a00:	2204      	movs	r2, #4
 8012a02:	6032      	str	r2, [r6, #0]
 8012a04:	2f00      	cmp	r7, #0
 8012a06:	d0d1      	beq.n	80129ac <rcl_validate_topic_name+0x98>
 8012a08:	603b      	str	r3, [r7, #0]
 8012a0a:	2000      	movs	r0, #0
 8012a0c:	e7aa      	b.n	8012964 <rcl_validate_topic_name+0x50>
 8012a0e:	200b      	movs	r0, #11
 8012a10:	4770      	bx	lr
 8012a12:	2304      	movs	r3, #4
 8012a14:	6033      	str	r3, [r6, #0]
 8012a16:	2f00      	cmp	r7, #0
 8012a18:	d1a2      	bne.n	8012960 <rcl_validate_topic_name+0x4c>
 8012a1a:	e7c7      	b.n	80129ac <rcl_validate_topic_name+0x98>
 8012a1c:	200b      	movs	r0, #11
 8012a1e:	e7a1      	b.n	8012964 <rcl_validate_topic_name+0x50>
 8012a20:	2309      	movs	r3, #9
 8012a22:	6033      	str	r3, [r6, #0]
 8012a24:	2f00      	cmp	r7, #0
 8012a26:	d1c0      	bne.n	80129aa <rcl_validate_topic_name+0x96>
 8012a28:	e7c0      	b.n	80129ac <rcl_validate_topic_name+0x98>
 8012a2a:	2900      	cmp	r1, #0
 8012a2c:	d0ca      	beq.n	80129c4 <rcl_validate_topic_name+0xb0>
 8012a2e:	2306      	movs	r3, #6
 8012a30:	6033      	str	r3, [r6, #0]
 8012a32:	2f00      	cmp	r7, #0
 8012a34:	d1b9      	bne.n	80129aa <rcl_validate_topic_name+0x96>
 8012a36:	e7b9      	b.n	80129ac <rcl_validate_topic_name+0x98>
 8012a38:	2c00      	cmp	r4, #0
 8012a3a:	d0c3      	beq.n	80129c4 <rcl_validate_topic_name+0xb0>
 8012a3c:	2308      	movs	r3, #8
 8012a3e:	6033      	str	r3, [r6, #0]
 8012a40:	2f00      	cmp	r7, #0
 8012a42:	d1b2      	bne.n	80129aa <rcl_validate_topic_name+0x96>
 8012a44:	e7b2      	b.n	80129ac <rcl_validate_topic_name+0x98>
 8012a46:	2c00      	cmp	r4, #0
 8012a48:	d1f8      	bne.n	8012a3c <rcl_validate_topic_name+0x128>
 8012a4a:	460b      	mov	r3, r1
 8012a4c:	2401      	movs	r4, #1
 8012a4e:	e7b9      	b.n	80129c4 <rcl_validate_topic_name+0xb0>
 8012a50:	2400      	movs	r4, #0
 8012a52:	e7b7      	b.n	80129c4 <rcl_validate_topic_name+0xb0>
 8012a54:	2000      	movs	r0, #0
 8012a56:	6030      	str	r0, [r6, #0]
 8012a58:	e784      	b.n	8012964 <rcl_validate_topic_name+0x50>
 8012a5a:	2205      	movs	r2, #5
 8012a5c:	6032      	str	r2, [r6, #0]
 8012a5e:	2f00      	cmp	r7, #0
 8012a60:	d1d2      	bne.n	8012a08 <rcl_validate_topic_name+0xf4>
 8012a62:	e7a3      	b.n	80129ac <rcl_validate_topic_name+0x98>
 8012a64:	2c00      	cmp	r4, #0
 8012a66:	bf14      	ite	ne
 8012a68:	2308      	movne	r3, #8
 8012a6a:	2303      	moveq	r3, #3
 8012a6c:	6033      	str	r3, [r6, #0]
 8012a6e:	2f00      	cmp	r7, #0
 8012a70:	d19b      	bne.n	80129aa <rcl_validate_topic_name+0x96>
 8012a72:	e79b      	b.n	80129ac <rcl_validate_topic_name+0x98>
 8012a74:	2301      	movs	r3, #1
 8012a76:	e00a      	b.n	8012a8e <rcl_validate_topic_name+0x17a>
 8012a78:	2c01      	cmp	r4, #1
 8012a7a:	d013      	beq.n	8012aa4 <rcl_validate_topic_name+0x190>
 8012a7c:	4299      	cmp	r1, r3
 8012a7e:	f104 0401 	add.w	r4, r4, #1
 8012a82:	f105 0501 	add.w	r5, r5, #1
 8012a86:	f103 0201 	add.w	r2, r3, #1
 8012a8a:	d9e3      	bls.n	8012a54 <rcl_validate_topic_name+0x140>
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	45a0      	cmp	r8, r4
 8012a90:	d0f4      	beq.n	8012a7c <rcl_validate_topic_name+0x168>
 8012a92:	782a      	ldrb	r2, [r5, #0]
 8012a94:	2a2f      	cmp	r2, #47	@ 0x2f
 8012a96:	d1ef      	bne.n	8012a78 <rcl_validate_topic_name+0x164>
 8012a98:	786a      	ldrb	r2, [r5, #1]
 8012a9a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012a9e:	0752      	lsls	r2, r2, #29
 8012aa0:	d5ec      	bpl.n	8012a7c <rcl_validate_topic_name+0x168>
 8012aa2:	e7ad      	b.n	8012a00 <rcl_validate_topic_name+0xec>
 8012aa4:	2307      	movs	r3, #7
 8012aa6:	6033      	str	r3, [r6, #0]
 8012aa8:	2f00      	cmp	r7, #0
 8012aaa:	f43f af7f 	beq.w	80129ac <rcl_validate_topic_name+0x98>
 8012aae:	603c      	str	r4, [r7, #0]
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	e757      	b.n	8012964 <rcl_validate_topic_name+0x50>
 8012ab4:	08015cd4 	.word	0x08015cd4

08012ab8 <on_status>:
 8012ab8:	b082      	sub	sp, #8
 8012aba:	b002      	add	sp, #8
 8012abc:	4770      	bx	lr
 8012abe:	bf00      	nop

08012ac0 <on_topic>:
 8012ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac4:	4a22      	ldr	r2, [pc, #136]	@ (8012b50 <on_topic+0x90>)
 8012ac6:	b094      	sub	sp, #80	@ 0x50
 8012ac8:	6812      	ldr	r2, [r2, #0]
 8012aca:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8012acc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012ad0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8012ad4:	b3c2      	cbz	r2, 8012b48 <on_topic+0x88>
 8012ad6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8012ada:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8012ade:	e001      	b.n	8012ae4 <on_topic+0x24>
 8012ae0:	6852      	ldr	r2, [r2, #4]
 8012ae2:	b38a      	cbz	r2, 8012b48 <on_topic+0x88>
 8012ae4:	6894      	ldr	r4, [r2, #8]
 8012ae6:	8aa3      	ldrh	r3, [r4, #20]
 8012ae8:	428b      	cmp	r3, r1
 8012aea:	d1f9      	bne.n	8012ae0 <on_topic+0x20>
 8012aec:	7da3      	ldrb	r3, [r4, #22]
 8012aee:	4283      	cmp	r3, r0
 8012af0:	d1f6      	bne.n	8012ae0 <on_topic+0x20>
 8012af2:	2248      	movs	r2, #72	@ 0x48
 8012af4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8012af8:	4668      	mov	r0, sp
 8012afa:	f001 fb38 	bl	801416e <memcpy>
 8012afe:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8012b02:	cb0c      	ldmia	r3, {r2, r3}
 8012b04:	4620      	mov	r0, r4
 8012b06:	f7f8 fa2b 	bl	800af60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012b0a:	4607      	mov	r7, r0
 8012b0c:	b1e0      	cbz	r0, 8012b48 <on_topic+0x88>
 8012b0e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012b12:	4632      	mov	r2, r6
 8012b14:	4628      	mov	r0, r5
 8012b16:	f108 0110 	add.w	r1, r8, #16
 8012b1a:	f7fe f831 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 8012b1e:	b930      	cbnz	r0, 8012b2e <on_topic+0x6e>
 8012b20:	480c      	ldr	r0, [pc, #48]	@ (8012b54 <on_topic+0x94>)
 8012b22:	4639      	mov	r1, r7
 8012b24:	b014      	add	sp, #80	@ 0x50
 8012b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b2a:	f7fd ba39 	b.w	800ffa0 <put_memory>
 8012b2e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8012b32:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8012b36:	f7fd ff19 	bl	801096c <rmw_uros_epoch_nanos>
 8012b3a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8012b3e:	2305      	movs	r3, #5
 8012b40:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012b44:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8012b48:	b014      	add	sp, #80	@ 0x50
 8012b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b4e:	bf00      	nop
 8012b50:	20010cec 	.word	0x20010cec
 8012b54:	20010cdc 	.word	0x20010cdc

08012b58 <on_request>:
 8012b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b5c:	4823      	ldr	r0, [pc, #140]	@ (8012bec <on_request+0x94>)
 8012b5e:	b094      	sub	sp, #80	@ 0x50
 8012b60:	6800      	ldr	r0, [r0, #0]
 8012b62:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012b64:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012b68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d03b      	beq.n	8012be6 <on_request+0x8e>
 8012b6e:	461d      	mov	r5, r3
 8012b70:	e001      	b.n	8012b76 <on_request+0x1e>
 8012b72:	6840      	ldr	r0, [r0, #4]
 8012b74:	b3b8      	cbz	r0, 8012be6 <on_request+0x8e>
 8012b76:	6884      	ldr	r4, [r0, #8]
 8012b78:	8b21      	ldrh	r1, [r4, #24]
 8012b7a:	4291      	cmp	r1, r2
 8012b7c:	d1f9      	bne.n	8012b72 <on_request+0x1a>
 8012b7e:	2248      	movs	r2, #72	@ 0x48
 8012b80:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012b84:	4668      	mov	r0, sp
 8012b86:	f001 faf2 	bl	801416e <memcpy>
 8012b8a:	f104 0320 	add.w	r3, r4, #32
 8012b8e:	cb0c      	ldmia	r3, {r2, r3}
 8012b90:	4620      	mov	r0, r4
 8012b92:	f7f8 f9e5 	bl	800af60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012b96:	4680      	mov	r8, r0
 8012b98:	b328      	cbz	r0, 8012be6 <on_request+0x8e>
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012ba0:	4632      	mov	r2, r6
 8012ba2:	f107 0110 	add.w	r1, r7, #16
 8012ba6:	f7fd ffeb 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 8012baa:	b930      	cbnz	r0, 8012bba <on_request+0x62>
 8012bac:	4810      	ldr	r0, [pc, #64]	@ (8012bf0 <on_request+0x98>)
 8012bae:	4641      	mov	r1, r8
 8012bb0:	b014      	add	sp, #80	@ 0x50
 8012bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb6:	f7fd b9f3 	b.w	800ffa0 <put_memory>
 8012bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bbc:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8012bc0:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012bc4:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8012bc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012bcc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012bd0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012bd4:	f7fd feca 	bl	801096c <rmw_uros_epoch_nanos>
 8012bd8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8012bdc:	2303      	movs	r3, #3
 8012bde:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012be2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8012be6:	b014      	add	sp, #80	@ 0x50
 8012be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bec:	20010cbc 	.word	0x20010cbc
 8012bf0:	20010cdc 	.word	0x20010cdc

08012bf4 <on_reply>:
 8012bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf8:	4821      	ldr	r0, [pc, #132]	@ (8012c80 <on_reply+0x8c>)
 8012bfa:	b094      	sub	sp, #80	@ 0x50
 8012bfc:	6800      	ldr	r0, [r0, #0]
 8012bfe:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8012c00:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8012c04:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012c06:	b3b8      	cbz	r0, 8012c78 <on_reply+0x84>
 8012c08:	461d      	mov	r5, r3
 8012c0a:	e001      	b.n	8012c10 <on_reply+0x1c>
 8012c0c:	6840      	ldr	r0, [r0, #4]
 8012c0e:	b398      	cbz	r0, 8012c78 <on_reply+0x84>
 8012c10:	6884      	ldr	r4, [r0, #8]
 8012c12:	8b21      	ldrh	r1, [r4, #24]
 8012c14:	4291      	cmp	r1, r2
 8012c16:	d1f9      	bne.n	8012c0c <on_reply+0x18>
 8012c18:	2248      	movs	r2, #72	@ 0x48
 8012c1a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8012c1e:	4668      	mov	r0, sp
 8012c20:	f001 faa5 	bl	801416e <memcpy>
 8012c24:	f104 0320 	add.w	r3, r4, #32
 8012c28:	cb0c      	ldmia	r3, {r2, r3}
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f7f8 f998 	bl	800af60 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012c30:	4680      	mov	r8, r0
 8012c32:	b308      	cbz	r0, 8012c78 <on_reply+0x84>
 8012c34:	4638      	mov	r0, r7
 8012c36:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012c3a:	4632      	mov	r2, r6
 8012c3c:	f107 0110 	add.w	r1, r7, #16
 8012c40:	f7fd ff9e 	bl	8010b80 <ucdr_deserialize_array_uint8_t>
 8012c44:	b930      	cbnz	r0, 8012c54 <on_reply+0x60>
 8012c46:	480f      	ldr	r0, [pc, #60]	@ (8012c84 <on_reply+0x90>)
 8012c48:	4641      	mov	r1, r8
 8012c4a:	b014      	add	sp, #80	@ 0x50
 8012c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c50:	f7fd b9a6 	b.w	800ffa0 <put_memory>
 8012c54:	2200      	movs	r2, #0
 8012c56:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8012c5a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8012c5e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8012c62:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8012c66:	f7fd fe81 	bl	801096c <rmw_uros_epoch_nanos>
 8012c6a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8012c6e:	2304      	movs	r3, #4
 8012c70:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012c74:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8012c78:	b014      	add	sp, #80	@ 0x50
 8012c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c7e:	bf00      	nop
 8012c80:	2000c3d0 	.word	0x2000c3d0
 8012c84:	20010cdc 	.word	0x20010cdc

08012c88 <rmw_destroy_client>:
 8012c88:	b570      	push	{r4, r5, r6, lr}
 8012c8a:	b128      	cbz	r0, 8012c98 <rmw_destroy_client+0x10>
 8012c8c:	4604      	mov	r4, r0
 8012c8e:	6800      	ldr	r0, [r0, #0]
 8012c90:	460d      	mov	r5, r1
 8012c92:	f7f8 fa35 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 8012c96:	b910      	cbnz	r0, 8012c9e <rmw_destroy_client+0x16>
 8012c98:	2401      	movs	r4, #1
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	bd70      	pop	{r4, r5, r6, pc}
 8012c9e:	6863      	ldr	r3, [r4, #4]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d0f9      	beq.n	8012c98 <rmw_destroy_client+0x10>
 8012ca4:	2d00      	cmp	r5, #0
 8012ca6:	d0f7      	beq.n	8012c98 <rmw_destroy_client+0x10>
 8012ca8:	6828      	ldr	r0, [r5, #0]
 8012caa:	f7f8 fa29 	bl	800b100 <is_uxrce_rmw_identifier_valid>
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	d0f2      	beq.n	8012c98 <rmw_destroy_client+0x10>
 8012cb2:	686e      	ldr	r6, [r5, #4]
 8012cb4:	2e00      	cmp	r6, #0
 8012cb6:	d0ef      	beq.n	8012c98 <rmw_destroy_client+0x10>
 8012cb8:	6864      	ldr	r4, [r4, #4]
 8012cba:	6932      	ldr	r2, [r6, #16]
 8012cbc:	6920      	ldr	r0, [r4, #16]
 8012cbe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012cc2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012cc6:	6819      	ldr	r1, [r3, #0]
 8012cc8:	f7fe fe38 	bl	801193c <uxr_buffer_cancel_data>
 8012ccc:	4602      	mov	r2, r0
 8012cce:	6920      	ldr	r0, [r4, #16]
 8012cd0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012cd4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012cd8:	f7f8 f992 	bl	800b000 <run_xrce_session>
 8012cdc:	6920      	ldr	r0, [r4, #16]
 8012cde:	6932      	ldr	r2, [r6, #16]
 8012ce0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8012ce4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8012ce8:	6819      	ldr	r1, [r3, #0]
 8012cea:	f7f9 fac5 	bl	800c278 <uxr_buffer_delete_entity>
 8012cee:	4602      	mov	r2, r0
 8012cf0:	6920      	ldr	r0, [r4, #16]
 8012cf2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8012cf6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8012cfa:	f7f8 f981 	bl	800b000 <run_xrce_session>
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	4628      	mov	r0, r5
 8012d02:	bf14      	ite	ne
 8012d04:	2400      	movne	r4, #0
 8012d06:	2402      	moveq	r4, #2
 8012d08:	f7f8 f908 	bl	800af1c <rmw_uxrce_fini_client_memory>
 8012d0c:	e7c5      	b.n	8012c9a <rmw_destroy_client+0x12>
 8012d0e:	bf00      	nop

08012d10 <rmw_create_guard_condition>:
 8012d10:	b538      	push	{r3, r4, r5, lr}
 8012d12:	4605      	mov	r5, r0
 8012d14:	4807      	ldr	r0, [pc, #28]	@ (8012d34 <rmw_create_guard_condition+0x24>)
 8012d16:	f7fd f933 	bl	800ff80 <get_memory>
 8012d1a:	b148      	cbz	r0, 8012d30 <rmw_create_guard_condition+0x20>
 8012d1c:	6884      	ldr	r4, [r0, #8]
 8012d1e:	2300      	movs	r3, #0
 8012d20:	7423      	strb	r3, [r4, #16]
 8012d22:	61e5      	str	r5, [r4, #28]
 8012d24:	f7fd f950 	bl	800ffc8 <rmw_get_implementation_identifier>
 8012d28:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012d2c:	f104 0014 	add.w	r0, r4, #20
 8012d30:	bd38      	pop	{r3, r4, r5, pc}
 8012d32:	bf00      	nop
 8012d34:	20010c7c 	.word	0x20010c7c

08012d38 <rmw_destroy_guard_condition>:
 8012d38:	b508      	push	{r3, lr}
 8012d3a:	4b08      	ldr	r3, [pc, #32]	@ (8012d5c <rmw_destroy_guard_condition+0x24>)
 8012d3c:	6819      	ldr	r1, [r3, #0]
 8012d3e:	b911      	cbnz	r1, 8012d46 <rmw_destroy_guard_condition+0xe>
 8012d40:	e00a      	b.n	8012d58 <rmw_destroy_guard_condition+0x20>
 8012d42:	6849      	ldr	r1, [r1, #4]
 8012d44:	b141      	cbz	r1, 8012d58 <rmw_destroy_guard_condition+0x20>
 8012d46:	688b      	ldr	r3, [r1, #8]
 8012d48:	3314      	adds	r3, #20
 8012d4a:	4298      	cmp	r0, r3
 8012d4c:	d1f9      	bne.n	8012d42 <rmw_destroy_guard_condition+0xa>
 8012d4e:	4803      	ldr	r0, [pc, #12]	@ (8012d5c <rmw_destroy_guard_condition+0x24>)
 8012d50:	f7fd f926 	bl	800ffa0 <put_memory>
 8012d54:	2000      	movs	r0, #0
 8012d56:	bd08      	pop	{r3, pc}
 8012d58:	2001      	movs	r0, #1
 8012d5a:	bd08      	pop	{r3, pc}
 8012d5c:	20010c7c 	.word	0x20010c7c

08012d60 <cosf>:
 8012d60:	ee10 3a10 	vmov	r3, s0
 8012d64:	b507      	push	{r0, r1, r2, lr}
 8012d66:	4a1e      	ldr	r2, [pc, #120]	@ (8012de0 <cosf+0x80>)
 8012d68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d806      	bhi.n	8012d7e <cosf+0x1e>
 8012d70:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012de4 <cosf+0x84>
 8012d74:	b003      	add	sp, #12
 8012d76:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d7a:	f000 b87b 	b.w	8012e74 <__kernel_cosf>
 8012d7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012d82:	d304      	bcc.n	8012d8e <cosf+0x2e>
 8012d84:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012d88:	b003      	add	sp, #12
 8012d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d8e:	4668      	mov	r0, sp
 8012d90:	f000 f910 	bl	8012fb4 <__ieee754_rem_pio2f>
 8012d94:	f000 0003 	and.w	r0, r0, #3
 8012d98:	2801      	cmp	r0, #1
 8012d9a:	d009      	beq.n	8012db0 <cosf+0x50>
 8012d9c:	2802      	cmp	r0, #2
 8012d9e:	d010      	beq.n	8012dc2 <cosf+0x62>
 8012da0:	b9b0      	cbnz	r0, 8012dd0 <cosf+0x70>
 8012da2:	eddd 0a01 	vldr	s1, [sp, #4]
 8012da6:	ed9d 0a00 	vldr	s0, [sp]
 8012daa:	f000 f863 	bl	8012e74 <__kernel_cosf>
 8012dae:	e7eb      	b.n	8012d88 <cosf+0x28>
 8012db0:	eddd 0a01 	vldr	s1, [sp, #4]
 8012db4:	ed9d 0a00 	vldr	s0, [sp]
 8012db8:	f000 f8b4 	bl	8012f24 <__kernel_sinf>
 8012dbc:	eeb1 0a40 	vneg.f32	s0, s0
 8012dc0:	e7e2      	b.n	8012d88 <cosf+0x28>
 8012dc2:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dc6:	ed9d 0a00 	vldr	s0, [sp]
 8012dca:	f000 f853 	bl	8012e74 <__kernel_cosf>
 8012dce:	e7f5      	b.n	8012dbc <cosf+0x5c>
 8012dd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dd4:	ed9d 0a00 	vldr	s0, [sp]
 8012dd8:	2001      	movs	r0, #1
 8012dda:	f000 f8a3 	bl	8012f24 <__kernel_sinf>
 8012dde:	e7d3      	b.n	8012d88 <cosf+0x28>
 8012de0:	3f490fd8 	.word	0x3f490fd8
 8012de4:	00000000 	.word	0x00000000

08012de8 <sinf>:
 8012de8:	ee10 3a10 	vmov	r3, s0
 8012dec:	b507      	push	{r0, r1, r2, lr}
 8012dee:	4a1f      	ldr	r2, [pc, #124]	@ (8012e6c <sinf+0x84>)
 8012df0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d807      	bhi.n	8012e08 <sinf+0x20>
 8012df8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012e70 <sinf+0x88>
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	b003      	add	sp, #12
 8012e00:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e04:	f000 b88e 	b.w	8012f24 <__kernel_sinf>
 8012e08:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012e0c:	d304      	bcc.n	8012e18 <sinf+0x30>
 8012e0e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012e12:	b003      	add	sp, #12
 8012e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e18:	4668      	mov	r0, sp
 8012e1a:	f000 f8cb 	bl	8012fb4 <__ieee754_rem_pio2f>
 8012e1e:	f000 0003 	and.w	r0, r0, #3
 8012e22:	2801      	cmp	r0, #1
 8012e24:	d00a      	beq.n	8012e3c <sinf+0x54>
 8012e26:	2802      	cmp	r0, #2
 8012e28:	d00f      	beq.n	8012e4a <sinf+0x62>
 8012e2a:	b9c0      	cbnz	r0, 8012e5e <sinf+0x76>
 8012e2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e30:	ed9d 0a00 	vldr	s0, [sp]
 8012e34:	2001      	movs	r0, #1
 8012e36:	f000 f875 	bl	8012f24 <__kernel_sinf>
 8012e3a:	e7ea      	b.n	8012e12 <sinf+0x2a>
 8012e3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e40:	ed9d 0a00 	vldr	s0, [sp]
 8012e44:	f000 f816 	bl	8012e74 <__kernel_cosf>
 8012e48:	e7e3      	b.n	8012e12 <sinf+0x2a>
 8012e4a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e4e:	ed9d 0a00 	vldr	s0, [sp]
 8012e52:	2001      	movs	r0, #1
 8012e54:	f000 f866 	bl	8012f24 <__kernel_sinf>
 8012e58:	eeb1 0a40 	vneg.f32	s0, s0
 8012e5c:	e7d9      	b.n	8012e12 <sinf+0x2a>
 8012e5e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e62:	ed9d 0a00 	vldr	s0, [sp]
 8012e66:	f000 f805 	bl	8012e74 <__kernel_cosf>
 8012e6a:	e7f5      	b.n	8012e58 <sinf+0x70>
 8012e6c:	3f490fd8 	.word	0x3f490fd8
 8012e70:	00000000 	.word	0x00000000

08012e74 <__kernel_cosf>:
 8012e74:	ee10 3a10 	vmov	r3, s0
 8012e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012e7c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012e80:	eef0 6a40 	vmov.f32	s13, s0
 8012e84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012e88:	d204      	bcs.n	8012e94 <__kernel_cosf+0x20>
 8012e8a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012e8e:	ee17 2a90 	vmov	r2, s15
 8012e92:	b342      	cbz	r2, 8012ee6 <__kernel_cosf+0x72>
 8012e94:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012e98:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8012f04 <__kernel_cosf+0x90>
 8012e9c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8012f08 <__kernel_cosf+0x94>
 8012ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8012f0c <__kernel_cosf+0x98>)
 8012ea2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012f10 <__kernel_cosf+0x9c>
 8012eac:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012eb0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8012f14 <__kernel_cosf+0xa0>
 8012eb4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012eb8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8012f18 <__kernel_cosf+0xa4>
 8012ebc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012ec0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012f1c <__kernel_cosf+0xa8>
 8012ec4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012ec8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012ecc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012ed0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012ed4:	eee7 0a06 	vfma.f32	s1, s14, s12
 8012ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012edc:	d804      	bhi.n	8012ee8 <__kernel_cosf+0x74>
 8012ede:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012ee2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012ee6:	4770      	bx	lr
 8012ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8012f20 <__kernel_cosf+0xac>)
 8012eea:	4293      	cmp	r3, r2
 8012eec:	bf9a      	itte	ls
 8012eee:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8012ef2:	ee07 3a10 	vmovls	s14, r3
 8012ef6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8012efa:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012efe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f02:	e7ec      	b.n	8012ede <__kernel_cosf+0x6a>
 8012f04:	ad47d74e 	.word	0xad47d74e
 8012f08:	310f74f6 	.word	0x310f74f6
 8012f0c:	3e999999 	.word	0x3e999999
 8012f10:	b493f27c 	.word	0xb493f27c
 8012f14:	37d00d01 	.word	0x37d00d01
 8012f18:	bab60b61 	.word	0xbab60b61
 8012f1c:	3d2aaaab 	.word	0x3d2aaaab
 8012f20:	3f480000 	.word	0x3f480000

08012f24 <__kernel_sinf>:
 8012f24:	ee10 3a10 	vmov	r3, s0
 8012f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f2c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012f30:	d204      	bcs.n	8012f3c <__kernel_sinf+0x18>
 8012f32:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012f36:	ee17 3a90 	vmov	r3, s15
 8012f3a:	b35b      	cbz	r3, 8012f94 <__kernel_sinf+0x70>
 8012f3c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012f40:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012f98 <__kernel_sinf+0x74>
 8012f44:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012f9c <__kernel_sinf+0x78>
 8012f48:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012f4c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012fa0 <__kernel_sinf+0x7c>
 8012f50:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f54:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012fa4 <__kernel_sinf+0x80>
 8012f58:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012f5c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8012fa8 <__kernel_sinf+0x84>
 8012f60:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012f64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f68:	b930      	cbnz	r0, 8012f78 <__kernel_sinf+0x54>
 8012f6a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012fac <__kernel_sinf+0x88>
 8012f6e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012f72:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012f76:	4770      	bx	lr
 8012f78:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012f7c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012f80:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012f84:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8012f88:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012fb0 <__kernel_sinf+0x8c>
 8012f8c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012f90:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012f94:	4770      	bx	lr
 8012f96:	bf00      	nop
 8012f98:	2f2ec9d3 	.word	0x2f2ec9d3
 8012f9c:	b2d72f34 	.word	0xb2d72f34
 8012fa0:	3638ef1b 	.word	0x3638ef1b
 8012fa4:	b9500d01 	.word	0xb9500d01
 8012fa8:	3c088889 	.word	0x3c088889
 8012fac:	be2aaaab 	.word	0xbe2aaaab
 8012fb0:	3e2aaaab 	.word	0x3e2aaaab

08012fb4 <__ieee754_rem_pio2f>:
 8012fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fb6:	ee10 6a10 	vmov	r6, s0
 8012fba:	4b88      	ldr	r3, [pc, #544]	@ (80131dc <__ieee754_rem_pio2f+0x228>)
 8012fbc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012fc0:	429d      	cmp	r5, r3
 8012fc2:	b087      	sub	sp, #28
 8012fc4:	4604      	mov	r4, r0
 8012fc6:	d805      	bhi.n	8012fd4 <__ieee754_rem_pio2f+0x20>
 8012fc8:	2300      	movs	r3, #0
 8012fca:	ed80 0a00 	vstr	s0, [r0]
 8012fce:	6043      	str	r3, [r0, #4]
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	e022      	b.n	801301a <__ieee754_rem_pio2f+0x66>
 8012fd4:	4b82      	ldr	r3, [pc, #520]	@ (80131e0 <__ieee754_rem_pio2f+0x22c>)
 8012fd6:	429d      	cmp	r5, r3
 8012fd8:	d83a      	bhi.n	8013050 <__ieee754_rem_pio2f+0x9c>
 8012fda:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012fde:	2e00      	cmp	r6, #0
 8012fe0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80131e4 <__ieee754_rem_pio2f+0x230>
 8012fe4:	4a80      	ldr	r2, [pc, #512]	@ (80131e8 <__ieee754_rem_pio2f+0x234>)
 8012fe6:	f023 030f 	bic.w	r3, r3, #15
 8012fea:	dd18      	ble.n	801301e <__ieee754_rem_pio2f+0x6a>
 8012fec:	4293      	cmp	r3, r2
 8012fee:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012ff2:	bf09      	itett	eq
 8012ff4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80131ec <__ieee754_rem_pio2f+0x238>
 8012ff8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80131f0 <__ieee754_rem_pio2f+0x23c>
 8012ffc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80131f4 <__ieee754_rem_pio2f+0x240>
 8013000:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013004:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013008:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801300c:	ed80 7a00 	vstr	s14, [r0]
 8013010:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013014:	edc0 7a01 	vstr	s15, [r0, #4]
 8013018:	2001      	movs	r0, #1
 801301a:	b007      	add	sp, #28
 801301c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801301e:	4293      	cmp	r3, r2
 8013020:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013024:	bf09      	itett	eq
 8013026:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80131ec <__ieee754_rem_pio2f+0x238>
 801302a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80131f0 <__ieee754_rem_pio2f+0x23c>
 801302e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80131f4 <__ieee754_rem_pio2f+0x240>
 8013032:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013036:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801303a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801303e:	ed80 7a00 	vstr	s14, [r0]
 8013042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013046:	edc0 7a01 	vstr	s15, [r0, #4]
 801304a:	f04f 30ff 	mov.w	r0, #4294967295
 801304e:	e7e4      	b.n	801301a <__ieee754_rem_pio2f+0x66>
 8013050:	4b69      	ldr	r3, [pc, #420]	@ (80131f8 <__ieee754_rem_pio2f+0x244>)
 8013052:	429d      	cmp	r5, r3
 8013054:	d873      	bhi.n	801313e <__ieee754_rem_pio2f+0x18a>
 8013056:	f000 f8dd 	bl	8013214 <fabsf>
 801305a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80131fc <__ieee754_rem_pio2f+0x248>
 801305e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013062:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013066:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801306a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801306e:	ee17 0a90 	vmov	r0, s15
 8013072:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80131e4 <__ieee754_rem_pio2f+0x230>
 8013076:	eea7 0a67 	vfms.f32	s0, s14, s15
 801307a:	281f      	cmp	r0, #31
 801307c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80131f0 <__ieee754_rem_pio2f+0x23c>
 8013080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013084:	eeb1 6a47 	vneg.f32	s12, s14
 8013088:	ee70 6a67 	vsub.f32	s13, s0, s15
 801308c:	ee16 1a90 	vmov	r1, s13
 8013090:	dc09      	bgt.n	80130a6 <__ieee754_rem_pio2f+0xf2>
 8013092:	4a5b      	ldr	r2, [pc, #364]	@ (8013200 <__ieee754_rem_pio2f+0x24c>)
 8013094:	1e47      	subs	r7, r0, #1
 8013096:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801309a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801309e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d107      	bne.n	80130b6 <__ieee754_rem_pio2f+0x102>
 80130a6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80130aa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80130ae:	2a08      	cmp	r2, #8
 80130b0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80130b4:	dc14      	bgt.n	80130e0 <__ieee754_rem_pio2f+0x12c>
 80130b6:	6021      	str	r1, [r4, #0]
 80130b8:	ed94 7a00 	vldr	s14, [r4]
 80130bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80130c0:	2e00      	cmp	r6, #0
 80130c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130c6:	ed84 0a01 	vstr	s0, [r4, #4]
 80130ca:	daa6      	bge.n	801301a <__ieee754_rem_pio2f+0x66>
 80130cc:	eeb1 7a47 	vneg.f32	s14, s14
 80130d0:	eeb1 0a40 	vneg.f32	s0, s0
 80130d4:	ed84 7a00 	vstr	s14, [r4]
 80130d8:	ed84 0a01 	vstr	s0, [r4, #4]
 80130dc:	4240      	negs	r0, r0
 80130de:	e79c      	b.n	801301a <__ieee754_rem_pio2f+0x66>
 80130e0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80131ec <__ieee754_rem_pio2f+0x238>
 80130e4:	eef0 6a40 	vmov.f32	s13, s0
 80130e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80130ec:	ee70 7a66 	vsub.f32	s15, s0, s13
 80130f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80130f4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80131f4 <__ieee754_rem_pio2f+0x240>
 80130f8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80130fc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013100:	ee15 2a90 	vmov	r2, s11
 8013104:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013108:	1a5b      	subs	r3, r3, r1
 801310a:	2b19      	cmp	r3, #25
 801310c:	dc04      	bgt.n	8013118 <__ieee754_rem_pio2f+0x164>
 801310e:	edc4 5a00 	vstr	s11, [r4]
 8013112:	eeb0 0a66 	vmov.f32	s0, s13
 8013116:	e7cf      	b.n	80130b8 <__ieee754_rem_pio2f+0x104>
 8013118:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013204 <__ieee754_rem_pio2f+0x250>
 801311c:	eeb0 0a66 	vmov.f32	s0, s13
 8013120:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013124:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013128:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013208 <__ieee754_rem_pio2f+0x254>
 801312c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013130:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013134:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013138:	ed84 7a00 	vstr	s14, [r4]
 801313c:	e7bc      	b.n	80130b8 <__ieee754_rem_pio2f+0x104>
 801313e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013142:	d306      	bcc.n	8013152 <__ieee754_rem_pio2f+0x19e>
 8013144:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013148:	edc0 7a01 	vstr	s15, [r0, #4]
 801314c:	edc0 7a00 	vstr	s15, [r0]
 8013150:	e73e      	b.n	8012fd0 <__ieee754_rem_pio2f+0x1c>
 8013152:	15ea      	asrs	r2, r5, #23
 8013154:	3a86      	subs	r2, #134	@ 0x86
 8013156:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801315a:	ee07 3a90 	vmov	s15, r3
 801315e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013162:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801320c <__ieee754_rem_pio2f+0x258>
 8013166:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801316a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801316e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013172:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013176:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801317a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801317e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013182:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801318a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801318e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013192:	edcd 7a05 	vstr	s15, [sp, #20]
 8013196:	d11e      	bne.n	80131d6 <__ieee754_rem_pio2f+0x222>
 8013198:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131a0:	bf0c      	ite	eq
 80131a2:	2301      	moveq	r3, #1
 80131a4:	2302      	movne	r3, #2
 80131a6:	491a      	ldr	r1, [pc, #104]	@ (8013210 <__ieee754_rem_pio2f+0x25c>)
 80131a8:	9101      	str	r1, [sp, #4]
 80131aa:	2102      	movs	r1, #2
 80131ac:	9100      	str	r1, [sp, #0]
 80131ae:	a803      	add	r0, sp, #12
 80131b0:	4621      	mov	r1, r4
 80131b2:	f000 f837 	bl	8013224 <__kernel_rem_pio2f>
 80131b6:	2e00      	cmp	r6, #0
 80131b8:	f6bf af2f 	bge.w	801301a <__ieee754_rem_pio2f+0x66>
 80131bc:	edd4 7a00 	vldr	s15, [r4]
 80131c0:	eef1 7a67 	vneg.f32	s15, s15
 80131c4:	edc4 7a00 	vstr	s15, [r4]
 80131c8:	edd4 7a01 	vldr	s15, [r4, #4]
 80131cc:	eef1 7a67 	vneg.f32	s15, s15
 80131d0:	edc4 7a01 	vstr	s15, [r4, #4]
 80131d4:	e782      	b.n	80130dc <__ieee754_rem_pio2f+0x128>
 80131d6:	2303      	movs	r3, #3
 80131d8:	e7e5      	b.n	80131a6 <__ieee754_rem_pio2f+0x1f2>
 80131da:	bf00      	nop
 80131dc:	3f490fd8 	.word	0x3f490fd8
 80131e0:	4016cbe3 	.word	0x4016cbe3
 80131e4:	3fc90f80 	.word	0x3fc90f80
 80131e8:	3fc90fd0 	.word	0x3fc90fd0
 80131ec:	37354400 	.word	0x37354400
 80131f0:	37354443 	.word	0x37354443
 80131f4:	2e85a308 	.word	0x2e85a308
 80131f8:	43490f80 	.word	0x43490f80
 80131fc:	3f22f984 	.word	0x3f22f984
 8013200:	08015894 	.word	0x08015894
 8013204:	2e85a300 	.word	0x2e85a300
 8013208:	248d3132 	.word	0x248d3132
 801320c:	43800000 	.word	0x43800000
 8013210:	08015914 	.word	0x08015914

08013214 <fabsf>:
 8013214:	ee10 3a10 	vmov	r3, s0
 8013218:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801321c:	ee00 3a10 	vmov	s0, r3
 8013220:	4770      	bx	lr
	...

08013224 <__kernel_rem_pio2f>:
 8013224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013228:	ed2d 8b04 	vpush	{d8-d9}
 801322c:	b0d9      	sub	sp, #356	@ 0x164
 801322e:	4690      	mov	r8, r2
 8013230:	9001      	str	r0, [sp, #4]
 8013232:	4ab9      	ldr	r2, [pc, #740]	@ (8013518 <__kernel_rem_pio2f+0x2f4>)
 8013234:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013236:	f118 0f04 	cmn.w	r8, #4
 801323a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801323e:	460f      	mov	r7, r1
 8013240:	f103 3bff 	add.w	fp, r3, #4294967295
 8013244:	db27      	blt.n	8013296 <__kernel_rem_pio2f+0x72>
 8013246:	f1b8 0203 	subs.w	r2, r8, #3
 801324a:	bf48      	it	mi
 801324c:	f108 0204 	addmi.w	r2, r8, #4
 8013250:	10d2      	asrs	r2, r2, #3
 8013252:	1c55      	adds	r5, r2, #1
 8013254:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013256:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8013528 <__kernel_rem_pio2f+0x304>
 801325a:	00e8      	lsls	r0, r5, #3
 801325c:	eba2 060b 	sub.w	r6, r2, fp
 8013260:	9002      	str	r0, [sp, #8]
 8013262:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013266:	eb0a 0c0b 	add.w	ip, sl, fp
 801326a:	ac1c      	add	r4, sp, #112	@ 0x70
 801326c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013270:	2000      	movs	r0, #0
 8013272:	4560      	cmp	r0, ip
 8013274:	dd11      	ble.n	801329a <__kernel_rem_pio2f+0x76>
 8013276:	a91c      	add	r1, sp, #112	@ 0x70
 8013278:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801327c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013280:	f04f 0c00 	mov.w	ip, #0
 8013284:	45d4      	cmp	ip, sl
 8013286:	dc27      	bgt.n	80132d8 <__kernel_rem_pio2f+0xb4>
 8013288:	f8dd e004 	ldr.w	lr, [sp, #4]
 801328c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8013528 <__kernel_rem_pio2f+0x304>
 8013290:	4606      	mov	r6, r0
 8013292:	2400      	movs	r4, #0
 8013294:	e016      	b.n	80132c4 <__kernel_rem_pio2f+0xa0>
 8013296:	2200      	movs	r2, #0
 8013298:	e7db      	b.n	8013252 <__kernel_rem_pio2f+0x2e>
 801329a:	42c6      	cmn	r6, r0
 801329c:	bf5d      	ittte	pl
 801329e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80132a2:	ee07 1a90 	vmovpl	s15, r1
 80132a6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80132aa:	eef0 7a47 	vmovmi.f32	s15, s14
 80132ae:	ece4 7a01 	vstmia	r4!, {s15}
 80132b2:	3001      	adds	r0, #1
 80132b4:	e7dd      	b.n	8013272 <__kernel_rem_pio2f+0x4e>
 80132b6:	ecfe 6a01 	vldmia	lr!, {s13}
 80132ba:	ed96 7a00 	vldr	s14, [r6]
 80132be:	eee6 7a87 	vfma.f32	s15, s13, s14
 80132c2:	3401      	adds	r4, #1
 80132c4:	455c      	cmp	r4, fp
 80132c6:	f1a6 0604 	sub.w	r6, r6, #4
 80132ca:	ddf4      	ble.n	80132b6 <__kernel_rem_pio2f+0x92>
 80132cc:	ece9 7a01 	vstmia	r9!, {s15}
 80132d0:	f10c 0c01 	add.w	ip, ip, #1
 80132d4:	3004      	adds	r0, #4
 80132d6:	e7d5      	b.n	8013284 <__kernel_rem_pio2f+0x60>
 80132d8:	a908      	add	r1, sp, #32
 80132da:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80132de:	9104      	str	r1, [sp, #16]
 80132e0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80132e2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8013524 <__kernel_rem_pio2f+0x300>
 80132e6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8013520 <__kernel_rem_pio2f+0x2fc>
 80132ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80132ee:	9203      	str	r2, [sp, #12]
 80132f0:	4654      	mov	r4, sl
 80132f2:	00a2      	lsls	r2, r4, #2
 80132f4:	9205      	str	r2, [sp, #20]
 80132f6:	aa58      	add	r2, sp, #352	@ 0x160
 80132f8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80132fc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013300:	a944      	add	r1, sp, #272	@ 0x110
 8013302:	aa08      	add	r2, sp, #32
 8013304:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013308:	4694      	mov	ip, r2
 801330a:	4626      	mov	r6, r4
 801330c:	2e00      	cmp	r6, #0
 801330e:	f1a0 0004 	sub.w	r0, r0, #4
 8013312:	dc4c      	bgt.n	80133ae <__kernel_rem_pio2f+0x18a>
 8013314:	4628      	mov	r0, r5
 8013316:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801331a:	f000 f9f5 	bl	8013708 <scalbnf>
 801331e:	eeb0 8a40 	vmov.f32	s16, s0
 8013322:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013326:	ee28 0a00 	vmul.f32	s0, s16, s0
 801332a:	f000 fa53 	bl	80137d4 <floorf>
 801332e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013332:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013336:	2d00      	cmp	r5, #0
 8013338:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801333c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013340:	ee17 9a90 	vmov	r9, s15
 8013344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013348:	ee38 8a67 	vsub.f32	s16, s16, s15
 801334c:	dd41      	ble.n	80133d2 <__kernel_rem_pio2f+0x1ae>
 801334e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013352:	a908      	add	r1, sp, #32
 8013354:	f1c5 0e08 	rsb	lr, r5, #8
 8013358:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801335c:	fa46 f00e 	asr.w	r0, r6, lr
 8013360:	4481      	add	r9, r0
 8013362:	fa00 f00e 	lsl.w	r0, r0, lr
 8013366:	1a36      	subs	r6, r6, r0
 8013368:	f1c5 0007 	rsb	r0, r5, #7
 801336c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013370:	4106      	asrs	r6, r0
 8013372:	2e00      	cmp	r6, #0
 8013374:	dd3c      	ble.n	80133f0 <__kernel_rem_pio2f+0x1cc>
 8013376:	f04f 0e00 	mov.w	lr, #0
 801337a:	f109 0901 	add.w	r9, r9, #1
 801337e:	4670      	mov	r0, lr
 8013380:	4574      	cmp	r4, lr
 8013382:	dc68      	bgt.n	8013456 <__kernel_rem_pio2f+0x232>
 8013384:	2d00      	cmp	r5, #0
 8013386:	dd03      	ble.n	8013390 <__kernel_rem_pio2f+0x16c>
 8013388:	2d01      	cmp	r5, #1
 801338a:	d074      	beq.n	8013476 <__kernel_rem_pio2f+0x252>
 801338c:	2d02      	cmp	r5, #2
 801338e:	d07d      	beq.n	801348c <__kernel_rem_pio2f+0x268>
 8013390:	2e02      	cmp	r6, #2
 8013392:	d12d      	bne.n	80133f0 <__kernel_rem_pio2f+0x1cc>
 8013394:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013398:	ee30 8a48 	vsub.f32	s16, s0, s16
 801339c:	b340      	cbz	r0, 80133f0 <__kernel_rem_pio2f+0x1cc>
 801339e:	4628      	mov	r0, r5
 80133a0:	9306      	str	r3, [sp, #24]
 80133a2:	f000 f9b1 	bl	8013708 <scalbnf>
 80133a6:	9b06      	ldr	r3, [sp, #24]
 80133a8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80133ac:	e020      	b.n	80133f0 <__kernel_rem_pio2f+0x1cc>
 80133ae:	ee60 7a28 	vmul.f32	s15, s0, s17
 80133b2:	3e01      	subs	r6, #1
 80133b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80133b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80133bc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80133c0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80133c4:	ecac 0a01 	vstmia	ip!, {s0}
 80133c8:	ed90 0a00 	vldr	s0, [r0]
 80133cc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80133d0:	e79c      	b.n	801330c <__kernel_rem_pio2f+0xe8>
 80133d2:	d105      	bne.n	80133e0 <__kernel_rem_pio2f+0x1bc>
 80133d4:	1e60      	subs	r0, r4, #1
 80133d6:	a908      	add	r1, sp, #32
 80133d8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80133dc:	11f6      	asrs	r6, r6, #7
 80133de:	e7c8      	b.n	8013372 <__kernel_rem_pio2f+0x14e>
 80133e0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80133e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80133e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ec:	da31      	bge.n	8013452 <__kernel_rem_pio2f+0x22e>
 80133ee:	2600      	movs	r6, #0
 80133f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80133f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f8:	f040 8098 	bne.w	801352c <__kernel_rem_pio2f+0x308>
 80133fc:	1e60      	subs	r0, r4, #1
 80133fe:	2200      	movs	r2, #0
 8013400:	4550      	cmp	r0, sl
 8013402:	da4b      	bge.n	801349c <__kernel_rem_pio2f+0x278>
 8013404:	2a00      	cmp	r2, #0
 8013406:	d065      	beq.n	80134d4 <__kernel_rem_pio2f+0x2b0>
 8013408:	3c01      	subs	r4, #1
 801340a:	ab08      	add	r3, sp, #32
 801340c:	3d08      	subs	r5, #8
 801340e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d0f8      	beq.n	8013408 <__kernel_rem_pio2f+0x1e4>
 8013416:	4628      	mov	r0, r5
 8013418:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801341c:	f000 f974 	bl	8013708 <scalbnf>
 8013420:	1c63      	adds	r3, r4, #1
 8013422:	aa44      	add	r2, sp, #272	@ 0x110
 8013424:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013524 <__kernel_rem_pio2f+0x300>
 8013428:	0099      	lsls	r1, r3, #2
 801342a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801342e:	4623      	mov	r3, r4
 8013430:	2b00      	cmp	r3, #0
 8013432:	f280 80a9 	bge.w	8013588 <__kernel_rem_pio2f+0x364>
 8013436:	4623      	mov	r3, r4
 8013438:	2b00      	cmp	r3, #0
 801343a:	f2c0 80c7 	blt.w	80135cc <__kernel_rem_pio2f+0x3a8>
 801343e:	aa44      	add	r2, sp, #272	@ 0x110
 8013440:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013444:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801351c <__kernel_rem_pio2f+0x2f8>
 8013448:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013528 <__kernel_rem_pio2f+0x304>
 801344c:	2000      	movs	r0, #0
 801344e:	1ae2      	subs	r2, r4, r3
 8013450:	e0b1      	b.n	80135b6 <__kernel_rem_pio2f+0x392>
 8013452:	2602      	movs	r6, #2
 8013454:	e78f      	b.n	8013376 <__kernel_rem_pio2f+0x152>
 8013456:	f852 1b04 	ldr.w	r1, [r2], #4
 801345a:	b948      	cbnz	r0, 8013470 <__kernel_rem_pio2f+0x24c>
 801345c:	b121      	cbz	r1, 8013468 <__kernel_rem_pio2f+0x244>
 801345e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013462:	f842 1c04 	str.w	r1, [r2, #-4]
 8013466:	2101      	movs	r1, #1
 8013468:	f10e 0e01 	add.w	lr, lr, #1
 801346c:	4608      	mov	r0, r1
 801346e:	e787      	b.n	8013380 <__kernel_rem_pio2f+0x15c>
 8013470:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013474:	e7f5      	b.n	8013462 <__kernel_rem_pio2f+0x23e>
 8013476:	f104 3cff 	add.w	ip, r4, #4294967295
 801347a:	aa08      	add	r2, sp, #32
 801347c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013480:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013484:	a908      	add	r1, sp, #32
 8013486:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801348a:	e781      	b.n	8013390 <__kernel_rem_pio2f+0x16c>
 801348c:	f104 3cff 	add.w	ip, r4, #4294967295
 8013490:	aa08      	add	r2, sp, #32
 8013492:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013496:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801349a:	e7f3      	b.n	8013484 <__kernel_rem_pio2f+0x260>
 801349c:	a908      	add	r1, sp, #32
 801349e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80134a2:	3801      	subs	r0, #1
 80134a4:	430a      	orrs	r2, r1
 80134a6:	e7ab      	b.n	8013400 <__kernel_rem_pio2f+0x1dc>
 80134a8:	3201      	adds	r2, #1
 80134aa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80134ae:	2e00      	cmp	r6, #0
 80134b0:	d0fa      	beq.n	80134a8 <__kernel_rem_pio2f+0x284>
 80134b2:	9905      	ldr	r1, [sp, #20]
 80134b4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80134b8:	eb0d 0001 	add.w	r0, sp, r1
 80134bc:	18e6      	adds	r6, r4, r3
 80134be:	a91c      	add	r1, sp, #112	@ 0x70
 80134c0:	f104 0c01 	add.w	ip, r4, #1
 80134c4:	384c      	subs	r0, #76	@ 0x4c
 80134c6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80134ca:	4422      	add	r2, r4
 80134cc:	4562      	cmp	r2, ip
 80134ce:	da04      	bge.n	80134da <__kernel_rem_pio2f+0x2b6>
 80134d0:	4614      	mov	r4, r2
 80134d2:	e70e      	b.n	80132f2 <__kernel_rem_pio2f+0xce>
 80134d4:	9804      	ldr	r0, [sp, #16]
 80134d6:	2201      	movs	r2, #1
 80134d8:	e7e7      	b.n	80134aa <__kernel_rem_pio2f+0x286>
 80134da:	9903      	ldr	r1, [sp, #12]
 80134dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80134e0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80134e4:	9105      	str	r1, [sp, #20]
 80134e6:	ee07 1a90 	vmov	s15, r1
 80134ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134ee:	2400      	movs	r4, #0
 80134f0:	ece6 7a01 	vstmia	r6!, {s15}
 80134f4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013528 <__kernel_rem_pio2f+0x304>
 80134f8:	46b1      	mov	r9, r6
 80134fa:	455c      	cmp	r4, fp
 80134fc:	dd04      	ble.n	8013508 <__kernel_rem_pio2f+0x2e4>
 80134fe:	ece0 7a01 	vstmia	r0!, {s15}
 8013502:	f10c 0c01 	add.w	ip, ip, #1
 8013506:	e7e1      	b.n	80134cc <__kernel_rem_pio2f+0x2a8>
 8013508:	ecfe 6a01 	vldmia	lr!, {s13}
 801350c:	ed39 7a01 	vldmdb	r9!, {s14}
 8013510:	3401      	adds	r4, #1
 8013512:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013516:	e7f0      	b.n	80134fa <__kernel_rem_pio2f+0x2d6>
 8013518:	08015c58 	.word	0x08015c58
 801351c:	08015c2c 	.word	0x08015c2c
 8013520:	43800000 	.word	0x43800000
 8013524:	3b800000 	.word	0x3b800000
 8013528:	00000000 	.word	0x00000000
 801352c:	9b02      	ldr	r3, [sp, #8]
 801352e:	eeb0 0a48 	vmov.f32	s0, s16
 8013532:	eba3 0008 	sub.w	r0, r3, r8
 8013536:	f000 f8e7 	bl	8013708 <scalbnf>
 801353a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013520 <__kernel_rem_pio2f+0x2fc>
 801353e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013546:	db19      	blt.n	801357c <__kernel_rem_pio2f+0x358>
 8013548:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013524 <__kernel_rem_pio2f+0x300>
 801354c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013550:	aa08      	add	r2, sp, #32
 8013552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013556:	3508      	adds	r5, #8
 8013558:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801355c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013564:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013568:	ee10 3a10 	vmov	r3, s0
 801356c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013570:	ee17 3a90 	vmov	r3, s15
 8013574:	3401      	adds	r4, #1
 8013576:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801357a:	e74c      	b.n	8013416 <__kernel_rem_pio2f+0x1f2>
 801357c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013580:	aa08      	add	r2, sp, #32
 8013582:	ee10 3a10 	vmov	r3, s0
 8013586:	e7f6      	b.n	8013576 <__kernel_rem_pio2f+0x352>
 8013588:	a808      	add	r0, sp, #32
 801358a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801358e:	9001      	str	r0, [sp, #4]
 8013590:	ee07 0a90 	vmov	s15, r0
 8013594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013598:	3b01      	subs	r3, #1
 801359a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801359e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80135a2:	ed62 7a01 	vstmdb	r2!, {s15}
 80135a6:	e743      	b.n	8013430 <__kernel_rem_pio2f+0x20c>
 80135a8:	ecfc 6a01 	vldmia	ip!, {s13}
 80135ac:	ecb5 7a01 	vldmia	r5!, {s14}
 80135b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80135b4:	3001      	adds	r0, #1
 80135b6:	4550      	cmp	r0, sl
 80135b8:	dc01      	bgt.n	80135be <__kernel_rem_pio2f+0x39a>
 80135ba:	4282      	cmp	r2, r0
 80135bc:	daf4      	bge.n	80135a8 <__kernel_rem_pio2f+0x384>
 80135be:	a858      	add	r0, sp, #352	@ 0x160
 80135c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80135c4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80135c8:	3b01      	subs	r3, #1
 80135ca:	e735      	b.n	8013438 <__kernel_rem_pio2f+0x214>
 80135cc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80135ce:	2b02      	cmp	r3, #2
 80135d0:	dc09      	bgt.n	80135e6 <__kernel_rem_pio2f+0x3c2>
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	dc2b      	bgt.n	801362e <__kernel_rem_pio2f+0x40a>
 80135d6:	d044      	beq.n	8013662 <__kernel_rem_pio2f+0x43e>
 80135d8:	f009 0007 	and.w	r0, r9, #7
 80135dc:	b059      	add	sp, #356	@ 0x164
 80135de:	ecbd 8b04 	vpop	{d8-d9}
 80135e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80135e8:	2b03      	cmp	r3, #3
 80135ea:	d1f5      	bne.n	80135d8 <__kernel_rem_pio2f+0x3b4>
 80135ec:	aa30      	add	r2, sp, #192	@ 0xc0
 80135ee:	1f0b      	subs	r3, r1, #4
 80135f0:	4413      	add	r3, r2
 80135f2:	461a      	mov	r2, r3
 80135f4:	4620      	mov	r0, r4
 80135f6:	2800      	cmp	r0, #0
 80135f8:	f1a2 0204 	sub.w	r2, r2, #4
 80135fc:	dc52      	bgt.n	80136a4 <__kernel_rem_pio2f+0x480>
 80135fe:	4622      	mov	r2, r4
 8013600:	2a01      	cmp	r2, #1
 8013602:	f1a3 0304 	sub.w	r3, r3, #4
 8013606:	dc5d      	bgt.n	80136c4 <__kernel_rem_pio2f+0x4a0>
 8013608:	ab30      	add	r3, sp, #192	@ 0xc0
 801360a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8013528 <__kernel_rem_pio2f+0x304>
 801360e:	440b      	add	r3, r1
 8013610:	2c01      	cmp	r4, #1
 8013612:	dc67      	bgt.n	80136e4 <__kernel_rem_pio2f+0x4c0>
 8013614:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013618:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801361c:	2e00      	cmp	r6, #0
 801361e:	d167      	bne.n	80136f0 <__kernel_rem_pio2f+0x4cc>
 8013620:	edc7 6a00 	vstr	s13, [r7]
 8013624:	ed87 7a01 	vstr	s14, [r7, #4]
 8013628:	edc7 7a02 	vstr	s15, [r7, #8]
 801362c:	e7d4      	b.n	80135d8 <__kernel_rem_pio2f+0x3b4>
 801362e:	ab30      	add	r3, sp, #192	@ 0xc0
 8013630:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8013528 <__kernel_rem_pio2f+0x304>
 8013634:	440b      	add	r3, r1
 8013636:	4622      	mov	r2, r4
 8013638:	2a00      	cmp	r2, #0
 801363a:	da24      	bge.n	8013686 <__kernel_rem_pio2f+0x462>
 801363c:	b34e      	cbz	r6, 8013692 <__kernel_rem_pio2f+0x46e>
 801363e:	eef1 7a47 	vneg.f32	s15, s14
 8013642:	edc7 7a00 	vstr	s15, [r7]
 8013646:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801364a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801364e:	aa31      	add	r2, sp, #196	@ 0xc4
 8013650:	2301      	movs	r3, #1
 8013652:	429c      	cmp	r4, r3
 8013654:	da20      	bge.n	8013698 <__kernel_rem_pio2f+0x474>
 8013656:	b10e      	cbz	r6, 801365c <__kernel_rem_pio2f+0x438>
 8013658:	eef1 7a67 	vneg.f32	s15, s15
 801365c:	edc7 7a01 	vstr	s15, [r7, #4]
 8013660:	e7ba      	b.n	80135d8 <__kernel_rem_pio2f+0x3b4>
 8013662:	ab30      	add	r3, sp, #192	@ 0xc0
 8013664:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8013528 <__kernel_rem_pio2f+0x304>
 8013668:	440b      	add	r3, r1
 801366a:	2c00      	cmp	r4, #0
 801366c:	da05      	bge.n	801367a <__kernel_rem_pio2f+0x456>
 801366e:	b10e      	cbz	r6, 8013674 <__kernel_rem_pio2f+0x450>
 8013670:	eef1 7a67 	vneg.f32	s15, s15
 8013674:	edc7 7a00 	vstr	s15, [r7]
 8013678:	e7ae      	b.n	80135d8 <__kernel_rem_pio2f+0x3b4>
 801367a:	ed33 7a01 	vldmdb	r3!, {s14}
 801367e:	3c01      	subs	r4, #1
 8013680:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013684:	e7f1      	b.n	801366a <__kernel_rem_pio2f+0x446>
 8013686:	ed73 7a01 	vldmdb	r3!, {s15}
 801368a:	3a01      	subs	r2, #1
 801368c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013690:	e7d2      	b.n	8013638 <__kernel_rem_pio2f+0x414>
 8013692:	eef0 7a47 	vmov.f32	s15, s14
 8013696:	e7d4      	b.n	8013642 <__kernel_rem_pio2f+0x41e>
 8013698:	ecb2 7a01 	vldmia	r2!, {s14}
 801369c:	3301      	adds	r3, #1
 801369e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136a2:	e7d6      	b.n	8013652 <__kernel_rem_pio2f+0x42e>
 80136a4:	edd2 7a00 	vldr	s15, [r2]
 80136a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80136ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80136b0:	3801      	subs	r0, #1
 80136b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136b6:	ed82 7a00 	vstr	s14, [r2]
 80136ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136be:	edc2 7a01 	vstr	s15, [r2, #4]
 80136c2:	e798      	b.n	80135f6 <__kernel_rem_pio2f+0x3d2>
 80136c4:	edd3 7a00 	vldr	s15, [r3]
 80136c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80136cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80136d0:	3a01      	subs	r2, #1
 80136d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136d6:	ed83 7a00 	vstr	s14, [r3]
 80136da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136de:	edc3 7a01 	vstr	s15, [r3, #4]
 80136e2:	e78d      	b.n	8013600 <__kernel_rem_pio2f+0x3dc>
 80136e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80136e8:	3c01      	subs	r4, #1
 80136ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136ee:	e78f      	b.n	8013610 <__kernel_rem_pio2f+0x3ec>
 80136f0:	eef1 6a66 	vneg.f32	s13, s13
 80136f4:	eeb1 7a47 	vneg.f32	s14, s14
 80136f8:	edc7 6a00 	vstr	s13, [r7]
 80136fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8013700:	eef1 7a67 	vneg.f32	s15, s15
 8013704:	e790      	b.n	8013628 <__kernel_rem_pio2f+0x404>
 8013706:	bf00      	nop

08013708 <scalbnf>:
 8013708:	ee10 3a10 	vmov	r3, s0
 801370c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013710:	d02b      	beq.n	801376a <scalbnf+0x62>
 8013712:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013716:	d302      	bcc.n	801371e <scalbnf+0x16>
 8013718:	ee30 0a00 	vadd.f32	s0, s0, s0
 801371c:	4770      	bx	lr
 801371e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013722:	d123      	bne.n	801376c <scalbnf+0x64>
 8013724:	4b24      	ldr	r3, [pc, #144]	@ (80137b8 <scalbnf+0xb0>)
 8013726:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80137bc <scalbnf+0xb4>
 801372a:	4298      	cmp	r0, r3
 801372c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013730:	db17      	blt.n	8013762 <scalbnf+0x5a>
 8013732:	ee10 3a10 	vmov	r3, s0
 8013736:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801373a:	3a19      	subs	r2, #25
 801373c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013740:	4288      	cmp	r0, r1
 8013742:	dd15      	ble.n	8013770 <scalbnf+0x68>
 8013744:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80137c0 <scalbnf+0xb8>
 8013748:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80137c4 <scalbnf+0xbc>
 801374c:	ee10 3a10 	vmov	r3, s0
 8013750:	eeb0 7a67 	vmov.f32	s14, s15
 8013754:	2b00      	cmp	r3, #0
 8013756:	bfb8      	it	lt
 8013758:	eef0 7a66 	vmovlt.f32	s15, s13
 801375c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013760:	4770      	bx	lr
 8013762:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80137c8 <scalbnf+0xc0>
 8013766:	ee27 0a80 	vmul.f32	s0, s15, s0
 801376a:	4770      	bx	lr
 801376c:	0dd2      	lsrs	r2, r2, #23
 801376e:	e7e5      	b.n	801373c <scalbnf+0x34>
 8013770:	4410      	add	r0, r2
 8013772:	28fe      	cmp	r0, #254	@ 0xfe
 8013774:	dce6      	bgt.n	8013744 <scalbnf+0x3c>
 8013776:	2800      	cmp	r0, #0
 8013778:	dd06      	ble.n	8013788 <scalbnf+0x80>
 801377a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801377e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013782:	ee00 3a10 	vmov	s0, r3
 8013786:	4770      	bx	lr
 8013788:	f110 0f16 	cmn.w	r0, #22
 801378c:	da09      	bge.n	80137a2 <scalbnf+0x9a>
 801378e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80137c8 <scalbnf+0xc0>
 8013792:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80137cc <scalbnf+0xc4>
 8013796:	ee10 3a10 	vmov	r3, s0
 801379a:	eeb0 7a67 	vmov.f32	s14, s15
 801379e:	2b00      	cmp	r3, #0
 80137a0:	e7d9      	b.n	8013756 <scalbnf+0x4e>
 80137a2:	3019      	adds	r0, #25
 80137a4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80137a8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80137ac:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80137d0 <scalbnf+0xc8>
 80137b0:	ee07 3a90 	vmov	s15, r3
 80137b4:	e7d7      	b.n	8013766 <scalbnf+0x5e>
 80137b6:	bf00      	nop
 80137b8:	ffff3cb0 	.word	0xffff3cb0
 80137bc:	4c000000 	.word	0x4c000000
 80137c0:	7149f2ca 	.word	0x7149f2ca
 80137c4:	f149f2ca 	.word	0xf149f2ca
 80137c8:	0da24260 	.word	0x0da24260
 80137cc:	8da24260 	.word	0x8da24260
 80137d0:	33000000 	.word	0x33000000

080137d4 <floorf>:
 80137d4:	ee10 3a10 	vmov	r3, s0
 80137d8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80137dc:	3a7f      	subs	r2, #127	@ 0x7f
 80137de:	2a16      	cmp	r2, #22
 80137e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80137e4:	dc2b      	bgt.n	801383e <floorf+0x6a>
 80137e6:	2a00      	cmp	r2, #0
 80137e8:	da12      	bge.n	8013810 <floorf+0x3c>
 80137ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013850 <floorf+0x7c>
 80137ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80137f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80137f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fa:	dd06      	ble.n	801380a <floorf+0x36>
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	da24      	bge.n	801384a <floorf+0x76>
 8013800:	2900      	cmp	r1, #0
 8013802:	4b14      	ldr	r3, [pc, #80]	@ (8013854 <floorf+0x80>)
 8013804:	bf08      	it	eq
 8013806:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801380a:	ee00 3a10 	vmov	s0, r3
 801380e:	4770      	bx	lr
 8013810:	4911      	ldr	r1, [pc, #68]	@ (8013858 <floorf+0x84>)
 8013812:	4111      	asrs	r1, r2
 8013814:	420b      	tst	r3, r1
 8013816:	d0fa      	beq.n	801380e <floorf+0x3a>
 8013818:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013850 <floorf+0x7c>
 801381c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013820:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013828:	ddef      	ble.n	801380a <floorf+0x36>
 801382a:	2b00      	cmp	r3, #0
 801382c:	bfbe      	ittt	lt
 801382e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013832:	fa40 f202 	asrlt.w	r2, r0, r2
 8013836:	189b      	addlt	r3, r3, r2
 8013838:	ea23 0301 	bic.w	r3, r3, r1
 801383c:	e7e5      	b.n	801380a <floorf+0x36>
 801383e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013842:	d3e4      	bcc.n	801380e <floorf+0x3a>
 8013844:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013848:	4770      	bx	lr
 801384a:	2300      	movs	r3, #0
 801384c:	e7dd      	b.n	801380a <floorf+0x36>
 801384e:	bf00      	nop
 8013850:	7149f2ca 	.word	0x7149f2ca
 8013854:	bf800000 	.word	0xbf800000
 8013858:	007fffff 	.word	0x007fffff

0801385c <calloc>:
 801385c:	4b02      	ldr	r3, [pc, #8]	@ (8013868 <calloc+0xc>)
 801385e:	460a      	mov	r2, r1
 8013860:	4601      	mov	r1, r0
 8013862:	6818      	ldr	r0, [r3, #0]
 8013864:	f000 b802 	b.w	801386c <_calloc_r>
 8013868:	20000180 	.word	0x20000180

0801386c <_calloc_r>:
 801386c:	b570      	push	{r4, r5, r6, lr}
 801386e:	fba1 5402 	umull	r5, r4, r1, r2
 8013872:	b93c      	cbnz	r4, 8013884 <_calloc_r+0x18>
 8013874:	4629      	mov	r1, r5
 8013876:	f000 f887 	bl	8013988 <_malloc_r>
 801387a:	4606      	mov	r6, r0
 801387c:	b928      	cbnz	r0, 801388a <_calloc_r+0x1e>
 801387e:	2600      	movs	r6, #0
 8013880:	4630      	mov	r0, r6
 8013882:	bd70      	pop	{r4, r5, r6, pc}
 8013884:	220c      	movs	r2, #12
 8013886:	6002      	str	r2, [r0, #0]
 8013888:	e7f9      	b.n	801387e <_calloc_r+0x12>
 801388a:	462a      	mov	r2, r5
 801388c:	4621      	mov	r1, r4
 801388e:	f000 fba5 	bl	8013fdc <memset>
 8013892:	e7f5      	b.n	8013880 <_calloc_r+0x14>

08013894 <getenv>:
 8013894:	b507      	push	{r0, r1, r2, lr}
 8013896:	4b04      	ldr	r3, [pc, #16]	@ (80138a8 <getenv+0x14>)
 8013898:	4601      	mov	r1, r0
 801389a:	aa01      	add	r2, sp, #4
 801389c:	6818      	ldr	r0, [r3, #0]
 801389e:	f000 f805 	bl	80138ac <_findenv_r>
 80138a2:	b003      	add	sp, #12
 80138a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80138a8:	20000180 	.word	0x20000180

080138ac <_findenv_r>:
 80138ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b0:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8013920 <_findenv_r+0x74>
 80138b4:	4606      	mov	r6, r0
 80138b6:	4689      	mov	r9, r1
 80138b8:	4617      	mov	r7, r2
 80138ba:	f000 fc85 	bl	80141c8 <__env_lock>
 80138be:	f8da 4000 	ldr.w	r4, [sl]
 80138c2:	b134      	cbz	r4, 80138d2 <_findenv_r+0x26>
 80138c4:	464b      	mov	r3, r9
 80138c6:	4698      	mov	r8, r3
 80138c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138cc:	b13a      	cbz	r2, 80138de <_findenv_r+0x32>
 80138ce:	2a3d      	cmp	r2, #61	@ 0x3d
 80138d0:	d1f9      	bne.n	80138c6 <_findenv_r+0x1a>
 80138d2:	4630      	mov	r0, r6
 80138d4:	f000 fc7e 	bl	80141d4 <__env_unlock>
 80138d8:	2000      	movs	r0, #0
 80138da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138de:	eba8 0809 	sub.w	r8, r8, r9
 80138e2:	46a3      	mov	fp, r4
 80138e4:	f854 0b04 	ldr.w	r0, [r4], #4
 80138e8:	2800      	cmp	r0, #0
 80138ea:	d0f2      	beq.n	80138d2 <_findenv_r+0x26>
 80138ec:	4642      	mov	r2, r8
 80138ee:	4649      	mov	r1, r9
 80138f0:	f000 fb89 	bl	8014006 <strncmp>
 80138f4:	2800      	cmp	r0, #0
 80138f6:	d1f4      	bne.n	80138e2 <_findenv_r+0x36>
 80138f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80138fc:	eb03 0508 	add.w	r5, r3, r8
 8013900:	f813 3008 	ldrb.w	r3, [r3, r8]
 8013904:	2b3d      	cmp	r3, #61	@ 0x3d
 8013906:	d1ec      	bne.n	80138e2 <_findenv_r+0x36>
 8013908:	f8da 3000 	ldr.w	r3, [sl]
 801390c:	ebab 0303 	sub.w	r3, fp, r3
 8013910:	109b      	asrs	r3, r3, #2
 8013912:	4630      	mov	r0, r6
 8013914:	603b      	str	r3, [r7, #0]
 8013916:	f000 fc5d 	bl	80141d4 <__env_unlock>
 801391a:	1c68      	adds	r0, r5, #1
 801391c:	e7dd      	b.n	80138da <_findenv_r+0x2e>
 801391e:	bf00      	nop
 8013920:	200000c0 	.word	0x200000c0

08013924 <malloc>:
 8013924:	4b02      	ldr	r3, [pc, #8]	@ (8013930 <malloc+0xc>)
 8013926:	4601      	mov	r1, r0
 8013928:	6818      	ldr	r0, [r3, #0]
 801392a:	f000 b82d 	b.w	8013988 <_malloc_r>
 801392e:	bf00      	nop
 8013930:	20000180 	.word	0x20000180

08013934 <free>:
 8013934:	4b02      	ldr	r3, [pc, #8]	@ (8013940 <free+0xc>)
 8013936:	4601      	mov	r1, r0
 8013938:	6818      	ldr	r0, [r3, #0]
 801393a:	f000 bc51 	b.w	80141e0 <_free_r>
 801393e:	bf00      	nop
 8013940:	20000180 	.word	0x20000180

08013944 <sbrk_aligned>:
 8013944:	b570      	push	{r4, r5, r6, lr}
 8013946:	4e0f      	ldr	r6, [pc, #60]	@ (8013984 <sbrk_aligned+0x40>)
 8013948:	460c      	mov	r4, r1
 801394a:	6831      	ldr	r1, [r6, #0]
 801394c:	4605      	mov	r5, r0
 801394e:	b911      	cbnz	r1, 8013956 <sbrk_aligned+0x12>
 8013950:	f000 fbb6 	bl	80140c0 <_sbrk_r>
 8013954:	6030      	str	r0, [r6, #0]
 8013956:	4621      	mov	r1, r4
 8013958:	4628      	mov	r0, r5
 801395a:	f000 fbb1 	bl	80140c0 <_sbrk_r>
 801395e:	1c43      	adds	r3, r0, #1
 8013960:	d103      	bne.n	801396a <sbrk_aligned+0x26>
 8013962:	f04f 34ff 	mov.w	r4, #4294967295
 8013966:	4620      	mov	r0, r4
 8013968:	bd70      	pop	{r4, r5, r6, pc}
 801396a:	1cc4      	adds	r4, r0, #3
 801396c:	f024 0403 	bic.w	r4, r4, #3
 8013970:	42a0      	cmp	r0, r4
 8013972:	d0f8      	beq.n	8013966 <sbrk_aligned+0x22>
 8013974:	1a21      	subs	r1, r4, r0
 8013976:	4628      	mov	r0, r5
 8013978:	f000 fba2 	bl	80140c0 <_sbrk_r>
 801397c:	3001      	adds	r0, #1
 801397e:	d1f2      	bne.n	8013966 <sbrk_aligned+0x22>
 8013980:	e7ef      	b.n	8013962 <sbrk_aligned+0x1e>
 8013982:	bf00      	nop
 8013984:	20010e30 	.word	0x20010e30

08013988 <_malloc_r>:
 8013988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801398c:	1ccd      	adds	r5, r1, #3
 801398e:	f025 0503 	bic.w	r5, r5, #3
 8013992:	3508      	adds	r5, #8
 8013994:	2d0c      	cmp	r5, #12
 8013996:	bf38      	it	cc
 8013998:	250c      	movcc	r5, #12
 801399a:	2d00      	cmp	r5, #0
 801399c:	4606      	mov	r6, r0
 801399e:	db01      	blt.n	80139a4 <_malloc_r+0x1c>
 80139a0:	42a9      	cmp	r1, r5
 80139a2:	d904      	bls.n	80139ae <_malloc_r+0x26>
 80139a4:	230c      	movs	r3, #12
 80139a6:	6033      	str	r3, [r6, #0]
 80139a8:	2000      	movs	r0, #0
 80139aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013a84 <_malloc_r+0xfc>
 80139b2:	f000 f869 	bl	8013a88 <__malloc_lock>
 80139b6:	f8d8 3000 	ldr.w	r3, [r8]
 80139ba:	461c      	mov	r4, r3
 80139bc:	bb44      	cbnz	r4, 8013a10 <_malloc_r+0x88>
 80139be:	4629      	mov	r1, r5
 80139c0:	4630      	mov	r0, r6
 80139c2:	f7ff ffbf 	bl	8013944 <sbrk_aligned>
 80139c6:	1c43      	adds	r3, r0, #1
 80139c8:	4604      	mov	r4, r0
 80139ca:	d158      	bne.n	8013a7e <_malloc_r+0xf6>
 80139cc:	f8d8 4000 	ldr.w	r4, [r8]
 80139d0:	4627      	mov	r7, r4
 80139d2:	2f00      	cmp	r7, #0
 80139d4:	d143      	bne.n	8013a5e <_malloc_r+0xd6>
 80139d6:	2c00      	cmp	r4, #0
 80139d8:	d04b      	beq.n	8013a72 <_malloc_r+0xea>
 80139da:	6823      	ldr	r3, [r4, #0]
 80139dc:	4639      	mov	r1, r7
 80139de:	4630      	mov	r0, r6
 80139e0:	eb04 0903 	add.w	r9, r4, r3
 80139e4:	f000 fb6c 	bl	80140c0 <_sbrk_r>
 80139e8:	4581      	cmp	r9, r0
 80139ea:	d142      	bne.n	8013a72 <_malloc_r+0xea>
 80139ec:	6821      	ldr	r1, [r4, #0]
 80139ee:	1a6d      	subs	r5, r5, r1
 80139f0:	4629      	mov	r1, r5
 80139f2:	4630      	mov	r0, r6
 80139f4:	f7ff ffa6 	bl	8013944 <sbrk_aligned>
 80139f8:	3001      	adds	r0, #1
 80139fa:	d03a      	beq.n	8013a72 <_malloc_r+0xea>
 80139fc:	6823      	ldr	r3, [r4, #0]
 80139fe:	442b      	add	r3, r5
 8013a00:	6023      	str	r3, [r4, #0]
 8013a02:	f8d8 3000 	ldr.w	r3, [r8]
 8013a06:	685a      	ldr	r2, [r3, #4]
 8013a08:	bb62      	cbnz	r2, 8013a64 <_malloc_r+0xdc>
 8013a0a:	f8c8 7000 	str.w	r7, [r8]
 8013a0e:	e00f      	b.n	8013a30 <_malloc_r+0xa8>
 8013a10:	6822      	ldr	r2, [r4, #0]
 8013a12:	1b52      	subs	r2, r2, r5
 8013a14:	d420      	bmi.n	8013a58 <_malloc_r+0xd0>
 8013a16:	2a0b      	cmp	r2, #11
 8013a18:	d917      	bls.n	8013a4a <_malloc_r+0xc2>
 8013a1a:	1961      	adds	r1, r4, r5
 8013a1c:	42a3      	cmp	r3, r4
 8013a1e:	6025      	str	r5, [r4, #0]
 8013a20:	bf18      	it	ne
 8013a22:	6059      	strne	r1, [r3, #4]
 8013a24:	6863      	ldr	r3, [r4, #4]
 8013a26:	bf08      	it	eq
 8013a28:	f8c8 1000 	streq.w	r1, [r8]
 8013a2c:	5162      	str	r2, [r4, r5]
 8013a2e:	604b      	str	r3, [r1, #4]
 8013a30:	4630      	mov	r0, r6
 8013a32:	f000 f82f 	bl	8013a94 <__malloc_unlock>
 8013a36:	f104 000b 	add.w	r0, r4, #11
 8013a3a:	1d23      	adds	r3, r4, #4
 8013a3c:	f020 0007 	bic.w	r0, r0, #7
 8013a40:	1ac2      	subs	r2, r0, r3
 8013a42:	bf1c      	itt	ne
 8013a44:	1a1b      	subne	r3, r3, r0
 8013a46:	50a3      	strne	r3, [r4, r2]
 8013a48:	e7af      	b.n	80139aa <_malloc_r+0x22>
 8013a4a:	6862      	ldr	r2, [r4, #4]
 8013a4c:	42a3      	cmp	r3, r4
 8013a4e:	bf0c      	ite	eq
 8013a50:	f8c8 2000 	streq.w	r2, [r8]
 8013a54:	605a      	strne	r2, [r3, #4]
 8013a56:	e7eb      	b.n	8013a30 <_malloc_r+0xa8>
 8013a58:	4623      	mov	r3, r4
 8013a5a:	6864      	ldr	r4, [r4, #4]
 8013a5c:	e7ae      	b.n	80139bc <_malloc_r+0x34>
 8013a5e:	463c      	mov	r4, r7
 8013a60:	687f      	ldr	r7, [r7, #4]
 8013a62:	e7b6      	b.n	80139d2 <_malloc_r+0x4a>
 8013a64:	461a      	mov	r2, r3
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	42a3      	cmp	r3, r4
 8013a6a:	d1fb      	bne.n	8013a64 <_malloc_r+0xdc>
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	6053      	str	r3, [r2, #4]
 8013a70:	e7de      	b.n	8013a30 <_malloc_r+0xa8>
 8013a72:	230c      	movs	r3, #12
 8013a74:	6033      	str	r3, [r6, #0]
 8013a76:	4630      	mov	r0, r6
 8013a78:	f000 f80c 	bl	8013a94 <__malloc_unlock>
 8013a7c:	e794      	b.n	80139a8 <_malloc_r+0x20>
 8013a7e:	6005      	str	r5, [r0, #0]
 8013a80:	e7d6      	b.n	8013a30 <_malloc_r+0xa8>
 8013a82:	bf00      	nop
 8013a84:	20010e34 	.word	0x20010e34

08013a88 <__malloc_lock>:
 8013a88:	4801      	ldr	r0, [pc, #4]	@ (8013a90 <__malloc_lock+0x8>)
 8013a8a:	f000 bb66 	b.w	801415a <__retarget_lock_acquire_recursive>
 8013a8e:	bf00      	nop
 8013a90:	20010f79 	.word	0x20010f79

08013a94 <__malloc_unlock>:
 8013a94:	4801      	ldr	r0, [pc, #4]	@ (8013a9c <__malloc_unlock+0x8>)
 8013a96:	f000 bb61 	b.w	801415c <__retarget_lock_release_recursive>
 8013a9a:	bf00      	nop
 8013a9c:	20010f79 	.word	0x20010f79

08013aa0 <srand>:
 8013aa0:	b538      	push	{r3, r4, r5, lr}
 8013aa2:	4b10      	ldr	r3, [pc, #64]	@ (8013ae4 <srand+0x44>)
 8013aa4:	681d      	ldr	r5, [r3, #0]
 8013aa6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013aa8:	4604      	mov	r4, r0
 8013aaa:	b9b3      	cbnz	r3, 8013ada <srand+0x3a>
 8013aac:	2018      	movs	r0, #24
 8013aae:	f7ff ff39 	bl	8013924 <malloc>
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	6328      	str	r0, [r5, #48]	@ 0x30
 8013ab6:	b920      	cbnz	r0, 8013ac2 <srand+0x22>
 8013ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8013ae8 <srand+0x48>)
 8013aba:	480c      	ldr	r0, [pc, #48]	@ (8013aec <srand+0x4c>)
 8013abc:	2146      	movs	r1, #70	@ 0x46
 8013abe:	f000 fb65 	bl	801418c <__assert_func>
 8013ac2:	490b      	ldr	r1, [pc, #44]	@ (8013af0 <srand+0x50>)
 8013ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8013af4 <srand+0x54>)
 8013ac6:	e9c0 1300 	strd	r1, r3, [r0]
 8013aca:	4b0b      	ldr	r3, [pc, #44]	@ (8013af8 <srand+0x58>)
 8013acc:	6083      	str	r3, [r0, #8]
 8013ace:	230b      	movs	r3, #11
 8013ad0:	8183      	strh	r3, [r0, #12]
 8013ad2:	2100      	movs	r1, #0
 8013ad4:	2001      	movs	r0, #1
 8013ad6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013ada:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013adc:	2200      	movs	r2, #0
 8013ade:	611c      	str	r4, [r3, #16]
 8013ae0:	615a      	str	r2, [r3, #20]
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	20000180 	.word	0x20000180
 8013ae8:	08015c64 	.word	0x08015c64
 8013aec:	08015c7b 	.word	0x08015c7b
 8013af0:	abcd330e 	.word	0xabcd330e
 8013af4:	e66d1234 	.word	0xe66d1234
 8013af8:	0005deec 	.word	0x0005deec

08013afc <rand>:
 8013afc:	4b16      	ldr	r3, [pc, #88]	@ (8013b58 <rand+0x5c>)
 8013afe:	b510      	push	{r4, lr}
 8013b00:	681c      	ldr	r4, [r3, #0]
 8013b02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b04:	b9b3      	cbnz	r3, 8013b34 <rand+0x38>
 8013b06:	2018      	movs	r0, #24
 8013b08:	f7ff ff0c 	bl	8013924 <malloc>
 8013b0c:	4602      	mov	r2, r0
 8013b0e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013b10:	b920      	cbnz	r0, 8013b1c <rand+0x20>
 8013b12:	4b12      	ldr	r3, [pc, #72]	@ (8013b5c <rand+0x60>)
 8013b14:	4812      	ldr	r0, [pc, #72]	@ (8013b60 <rand+0x64>)
 8013b16:	2152      	movs	r1, #82	@ 0x52
 8013b18:	f000 fb38 	bl	801418c <__assert_func>
 8013b1c:	4911      	ldr	r1, [pc, #68]	@ (8013b64 <rand+0x68>)
 8013b1e:	4b12      	ldr	r3, [pc, #72]	@ (8013b68 <rand+0x6c>)
 8013b20:	e9c0 1300 	strd	r1, r3, [r0]
 8013b24:	4b11      	ldr	r3, [pc, #68]	@ (8013b6c <rand+0x70>)
 8013b26:	6083      	str	r3, [r0, #8]
 8013b28:	230b      	movs	r3, #11
 8013b2a:	8183      	strh	r3, [r0, #12]
 8013b2c:	2100      	movs	r1, #0
 8013b2e:	2001      	movs	r0, #1
 8013b30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013b34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013b36:	480e      	ldr	r0, [pc, #56]	@ (8013b70 <rand+0x74>)
 8013b38:	690b      	ldr	r3, [r1, #16]
 8013b3a:	694c      	ldr	r4, [r1, #20]
 8013b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8013b74 <rand+0x78>)
 8013b3e:	4358      	muls	r0, r3
 8013b40:	fb02 0004 	mla	r0, r2, r4, r0
 8013b44:	fba3 3202 	umull	r3, r2, r3, r2
 8013b48:	3301      	adds	r3, #1
 8013b4a:	eb40 0002 	adc.w	r0, r0, r2
 8013b4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013b52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013b56:	bd10      	pop	{r4, pc}
 8013b58:	20000180 	.word	0x20000180
 8013b5c:	08015c64 	.word	0x08015c64
 8013b60:	08015c7b 	.word	0x08015c7b
 8013b64:	abcd330e 	.word	0xabcd330e
 8013b68:	e66d1234 	.word	0xe66d1234
 8013b6c:	0005deec 	.word	0x0005deec
 8013b70:	5851f42d 	.word	0x5851f42d
 8013b74:	4c957f2d 	.word	0x4c957f2d

08013b78 <realloc>:
 8013b78:	4b02      	ldr	r3, [pc, #8]	@ (8013b84 <realloc+0xc>)
 8013b7a:	460a      	mov	r2, r1
 8013b7c:	4601      	mov	r1, r0
 8013b7e:	6818      	ldr	r0, [r3, #0]
 8013b80:	f000 b802 	b.w	8013b88 <_realloc_r>
 8013b84:	20000180 	.word	0x20000180

08013b88 <_realloc_r>:
 8013b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b8c:	4680      	mov	r8, r0
 8013b8e:	4615      	mov	r5, r2
 8013b90:	460c      	mov	r4, r1
 8013b92:	b921      	cbnz	r1, 8013b9e <_realloc_r+0x16>
 8013b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b98:	4611      	mov	r1, r2
 8013b9a:	f7ff bef5 	b.w	8013988 <_malloc_r>
 8013b9e:	b92a      	cbnz	r2, 8013bac <_realloc_r+0x24>
 8013ba0:	f000 fb1e 	bl	80141e0 <_free_r>
 8013ba4:	2400      	movs	r4, #0
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bac:	f000 fb62 	bl	8014274 <_malloc_usable_size_r>
 8013bb0:	4285      	cmp	r5, r0
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	d802      	bhi.n	8013bbc <_realloc_r+0x34>
 8013bb6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013bba:	d8f4      	bhi.n	8013ba6 <_realloc_r+0x1e>
 8013bbc:	4629      	mov	r1, r5
 8013bbe:	4640      	mov	r0, r8
 8013bc0:	f7ff fee2 	bl	8013988 <_malloc_r>
 8013bc4:	4607      	mov	r7, r0
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d0ec      	beq.n	8013ba4 <_realloc_r+0x1c>
 8013bca:	42b5      	cmp	r5, r6
 8013bcc:	462a      	mov	r2, r5
 8013bce:	4621      	mov	r1, r4
 8013bd0:	bf28      	it	cs
 8013bd2:	4632      	movcs	r2, r6
 8013bd4:	f000 facb 	bl	801416e <memcpy>
 8013bd8:	4621      	mov	r1, r4
 8013bda:	4640      	mov	r0, r8
 8013bdc:	f000 fb00 	bl	80141e0 <_free_r>
 8013be0:	463c      	mov	r4, r7
 8013be2:	e7e0      	b.n	8013ba6 <_realloc_r+0x1e>

08013be4 <_strtoul_l.constprop.0>:
 8013be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013be8:	4e34      	ldr	r6, [pc, #208]	@ (8013cbc <_strtoul_l.constprop.0+0xd8>)
 8013bea:	4686      	mov	lr, r0
 8013bec:	460d      	mov	r5, r1
 8013bee:	4628      	mov	r0, r5
 8013bf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013bf4:	5d37      	ldrb	r7, [r6, r4]
 8013bf6:	f017 0708 	ands.w	r7, r7, #8
 8013bfa:	d1f8      	bne.n	8013bee <_strtoul_l.constprop.0+0xa>
 8013bfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8013bfe:	d12f      	bne.n	8013c60 <_strtoul_l.constprop.0+0x7c>
 8013c00:	782c      	ldrb	r4, [r5, #0]
 8013c02:	2701      	movs	r7, #1
 8013c04:	1c85      	adds	r5, r0, #2
 8013c06:	f033 0010 	bics.w	r0, r3, #16
 8013c0a:	d109      	bne.n	8013c20 <_strtoul_l.constprop.0+0x3c>
 8013c0c:	2c30      	cmp	r4, #48	@ 0x30
 8013c0e:	d12c      	bne.n	8013c6a <_strtoul_l.constprop.0+0x86>
 8013c10:	7828      	ldrb	r0, [r5, #0]
 8013c12:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013c16:	2858      	cmp	r0, #88	@ 0x58
 8013c18:	d127      	bne.n	8013c6a <_strtoul_l.constprop.0+0x86>
 8013c1a:	786c      	ldrb	r4, [r5, #1]
 8013c1c:	2310      	movs	r3, #16
 8013c1e:	3502      	adds	r5, #2
 8013c20:	f04f 38ff 	mov.w	r8, #4294967295
 8013c24:	2600      	movs	r6, #0
 8013c26:	fbb8 f8f3 	udiv	r8, r8, r3
 8013c2a:	fb03 f908 	mul.w	r9, r3, r8
 8013c2e:	ea6f 0909 	mvn.w	r9, r9
 8013c32:	4630      	mov	r0, r6
 8013c34:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013c38:	f1bc 0f09 	cmp.w	ip, #9
 8013c3c:	d81c      	bhi.n	8013c78 <_strtoul_l.constprop.0+0x94>
 8013c3e:	4664      	mov	r4, ip
 8013c40:	42a3      	cmp	r3, r4
 8013c42:	dd2a      	ble.n	8013c9a <_strtoul_l.constprop.0+0xb6>
 8013c44:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013c48:	d007      	beq.n	8013c5a <_strtoul_l.constprop.0+0x76>
 8013c4a:	4580      	cmp	r8, r0
 8013c4c:	d322      	bcc.n	8013c94 <_strtoul_l.constprop.0+0xb0>
 8013c4e:	d101      	bne.n	8013c54 <_strtoul_l.constprop.0+0x70>
 8013c50:	45a1      	cmp	r9, r4
 8013c52:	db1f      	blt.n	8013c94 <_strtoul_l.constprop.0+0xb0>
 8013c54:	fb00 4003 	mla	r0, r0, r3, r4
 8013c58:	2601      	movs	r6, #1
 8013c5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c5e:	e7e9      	b.n	8013c34 <_strtoul_l.constprop.0+0x50>
 8013c60:	2c2b      	cmp	r4, #43	@ 0x2b
 8013c62:	bf04      	itt	eq
 8013c64:	782c      	ldrbeq	r4, [r5, #0]
 8013c66:	1c85      	addeq	r5, r0, #2
 8013c68:	e7cd      	b.n	8013c06 <_strtoul_l.constprop.0+0x22>
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d1d8      	bne.n	8013c20 <_strtoul_l.constprop.0+0x3c>
 8013c6e:	2c30      	cmp	r4, #48	@ 0x30
 8013c70:	bf0c      	ite	eq
 8013c72:	2308      	moveq	r3, #8
 8013c74:	230a      	movne	r3, #10
 8013c76:	e7d3      	b.n	8013c20 <_strtoul_l.constprop.0+0x3c>
 8013c78:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013c7c:	f1bc 0f19 	cmp.w	ip, #25
 8013c80:	d801      	bhi.n	8013c86 <_strtoul_l.constprop.0+0xa2>
 8013c82:	3c37      	subs	r4, #55	@ 0x37
 8013c84:	e7dc      	b.n	8013c40 <_strtoul_l.constprop.0+0x5c>
 8013c86:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013c8a:	f1bc 0f19 	cmp.w	ip, #25
 8013c8e:	d804      	bhi.n	8013c9a <_strtoul_l.constprop.0+0xb6>
 8013c90:	3c57      	subs	r4, #87	@ 0x57
 8013c92:	e7d5      	b.n	8013c40 <_strtoul_l.constprop.0+0x5c>
 8013c94:	f04f 36ff 	mov.w	r6, #4294967295
 8013c98:	e7df      	b.n	8013c5a <_strtoul_l.constprop.0+0x76>
 8013c9a:	1c73      	adds	r3, r6, #1
 8013c9c:	d106      	bne.n	8013cac <_strtoul_l.constprop.0+0xc8>
 8013c9e:	2322      	movs	r3, #34	@ 0x22
 8013ca0:	f8ce 3000 	str.w	r3, [lr]
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	b932      	cbnz	r2, 8013cb6 <_strtoul_l.constprop.0+0xd2>
 8013ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013cac:	b107      	cbz	r7, 8013cb0 <_strtoul_l.constprop.0+0xcc>
 8013cae:	4240      	negs	r0, r0
 8013cb0:	2a00      	cmp	r2, #0
 8013cb2:	d0f9      	beq.n	8013ca8 <_strtoul_l.constprop.0+0xc4>
 8013cb4:	b106      	cbz	r6, 8013cb8 <_strtoul_l.constprop.0+0xd4>
 8013cb6:	1e69      	subs	r1, r5, #1
 8013cb8:	6011      	str	r1, [r2, #0]
 8013cba:	e7f5      	b.n	8013ca8 <_strtoul_l.constprop.0+0xc4>
 8013cbc:	08015cd4 	.word	0x08015cd4

08013cc0 <strtoul>:
 8013cc0:	4613      	mov	r3, r2
 8013cc2:	460a      	mov	r2, r1
 8013cc4:	4601      	mov	r1, r0
 8013cc6:	4802      	ldr	r0, [pc, #8]	@ (8013cd0 <strtoul+0x10>)
 8013cc8:	6800      	ldr	r0, [r0, #0]
 8013cca:	f7ff bf8b 	b.w	8013be4 <_strtoul_l.constprop.0>
 8013cce:	bf00      	nop
 8013cd0:	20000180 	.word	0x20000180

08013cd4 <std>:
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	b510      	push	{r4, lr}
 8013cd8:	4604      	mov	r4, r0
 8013cda:	e9c0 3300 	strd	r3, r3, [r0]
 8013cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ce2:	6083      	str	r3, [r0, #8]
 8013ce4:	8181      	strh	r1, [r0, #12]
 8013ce6:	6643      	str	r3, [r0, #100]	@ 0x64
 8013ce8:	81c2      	strh	r2, [r0, #14]
 8013cea:	6183      	str	r3, [r0, #24]
 8013cec:	4619      	mov	r1, r3
 8013cee:	2208      	movs	r2, #8
 8013cf0:	305c      	adds	r0, #92	@ 0x5c
 8013cf2:	f000 f973 	bl	8013fdc <memset>
 8013cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8013d2c <std+0x58>)
 8013cf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8013d30 <std+0x5c>)
 8013cfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8013d34 <std+0x60>)
 8013d00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013d02:	4b0d      	ldr	r3, [pc, #52]	@ (8013d38 <std+0x64>)
 8013d04:	6323      	str	r3, [r4, #48]	@ 0x30
 8013d06:	4b0d      	ldr	r3, [pc, #52]	@ (8013d3c <std+0x68>)
 8013d08:	6224      	str	r4, [r4, #32]
 8013d0a:	429c      	cmp	r4, r3
 8013d0c:	d006      	beq.n	8013d1c <std+0x48>
 8013d0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013d12:	4294      	cmp	r4, r2
 8013d14:	d002      	beq.n	8013d1c <std+0x48>
 8013d16:	33d0      	adds	r3, #208	@ 0xd0
 8013d18:	429c      	cmp	r4, r3
 8013d1a:	d105      	bne.n	8013d28 <std+0x54>
 8013d1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d24:	f000 ba18 	b.w	8014158 <__retarget_lock_init_recursive>
 8013d28:	bd10      	pop	{r4, pc}
 8013d2a:	bf00      	nop
 8013d2c:	08013ee5 	.word	0x08013ee5
 8013d30:	08013f07 	.word	0x08013f07
 8013d34:	08013f3f 	.word	0x08013f3f
 8013d38:	08013f63 	.word	0x08013f63
 8013d3c:	20010e38 	.word	0x20010e38

08013d40 <stdio_exit_handler>:
 8013d40:	4a02      	ldr	r2, [pc, #8]	@ (8013d4c <stdio_exit_handler+0xc>)
 8013d42:	4903      	ldr	r1, [pc, #12]	@ (8013d50 <stdio_exit_handler+0x10>)
 8013d44:	4803      	ldr	r0, [pc, #12]	@ (8013d54 <stdio_exit_handler+0x14>)
 8013d46:	f000 b869 	b.w	8013e1c <_fwalk_sglue>
 8013d4a:	bf00      	nop
 8013d4c:	20000174 	.word	0x20000174
 8013d50:	08014bdd 	.word	0x08014bdd
 8013d54:	20000184 	.word	0x20000184

08013d58 <cleanup_stdio>:
 8013d58:	6841      	ldr	r1, [r0, #4]
 8013d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8013d8c <cleanup_stdio+0x34>)
 8013d5c:	4299      	cmp	r1, r3
 8013d5e:	b510      	push	{r4, lr}
 8013d60:	4604      	mov	r4, r0
 8013d62:	d001      	beq.n	8013d68 <cleanup_stdio+0x10>
 8013d64:	f000 ff3a 	bl	8014bdc <_fflush_r>
 8013d68:	68a1      	ldr	r1, [r4, #8]
 8013d6a:	4b09      	ldr	r3, [pc, #36]	@ (8013d90 <cleanup_stdio+0x38>)
 8013d6c:	4299      	cmp	r1, r3
 8013d6e:	d002      	beq.n	8013d76 <cleanup_stdio+0x1e>
 8013d70:	4620      	mov	r0, r4
 8013d72:	f000 ff33 	bl	8014bdc <_fflush_r>
 8013d76:	68e1      	ldr	r1, [r4, #12]
 8013d78:	4b06      	ldr	r3, [pc, #24]	@ (8013d94 <cleanup_stdio+0x3c>)
 8013d7a:	4299      	cmp	r1, r3
 8013d7c:	d004      	beq.n	8013d88 <cleanup_stdio+0x30>
 8013d7e:	4620      	mov	r0, r4
 8013d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d84:	f000 bf2a 	b.w	8014bdc <_fflush_r>
 8013d88:	bd10      	pop	{r4, pc}
 8013d8a:	bf00      	nop
 8013d8c:	20010e38 	.word	0x20010e38
 8013d90:	20010ea0 	.word	0x20010ea0
 8013d94:	20010f08 	.word	0x20010f08

08013d98 <global_stdio_init.part.0>:
 8013d98:	b510      	push	{r4, lr}
 8013d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8013dc8 <global_stdio_init.part.0+0x30>)
 8013d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8013dcc <global_stdio_init.part.0+0x34>)
 8013d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8013dd0 <global_stdio_init.part.0+0x38>)
 8013da0:	601a      	str	r2, [r3, #0]
 8013da2:	4620      	mov	r0, r4
 8013da4:	2200      	movs	r2, #0
 8013da6:	2104      	movs	r1, #4
 8013da8:	f7ff ff94 	bl	8013cd4 <std>
 8013dac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013db0:	2201      	movs	r2, #1
 8013db2:	2109      	movs	r1, #9
 8013db4:	f7ff ff8e 	bl	8013cd4 <std>
 8013db8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013dbc:	2202      	movs	r2, #2
 8013dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dc2:	2112      	movs	r1, #18
 8013dc4:	f7ff bf86 	b.w	8013cd4 <std>
 8013dc8:	20010f70 	.word	0x20010f70
 8013dcc:	20010e38 	.word	0x20010e38
 8013dd0:	08013d41 	.word	0x08013d41

08013dd4 <__sfp_lock_acquire>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	@ (8013ddc <__sfp_lock_acquire+0x8>)
 8013dd6:	f000 b9c0 	b.w	801415a <__retarget_lock_acquire_recursive>
 8013dda:	bf00      	nop
 8013ddc:	20010f7a 	.word	0x20010f7a

08013de0 <__sfp_lock_release>:
 8013de0:	4801      	ldr	r0, [pc, #4]	@ (8013de8 <__sfp_lock_release+0x8>)
 8013de2:	f000 b9bb 	b.w	801415c <__retarget_lock_release_recursive>
 8013de6:	bf00      	nop
 8013de8:	20010f7a 	.word	0x20010f7a

08013dec <__sinit>:
 8013dec:	b510      	push	{r4, lr}
 8013dee:	4604      	mov	r4, r0
 8013df0:	f7ff fff0 	bl	8013dd4 <__sfp_lock_acquire>
 8013df4:	6a23      	ldr	r3, [r4, #32]
 8013df6:	b11b      	cbz	r3, 8013e00 <__sinit+0x14>
 8013df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dfc:	f7ff bff0 	b.w	8013de0 <__sfp_lock_release>
 8013e00:	4b04      	ldr	r3, [pc, #16]	@ (8013e14 <__sinit+0x28>)
 8013e02:	6223      	str	r3, [r4, #32]
 8013e04:	4b04      	ldr	r3, [pc, #16]	@ (8013e18 <__sinit+0x2c>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d1f5      	bne.n	8013df8 <__sinit+0xc>
 8013e0c:	f7ff ffc4 	bl	8013d98 <global_stdio_init.part.0>
 8013e10:	e7f2      	b.n	8013df8 <__sinit+0xc>
 8013e12:	bf00      	nop
 8013e14:	08013d59 	.word	0x08013d59
 8013e18:	20010f70 	.word	0x20010f70

08013e1c <_fwalk_sglue>:
 8013e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e20:	4607      	mov	r7, r0
 8013e22:	4688      	mov	r8, r1
 8013e24:	4614      	mov	r4, r2
 8013e26:	2600      	movs	r6, #0
 8013e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8013e30:	d505      	bpl.n	8013e3e <_fwalk_sglue+0x22>
 8013e32:	6824      	ldr	r4, [r4, #0]
 8013e34:	2c00      	cmp	r4, #0
 8013e36:	d1f7      	bne.n	8013e28 <_fwalk_sglue+0xc>
 8013e38:	4630      	mov	r0, r6
 8013e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e3e:	89ab      	ldrh	r3, [r5, #12]
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	d907      	bls.n	8013e54 <_fwalk_sglue+0x38>
 8013e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	d003      	beq.n	8013e54 <_fwalk_sglue+0x38>
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	4638      	mov	r0, r7
 8013e50:	47c0      	blx	r8
 8013e52:	4306      	orrs	r6, r0
 8013e54:	3568      	adds	r5, #104	@ 0x68
 8013e56:	e7e9      	b.n	8013e2c <_fwalk_sglue+0x10>

08013e58 <iprintf>:
 8013e58:	b40f      	push	{r0, r1, r2, r3}
 8013e5a:	b507      	push	{r0, r1, r2, lr}
 8013e5c:	4906      	ldr	r1, [pc, #24]	@ (8013e78 <iprintf+0x20>)
 8013e5e:	ab04      	add	r3, sp, #16
 8013e60:	6808      	ldr	r0, [r1, #0]
 8013e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e66:	6881      	ldr	r1, [r0, #8]
 8013e68:	9301      	str	r3, [sp, #4]
 8013e6a:	f000 fb8d 	bl	8014588 <_vfiprintf_r>
 8013e6e:	b003      	add	sp, #12
 8013e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e74:	b004      	add	sp, #16
 8013e76:	4770      	bx	lr
 8013e78:	20000180 	.word	0x20000180

08013e7c <sniprintf>:
 8013e7c:	b40c      	push	{r2, r3}
 8013e7e:	b530      	push	{r4, r5, lr}
 8013e80:	4b17      	ldr	r3, [pc, #92]	@ (8013ee0 <sniprintf+0x64>)
 8013e82:	1e0c      	subs	r4, r1, #0
 8013e84:	681d      	ldr	r5, [r3, #0]
 8013e86:	b09d      	sub	sp, #116	@ 0x74
 8013e88:	da08      	bge.n	8013e9c <sniprintf+0x20>
 8013e8a:	238b      	movs	r3, #139	@ 0x8b
 8013e8c:	602b      	str	r3, [r5, #0]
 8013e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e92:	b01d      	add	sp, #116	@ 0x74
 8013e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e98:	b002      	add	sp, #8
 8013e9a:	4770      	bx	lr
 8013e9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013ea0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ea4:	bf14      	ite	ne
 8013ea6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013eaa:	4623      	moveq	r3, r4
 8013eac:	9304      	str	r3, [sp, #16]
 8013eae:	9307      	str	r3, [sp, #28]
 8013eb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013eb4:	9002      	str	r0, [sp, #8]
 8013eb6:	9006      	str	r0, [sp, #24]
 8013eb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ebc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013ebe:	ab21      	add	r3, sp, #132	@ 0x84
 8013ec0:	a902      	add	r1, sp, #8
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	9301      	str	r3, [sp, #4]
 8013ec6:	f000 fa39 	bl	801433c <_svfiprintf_r>
 8013eca:	1c43      	adds	r3, r0, #1
 8013ecc:	bfbc      	itt	lt
 8013ece:	238b      	movlt	r3, #139	@ 0x8b
 8013ed0:	602b      	strlt	r3, [r5, #0]
 8013ed2:	2c00      	cmp	r4, #0
 8013ed4:	d0dd      	beq.n	8013e92 <sniprintf+0x16>
 8013ed6:	9b02      	ldr	r3, [sp, #8]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	701a      	strb	r2, [r3, #0]
 8013edc:	e7d9      	b.n	8013e92 <sniprintf+0x16>
 8013ede:	bf00      	nop
 8013ee0:	20000180 	.word	0x20000180

08013ee4 <__sread>:
 8013ee4:	b510      	push	{r4, lr}
 8013ee6:	460c      	mov	r4, r1
 8013ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013eec:	f000 f8d6 	bl	801409c <_read_r>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	bfab      	itete	ge
 8013ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ef8:	181b      	addge	r3, r3, r0
 8013efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013efe:	bfac      	ite	ge
 8013f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013f02:	81a3      	strhlt	r3, [r4, #12]
 8013f04:	bd10      	pop	{r4, pc}

08013f06 <__swrite>:
 8013f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f0a:	461f      	mov	r7, r3
 8013f0c:	898b      	ldrh	r3, [r1, #12]
 8013f0e:	05db      	lsls	r3, r3, #23
 8013f10:	4605      	mov	r5, r0
 8013f12:	460c      	mov	r4, r1
 8013f14:	4616      	mov	r6, r2
 8013f16:	d505      	bpl.n	8013f24 <__swrite+0x1e>
 8013f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	2200      	movs	r2, #0
 8013f20:	f000 f8aa 	bl	8014078 <_lseek_r>
 8013f24:	89a3      	ldrh	r3, [r4, #12]
 8013f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013f2e:	81a3      	strh	r3, [r4, #12]
 8013f30:	4632      	mov	r2, r6
 8013f32:	463b      	mov	r3, r7
 8013f34:	4628      	mov	r0, r5
 8013f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f3a:	f000 b8d1 	b.w	80140e0 <_write_r>

08013f3e <__sseek>:
 8013f3e:	b510      	push	{r4, lr}
 8013f40:	460c      	mov	r4, r1
 8013f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f46:	f000 f897 	bl	8014078 <_lseek_r>
 8013f4a:	1c43      	adds	r3, r0, #1
 8013f4c:	89a3      	ldrh	r3, [r4, #12]
 8013f4e:	bf15      	itete	ne
 8013f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013f5a:	81a3      	strheq	r3, [r4, #12]
 8013f5c:	bf18      	it	ne
 8013f5e:	81a3      	strhne	r3, [r4, #12]
 8013f60:	bd10      	pop	{r4, pc}

08013f62 <__sclose>:
 8013f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f66:	f000 b877 	b.w	8014058 <_close_r>

08013f6a <_vsniprintf_r>:
 8013f6a:	b530      	push	{r4, r5, lr}
 8013f6c:	4614      	mov	r4, r2
 8013f6e:	2c00      	cmp	r4, #0
 8013f70:	b09b      	sub	sp, #108	@ 0x6c
 8013f72:	4605      	mov	r5, r0
 8013f74:	461a      	mov	r2, r3
 8013f76:	da05      	bge.n	8013f84 <_vsniprintf_r+0x1a>
 8013f78:	238b      	movs	r3, #139	@ 0x8b
 8013f7a:	6003      	str	r3, [r0, #0]
 8013f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f80:	b01b      	add	sp, #108	@ 0x6c
 8013f82:	bd30      	pop	{r4, r5, pc}
 8013f84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013f88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013f8c:	bf14      	ite	ne
 8013f8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013f92:	4623      	moveq	r3, r4
 8013f94:	9302      	str	r3, [sp, #8]
 8013f96:	9305      	str	r3, [sp, #20]
 8013f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f9c:	9100      	str	r1, [sp, #0]
 8013f9e:	9104      	str	r1, [sp, #16]
 8013fa0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013fa4:	4669      	mov	r1, sp
 8013fa6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8013fa8:	f000 f9c8 	bl	801433c <_svfiprintf_r>
 8013fac:	1c43      	adds	r3, r0, #1
 8013fae:	bfbc      	itt	lt
 8013fb0:	238b      	movlt	r3, #139	@ 0x8b
 8013fb2:	602b      	strlt	r3, [r5, #0]
 8013fb4:	2c00      	cmp	r4, #0
 8013fb6:	d0e3      	beq.n	8013f80 <_vsniprintf_r+0x16>
 8013fb8:	9b00      	ldr	r3, [sp, #0]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	701a      	strb	r2, [r3, #0]
 8013fbe:	e7df      	b.n	8013f80 <_vsniprintf_r+0x16>

08013fc0 <vsniprintf>:
 8013fc0:	b507      	push	{r0, r1, r2, lr}
 8013fc2:	9300      	str	r3, [sp, #0]
 8013fc4:	4613      	mov	r3, r2
 8013fc6:	460a      	mov	r2, r1
 8013fc8:	4601      	mov	r1, r0
 8013fca:	4803      	ldr	r0, [pc, #12]	@ (8013fd8 <vsniprintf+0x18>)
 8013fcc:	6800      	ldr	r0, [r0, #0]
 8013fce:	f7ff ffcc 	bl	8013f6a <_vsniprintf_r>
 8013fd2:	b003      	add	sp, #12
 8013fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8013fd8:	20000180 	.word	0x20000180

08013fdc <memset>:
 8013fdc:	4402      	add	r2, r0
 8013fde:	4603      	mov	r3, r0
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	d100      	bne.n	8013fe6 <memset+0xa>
 8013fe4:	4770      	bx	lr
 8013fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8013fea:	e7f9      	b.n	8013fe0 <memset+0x4>

08013fec <strchr>:
 8013fec:	b2c9      	uxtb	r1, r1
 8013fee:	4603      	mov	r3, r0
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ff6:	b112      	cbz	r2, 8013ffe <strchr+0x12>
 8013ff8:	428a      	cmp	r2, r1
 8013ffa:	d1f9      	bne.n	8013ff0 <strchr+0x4>
 8013ffc:	4770      	bx	lr
 8013ffe:	2900      	cmp	r1, #0
 8014000:	bf18      	it	ne
 8014002:	2000      	movne	r0, #0
 8014004:	4770      	bx	lr

08014006 <strncmp>:
 8014006:	b510      	push	{r4, lr}
 8014008:	b16a      	cbz	r2, 8014026 <strncmp+0x20>
 801400a:	3901      	subs	r1, #1
 801400c:	1884      	adds	r4, r0, r2
 801400e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014012:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014016:	429a      	cmp	r2, r3
 8014018:	d103      	bne.n	8014022 <strncmp+0x1c>
 801401a:	42a0      	cmp	r0, r4
 801401c:	d001      	beq.n	8014022 <strncmp+0x1c>
 801401e:	2a00      	cmp	r2, #0
 8014020:	d1f5      	bne.n	801400e <strncmp+0x8>
 8014022:	1ad0      	subs	r0, r2, r3
 8014024:	bd10      	pop	{r4, pc}
 8014026:	4610      	mov	r0, r2
 8014028:	e7fc      	b.n	8014024 <strncmp+0x1e>

0801402a <strstr>:
 801402a:	780a      	ldrb	r2, [r1, #0]
 801402c:	b570      	push	{r4, r5, r6, lr}
 801402e:	b96a      	cbnz	r2, 801404c <strstr+0x22>
 8014030:	bd70      	pop	{r4, r5, r6, pc}
 8014032:	429a      	cmp	r2, r3
 8014034:	d109      	bne.n	801404a <strstr+0x20>
 8014036:	460c      	mov	r4, r1
 8014038:	4605      	mov	r5, r0
 801403a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801403e:	2b00      	cmp	r3, #0
 8014040:	d0f6      	beq.n	8014030 <strstr+0x6>
 8014042:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014046:	429e      	cmp	r6, r3
 8014048:	d0f7      	beq.n	801403a <strstr+0x10>
 801404a:	3001      	adds	r0, #1
 801404c:	7803      	ldrb	r3, [r0, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d1ef      	bne.n	8014032 <strstr+0x8>
 8014052:	4618      	mov	r0, r3
 8014054:	e7ec      	b.n	8014030 <strstr+0x6>
	...

08014058 <_close_r>:
 8014058:	b538      	push	{r3, r4, r5, lr}
 801405a:	4d06      	ldr	r5, [pc, #24]	@ (8014074 <_close_r+0x1c>)
 801405c:	2300      	movs	r3, #0
 801405e:	4604      	mov	r4, r0
 8014060:	4608      	mov	r0, r1
 8014062:	602b      	str	r3, [r5, #0]
 8014064:	f7ef fa6c 	bl	8003540 <_close>
 8014068:	1c43      	adds	r3, r0, #1
 801406a:	d102      	bne.n	8014072 <_close_r+0x1a>
 801406c:	682b      	ldr	r3, [r5, #0]
 801406e:	b103      	cbz	r3, 8014072 <_close_r+0x1a>
 8014070:	6023      	str	r3, [r4, #0]
 8014072:	bd38      	pop	{r3, r4, r5, pc}
 8014074:	20010f74 	.word	0x20010f74

08014078 <_lseek_r>:
 8014078:	b538      	push	{r3, r4, r5, lr}
 801407a:	4d07      	ldr	r5, [pc, #28]	@ (8014098 <_lseek_r+0x20>)
 801407c:	4604      	mov	r4, r0
 801407e:	4608      	mov	r0, r1
 8014080:	4611      	mov	r1, r2
 8014082:	2200      	movs	r2, #0
 8014084:	602a      	str	r2, [r5, #0]
 8014086:	461a      	mov	r2, r3
 8014088:	f7ef fa81 	bl	800358e <_lseek>
 801408c:	1c43      	adds	r3, r0, #1
 801408e:	d102      	bne.n	8014096 <_lseek_r+0x1e>
 8014090:	682b      	ldr	r3, [r5, #0]
 8014092:	b103      	cbz	r3, 8014096 <_lseek_r+0x1e>
 8014094:	6023      	str	r3, [r4, #0]
 8014096:	bd38      	pop	{r3, r4, r5, pc}
 8014098:	20010f74 	.word	0x20010f74

0801409c <_read_r>:
 801409c:	b538      	push	{r3, r4, r5, lr}
 801409e:	4d07      	ldr	r5, [pc, #28]	@ (80140bc <_read_r+0x20>)
 80140a0:	4604      	mov	r4, r0
 80140a2:	4608      	mov	r0, r1
 80140a4:	4611      	mov	r1, r2
 80140a6:	2200      	movs	r2, #0
 80140a8:	602a      	str	r2, [r5, #0]
 80140aa:	461a      	mov	r2, r3
 80140ac:	f7ef fa0f 	bl	80034ce <_read>
 80140b0:	1c43      	adds	r3, r0, #1
 80140b2:	d102      	bne.n	80140ba <_read_r+0x1e>
 80140b4:	682b      	ldr	r3, [r5, #0]
 80140b6:	b103      	cbz	r3, 80140ba <_read_r+0x1e>
 80140b8:	6023      	str	r3, [r4, #0]
 80140ba:	bd38      	pop	{r3, r4, r5, pc}
 80140bc:	20010f74 	.word	0x20010f74

080140c0 <_sbrk_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4d06      	ldr	r5, [pc, #24]	@ (80140dc <_sbrk_r+0x1c>)
 80140c4:	2300      	movs	r3, #0
 80140c6:	4604      	mov	r4, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	602b      	str	r3, [r5, #0]
 80140cc:	f7ef fa6c 	bl	80035a8 <_sbrk>
 80140d0:	1c43      	adds	r3, r0, #1
 80140d2:	d102      	bne.n	80140da <_sbrk_r+0x1a>
 80140d4:	682b      	ldr	r3, [r5, #0]
 80140d6:	b103      	cbz	r3, 80140da <_sbrk_r+0x1a>
 80140d8:	6023      	str	r3, [r4, #0]
 80140da:	bd38      	pop	{r3, r4, r5, pc}
 80140dc:	20010f74 	.word	0x20010f74

080140e0 <_write_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4d07      	ldr	r5, [pc, #28]	@ (8014100 <_write_r+0x20>)
 80140e4:	4604      	mov	r4, r0
 80140e6:	4608      	mov	r0, r1
 80140e8:	4611      	mov	r1, r2
 80140ea:	2200      	movs	r2, #0
 80140ec:	602a      	str	r2, [r5, #0]
 80140ee:	461a      	mov	r2, r3
 80140f0:	f7ef fa0a 	bl	8003508 <_write>
 80140f4:	1c43      	adds	r3, r0, #1
 80140f6:	d102      	bne.n	80140fe <_write_r+0x1e>
 80140f8:	682b      	ldr	r3, [r5, #0]
 80140fa:	b103      	cbz	r3, 80140fe <_write_r+0x1e>
 80140fc:	6023      	str	r3, [r4, #0]
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	20010f74 	.word	0x20010f74

08014104 <__errno>:
 8014104:	4b01      	ldr	r3, [pc, #4]	@ (801410c <__errno+0x8>)
 8014106:	6818      	ldr	r0, [r3, #0]
 8014108:	4770      	bx	lr
 801410a:	bf00      	nop
 801410c:	20000180 	.word	0x20000180

08014110 <__libc_init_array>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	4d0d      	ldr	r5, [pc, #52]	@ (8014148 <__libc_init_array+0x38>)
 8014114:	4c0d      	ldr	r4, [pc, #52]	@ (801414c <__libc_init_array+0x3c>)
 8014116:	1b64      	subs	r4, r4, r5
 8014118:	10a4      	asrs	r4, r4, #2
 801411a:	2600      	movs	r6, #0
 801411c:	42a6      	cmp	r6, r4
 801411e:	d109      	bne.n	8014134 <__libc_init_array+0x24>
 8014120:	4d0b      	ldr	r5, [pc, #44]	@ (8014150 <__libc_init_array+0x40>)
 8014122:	4c0c      	ldr	r4, [pc, #48]	@ (8014154 <__libc_init_array+0x44>)
 8014124:	f000 ff12 	bl	8014f4c <_init>
 8014128:	1b64      	subs	r4, r4, r5
 801412a:	10a4      	asrs	r4, r4, #2
 801412c:	2600      	movs	r6, #0
 801412e:	42a6      	cmp	r6, r4
 8014130:	d105      	bne.n	801413e <__libc_init_array+0x2e>
 8014132:	bd70      	pop	{r4, r5, r6, pc}
 8014134:	f855 3b04 	ldr.w	r3, [r5], #4
 8014138:	4798      	blx	r3
 801413a:	3601      	adds	r6, #1
 801413c:	e7ee      	b.n	801411c <__libc_init_array+0xc>
 801413e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014142:	4798      	blx	r3
 8014144:	3601      	adds	r6, #1
 8014146:	e7f2      	b.n	801412e <__libc_init_array+0x1e>
 8014148:	08015e4c 	.word	0x08015e4c
 801414c:	08015e4c 	.word	0x08015e4c
 8014150:	08015e4c 	.word	0x08015e4c
 8014154:	08015e58 	.word	0x08015e58

08014158 <__retarget_lock_init_recursive>:
 8014158:	4770      	bx	lr

0801415a <__retarget_lock_acquire_recursive>:
 801415a:	4770      	bx	lr

0801415c <__retarget_lock_release_recursive>:
 801415c:	4770      	bx	lr

0801415e <strcpy>:
 801415e:	4603      	mov	r3, r0
 8014160:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014164:	f803 2b01 	strb.w	r2, [r3], #1
 8014168:	2a00      	cmp	r2, #0
 801416a:	d1f9      	bne.n	8014160 <strcpy+0x2>
 801416c:	4770      	bx	lr

0801416e <memcpy>:
 801416e:	440a      	add	r2, r1
 8014170:	4291      	cmp	r1, r2
 8014172:	f100 33ff 	add.w	r3, r0, #4294967295
 8014176:	d100      	bne.n	801417a <memcpy+0xc>
 8014178:	4770      	bx	lr
 801417a:	b510      	push	{r4, lr}
 801417c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014184:	4291      	cmp	r1, r2
 8014186:	d1f9      	bne.n	801417c <memcpy+0xe>
 8014188:	bd10      	pop	{r4, pc}
	...

0801418c <__assert_func>:
 801418c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801418e:	4614      	mov	r4, r2
 8014190:	461a      	mov	r2, r3
 8014192:	4b09      	ldr	r3, [pc, #36]	@ (80141b8 <__assert_func+0x2c>)
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	4605      	mov	r5, r0
 8014198:	68d8      	ldr	r0, [r3, #12]
 801419a:	b954      	cbnz	r4, 80141b2 <__assert_func+0x26>
 801419c:	4b07      	ldr	r3, [pc, #28]	@ (80141bc <__assert_func+0x30>)
 801419e:	461c      	mov	r4, r3
 80141a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141a4:	9100      	str	r1, [sp, #0]
 80141a6:	462b      	mov	r3, r5
 80141a8:	4905      	ldr	r1, [pc, #20]	@ (80141c0 <__assert_func+0x34>)
 80141aa:	f000 fd3f 	bl	8014c2c <fiprintf>
 80141ae:	f000 fdfd 	bl	8014dac <abort>
 80141b2:	4b04      	ldr	r3, [pc, #16]	@ (80141c4 <__assert_func+0x38>)
 80141b4:	e7f4      	b.n	80141a0 <__assert_func+0x14>
 80141b6:	bf00      	nop
 80141b8:	20000180 	.word	0x20000180
 80141bc:	08015e0f 	.word	0x08015e0f
 80141c0:	08015de1 	.word	0x08015de1
 80141c4:	08015dd4 	.word	0x08015dd4

080141c8 <__env_lock>:
 80141c8:	4801      	ldr	r0, [pc, #4]	@ (80141d0 <__env_lock+0x8>)
 80141ca:	f7ff bfc6 	b.w	801415a <__retarget_lock_acquire_recursive>
 80141ce:	bf00      	nop
 80141d0:	20010f78 	.word	0x20010f78

080141d4 <__env_unlock>:
 80141d4:	4801      	ldr	r0, [pc, #4]	@ (80141dc <__env_unlock+0x8>)
 80141d6:	f7ff bfc1 	b.w	801415c <__retarget_lock_release_recursive>
 80141da:	bf00      	nop
 80141dc:	20010f78 	.word	0x20010f78

080141e0 <_free_r>:
 80141e0:	b538      	push	{r3, r4, r5, lr}
 80141e2:	4605      	mov	r5, r0
 80141e4:	2900      	cmp	r1, #0
 80141e6:	d041      	beq.n	801426c <_free_r+0x8c>
 80141e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141ec:	1f0c      	subs	r4, r1, #4
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	bfb8      	it	lt
 80141f2:	18e4      	addlt	r4, r4, r3
 80141f4:	f7ff fc48 	bl	8013a88 <__malloc_lock>
 80141f8:	4a1d      	ldr	r2, [pc, #116]	@ (8014270 <_free_r+0x90>)
 80141fa:	6813      	ldr	r3, [r2, #0]
 80141fc:	b933      	cbnz	r3, 801420c <_free_r+0x2c>
 80141fe:	6063      	str	r3, [r4, #4]
 8014200:	6014      	str	r4, [r2, #0]
 8014202:	4628      	mov	r0, r5
 8014204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014208:	f7ff bc44 	b.w	8013a94 <__malloc_unlock>
 801420c:	42a3      	cmp	r3, r4
 801420e:	d908      	bls.n	8014222 <_free_r+0x42>
 8014210:	6820      	ldr	r0, [r4, #0]
 8014212:	1821      	adds	r1, r4, r0
 8014214:	428b      	cmp	r3, r1
 8014216:	bf01      	itttt	eq
 8014218:	6819      	ldreq	r1, [r3, #0]
 801421a:	685b      	ldreq	r3, [r3, #4]
 801421c:	1809      	addeq	r1, r1, r0
 801421e:	6021      	streq	r1, [r4, #0]
 8014220:	e7ed      	b.n	80141fe <_free_r+0x1e>
 8014222:	461a      	mov	r2, r3
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	b10b      	cbz	r3, 801422c <_free_r+0x4c>
 8014228:	42a3      	cmp	r3, r4
 801422a:	d9fa      	bls.n	8014222 <_free_r+0x42>
 801422c:	6811      	ldr	r1, [r2, #0]
 801422e:	1850      	adds	r0, r2, r1
 8014230:	42a0      	cmp	r0, r4
 8014232:	d10b      	bne.n	801424c <_free_r+0x6c>
 8014234:	6820      	ldr	r0, [r4, #0]
 8014236:	4401      	add	r1, r0
 8014238:	1850      	adds	r0, r2, r1
 801423a:	4283      	cmp	r3, r0
 801423c:	6011      	str	r1, [r2, #0]
 801423e:	d1e0      	bne.n	8014202 <_free_r+0x22>
 8014240:	6818      	ldr	r0, [r3, #0]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	6053      	str	r3, [r2, #4]
 8014246:	4408      	add	r0, r1
 8014248:	6010      	str	r0, [r2, #0]
 801424a:	e7da      	b.n	8014202 <_free_r+0x22>
 801424c:	d902      	bls.n	8014254 <_free_r+0x74>
 801424e:	230c      	movs	r3, #12
 8014250:	602b      	str	r3, [r5, #0]
 8014252:	e7d6      	b.n	8014202 <_free_r+0x22>
 8014254:	6820      	ldr	r0, [r4, #0]
 8014256:	1821      	adds	r1, r4, r0
 8014258:	428b      	cmp	r3, r1
 801425a:	bf04      	itt	eq
 801425c:	6819      	ldreq	r1, [r3, #0]
 801425e:	685b      	ldreq	r3, [r3, #4]
 8014260:	6063      	str	r3, [r4, #4]
 8014262:	bf04      	itt	eq
 8014264:	1809      	addeq	r1, r1, r0
 8014266:	6021      	streq	r1, [r4, #0]
 8014268:	6054      	str	r4, [r2, #4]
 801426a:	e7ca      	b.n	8014202 <_free_r+0x22>
 801426c:	bd38      	pop	{r3, r4, r5, pc}
 801426e:	bf00      	nop
 8014270:	20010e34 	.word	0x20010e34

08014274 <_malloc_usable_size_r>:
 8014274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014278:	1f18      	subs	r0, r3, #4
 801427a:	2b00      	cmp	r3, #0
 801427c:	bfbc      	itt	lt
 801427e:	580b      	ldrlt	r3, [r1, r0]
 8014280:	18c0      	addlt	r0, r0, r3
 8014282:	4770      	bx	lr

08014284 <__ssputs_r>:
 8014284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014288:	688e      	ldr	r6, [r1, #8]
 801428a:	461f      	mov	r7, r3
 801428c:	42be      	cmp	r6, r7
 801428e:	680b      	ldr	r3, [r1, #0]
 8014290:	4682      	mov	sl, r0
 8014292:	460c      	mov	r4, r1
 8014294:	4690      	mov	r8, r2
 8014296:	d82d      	bhi.n	80142f4 <__ssputs_r+0x70>
 8014298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801429c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80142a0:	d026      	beq.n	80142f0 <__ssputs_r+0x6c>
 80142a2:	6965      	ldr	r5, [r4, #20]
 80142a4:	6909      	ldr	r1, [r1, #16]
 80142a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142aa:	eba3 0901 	sub.w	r9, r3, r1
 80142ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80142b2:	1c7b      	adds	r3, r7, #1
 80142b4:	444b      	add	r3, r9
 80142b6:	106d      	asrs	r5, r5, #1
 80142b8:	429d      	cmp	r5, r3
 80142ba:	bf38      	it	cc
 80142bc:	461d      	movcc	r5, r3
 80142be:	0553      	lsls	r3, r2, #21
 80142c0:	d527      	bpl.n	8014312 <__ssputs_r+0x8e>
 80142c2:	4629      	mov	r1, r5
 80142c4:	f7ff fb60 	bl	8013988 <_malloc_r>
 80142c8:	4606      	mov	r6, r0
 80142ca:	b360      	cbz	r0, 8014326 <__ssputs_r+0xa2>
 80142cc:	6921      	ldr	r1, [r4, #16]
 80142ce:	464a      	mov	r2, r9
 80142d0:	f7ff ff4d 	bl	801416e <memcpy>
 80142d4:	89a3      	ldrh	r3, [r4, #12]
 80142d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80142da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80142de:	81a3      	strh	r3, [r4, #12]
 80142e0:	6126      	str	r6, [r4, #16]
 80142e2:	6165      	str	r5, [r4, #20]
 80142e4:	444e      	add	r6, r9
 80142e6:	eba5 0509 	sub.w	r5, r5, r9
 80142ea:	6026      	str	r6, [r4, #0]
 80142ec:	60a5      	str	r5, [r4, #8]
 80142ee:	463e      	mov	r6, r7
 80142f0:	42be      	cmp	r6, r7
 80142f2:	d900      	bls.n	80142f6 <__ssputs_r+0x72>
 80142f4:	463e      	mov	r6, r7
 80142f6:	6820      	ldr	r0, [r4, #0]
 80142f8:	4632      	mov	r2, r6
 80142fa:	4641      	mov	r1, r8
 80142fc:	f000 fd3c 	bl	8014d78 <memmove>
 8014300:	68a3      	ldr	r3, [r4, #8]
 8014302:	1b9b      	subs	r3, r3, r6
 8014304:	60a3      	str	r3, [r4, #8]
 8014306:	6823      	ldr	r3, [r4, #0]
 8014308:	4433      	add	r3, r6
 801430a:	6023      	str	r3, [r4, #0]
 801430c:	2000      	movs	r0, #0
 801430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014312:	462a      	mov	r2, r5
 8014314:	f7ff fc38 	bl	8013b88 <_realloc_r>
 8014318:	4606      	mov	r6, r0
 801431a:	2800      	cmp	r0, #0
 801431c:	d1e0      	bne.n	80142e0 <__ssputs_r+0x5c>
 801431e:	6921      	ldr	r1, [r4, #16]
 8014320:	4650      	mov	r0, sl
 8014322:	f7ff ff5d 	bl	80141e0 <_free_r>
 8014326:	230c      	movs	r3, #12
 8014328:	f8ca 3000 	str.w	r3, [sl]
 801432c:	89a3      	ldrh	r3, [r4, #12]
 801432e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014332:	81a3      	strh	r3, [r4, #12]
 8014334:	f04f 30ff 	mov.w	r0, #4294967295
 8014338:	e7e9      	b.n	801430e <__ssputs_r+0x8a>
	...

0801433c <_svfiprintf_r>:
 801433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014340:	4698      	mov	r8, r3
 8014342:	898b      	ldrh	r3, [r1, #12]
 8014344:	061b      	lsls	r3, r3, #24
 8014346:	b09d      	sub	sp, #116	@ 0x74
 8014348:	4607      	mov	r7, r0
 801434a:	460d      	mov	r5, r1
 801434c:	4614      	mov	r4, r2
 801434e:	d510      	bpl.n	8014372 <_svfiprintf_r+0x36>
 8014350:	690b      	ldr	r3, [r1, #16]
 8014352:	b973      	cbnz	r3, 8014372 <_svfiprintf_r+0x36>
 8014354:	2140      	movs	r1, #64	@ 0x40
 8014356:	f7ff fb17 	bl	8013988 <_malloc_r>
 801435a:	6028      	str	r0, [r5, #0]
 801435c:	6128      	str	r0, [r5, #16]
 801435e:	b930      	cbnz	r0, 801436e <_svfiprintf_r+0x32>
 8014360:	230c      	movs	r3, #12
 8014362:	603b      	str	r3, [r7, #0]
 8014364:	f04f 30ff 	mov.w	r0, #4294967295
 8014368:	b01d      	add	sp, #116	@ 0x74
 801436a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801436e:	2340      	movs	r3, #64	@ 0x40
 8014370:	616b      	str	r3, [r5, #20]
 8014372:	2300      	movs	r3, #0
 8014374:	9309      	str	r3, [sp, #36]	@ 0x24
 8014376:	2320      	movs	r3, #32
 8014378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801437c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014380:	2330      	movs	r3, #48	@ 0x30
 8014382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014520 <_svfiprintf_r+0x1e4>
 8014386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801438a:	f04f 0901 	mov.w	r9, #1
 801438e:	4623      	mov	r3, r4
 8014390:	469a      	mov	sl, r3
 8014392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014396:	b10a      	cbz	r2, 801439c <_svfiprintf_r+0x60>
 8014398:	2a25      	cmp	r2, #37	@ 0x25
 801439a:	d1f9      	bne.n	8014390 <_svfiprintf_r+0x54>
 801439c:	ebba 0b04 	subs.w	fp, sl, r4
 80143a0:	d00b      	beq.n	80143ba <_svfiprintf_r+0x7e>
 80143a2:	465b      	mov	r3, fp
 80143a4:	4622      	mov	r2, r4
 80143a6:	4629      	mov	r1, r5
 80143a8:	4638      	mov	r0, r7
 80143aa:	f7ff ff6b 	bl	8014284 <__ssputs_r>
 80143ae:	3001      	adds	r0, #1
 80143b0:	f000 80a7 	beq.w	8014502 <_svfiprintf_r+0x1c6>
 80143b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143b6:	445a      	add	r2, fp
 80143b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80143ba:	f89a 3000 	ldrb.w	r3, [sl]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	f000 809f 	beq.w	8014502 <_svfiprintf_r+0x1c6>
 80143c4:	2300      	movs	r3, #0
 80143c6:	f04f 32ff 	mov.w	r2, #4294967295
 80143ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143ce:	f10a 0a01 	add.w	sl, sl, #1
 80143d2:	9304      	str	r3, [sp, #16]
 80143d4:	9307      	str	r3, [sp, #28]
 80143d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80143da:	931a      	str	r3, [sp, #104]	@ 0x68
 80143dc:	4654      	mov	r4, sl
 80143de:	2205      	movs	r2, #5
 80143e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143e4:	484e      	ldr	r0, [pc, #312]	@ (8014520 <_svfiprintf_r+0x1e4>)
 80143e6:	f7eb ff2b 	bl	8000240 <memchr>
 80143ea:	9a04      	ldr	r2, [sp, #16]
 80143ec:	b9d8      	cbnz	r0, 8014426 <_svfiprintf_r+0xea>
 80143ee:	06d0      	lsls	r0, r2, #27
 80143f0:	bf44      	itt	mi
 80143f2:	2320      	movmi	r3, #32
 80143f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80143f8:	0711      	lsls	r1, r2, #28
 80143fa:	bf44      	itt	mi
 80143fc:	232b      	movmi	r3, #43	@ 0x2b
 80143fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014402:	f89a 3000 	ldrb.w	r3, [sl]
 8014406:	2b2a      	cmp	r3, #42	@ 0x2a
 8014408:	d015      	beq.n	8014436 <_svfiprintf_r+0xfa>
 801440a:	9a07      	ldr	r2, [sp, #28]
 801440c:	4654      	mov	r4, sl
 801440e:	2000      	movs	r0, #0
 8014410:	f04f 0c0a 	mov.w	ip, #10
 8014414:	4621      	mov	r1, r4
 8014416:	f811 3b01 	ldrb.w	r3, [r1], #1
 801441a:	3b30      	subs	r3, #48	@ 0x30
 801441c:	2b09      	cmp	r3, #9
 801441e:	d94b      	bls.n	80144b8 <_svfiprintf_r+0x17c>
 8014420:	b1b0      	cbz	r0, 8014450 <_svfiprintf_r+0x114>
 8014422:	9207      	str	r2, [sp, #28]
 8014424:	e014      	b.n	8014450 <_svfiprintf_r+0x114>
 8014426:	eba0 0308 	sub.w	r3, r0, r8
 801442a:	fa09 f303 	lsl.w	r3, r9, r3
 801442e:	4313      	orrs	r3, r2
 8014430:	9304      	str	r3, [sp, #16]
 8014432:	46a2      	mov	sl, r4
 8014434:	e7d2      	b.n	80143dc <_svfiprintf_r+0xa0>
 8014436:	9b03      	ldr	r3, [sp, #12]
 8014438:	1d19      	adds	r1, r3, #4
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	9103      	str	r1, [sp, #12]
 801443e:	2b00      	cmp	r3, #0
 8014440:	bfbb      	ittet	lt
 8014442:	425b      	neglt	r3, r3
 8014444:	f042 0202 	orrlt.w	r2, r2, #2
 8014448:	9307      	strge	r3, [sp, #28]
 801444a:	9307      	strlt	r3, [sp, #28]
 801444c:	bfb8      	it	lt
 801444e:	9204      	strlt	r2, [sp, #16]
 8014450:	7823      	ldrb	r3, [r4, #0]
 8014452:	2b2e      	cmp	r3, #46	@ 0x2e
 8014454:	d10a      	bne.n	801446c <_svfiprintf_r+0x130>
 8014456:	7863      	ldrb	r3, [r4, #1]
 8014458:	2b2a      	cmp	r3, #42	@ 0x2a
 801445a:	d132      	bne.n	80144c2 <_svfiprintf_r+0x186>
 801445c:	9b03      	ldr	r3, [sp, #12]
 801445e:	1d1a      	adds	r2, r3, #4
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	9203      	str	r2, [sp, #12]
 8014464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014468:	3402      	adds	r4, #2
 801446a:	9305      	str	r3, [sp, #20]
 801446c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014530 <_svfiprintf_r+0x1f4>
 8014470:	7821      	ldrb	r1, [r4, #0]
 8014472:	2203      	movs	r2, #3
 8014474:	4650      	mov	r0, sl
 8014476:	f7eb fee3 	bl	8000240 <memchr>
 801447a:	b138      	cbz	r0, 801448c <_svfiprintf_r+0x150>
 801447c:	9b04      	ldr	r3, [sp, #16]
 801447e:	eba0 000a 	sub.w	r0, r0, sl
 8014482:	2240      	movs	r2, #64	@ 0x40
 8014484:	4082      	lsls	r2, r0
 8014486:	4313      	orrs	r3, r2
 8014488:	3401      	adds	r4, #1
 801448a:	9304      	str	r3, [sp, #16]
 801448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014490:	4824      	ldr	r0, [pc, #144]	@ (8014524 <_svfiprintf_r+0x1e8>)
 8014492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014496:	2206      	movs	r2, #6
 8014498:	f7eb fed2 	bl	8000240 <memchr>
 801449c:	2800      	cmp	r0, #0
 801449e:	d036      	beq.n	801450e <_svfiprintf_r+0x1d2>
 80144a0:	4b21      	ldr	r3, [pc, #132]	@ (8014528 <_svfiprintf_r+0x1ec>)
 80144a2:	bb1b      	cbnz	r3, 80144ec <_svfiprintf_r+0x1b0>
 80144a4:	9b03      	ldr	r3, [sp, #12]
 80144a6:	3307      	adds	r3, #7
 80144a8:	f023 0307 	bic.w	r3, r3, #7
 80144ac:	3308      	adds	r3, #8
 80144ae:	9303      	str	r3, [sp, #12]
 80144b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80144b2:	4433      	add	r3, r6
 80144b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80144b6:	e76a      	b.n	801438e <_svfiprintf_r+0x52>
 80144b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80144bc:	460c      	mov	r4, r1
 80144be:	2001      	movs	r0, #1
 80144c0:	e7a8      	b.n	8014414 <_svfiprintf_r+0xd8>
 80144c2:	2300      	movs	r3, #0
 80144c4:	3401      	adds	r4, #1
 80144c6:	9305      	str	r3, [sp, #20]
 80144c8:	4619      	mov	r1, r3
 80144ca:	f04f 0c0a 	mov.w	ip, #10
 80144ce:	4620      	mov	r0, r4
 80144d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144d4:	3a30      	subs	r2, #48	@ 0x30
 80144d6:	2a09      	cmp	r2, #9
 80144d8:	d903      	bls.n	80144e2 <_svfiprintf_r+0x1a6>
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d0c6      	beq.n	801446c <_svfiprintf_r+0x130>
 80144de:	9105      	str	r1, [sp, #20]
 80144e0:	e7c4      	b.n	801446c <_svfiprintf_r+0x130>
 80144e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80144e6:	4604      	mov	r4, r0
 80144e8:	2301      	movs	r3, #1
 80144ea:	e7f0      	b.n	80144ce <_svfiprintf_r+0x192>
 80144ec:	ab03      	add	r3, sp, #12
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	462a      	mov	r2, r5
 80144f2:	4b0e      	ldr	r3, [pc, #56]	@ (801452c <_svfiprintf_r+0x1f0>)
 80144f4:	a904      	add	r1, sp, #16
 80144f6:	4638      	mov	r0, r7
 80144f8:	f3af 8000 	nop.w
 80144fc:	1c42      	adds	r2, r0, #1
 80144fe:	4606      	mov	r6, r0
 8014500:	d1d6      	bne.n	80144b0 <_svfiprintf_r+0x174>
 8014502:	89ab      	ldrh	r3, [r5, #12]
 8014504:	065b      	lsls	r3, r3, #25
 8014506:	f53f af2d 	bmi.w	8014364 <_svfiprintf_r+0x28>
 801450a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801450c:	e72c      	b.n	8014368 <_svfiprintf_r+0x2c>
 801450e:	ab03      	add	r3, sp, #12
 8014510:	9300      	str	r3, [sp, #0]
 8014512:	462a      	mov	r2, r5
 8014514:	4b05      	ldr	r3, [pc, #20]	@ (801452c <_svfiprintf_r+0x1f0>)
 8014516:	a904      	add	r1, sp, #16
 8014518:	4638      	mov	r0, r7
 801451a:	f000 f9bb 	bl	8014894 <_printf_i>
 801451e:	e7ed      	b.n	80144fc <_svfiprintf_r+0x1c0>
 8014520:	08015e10 	.word	0x08015e10
 8014524:	08015e1a 	.word	0x08015e1a
 8014528:	00000000 	.word	0x00000000
 801452c:	08014285 	.word	0x08014285
 8014530:	08015e16 	.word	0x08015e16

08014534 <__sfputc_r>:
 8014534:	6893      	ldr	r3, [r2, #8]
 8014536:	3b01      	subs	r3, #1
 8014538:	2b00      	cmp	r3, #0
 801453a:	b410      	push	{r4}
 801453c:	6093      	str	r3, [r2, #8]
 801453e:	da08      	bge.n	8014552 <__sfputc_r+0x1e>
 8014540:	6994      	ldr	r4, [r2, #24]
 8014542:	42a3      	cmp	r3, r4
 8014544:	db01      	blt.n	801454a <__sfputc_r+0x16>
 8014546:	290a      	cmp	r1, #10
 8014548:	d103      	bne.n	8014552 <__sfputc_r+0x1e>
 801454a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801454e:	f000 bb7f 	b.w	8014c50 <__swbuf_r>
 8014552:	6813      	ldr	r3, [r2, #0]
 8014554:	1c58      	adds	r0, r3, #1
 8014556:	6010      	str	r0, [r2, #0]
 8014558:	7019      	strb	r1, [r3, #0]
 801455a:	4608      	mov	r0, r1
 801455c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014560:	4770      	bx	lr

08014562 <__sfputs_r>:
 8014562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014564:	4606      	mov	r6, r0
 8014566:	460f      	mov	r7, r1
 8014568:	4614      	mov	r4, r2
 801456a:	18d5      	adds	r5, r2, r3
 801456c:	42ac      	cmp	r4, r5
 801456e:	d101      	bne.n	8014574 <__sfputs_r+0x12>
 8014570:	2000      	movs	r0, #0
 8014572:	e007      	b.n	8014584 <__sfputs_r+0x22>
 8014574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014578:	463a      	mov	r2, r7
 801457a:	4630      	mov	r0, r6
 801457c:	f7ff ffda 	bl	8014534 <__sfputc_r>
 8014580:	1c43      	adds	r3, r0, #1
 8014582:	d1f3      	bne.n	801456c <__sfputs_r+0xa>
 8014584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014588 <_vfiprintf_r>:
 8014588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801458c:	460d      	mov	r5, r1
 801458e:	b09d      	sub	sp, #116	@ 0x74
 8014590:	4614      	mov	r4, r2
 8014592:	4698      	mov	r8, r3
 8014594:	4606      	mov	r6, r0
 8014596:	b118      	cbz	r0, 80145a0 <_vfiprintf_r+0x18>
 8014598:	6a03      	ldr	r3, [r0, #32]
 801459a:	b90b      	cbnz	r3, 80145a0 <_vfiprintf_r+0x18>
 801459c:	f7ff fc26 	bl	8013dec <__sinit>
 80145a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145a2:	07d9      	lsls	r1, r3, #31
 80145a4:	d405      	bmi.n	80145b2 <_vfiprintf_r+0x2a>
 80145a6:	89ab      	ldrh	r3, [r5, #12]
 80145a8:	059a      	lsls	r2, r3, #22
 80145aa:	d402      	bmi.n	80145b2 <_vfiprintf_r+0x2a>
 80145ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145ae:	f7ff fdd4 	bl	801415a <__retarget_lock_acquire_recursive>
 80145b2:	89ab      	ldrh	r3, [r5, #12]
 80145b4:	071b      	lsls	r3, r3, #28
 80145b6:	d501      	bpl.n	80145bc <_vfiprintf_r+0x34>
 80145b8:	692b      	ldr	r3, [r5, #16]
 80145ba:	b99b      	cbnz	r3, 80145e4 <_vfiprintf_r+0x5c>
 80145bc:	4629      	mov	r1, r5
 80145be:	4630      	mov	r0, r6
 80145c0:	f000 fb84 	bl	8014ccc <__swsetup_r>
 80145c4:	b170      	cbz	r0, 80145e4 <_vfiprintf_r+0x5c>
 80145c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80145c8:	07dc      	lsls	r4, r3, #31
 80145ca:	d504      	bpl.n	80145d6 <_vfiprintf_r+0x4e>
 80145cc:	f04f 30ff 	mov.w	r0, #4294967295
 80145d0:	b01d      	add	sp, #116	@ 0x74
 80145d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d6:	89ab      	ldrh	r3, [r5, #12]
 80145d8:	0598      	lsls	r0, r3, #22
 80145da:	d4f7      	bmi.n	80145cc <_vfiprintf_r+0x44>
 80145dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80145de:	f7ff fdbd 	bl	801415c <__retarget_lock_release_recursive>
 80145e2:	e7f3      	b.n	80145cc <_vfiprintf_r+0x44>
 80145e4:	2300      	movs	r3, #0
 80145e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80145e8:	2320      	movs	r3, #32
 80145ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80145ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80145f2:	2330      	movs	r3, #48	@ 0x30
 80145f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80147a4 <_vfiprintf_r+0x21c>
 80145f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80145fc:	f04f 0901 	mov.w	r9, #1
 8014600:	4623      	mov	r3, r4
 8014602:	469a      	mov	sl, r3
 8014604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014608:	b10a      	cbz	r2, 801460e <_vfiprintf_r+0x86>
 801460a:	2a25      	cmp	r2, #37	@ 0x25
 801460c:	d1f9      	bne.n	8014602 <_vfiprintf_r+0x7a>
 801460e:	ebba 0b04 	subs.w	fp, sl, r4
 8014612:	d00b      	beq.n	801462c <_vfiprintf_r+0xa4>
 8014614:	465b      	mov	r3, fp
 8014616:	4622      	mov	r2, r4
 8014618:	4629      	mov	r1, r5
 801461a:	4630      	mov	r0, r6
 801461c:	f7ff ffa1 	bl	8014562 <__sfputs_r>
 8014620:	3001      	adds	r0, #1
 8014622:	f000 80a7 	beq.w	8014774 <_vfiprintf_r+0x1ec>
 8014626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014628:	445a      	add	r2, fp
 801462a:	9209      	str	r2, [sp, #36]	@ 0x24
 801462c:	f89a 3000 	ldrb.w	r3, [sl]
 8014630:	2b00      	cmp	r3, #0
 8014632:	f000 809f 	beq.w	8014774 <_vfiprintf_r+0x1ec>
 8014636:	2300      	movs	r3, #0
 8014638:	f04f 32ff 	mov.w	r2, #4294967295
 801463c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014640:	f10a 0a01 	add.w	sl, sl, #1
 8014644:	9304      	str	r3, [sp, #16]
 8014646:	9307      	str	r3, [sp, #28]
 8014648:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801464c:	931a      	str	r3, [sp, #104]	@ 0x68
 801464e:	4654      	mov	r4, sl
 8014650:	2205      	movs	r2, #5
 8014652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014656:	4853      	ldr	r0, [pc, #332]	@ (80147a4 <_vfiprintf_r+0x21c>)
 8014658:	f7eb fdf2 	bl	8000240 <memchr>
 801465c:	9a04      	ldr	r2, [sp, #16]
 801465e:	b9d8      	cbnz	r0, 8014698 <_vfiprintf_r+0x110>
 8014660:	06d1      	lsls	r1, r2, #27
 8014662:	bf44      	itt	mi
 8014664:	2320      	movmi	r3, #32
 8014666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801466a:	0713      	lsls	r3, r2, #28
 801466c:	bf44      	itt	mi
 801466e:	232b      	movmi	r3, #43	@ 0x2b
 8014670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014674:	f89a 3000 	ldrb.w	r3, [sl]
 8014678:	2b2a      	cmp	r3, #42	@ 0x2a
 801467a:	d015      	beq.n	80146a8 <_vfiprintf_r+0x120>
 801467c:	9a07      	ldr	r2, [sp, #28]
 801467e:	4654      	mov	r4, sl
 8014680:	2000      	movs	r0, #0
 8014682:	f04f 0c0a 	mov.w	ip, #10
 8014686:	4621      	mov	r1, r4
 8014688:	f811 3b01 	ldrb.w	r3, [r1], #1
 801468c:	3b30      	subs	r3, #48	@ 0x30
 801468e:	2b09      	cmp	r3, #9
 8014690:	d94b      	bls.n	801472a <_vfiprintf_r+0x1a2>
 8014692:	b1b0      	cbz	r0, 80146c2 <_vfiprintf_r+0x13a>
 8014694:	9207      	str	r2, [sp, #28]
 8014696:	e014      	b.n	80146c2 <_vfiprintf_r+0x13a>
 8014698:	eba0 0308 	sub.w	r3, r0, r8
 801469c:	fa09 f303 	lsl.w	r3, r9, r3
 80146a0:	4313      	orrs	r3, r2
 80146a2:	9304      	str	r3, [sp, #16]
 80146a4:	46a2      	mov	sl, r4
 80146a6:	e7d2      	b.n	801464e <_vfiprintf_r+0xc6>
 80146a8:	9b03      	ldr	r3, [sp, #12]
 80146aa:	1d19      	adds	r1, r3, #4
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	9103      	str	r1, [sp, #12]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	bfbb      	ittet	lt
 80146b4:	425b      	neglt	r3, r3
 80146b6:	f042 0202 	orrlt.w	r2, r2, #2
 80146ba:	9307      	strge	r3, [sp, #28]
 80146bc:	9307      	strlt	r3, [sp, #28]
 80146be:	bfb8      	it	lt
 80146c0:	9204      	strlt	r2, [sp, #16]
 80146c2:	7823      	ldrb	r3, [r4, #0]
 80146c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80146c6:	d10a      	bne.n	80146de <_vfiprintf_r+0x156>
 80146c8:	7863      	ldrb	r3, [r4, #1]
 80146ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80146cc:	d132      	bne.n	8014734 <_vfiprintf_r+0x1ac>
 80146ce:	9b03      	ldr	r3, [sp, #12]
 80146d0:	1d1a      	adds	r2, r3, #4
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	9203      	str	r2, [sp, #12]
 80146d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80146da:	3402      	adds	r4, #2
 80146dc:	9305      	str	r3, [sp, #20]
 80146de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80147b4 <_vfiprintf_r+0x22c>
 80146e2:	7821      	ldrb	r1, [r4, #0]
 80146e4:	2203      	movs	r2, #3
 80146e6:	4650      	mov	r0, sl
 80146e8:	f7eb fdaa 	bl	8000240 <memchr>
 80146ec:	b138      	cbz	r0, 80146fe <_vfiprintf_r+0x176>
 80146ee:	9b04      	ldr	r3, [sp, #16]
 80146f0:	eba0 000a 	sub.w	r0, r0, sl
 80146f4:	2240      	movs	r2, #64	@ 0x40
 80146f6:	4082      	lsls	r2, r0
 80146f8:	4313      	orrs	r3, r2
 80146fa:	3401      	adds	r4, #1
 80146fc:	9304      	str	r3, [sp, #16]
 80146fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014702:	4829      	ldr	r0, [pc, #164]	@ (80147a8 <_vfiprintf_r+0x220>)
 8014704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014708:	2206      	movs	r2, #6
 801470a:	f7eb fd99 	bl	8000240 <memchr>
 801470e:	2800      	cmp	r0, #0
 8014710:	d03f      	beq.n	8014792 <_vfiprintf_r+0x20a>
 8014712:	4b26      	ldr	r3, [pc, #152]	@ (80147ac <_vfiprintf_r+0x224>)
 8014714:	bb1b      	cbnz	r3, 801475e <_vfiprintf_r+0x1d6>
 8014716:	9b03      	ldr	r3, [sp, #12]
 8014718:	3307      	adds	r3, #7
 801471a:	f023 0307 	bic.w	r3, r3, #7
 801471e:	3308      	adds	r3, #8
 8014720:	9303      	str	r3, [sp, #12]
 8014722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014724:	443b      	add	r3, r7
 8014726:	9309      	str	r3, [sp, #36]	@ 0x24
 8014728:	e76a      	b.n	8014600 <_vfiprintf_r+0x78>
 801472a:	fb0c 3202 	mla	r2, ip, r2, r3
 801472e:	460c      	mov	r4, r1
 8014730:	2001      	movs	r0, #1
 8014732:	e7a8      	b.n	8014686 <_vfiprintf_r+0xfe>
 8014734:	2300      	movs	r3, #0
 8014736:	3401      	adds	r4, #1
 8014738:	9305      	str	r3, [sp, #20]
 801473a:	4619      	mov	r1, r3
 801473c:	f04f 0c0a 	mov.w	ip, #10
 8014740:	4620      	mov	r0, r4
 8014742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014746:	3a30      	subs	r2, #48	@ 0x30
 8014748:	2a09      	cmp	r2, #9
 801474a:	d903      	bls.n	8014754 <_vfiprintf_r+0x1cc>
 801474c:	2b00      	cmp	r3, #0
 801474e:	d0c6      	beq.n	80146de <_vfiprintf_r+0x156>
 8014750:	9105      	str	r1, [sp, #20]
 8014752:	e7c4      	b.n	80146de <_vfiprintf_r+0x156>
 8014754:	fb0c 2101 	mla	r1, ip, r1, r2
 8014758:	4604      	mov	r4, r0
 801475a:	2301      	movs	r3, #1
 801475c:	e7f0      	b.n	8014740 <_vfiprintf_r+0x1b8>
 801475e:	ab03      	add	r3, sp, #12
 8014760:	9300      	str	r3, [sp, #0]
 8014762:	462a      	mov	r2, r5
 8014764:	4b12      	ldr	r3, [pc, #72]	@ (80147b0 <_vfiprintf_r+0x228>)
 8014766:	a904      	add	r1, sp, #16
 8014768:	4630      	mov	r0, r6
 801476a:	f3af 8000 	nop.w
 801476e:	4607      	mov	r7, r0
 8014770:	1c78      	adds	r0, r7, #1
 8014772:	d1d6      	bne.n	8014722 <_vfiprintf_r+0x19a>
 8014774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014776:	07d9      	lsls	r1, r3, #31
 8014778:	d405      	bmi.n	8014786 <_vfiprintf_r+0x1fe>
 801477a:	89ab      	ldrh	r3, [r5, #12]
 801477c:	059a      	lsls	r2, r3, #22
 801477e:	d402      	bmi.n	8014786 <_vfiprintf_r+0x1fe>
 8014780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014782:	f7ff fceb 	bl	801415c <__retarget_lock_release_recursive>
 8014786:	89ab      	ldrh	r3, [r5, #12]
 8014788:	065b      	lsls	r3, r3, #25
 801478a:	f53f af1f 	bmi.w	80145cc <_vfiprintf_r+0x44>
 801478e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014790:	e71e      	b.n	80145d0 <_vfiprintf_r+0x48>
 8014792:	ab03      	add	r3, sp, #12
 8014794:	9300      	str	r3, [sp, #0]
 8014796:	462a      	mov	r2, r5
 8014798:	4b05      	ldr	r3, [pc, #20]	@ (80147b0 <_vfiprintf_r+0x228>)
 801479a:	a904      	add	r1, sp, #16
 801479c:	4630      	mov	r0, r6
 801479e:	f000 f879 	bl	8014894 <_printf_i>
 80147a2:	e7e4      	b.n	801476e <_vfiprintf_r+0x1e6>
 80147a4:	08015e10 	.word	0x08015e10
 80147a8:	08015e1a 	.word	0x08015e1a
 80147ac:	00000000 	.word	0x00000000
 80147b0:	08014563 	.word	0x08014563
 80147b4:	08015e16 	.word	0x08015e16

080147b8 <_printf_common>:
 80147b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147bc:	4616      	mov	r6, r2
 80147be:	4698      	mov	r8, r3
 80147c0:	688a      	ldr	r2, [r1, #8]
 80147c2:	690b      	ldr	r3, [r1, #16]
 80147c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80147c8:	4293      	cmp	r3, r2
 80147ca:	bfb8      	it	lt
 80147cc:	4613      	movlt	r3, r2
 80147ce:	6033      	str	r3, [r6, #0]
 80147d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80147d4:	4607      	mov	r7, r0
 80147d6:	460c      	mov	r4, r1
 80147d8:	b10a      	cbz	r2, 80147de <_printf_common+0x26>
 80147da:	3301      	adds	r3, #1
 80147dc:	6033      	str	r3, [r6, #0]
 80147de:	6823      	ldr	r3, [r4, #0]
 80147e0:	0699      	lsls	r1, r3, #26
 80147e2:	bf42      	ittt	mi
 80147e4:	6833      	ldrmi	r3, [r6, #0]
 80147e6:	3302      	addmi	r3, #2
 80147e8:	6033      	strmi	r3, [r6, #0]
 80147ea:	6825      	ldr	r5, [r4, #0]
 80147ec:	f015 0506 	ands.w	r5, r5, #6
 80147f0:	d106      	bne.n	8014800 <_printf_common+0x48>
 80147f2:	f104 0a19 	add.w	sl, r4, #25
 80147f6:	68e3      	ldr	r3, [r4, #12]
 80147f8:	6832      	ldr	r2, [r6, #0]
 80147fa:	1a9b      	subs	r3, r3, r2
 80147fc:	42ab      	cmp	r3, r5
 80147fe:	dc26      	bgt.n	801484e <_printf_common+0x96>
 8014800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014804:	6822      	ldr	r2, [r4, #0]
 8014806:	3b00      	subs	r3, #0
 8014808:	bf18      	it	ne
 801480a:	2301      	movne	r3, #1
 801480c:	0692      	lsls	r2, r2, #26
 801480e:	d42b      	bmi.n	8014868 <_printf_common+0xb0>
 8014810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014814:	4641      	mov	r1, r8
 8014816:	4638      	mov	r0, r7
 8014818:	47c8      	blx	r9
 801481a:	3001      	adds	r0, #1
 801481c:	d01e      	beq.n	801485c <_printf_common+0xa4>
 801481e:	6823      	ldr	r3, [r4, #0]
 8014820:	6922      	ldr	r2, [r4, #16]
 8014822:	f003 0306 	and.w	r3, r3, #6
 8014826:	2b04      	cmp	r3, #4
 8014828:	bf02      	ittt	eq
 801482a:	68e5      	ldreq	r5, [r4, #12]
 801482c:	6833      	ldreq	r3, [r6, #0]
 801482e:	1aed      	subeq	r5, r5, r3
 8014830:	68a3      	ldr	r3, [r4, #8]
 8014832:	bf0c      	ite	eq
 8014834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014838:	2500      	movne	r5, #0
 801483a:	4293      	cmp	r3, r2
 801483c:	bfc4      	itt	gt
 801483e:	1a9b      	subgt	r3, r3, r2
 8014840:	18ed      	addgt	r5, r5, r3
 8014842:	2600      	movs	r6, #0
 8014844:	341a      	adds	r4, #26
 8014846:	42b5      	cmp	r5, r6
 8014848:	d11a      	bne.n	8014880 <_printf_common+0xc8>
 801484a:	2000      	movs	r0, #0
 801484c:	e008      	b.n	8014860 <_printf_common+0xa8>
 801484e:	2301      	movs	r3, #1
 8014850:	4652      	mov	r2, sl
 8014852:	4641      	mov	r1, r8
 8014854:	4638      	mov	r0, r7
 8014856:	47c8      	blx	r9
 8014858:	3001      	adds	r0, #1
 801485a:	d103      	bne.n	8014864 <_printf_common+0xac>
 801485c:	f04f 30ff 	mov.w	r0, #4294967295
 8014860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014864:	3501      	adds	r5, #1
 8014866:	e7c6      	b.n	80147f6 <_printf_common+0x3e>
 8014868:	18e1      	adds	r1, r4, r3
 801486a:	1c5a      	adds	r2, r3, #1
 801486c:	2030      	movs	r0, #48	@ 0x30
 801486e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014872:	4422      	add	r2, r4
 8014874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801487c:	3302      	adds	r3, #2
 801487e:	e7c7      	b.n	8014810 <_printf_common+0x58>
 8014880:	2301      	movs	r3, #1
 8014882:	4622      	mov	r2, r4
 8014884:	4641      	mov	r1, r8
 8014886:	4638      	mov	r0, r7
 8014888:	47c8      	blx	r9
 801488a:	3001      	adds	r0, #1
 801488c:	d0e6      	beq.n	801485c <_printf_common+0xa4>
 801488e:	3601      	adds	r6, #1
 8014890:	e7d9      	b.n	8014846 <_printf_common+0x8e>
	...

08014894 <_printf_i>:
 8014894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014898:	7e0f      	ldrb	r7, [r1, #24]
 801489a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801489c:	2f78      	cmp	r7, #120	@ 0x78
 801489e:	4691      	mov	r9, r2
 80148a0:	4680      	mov	r8, r0
 80148a2:	460c      	mov	r4, r1
 80148a4:	469a      	mov	sl, r3
 80148a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80148aa:	d807      	bhi.n	80148bc <_printf_i+0x28>
 80148ac:	2f62      	cmp	r7, #98	@ 0x62
 80148ae:	d80a      	bhi.n	80148c6 <_printf_i+0x32>
 80148b0:	2f00      	cmp	r7, #0
 80148b2:	f000 80d2 	beq.w	8014a5a <_printf_i+0x1c6>
 80148b6:	2f58      	cmp	r7, #88	@ 0x58
 80148b8:	f000 80b9 	beq.w	8014a2e <_printf_i+0x19a>
 80148bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80148c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80148c4:	e03a      	b.n	801493c <_printf_i+0xa8>
 80148c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80148ca:	2b15      	cmp	r3, #21
 80148cc:	d8f6      	bhi.n	80148bc <_printf_i+0x28>
 80148ce:	a101      	add	r1, pc, #4	@ (adr r1, 80148d4 <_printf_i+0x40>)
 80148d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80148d4:	0801492d 	.word	0x0801492d
 80148d8:	08014941 	.word	0x08014941
 80148dc:	080148bd 	.word	0x080148bd
 80148e0:	080148bd 	.word	0x080148bd
 80148e4:	080148bd 	.word	0x080148bd
 80148e8:	080148bd 	.word	0x080148bd
 80148ec:	08014941 	.word	0x08014941
 80148f0:	080148bd 	.word	0x080148bd
 80148f4:	080148bd 	.word	0x080148bd
 80148f8:	080148bd 	.word	0x080148bd
 80148fc:	080148bd 	.word	0x080148bd
 8014900:	08014a41 	.word	0x08014a41
 8014904:	0801496b 	.word	0x0801496b
 8014908:	080149fb 	.word	0x080149fb
 801490c:	080148bd 	.word	0x080148bd
 8014910:	080148bd 	.word	0x080148bd
 8014914:	08014a63 	.word	0x08014a63
 8014918:	080148bd 	.word	0x080148bd
 801491c:	0801496b 	.word	0x0801496b
 8014920:	080148bd 	.word	0x080148bd
 8014924:	080148bd 	.word	0x080148bd
 8014928:	08014a03 	.word	0x08014a03
 801492c:	6833      	ldr	r3, [r6, #0]
 801492e:	1d1a      	adds	r2, r3, #4
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	6032      	str	r2, [r6, #0]
 8014934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801493c:	2301      	movs	r3, #1
 801493e:	e09d      	b.n	8014a7c <_printf_i+0x1e8>
 8014940:	6833      	ldr	r3, [r6, #0]
 8014942:	6820      	ldr	r0, [r4, #0]
 8014944:	1d19      	adds	r1, r3, #4
 8014946:	6031      	str	r1, [r6, #0]
 8014948:	0606      	lsls	r6, r0, #24
 801494a:	d501      	bpl.n	8014950 <_printf_i+0xbc>
 801494c:	681d      	ldr	r5, [r3, #0]
 801494e:	e003      	b.n	8014958 <_printf_i+0xc4>
 8014950:	0645      	lsls	r5, r0, #25
 8014952:	d5fb      	bpl.n	801494c <_printf_i+0xb8>
 8014954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014958:	2d00      	cmp	r5, #0
 801495a:	da03      	bge.n	8014964 <_printf_i+0xd0>
 801495c:	232d      	movs	r3, #45	@ 0x2d
 801495e:	426d      	negs	r5, r5
 8014960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014964:	4859      	ldr	r0, [pc, #356]	@ (8014acc <_printf_i+0x238>)
 8014966:	230a      	movs	r3, #10
 8014968:	e011      	b.n	801498e <_printf_i+0xfa>
 801496a:	6821      	ldr	r1, [r4, #0]
 801496c:	6833      	ldr	r3, [r6, #0]
 801496e:	0608      	lsls	r0, r1, #24
 8014970:	f853 5b04 	ldr.w	r5, [r3], #4
 8014974:	d402      	bmi.n	801497c <_printf_i+0xe8>
 8014976:	0649      	lsls	r1, r1, #25
 8014978:	bf48      	it	mi
 801497a:	b2ad      	uxthmi	r5, r5
 801497c:	2f6f      	cmp	r7, #111	@ 0x6f
 801497e:	4853      	ldr	r0, [pc, #332]	@ (8014acc <_printf_i+0x238>)
 8014980:	6033      	str	r3, [r6, #0]
 8014982:	bf14      	ite	ne
 8014984:	230a      	movne	r3, #10
 8014986:	2308      	moveq	r3, #8
 8014988:	2100      	movs	r1, #0
 801498a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801498e:	6866      	ldr	r6, [r4, #4]
 8014990:	60a6      	str	r6, [r4, #8]
 8014992:	2e00      	cmp	r6, #0
 8014994:	bfa2      	ittt	ge
 8014996:	6821      	ldrge	r1, [r4, #0]
 8014998:	f021 0104 	bicge.w	r1, r1, #4
 801499c:	6021      	strge	r1, [r4, #0]
 801499e:	b90d      	cbnz	r5, 80149a4 <_printf_i+0x110>
 80149a0:	2e00      	cmp	r6, #0
 80149a2:	d04b      	beq.n	8014a3c <_printf_i+0x1a8>
 80149a4:	4616      	mov	r6, r2
 80149a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80149aa:	fb03 5711 	mls	r7, r3, r1, r5
 80149ae:	5dc7      	ldrb	r7, [r0, r7]
 80149b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80149b4:	462f      	mov	r7, r5
 80149b6:	42bb      	cmp	r3, r7
 80149b8:	460d      	mov	r5, r1
 80149ba:	d9f4      	bls.n	80149a6 <_printf_i+0x112>
 80149bc:	2b08      	cmp	r3, #8
 80149be:	d10b      	bne.n	80149d8 <_printf_i+0x144>
 80149c0:	6823      	ldr	r3, [r4, #0]
 80149c2:	07df      	lsls	r7, r3, #31
 80149c4:	d508      	bpl.n	80149d8 <_printf_i+0x144>
 80149c6:	6923      	ldr	r3, [r4, #16]
 80149c8:	6861      	ldr	r1, [r4, #4]
 80149ca:	4299      	cmp	r1, r3
 80149cc:	bfde      	ittt	le
 80149ce:	2330      	movle	r3, #48	@ 0x30
 80149d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80149d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80149d8:	1b92      	subs	r2, r2, r6
 80149da:	6122      	str	r2, [r4, #16]
 80149dc:	f8cd a000 	str.w	sl, [sp]
 80149e0:	464b      	mov	r3, r9
 80149e2:	aa03      	add	r2, sp, #12
 80149e4:	4621      	mov	r1, r4
 80149e6:	4640      	mov	r0, r8
 80149e8:	f7ff fee6 	bl	80147b8 <_printf_common>
 80149ec:	3001      	adds	r0, #1
 80149ee:	d14a      	bne.n	8014a86 <_printf_i+0x1f2>
 80149f0:	f04f 30ff 	mov.w	r0, #4294967295
 80149f4:	b004      	add	sp, #16
 80149f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149fa:	6823      	ldr	r3, [r4, #0]
 80149fc:	f043 0320 	orr.w	r3, r3, #32
 8014a00:	6023      	str	r3, [r4, #0]
 8014a02:	4833      	ldr	r0, [pc, #204]	@ (8014ad0 <_printf_i+0x23c>)
 8014a04:	2778      	movs	r7, #120	@ 0x78
 8014a06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014a0a:	6823      	ldr	r3, [r4, #0]
 8014a0c:	6831      	ldr	r1, [r6, #0]
 8014a0e:	061f      	lsls	r7, r3, #24
 8014a10:	f851 5b04 	ldr.w	r5, [r1], #4
 8014a14:	d402      	bmi.n	8014a1c <_printf_i+0x188>
 8014a16:	065f      	lsls	r7, r3, #25
 8014a18:	bf48      	it	mi
 8014a1a:	b2ad      	uxthmi	r5, r5
 8014a1c:	6031      	str	r1, [r6, #0]
 8014a1e:	07d9      	lsls	r1, r3, #31
 8014a20:	bf44      	itt	mi
 8014a22:	f043 0320 	orrmi.w	r3, r3, #32
 8014a26:	6023      	strmi	r3, [r4, #0]
 8014a28:	b11d      	cbz	r5, 8014a32 <_printf_i+0x19e>
 8014a2a:	2310      	movs	r3, #16
 8014a2c:	e7ac      	b.n	8014988 <_printf_i+0xf4>
 8014a2e:	4827      	ldr	r0, [pc, #156]	@ (8014acc <_printf_i+0x238>)
 8014a30:	e7e9      	b.n	8014a06 <_printf_i+0x172>
 8014a32:	6823      	ldr	r3, [r4, #0]
 8014a34:	f023 0320 	bic.w	r3, r3, #32
 8014a38:	6023      	str	r3, [r4, #0]
 8014a3a:	e7f6      	b.n	8014a2a <_printf_i+0x196>
 8014a3c:	4616      	mov	r6, r2
 8014a3e:	e7bd      	b.n	80149bc <_printf_i+0x128>
 8014a40:	6833      	ldr	r3, [r6, #0]
 8014a42:	6825      	ldr	r5, [r4, #0]
 8014a44:	6961      	ldr	r1, [r4, #20]
 8014a46:	1d18      	adds	r0, r3, #4
 8014a48:	6030      	str	r0, [r6, #0]
 8014a4a:	062e      	lsls	r6, r5, #24
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	d501      	bpl.n	8014a54 <_printf_i+0x1c0>
 8014a50:	6019      	str	r1, [r3, #0]
 8014a52:	e002      	b.n	8014a5a <_printf_i+0x1c6>
 8014a54:	0668      	lsls	r0, r5, #25
 8014a56:	d5fb      	bpl.n	8014a50 <_printf_i+0x1bc>
 8014a58:	8019      	strh	r1, [r3, #0]
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	6123      	str	r3, [r4, #16]
 8014a5e:	4616      	mov	r6, r2
 8014a60:	e7bc      	b.n	80149dc <_printf_i+0x148>
 8014a62:	6833      	ldr	r3, [r6, #0]
 8014a64:	1d1a      	adds	r2, r3, #4
 8014a66:	6032      	str	r2, [r6, #0]
 8014a68:	681e      	ldr	r6, [r3, #0]
 8014a6a:	6862      	ldr	r2, [r4, #4]
 8014a6c:	2100      	movs	r1, #0
 8014a6e:	4630      	mov	r0, r6
 8014a70:	f7eb fbe6 	bl	8000240 <memchr>
 8014a74:	b108      	cbz	r0, 8014a7a <_printf_i+0x1e6>
 8014a76:	1b80      	subs	r0, r0, r6
 8014a78:	6060      	str	r0, [r4, #4]
 8014a7a:	6863      	ldr	r3, [r4, #4]
 8014a7c:	6123      	str	r3, [r4, #16]
 8014a7e:	2300      	movs	r3, #0
 8014a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014a84:	e7aa      	b.n	80149dc <_printf_i+0x148>
 8014a86:	6923      	ldr	r3, [r4, #16]
 8014a88:	4632      	mov	r2, r6
 8014a8a:	4649      	mov	r1, r9
 8014a8c:	4640      	mov	r0, r8
 8014a8e:	47d0      	blx	sl
 8014a90:	3001      	adds	r0, #1
 8014a92:	d0ad      	beq.n	80149f0 <_printf_i+0x15c>
 8014a94:	6823      	ldr	r3, [r4, #0]
 8014a96:	079b      	lsls	r3, r3, #30
 8014a98:	d413      	bmi.n	8014ac2 <_printf_i+0x22e>
 8014a9a:	68e0      	ldr	r0, [r4, #12]
 8014a9c:	9b03      	ldr	r3, [sp, #12]
 8014a9e:	4298      	cmp	r0, r3
 8014aa0:	bfb8      	it	lt
 8014aa2:	4618      	movlt	r0, r3
 8014aa4:	e7a6      	b.n	80149f4 <_printf_i+0x160>
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	4632      	mov	r2, r6
 8014aaa:	4649      	mov	r1, r9
 8014aac:	4640      	mov	r0, r8
 8014aae:	47d0      	blx	sl
 8014ab0:	3001      	adds	r0, #1
 8014ab2:	d09d      	beq.n	80149f0 <_printf_i+0x15c>
 8014ab4:	3501      	adds	r5, #1
 8014ab6:	68e3      	ldr	r3, [r4, #12]
 8014ab8:	9903      	ldr	r1, [sp, #12]
 8014aba:	1a5b      	subs	r3, r3, r1
 8014abc:	42ab      	cmp	r3, r5
 8014abe:	dcf2      	bgt.n	8014aa6 <_printf_i+0x212>
 8014ac0:	e7eb      	b.n	8014a9a <_printf_i+0x206>
 8014ac2:	2500      	movs	r5, #0
 8014ac4:	f104 0619 	add.w	r6, r4, #25
 8014ac8:	e7f5      	b.n	8014ab6 <_printf_i+0x222>
 8014aca:	bf00      	nop
 8014acc:	08015e21 	.word	0x08015e21
 8014ad0:	08015e32 	.word	0x08015e32

08014ad4 <__sflush_r>:
 8014ad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014adc:	0716      	lsls	r6, r2, #28
 8014ade:	4605      	mov	r5, r0
 8014ae0:	460c      	mov	r4, r1
 8014ae2:	d454      	bmi.n	8014b8e <__sflush_r+0xba>
 8014ae4:	684b      	ldr	r3, [r1, #4]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	dc02      	bgt.n	8014af0 <__sflush_r+0x1c>
 8014aea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	dd48      	ble.n	8014b82 <__sflush_r+0xae>
 8014af0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014af2:	2e00      	cmp	r6, #0
 8014af4:	d045      	beq.n	8014b82 <__sflush_r+0xae>
 8014af6:	2300      	movs	r3, #0
 8014af8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014afc:	682f      	ldr	r7, [r5, #0]
 8014afe:	6a21      	ldr	r1, [r4, #32]
 8014b00:	602b      	str	r3, [r5, #0]
 8014b02:	d030      	beq.n	8014b66 <__sflush_r+0x92>
 8014b04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	0759      	lsls	r1, r3, #29
 8014b0a:	d505      	bpl.n	8014b18 <__sflush_r+0x44>
 8014b0c:	6863      	ldr	r3, [r4, #4]
 8014b0e:	1ad2      	subs	r2, r2, r3
 8014b10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014b12:	b10b      	cbz	r3, 8014b18 <__sflush_r+0x44>
 8014b14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014b16:	1ad2      	subs	r2, r2, r3
 8014b18:	2300      	movs	r3, #0
 8014b1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014b1c:	6a21      	ldr	r1, [r4, #32]
 8014b1e:	4628      	mov	r0, r5
 8014b20:	47b0      	blx	r6
 8014b22:	1c43      	adds	r3, r0, #1
 8014b24:	89a3      	ldrh	r3, [r4, #12]
 8014b26:	d106      	bne.n	8014b36 <__sflush_r+0x62>
 8014b28:	6829      	ldr	r1, [r5, #0]
 8014b2a:	291d      	cmp	r1, #29
 8014b2c:	d82b      	bhi.n	8014b86 <__sflush_r+0xb2>
 8014b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8014bd8 <__sflush_r+0x104>)
 8014b30:	410a      	asrs	r2, r1
 8014b32:	07d6      	lsls	r6, r2, #31
 8014b34:	d427      	bmi.n	8014b86 <__sflush_r+0xb2>
 8014b36:	2200      	movs	r2, #0
 8014b38:	6062      	str	r2, [r4, #4]
 8014b3a:	04d9      	lsls	r1, r3, #19
 8014b3c:	6922      	ldr	r2, [r4, #16]
 8014b3e:	6022      	str	r2, [r4, #0]
 8014b40:	d504      	bpl.n	8014b4c <__sflush_r+0x78>
 8014b42:	1c42      	adds	r2, r0, #1
 8014b44:	d101      	bne.n	8014b4a <__sflush_r+0x76>
 8014b46:	682b      	ldr	r3, [r5, #0]
 8014b48:	b903      	cbnz	r3, 8014b4c <__sflush_r+0x78>
 8014b4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014b4e:	602f      	str	r7, [r5, #0]
 8014b50:	b1b9      	cbz	r1, 8014b82 <__sflush_r+0xae>
 8014b52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014b56:	4299      	cmp	r1, r3
 8014b58:	d002      	beq.n	8014b60 <__sflush_r+0x8c>
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	f7ff fb40 	bl	80141e0 <_free_r>
 8014b60:	2300      	movs	r3, #0
 8014b62:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b64:	e00d      	b.n	8014b82 <__sflush_r+0xae>
 8014b66:	2301      	movs	r3, #1
 8014b68:	4628      	mov	r0, r5
 8014b6a:	47b0      	blx	r6
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	1c50      	adds	r0, r2, #1
 8014b70:	d1c9      	bne.n	8014b06 <__sflush_r+0x32>
 8014b72:	682b      	ldr	r3, [r5, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d0c6      	beq.n	8014b06 <__sflush_r+0x32>
 8014b78:	2b1d      	cmp	r3, #29
 8014b7a:	d001      	beq.n	8014b80 <__sflush_r+0xac>
 8014b7c:	2b16      	cmp	r3, #22
 8014b7e:	d11e      	bne.n	8014bbe <__sflush_r+0xea>
 8014b80:	602f      	str	r7, [r5, #0]
 8014b82:	2000      	movs	r0, #0
 8014b84:	e022      	b.n	8014bcc <__sflush_r+0xf8>
 8014b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b8a:	b21b      	sxth	r3, r3
 8014b8c:	e01b      	b.n	8014bc6 <__sflush_r+0xf2>
 8014b8e:	690f      	ldr	r7, [r1, #16]
 8014b90:	2f00      	cmp	r7, #0
 8014b92:	d0f6      	beq.n	8014b82 <__sflush_r+0xae>
 8014b94:	0793      	lsls	r3, r2, #30
 8014b96:	680e      	ldr	r6, [r1, #0]
 8014b98:	bf08      	it	eq
 8014b9a:	694b      	ldreq	r3, [r1, #20]
 8014b9c:	600f      	str	r7, [r1, #0]
 8014b9e:	bf18      	it	ne
 8014ba0:	2300      	movne	r3, #0
 8014ba2:	eba6 0807 	sub.w	r8, r6, r7
 8014ba6:	608b      	str	r3, [r1, #8]
 8014ba8:	f1b8 0f00 	cmp.w	r8, #0
 8014bac:	dde9      	ble.n	8014b82 <__sflush_r+0xae>
 8014bae:	6a21      	ldr	r1, [r4, #32]
 8014bb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014bb2:	4643      	mov	r3, r8
 8014bb4:	463a      	mov	r2, r7
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	47b0      	blx	r6
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	dc08      	bgt.n	8014bd0 <__sflush_r+0xfc>
 8014bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014bc6:	81a3      	strh	r3, [r4, #12]
 8014bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd0:	4407      	add	r7, r0
 8014bd2:	eba8 0800 	sub.w	r8, r8, r0
 8014bd6:	e7e7      	b.n	8014ba8 <__sflush_r+0xd4>
 8014bd8:	dfbffffe 	.word	0xdfbffffe

08014bdc <_fflush_r>:
 8014bdc:	b538      	push	{r3, r4, r5, lr}
 8014bde:	690b      	ldr	r3, [r1, #16]
 8014be0:	4605      	mov	r5, r0
 8014be2:	460c      	mov	r4, r1
 8014be4:	b913      	cbnz	r3, 8014bec <_fflush_r+0x10>
 8014be6:	2500      	movs	r5, #0
 8014be8:	4628      	mov	r0, r5
 8014bea:	bd38      	pop	{r3, r4, r5, pc}
 8014bec:	b118      	cbz	r0, 8014bf6 <_fflush_r+0x1a>
 8014bee:	6a03      	ldr	r3, [r0, #32]
 8014bf0:	b90b      	cbnz	r3, 8014bf6 <_fflush_r+0x1a>
 8014bf2:	f7ff f8fb 	bl	8013dec <__sinit>
 8014bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d0f3      	beq.n	8014be6 <_fflush_r+0xa>
 8014bfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014c00:	07d0      	lsls	r0, r2, #31
 8014c02:	d404      	bmi.n	8014c0e <_fflush_r+0x32>
 8014c04:	0599      	lsls	r1, r3, #22
 8014c06:	d402      	bmi.n	8014c0e <_fflush_r+0x32>
 8014c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c0a:	f7ff faa6 	bl	801415a <__retarget_lock_acquire_recursive>
 8014c0e:	4628      	mov	r0, r5
 8014c10:	4621      	mov	r1, r4
 8014c12:	f7ff ff5f 	bl	8014ad4 <__sflush_r>
 8014c16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c18:	07da      	lsls	r2, r3, #31
 8014c1a:	4605      	mov	r5, r0
 8014c1c:	d4e4      	bmi.n	8014be8 <_fflush_r+0xc>
 8014c1e:	89a3      	ldrh	r3, [r4, #12]
 8014c20:	059b      	lsls	r3, r3, #22
 8014c22:	d4e1      	bmi.n	8014be8 <_fflush_r+0xc>
 8014c24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c26:	f7ff fa99 	bl	801415c <__retarget_lock_release_recursive>
 8014c2a:	e7dd      	b.n	8014be8 <_fflush_r+0xc>

08014c2c <fiprintf>:
 8014c2c:	b40e      	push	{r1, r2, r3}
 8014c2e:	b503      	push	{r0, r1, lr}
 8014c30:	4601      	mov	r1, r0
 8014c32:	ab03      	add	r3, sp, #12
 8014c34:	4805      	ldr	r0, [pc, #20]	@ (8014c4c <fiprintf+0x20>)
 8014c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c3a:	6800      	ldr	r0, [r0, #0]
 8014c3c:	9301      	str	r3, [sp, #4]
 8014c3e:	f7ff fca3 	bl	8014588 <_vfiprintf_r>
 8014c42:	b002      	add	sp, #8
 8014c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8014c48:	b003      	add	sp, #12
 8014c4a:	4770      	bx	lr
 8014c4c:	20000180 	.word	0x20000180

08014c50 <__swbuf_r>:
 8014c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c52:	460e      	mov	r6, r1
 8014c54:	4614      	mov	r4, r2
 8014c56:	4605      	mov	r5, r0
 8014c58:	b118      	cbz	r0, 8014c62 <__swbuf_r+0x12>
 8014c5a:	6a03      	ldr	r3, [r0, #32]
 8014c5c:	b90b      	cbnz	r3, 8014c62 <__swbuf_r+0x12>
 8014c5e:	f7ff f8c5 	bl	8013dec <__sinit>
 8014c62:	69a3      	ldr	r3, [r4, #24]
 8014c64:	60a3      	str	r3, [r4, #8]
 8014c66:	89a3      	ldrh	r3, [r4, #12]
 8014c68:	071a      	lsls	r2, r3, #28
 8014c6a:	d501      	bpl.n	8014c70 <__swbuf_r+0x20>
 8014c6c:	6923      	ldr	r3, [r4, #16]
 8014c6e:	b943      	cbnz	r3, 8014c82 <__swbuf_r+0x32>
 8014c70:	4621      	mov	r1, r4
 8014c72:	4628      	mov	r0, r5
 8014c74:	f000 f82a 	bl	8014ccc <__swsetup_r>
 8014c78:	b118      	cbz	r0, 8014c82 <__swbuf_r+0x32>
 8014c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8014c7e:	4638      	mov	r0, r7
 8014c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c82:	6823      	ldr	r3, [r4, #0]
 8014c84:	6922      	ldr	r2, [r4, #16]
 8014c86:	1a98      	subs	r0, r3, r2
 8014c88:	6963      	ldr	r3, [r4, #20]
 8014c8a:	b2f6      	uxtb	r6, r6
 8014c8c:	4283      	cmp	r3, r0
 8014c8e:	4637      	mov	r7, r6
 8014c90:	dc05      	bgt.n	8014c9e <__swbuf_r+0x4e>
 8014c92:	4621      	mov	r1, r4
 8014c94:	4628      	mov	r0, r5
 8014c96:	f7ff ffa1 	bl	8014bdc <_fflush_r>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d1ed      	bne.n	8014c7a <__swbuf_r+0x2a>
 8014c9e:	68a3      	ldr	r3, [r4, #8]
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	60a3      	str	r3, [r4, #8]
 8014ca4:	6823      	ldr	r3, [r4, #0]
 8014ca6:	1c5a      	adds	r2, r3, #1
 8014ca8:	6022      	str	r2, [r4, #0]
 8014caa:	701e      	strb	r6, [r3, #0]
 8014cac:	6962      	ldr	r2, [r4, #20]
 8014cae:	1c43      	adds	r3, r0, #1
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d004      	beq.n	8014cbe <__swbuf_r+0x6e>
 8014cb4:	89a3      	ldrh	r3, [r4, #12]
 8014cb6:	07db      	lsls	r3, r3, #31
 8014cb8:	d5e1      	bpl.n	8014c7e <__swbuf_r+0x2e>
 8014cba:	2e0a      	cmp	r6, #10
 8014cbc:	d1df      	bne.n	8014c7e <__swbuf_r+0x2e>
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	4628      	mov	r0, r5
 8014cc2:	f7ff ff8b 	bl	8014bdc <_fflush_r>
 8014cc6:	2800      	cmp	r0, #0
 8014cc8:	d0d9      	beq.n	8014c7e <__swbuf_r+0x2e>
 8014cca:	e7d6      	b.n	8014c7a <__swbuf_r+0x2a>

08014ccc <__swsetup_r>:
 8014ccc:	b538      	push	{r3, r4, r5, lr}
 8014cce:	4b29      	ldr	r3, [pc, #164]	@ (8014d74 <__swsetup_r+0xa8>)
 8014cd0:	4605      	mov	r5, r0
 8014cd2:	6818      	ldr	r0, [r3, #0]
 8014cd4:	460c      	mov	r4, r1
 8014cd6:	b118      	cbz	r0, 8014ce0 <__swsetup_r+0x14>
 8014cd8:	6a03      	ldr	r3, [r0, #32]
 8014cda:	b90b      	cbnz	r3, 8014ce0 <__swsetup_r+0x14>
 8014cdc:	f7ff f886 	bl	8013dec <__sinit>
 8014ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ce4:	0719      	lsls	r1, r3, #28
 8014ce6:	d422      	bmi.n	8014d2e <__swsetup_r+0x62>
 8014ce8:	06da      	lsls	r2, r3, #27
 8014cea:	d407      	bmi.n	8014cfc <__swsetup_r+0x30>
 8014cec:	2209      	movs	r2, #9
 8014cee:	602a      	str	r2, [r5, #0]
 8014cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cf4:	81a3      	strh	r3, [r4, #12]
 8014cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8014cfa:	e033      	b.n	8014d64 <__swsetup_r+0x98>
 8014cfc:	0758      	lsls	r0, r3, #29
 8014cfe:	d512      	bpl.n	8014d26 <__swsetup_r+0x5a>
 8014d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014d02:	b141      	cbz	r1, 8014d16 <__swsetup_r+0x4a>
 8014d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014d08:	4299      	cmp	r1, r3
 8014d0a:	d002      	beq.n	8014d12 <__swsetup_r+0x46>
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	f7ff fa67 	bl	80141e0 <_free_r>
 8014d12:	2300      	movs	r3, #0
 8014d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8014d16:	89a3      	ldrh	r3, [r4, #12]
 8014d18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014d1c:	81a3      	strh	r3, [r4, #12]
 8014d1e:	2300      	movs	r3, #0
 8014d20:	6063      	str	r3, [r4, #4]
 8014d22:	6923      	ldr	r3, [r4, #16]
 8014d24:	6023      	str	r3, [r4, #0]
 8014d26:	89a3      	ldrh	r3, [r4, #12]
 8014d28:	f043 0308 	orr.w	r3, r3, #8
 8014d2c:	81a3      	strh	r3, [r4, #12]
 8014d2e:	6923      	ldr	r3, [r4, #16]
 8014d30:	b94b      	cbnz	r3, 8014d46 <__swsetup_r+0x7a>
 8014d32:	89a3      	ldrh	r3, [r4, #12]
 8014d34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d3c:	d003      	beq.n	8014d46 <__swsetup_r+0x7a>
 8014d3e:	4621      	mov	r1, r4
 8014d40:	4628      	mov	r0, r5
 8014d42:	f000 f860 	bl	8014e06 <__smakebuf_r>
 8014d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d4a:	f013 0201 	ands.w	r2, r3, #1
 8014d4e:	d00a      	beq.n	8014d66 <__swsetup_r+0x9a>
 8014d50:	2200      	movs	r2, #0
 8014d52:	60a2      	str	r2, [r4, #8]
 8014d54:	6962      	ldr	r2, [r4, #20]
 8014d56:	4252      	negs	r2, r2
 8014d58:	61a2      	str	r2, [r4, #24]
 8014d5a:	6922      	ldr	r2, [r4, #16]
 8014d5c:	b942      	cbnz	r2, 8014d70 <__swsetup_r+0xa4>
 8014d5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014d62:	d1c5      	bne.n	8014cf0 <__swsetup_r+0x24>
 8014d64:	bd38      	pop	{r3, r4, r5, pc}
 8014d66:	0799      	lsls	r1, r3, #30
 8014d68:	bf58      	it	pl
 8014d6a:	6962      	ldrpl	r2, [r4, #20]
 8014d6c:	60a2      	str	r2, [r4, #8]
 8014d6e:	e7f4      	b.n	8014d5a <__swsetup_r+0x8e>
 8014d70:	2000      	movs	r0, #0
 8014d72:	e7f7      	b.n	8014d64 <__swsetup_r+0x98>
 8014d74:	20000180 	.word	0x20000180

08014d78 <memmove>:
 8014d78:	4288      	cmp	r0, r1
 8014d7a:	b510      	push	{r4, lr}
 8014d7c:	eb01 0402 	add.w	r4, r1, r2
 8014d80:	d902      	bls.n	8014d88 <memmove+0x10>
 8014d82:	4284      	cmp	r4, r0
 8014d84:	4623      	mov	r3, r4
 8014d86:	d807      	bhi.n	8014d98 <memmove+0x20>
 8014d88:	1e43      	subs	r3, r0, #1
 8014d8a:	42a1      	cmp	r1, r4
 8014d8c:	d008      	beq.n	8014da0 <memmove+0x28>
 8014d8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d96:	e7f8      	b.n	8014d8a <memmove+0x12>
 8014d98:	4402      	add	r2, r0
 8014d9a:	4601      	mov	r1, r0
 8014d9c:	428a      	cmp	r2, r1
 8014d9e:	d100      	bne.n	8014da2 <memmove+0x2a>
 8014da0:	bd10      	pop	{r4, pc}
 8014da2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014da6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014daa:	e7f7      	b.n	8014d9c <memmove+0x24>

08014dac <abort>:
 8014dac:	b508      	push	{r3, lr}
 8014dae:	2006      	movs	r0, #6
 8014db0:	f000 f88e 	bl	8014ed0 <raise>
 8014db4:	2001      	movs	r0, #1
 8014db6:	f7ee fb7f 	bl	80034b8 <_exit>

08014dba <__swhatbuf_r>:
 8014dba:	b570      	push	{r4, r5, r6, lr}
 8014dbc:	460c      	mov	r4, r1
 8014dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dc2:	2900      	cmp	r1, #0
 8014dc4:	b096      	sub	sp, #88	@ 0x58
 8014dc6:	4615      	mov	r5, r2
 8014dc8:	461e      	mov	r6, r3
 8014dca:	da0d      	bge.n	8014de8 <__swhatbuf_r+0x2e>
 8014dcc:	89a3      	ldrh	r3, [r4, #12]
 8014dce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014dd2:	f04f 0100 	mov.w	r1, #0
 8014dd6:	bf14      	ite	ne
 8014dd8:	2340      	movne	r3, #64	@ 0x40
 8014dda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014dde:	2000      	movs	r0, #0
 8014de0:	6031      	str	r1, [r6, #0]
 8014de2:	602b      	str	r3, [r5, #0]
 8014de4:	b016      	add	sp, #88	@ 0x58
 8014de6:	bd70      	pop	{r4, r5, r6, pc}
 8014de8:	466a      	mov	r2, sp
 8014dea:	f000 f879 	bl	8014ee0 <_fstat_r>
 8014dee:	2800      	cmp	r0, #0
 8014df0:	dbec      	blt.n	8014dcc <__swhatbuf_r+0x12>
 8014df2:	9901      	ldr	r1, [sp, #4]
 8014df4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014df8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014dfc:	4259      	negs	r1, r3
 8014dfe:	4159      	adcs	r1, r3
 8014e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014e04:	e7eb      	b.n	8014dde <__swhatbuf_r+0x24>

08014e06 <__smakebuf_r>:
 8014e06:	898b      	ldrh	r3, [r1, #12]
 8014e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e0a:	079d      	lsls	r5, r3, #30
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	460c      	mov	r4, r1
 8014e10:	d507      	bpl.n	8014e22 <__smakebuf_r+0x1c>
 8014e12:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014e16:	6023      	str	r3, [r4, #0]
 8014e18:	6123      	str	r3, [r4, #16]
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	6163      	str	r3, [r4, #20]
 8014e1e:	b003      	add	sp, #12
 8014e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e22:	ab01      	add	r3, sp, #4
 8014e24:	466a      	mov	r2, sp
 8014e26:	f7ff ffc8 	bl	8014dba <__swhatbuf_r>
 8014e2a:	9f00      	ldr	r7, [sp, #0]
 8014e2c:	4605      	mov	r5, r0
 8014e2e:	4639      	mov	r1, r7
 8014e30:	4630      	mov	r0, r6
 8014e32:	f7fe fda9 	bl	8013988 <_malloc_r>
 8014e36:	b948      	cbnz	r0, 8014e4c <__smakebuf_r+0x46>
 8014e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e3c:	059a      	lsls	r2, r3, #22
 8014e3e:	d4ee      	bmi.n	8014e1e <__smakebuf_r+0x18>
 8014e40:	f023 0303 	bic.w	r3, r3, #3
 8014e44:	f043 0302 	orr.w	r3, r3, #2
 8014e48:	81a3      	strh	r3, [r4, #12]
 8014e4a:	e7e2      	b.n	8014e12 <__smakebuf_r+0xc>
 8014e4c:	89a3      	ldrh	r3, [r4, #12]
 8014e4e:	6020      	str	r0, [r4, #0]
 8014e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e54:	81a3      	strh	r3, [r4, #12]
 8014e56:	9b01      	ldr	r3, [sp, #4]
 8014e58:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014e5c:	b15b      	cbz	r3, 8014e76 <__smakebuf_r+0x70>
 8014e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e62:	4630      	mov	r0, r6
 8014e64:	f000 f84e 	bl	8014f04 <_isatty_r>
 8014e68:	b128      	cbz	r0, 8014e76 <__smakebuf_r+0x70>
 8014e6a:	89a3      	ldrh	r3, [r4, #12]
 8014e6c:	f023 0303 	bic.w	r3, r3, #3
 8014e70:	f043 0301 	orr.w	r3, r3, #1
 8014e74:	81a3      	strh	r3, [r4, #12]
 8014e76:	89a3      	ldrh	r3, [r4, #12]
 8014e78:	431d      	orrs	r5, r3
 8014e7a:	81a5      	strh	r5, [r4, #12]
 8014e7c:	e7cf      	b.n	8014e1e <__smakebuf_r+0x18>

08014e7e <_raise_r>:
 8014e7e:	291f      	cmp	r1, #31
 8014e80:	b538      	push	{r3, r4, r5, lr}
 8014e82:	4605      	mov	r5, r0
 8014e84:	460c      	mov	r4, r1
 8014e86:	d904      	bls.n	8014e92 <_raise_r+0x14>
 8014e88:	2316      	movs	r3, #22
 8014e8a:	6003      	str	r3, [r0, #0]
 8014e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e90:	bd38      	pop	{r3, r4, r5, pc}
 8014e92:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014e94:	b112      	cbz	r2, 8014e9c <_raise_r+0x1e>
 8014e96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e9a:	b94b      	cbnz	r3, 8014eb0 <_raise_r+0x32>
 8014e9c:	4628      	mov	r0, r5
 8014e9e:	f000 f853 	bl	8014f48 <_getpid_r>
 8014ea2:	4622      	mov	r2, r4
 8014ea4:	4601      	mov	r1, r0
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014eac:	f000 b83a 	b.w	8014f24 <_kill_r>
 8014eb0:	2b01      	cmp	r3, #1
 8014eb2:	d00a      	beq.n	8014eca <_raise_r+0x4c>
 8014eb4:	1c59      	adds	r1, r3, #1
 8014eb6:	d103      	bne.n	8014ec0 <_raise_r+0x42>
 8014eb8:	2316      	movs	r3, #22
 8014eba:	6003      	str	r3, [r0, #0]
 8014ebc:	2001      	movs	r0, #1
 8014ebe:	e7e7      	b.n	8014e90 <_raise_r+0x12>
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	4798      	blx	r3
 8014eca:	2000      	movs	r0, #0
 8014ecc:	e7e0      	b.n	8014e90 <_raise_r+0x12>
	...

08014ed0 <raise>:
 8014ed0:	4b02      	ldr	r3, [pc, #8]	@ (8014edc <raise+0xc>)
 8014ed2:	4601      	mov	r1, r0
 8014ed4:	6818      	ldr	r0, [r3, #0]
 8014ed6:	f7ff bfd2 	b.w	8014e7e <_raise_r>
 8014eda:	bf00      	nop
 8014edc:	20000180 	.word	0x20000180

08014ee0 <_fstat_r>:
 8014ee0:	b538      	push	{r3, r4, r5, lr}
 8014ee2:	4d07      	ldr	r5, [pc, #28]	@ (8014f00 <_fstat_r+0x20>)
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	4608      	mov	r0, r1
 8014eea:	4611      	mov	r1, r2
 8014eec:	602b      	str	r3, [r5, #0]
 8014eee:	f7ee fb33 	bl	8003558 <_fstat>
 8014ef2:	1c43      	adds	r3, r0, #1
 8014ef4:	d102      	bne.n	8014efc <_fstat_r+0x1c>
 8014ef6:	682b      	ldr	r3, [r5, #0]
 8014ef8:	b103      	cbz	r3, 8014efc <_fstat_r+0x1c>
 8014efa:	6023      	str	r3, [r4, #0]
 8014efc:	bd38      	pop	{r3, r4, r5, pc}
 8014efe:	bf00      	nop
 8014f00:	20010f74 	.word	0x20010f74

08014f04 <_isatty_r>:
 8014f04:	b538      	push	{r3, r4, r5, lr}
 8014f06:	4d06      	ldr	r5, [pc, #24]	@ (8014f20 <_isatty_r+0x1c>)
 8014f08:	2300      	movs	r3, #0
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	4608      	mov	r0, r1
 8014f0e:	602b      	str	r3, [r5, #0]
 8014f10:	f7ee fb32 	bl	8003578 <_isatty>
 8014f14:	1c43      	adds	r3, r0, #1
 8014f16:	d102      	bne.n	8014f1e <_isatty_r+0x1a>
 8014f18:	682b      	ldr	r3, [r5, #0]
 8014f1a:	b103      	cbz	r3, 8014f1e <_isatty_r+0x1a>
 8014f1c:	6023      	str	r3, [r4, #0]
 8014f1e:	bd38      	pop	{r3, r4, r5, pc}
 8014f20:	20010f74 	.word	0x20010f74

08014f24 <_kill_r>:
 8014f24:	b538      	push	{r3, r4, r5, lr}
 8014f26:	4d07      	ldr	r5, [pc, #28]	@ (8014f44 <_kill_r+0x20>)
 8014f28:	2300      	movs	r3, #0
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	4608      	mov	r0, r1
 8014f2e:	4611      	mov	r1, r2
 8014f30:	602b      	str	r3, [r5, #0]
 8014f32:	f7ee fab1 	bl	8003498 <_kill>
 8014f36:	1c43      	adds	r3, r0, #1
 8014f38:	d102      	bne.n	8014f40 <_kill_r+0x1c>
 8014f3a:	682b      	ldr	r3, [r5, #0]
 8014f3c:	b103      	cbz	r3, 8014f40 <_kill_r+0x1c>
 8014f3e:	6023      	str	r3, [r4, #0]
 8014f40:	bd38      	pop	{r3, r4, r5, pc}
 8014f42:	bf00      	nop
 8014f44:	20010f74 	.word	0x20010f74

08014f48 <_getpid_r>:
 8014f48:	f7ee ba9e 	b.w	8003488 <_getpid>

08014f4c <_init>:
 8014f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f4e:	bf00      	nop
 8014f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f52:	bc08      	pop	{r3}
 8014f54:	469e      	mov	lr, r3
 8014f56:	4770      	bx	lr

08014f58 <_fini>:
 8014f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f5a:	bf00      	nop
 8014f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f5e:	bc08      	pop	{r3}
 8014f60:	469e      	mov	lr, r3
 8014f62:	4770      	bx	lr
