
yiao_446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158f4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000edc  08015ac8  08015ac8  00016ac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080169a4  080169a4  000181d0  2**0
                  CONTENTS
  4 .ARM          00000008  080169a4  080169a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080169ac  080169ac  000181d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080169ac  080169ac  000179ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080169b8  080169b8  000179b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  080169bc  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010e6c  200001d0  08016b8c  000181d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001103c  08016b8c  0001903c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000181d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a32  00000000  00000000  00018200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053d7  00000000  00000000  0003fc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e0  00000000  00000000  00045010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013f3  00000000  00000000  000469f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002caf6  00000000  00000000  00047de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023243  00000000  00000000  000748d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6ac9  00000000  00000000  00097b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0018e5e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b38  00000000  00000000  0018e65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00196194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015aac 	.word	0x08015aac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08015aac 	.word	0x08015aac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_ldivmod>:
 8000b1c:	b97b      	cbnz	r3, 8000b3e <__aeabi_ldivmod+0x22>
 8000b1e:	b972      	cbnz	r2, 8000b3e <__aeabi_ldivmod+0x22>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bfbe      	ittt	lt
 8000b24:	2000      	movlt	r0, #0
 8000b26:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000b2a:	e006      	blt.n	8000b3a <__aeabi_ldivmod+0x1e>
 8000b2c:	bf08      	it	eq
 8000b2e:	2800      	cmpeq	r0, #0
 8000b30:	bf1c      	itt	ne
 8000b32:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000b36:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3a:	f000 b9b5 	b.w	8000ea8 <__aeabi_idiv0>
 8000b3e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b46:	2900      	cmp	r1, #0
 8000b48:	db09      	blt.n	8000b5e <__aeabi_ldivmod+0x42>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	db1a      	blt.n	8000b84 <__aeabi_ldivmod+0x68>
 8000b4e:	f000 f84d 	bl	8000bec <__udivmoddi4>
 8000b52:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5a:	b004      	add	sp, #16
 8000b5c:	4770      	bx	lr
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db1b      	blt.n	8000ba0 <__aeabi_ldivmod+0x84>
 8000b68:	f000 f840 	bl	8000bec <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4240      	negs	r0, r0
 8000b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b7c:	4252      	negs	r2, r2
 8000b7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b82:	4770      	bx	lr
 8000b84:	4252      	negs	r2, r2
 8000b86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b8a:	f000 f82f 	bl	8000bec <__udivmoddi4>
 8000b8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b96:	b004      	add	sp, #16
 8000b98:	4240      	negs	r0, r0
 8000b9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b9e:	4770      	bx	lr
 8000ba0:	4252      	negs	r2, r2
 8000ba2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ba6:	f000 f821 	bl	8000bec <__udivmoddi4>
 8000baa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb2:	b004      	add	sp, #16
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	460c      	mov	r4, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14e      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	458c      	cmp	ip, r1
 8000bfc:	4686      	mov	lr, r0
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	d962      	bls.n	8000cca <__udivmoddi4+0xde>
 8000c04:	b14a      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c06:	f1c2 0320 	rsb	r3, r2, #32
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c14:	4319      	orrs	r1, r3
 8000c16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1e:	fa1f f68c 	uxth.w	r6, ip
 8000c22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c32:	fb04 f106 	mul.w	r1, r4, r6
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c42:	f080 8112 	bcs.w	8000e6a <__udivmoddi4+0x27e>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 810f 	bls.w	8000e6a <__udivmoddi4+0x27e>
 8000c4c:	3c02      	subs	r4, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c62:	fb00 f606 	mul.w	r6, r0, r6
 8000c66:	429e      	cmp	r6, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x94>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c72:	f080 80fc 	bcs.w	8000e6e <__udivmoddi4+0x282>
 8000c76:	429e      	cmp	r6, r3
 8000c78:	f240 80f9 	bls.w	8000e6e <__udivmoddi4+0x282>
 8000c7c:	4463      	add	r3, ip
 8000c7e:	3802      	subs	r0, #2
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c86:	2100      	movs	r1, #0
 8000c88:	b11d      	cbz	r5, 8000c92 <__udivmoddi4+0xa6>
 8000c8a:	40d3      	lsrs	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d905      	bls.n	8000ca6 <__udivmoddi4+0xba>
 8000c9a:	b10d      	cbz	r5, 8000ca0 <__udivmoddi4+0xb4>
 8000c9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e7f5      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000ca6:	fab3 f183 	clz	r1, r3
 8000caa:	2900      	cmp	r1, #0
 8000cac:	d146      	bne.n	8000d3c <__udivmoddi4+0x150>
 8000cae:	42a3      	cmp	r3, r4
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xcc>
 8000cb2:	4290      	cmp	r0, r2
 8000cb4:	f0c0 80f0 	bcc.w	8000e98 <__udivmoddi4+0x2ac>
 8000cb8:	1a86      	subs	r6, r0, r2
 8000cba:	eb64 0303 	sbc.w	r3, r4, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	d0e6      	beq.n	8000c92 <__udivmoddi4+0xa6>
 8000cc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc8:	e7e3      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f040 8090 	bne.w	8000df0 <__udivmoddi4+0x204>
 8000cd0:	eba1 040c 	sub.w	r4, r1, ip
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa1f f78c 	uxth.w	r7, ip
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb08 4416 	mls	r4, r8, r6, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb07 f006 	mul.w	r0, r7, r6
 8000cf2:	4298      	cmp	r0, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x11c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x11a>
 8000d00:	4298      	cmp	r0, r3
 8000d02:	f200 80cd 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d06:	4626      	mov	r6, r4
 8000d08:	1a1c      	subs	r4, r3, r0
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d12:	fb08 4410 	mls	r4, r8, r0, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb00 f707 	mul.w	r7, r0, r7
 8000d1e:	429f      	cmp	r7, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x148>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x146>
 8000d2c:	429f      	cmp	r7, r3
 8000d2e:	f200 80b0 	bhi.w	8000e92 <__udivmoddi4+0x2a6>
 8000d32:	4620      	mov	r0, r4
 8000d34:	1bdb      	subs	r3, r3, r7
 8000d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0x9c>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 f706 	lsr.w	r7, r2, r6
 8000d46:	431f      	orrs	r7, r3
 8000d48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d50:	ea43 030c 	orr.w	r3, r3, ip
 8000d54:	40f4      	lsrs	r4, r6
 8000d56:	fa00 f801 	lsl.w	r8, r0, r1
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d60:	fbb4 fef0 	udiv	lr, r4, r0
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	fb00 441e 	mls	r4, r0, lr, r4
 8000d6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d70:	fb0e f90c 	mul.w	r9, lr, ip
 8000d74:	45a1      	cmp	r9, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90a      	bls.n	8000d92 <__udivmoddi4+0x1a6>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d82:	f080 8084 	bcs.w	8000e8e <__udivmoddi4+0x2a2>
 8000d86:	45a1      	cmp	r9, r4
 8000d88:	f240 8081 	bls.w	8000e8e <__udivmoddi4+0x2a2>
 8000d8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	eba4 0409 	sub.w	r4, r4, r9
 8000d96:	fa1f f983 	uxth.w	r9, r3
 8000d9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000da2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x1d2>
 8000dae:	193c      	adds	r4, r7, r4
 8000db0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db4:	d267      	bcs.n	8000e86 <__udivmoddi4+0x29a>
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d965      	bls.n	8000e86 <__udivmoddi4+0x29a>
 8000dba:	3b02      	subs	r3, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc6:	eba4 040c 	sub.w	r4, r4, ip
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	46ce      	mov	lr, r9
 8000dce:	469c      	mov	ip, r3
 8000dd0:	d351      	bcc.n	8000e76 <__udivmoddi4+0x28a>
 8000dd2:	d04e      	beq.n	8000e72 <__udivmoddi4+0x286>
 8000dd4:	b155      	cbz	r5, 8000dec <__udivmoddi4+0x200>
 8000dd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000dda:	eb64 040c 	sbc.w	r4, r4, ip
 8000dde:	fa04 f606 	lsl.w	r6, r4, r6
 8000de2:	40cb      	lsrs	r3, r1
 8000de4:	431e      	orrs	r6, r3
 8000de6:	40cc      	lsrs	r4, r1
 8000de8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dec:	2100      	movs	r1, #0
 8000dee:	e750      	b.n	8000c92 <__udivmoddi4+0xa6>
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000e00:	4094      	lsls	r4, r2
 8000e02:	430c      	orrs	r4, r1
 8000e04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0c:	fa1f f78c 	uxth.w	r7, ip
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3110 	mls	r1, r8, r0, r3
 8000e18:	0c23      	lsrs	r3, r4, #16
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	fb00 f107 	mul.w	r1, r0, r7
 8000e22:	4299      	cmp	r1, r3
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x24c>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2e:	d22c      	bcs.n	8000e8a <__udivmoddi4+0x29e>
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d92a      	bls.n	8000e8a <__udivmoddi4+0x29e>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e40:	fb08 3311 	mls	r3, r8, r1, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb01 f307 	mul.w	r3, r1, r7
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x276>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e58:	d213      	bcs.n	8000e82 <__udivmoddi4+0x296>
 8000e5a:	42a3      	cmp	r3, r4
 8000e5c:	d911      	bls.n	8000e82 <__udivmoddi4+0x296>
 8000e5e:	3902      	subs	r1, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	1ae4      	subs	r4, r4, r3
 8000e64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e68:	e739      	b.n	8000cde <__udivmoddi4+0xf2>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	e6f0      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e706      	b.n	8000c80 <__udivmoddi4+0x94>
 8000e72:	45c8      	cmp	r8, r9
 8000e74:	d2ae      	bcs.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7e:	3801      	subs	r0, #1
 8000e80:	e7a8      	b.n	8000dd4 <__udivmoddi4+0x1e8>
 8000e82:	4631      	mov	r1, r6
 8000e84:	e7ed      	b.n	8000e62 <__udivmoddi4+0x276>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e799      	b.n	8000dbe <__udivmoddi4+0x1d2>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	e7d4      	b.n	8000e38 <__udivmoddi4+0x24c>
 8000e8e:	46d6      	mov	lr, sl
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1a6>
 8000e92:	4463      	add	r3, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e74d      	b.n	8000d34 <__udivmoddi4+0x148>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e70f      	b.n	8000cc0 <__udivmoddi4+0xd4>
 8000ea0:	3e02      	subs	r6, #2
 8000ea2:	4463      	add	r3, ip
 8000ea4:	e730      	b.n	8000d08 <__udivmoddi4+0x11c>
 8000ea6:	bf00      	nop

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eba:	eef0 7ae7 	vabs.f32	s15, s15
 8000ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_ZN8DC_motor5setupEv>:
/* DC_motor.cpp */
#include "DC_motor.h"

void DC_motor::setup() {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    HAL_TIM_Encoder_Start(this->_enc_htim, TIM_CHANNEL_ALL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	213c      	movs	r1, #60	@ 0x3c
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 f8a6 	bl	800602c <HAL_TIM_Encoder_Start>
    HAL_TIM_PWM_Start(this->_PWM_htim, this->_PWM_TIM_CHANNEL);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4610      	mov	r0, r2
 8000eec:	f004 ff30 	bl	8005d50 <HAL_TIM_PWM_Start>
    this->_arr = __HAL_TIM_GET_AUTORELOAD(this->_PWM_htim);//理論上就是1000，不應該改變
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZN8DC_motor8setspeedEf>:

void DC_motor::setspeed(float goal_speed) {
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	ed87 0a00 	vstr	s0, [r7]
    this->_sp = goal_speed;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	683a      	ldr	r2, [r7, #0]
 8000f1e:	619a      	str	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_ZN8DC_motor7set_pidEff>:

void DC_motor::set_pid(float kp, float ki){
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f38:	edc7 0a01 	vstr	s1, [r7, #4]
	this->_kp = kp;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
	this->_ki = ki;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_ZN8DC_motor12update_speedEi>:

void DC_motor::update_speed(int sign) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
    this->_enc = __HAL_TIM_GET_COUNTER(this->_enc_htim);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f66:	b21a      	sxth	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_TIM_SET_COUNTER(this->_enc_htim, 0);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24
    this->_speed = sign * (float)this->_enc / (4.0f * this->_resolution * span * this->_reduction_ratio);// 100.0 *   //每秒圈數
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	ee07 3a90 	vmov	s15, r3
 8000f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000f9a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8000f9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_ZN8DC_motor6PI_runEi>:

void DC_motor::PI_run(int index) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    float bound = 1.0f / this->_ki;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe4:	edc7 7a03 	vstr	s15, [r7, #12]
    this->_error = this->_sp - this->_speed;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edc3 7a08 	vstr	s15, [r3, #32]

    this->_integral += this->_error * span;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edd3 6a08 	vldr	s13, [r3, #32]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//    differential = error - pre_error;
    if(this->_integral > bound) this->_integral = bound;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001024:	ed97 7a03 	vldr	s14, [r7, #12]
 8001028:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d503      	bpl.n	800103a <_ZN8DC_motor6PI_runEi+0x6e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	625a      	str	r2, [r3, #36]	@ 0x24
 8001038:	e012      	b.n	8001060 <_ZN8DC_motor6PI_runEi+0x94>
    else if(this->_integral < -bound) this->_integral = -bound;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001040:	edd7 7a03 	vldr	s15, [r7, #12]
 8001044:	eef1 7a67 	vneg.f32	s15, s15
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	d506      	bpl.n	8001060 <_ZN8DC_motor6PI_runEi+0x94>
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	eef1 7a67 	vneg.f32	s15, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//    else if (fabs(this->_speed) < 0.0005) this->_integral =0;
//    if (ki * integral >= 1) ki * integral =0.01;

    this->_u = this->_kp * this->_error + this->_ki * this->_integral ;//+ kd * differential
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	edd3 7a08 	vldr	s15, [r3, #32]
 800106c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//    pre_error = error;

    if (this->_u > 1) this->_u = 1;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001090:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	dd04      	ble.n	80010a8 <_ZN8DC_motor6PI_runEi+0xdc>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80010a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a6:	e00c      	b.n	80010c2 <_ZN8DC_motor6PI_runEi+0xf6>
    else if (this->_u < -1) this->_u = -1;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010ae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d502      	bpl.n	80010c2 <_ZN8DC_motor6PI_runEi+0xf6>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a34      	ldr	r2, [pc, #208]	@ (8001190 <_ZN8DC_motor6PI_runEi+0x1c4>)
 80010c0:	631a      	str	r2, [r3, #48]	@ 0x30

    this->_pulse = fabs(this->_u) * this->_arr;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	f7ff feee 	bl	8000eac <_ZSt4fabsf>
 80010d0:	eeb0 7a40 	vmov.f32	s14, s0
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010e2:	ee17 2a90 	vmov	r2, s15
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(this->_u > 0) HAL_GPIO_WritePin(this->_dirPort, this->_dirPin, GPIO_PIN_SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f8:	dd08      	ble.n	800110c <_ZN8DC_motor6PI_runEi+0x140>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6898      	ldr	r0, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	899b      	ldrh	r3, [r3, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	4619      	mov	r1, r3
 8001106:	f003 ff4d 	bl	8004fa4 <HAL_GPIO_WritePin>
 800110a:	e007      	b.n	800111c <_ZN8DC_motor6PI_runEi+0x150>
    else HAL_GPIO_WritePin(this->_dirPort, this->_dirPin, GPIO_PIN_RESET);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6898      	ldr	r0, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	899b      	ldrh	r3, [r3, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	4619      	mov	r1, r3
 8001118:	f003 ff44 	bl	8004fa4 <HAL_GPIO_WritePin>

    if(this->_pulse <= range[index]) this->_pulse = 0;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001120:	491c      	ldr	r1, [pc, #112]	@ (8001194 <_ZN8DC_motor6PI_runEi+0x1c8>)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001128:	429a      	cmp	r2, r3
 800112a:	dc02      	bgt.n	8001132 <_ZN8DC_motor6PI_runEi+0x166>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	651a      	str	r2, [r3, #80]	@ 0x50
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d107      	bne.n	800114a <_ZN8DC_motor6PI_runEi+0x17e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001148:	e01e      	b.n	8001188 <_ZN8DC_motor6PI_runEi+0x1bc>
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d107      	bne.n	8001162 <_ZN8DC_motor6PI_runEi+0x196>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001160:	e012      	b.n	8001188 <_ZN8DC_motor6PI_runEi+0x1bc>
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	2b08      	cmp	r3, #8
 8001168:	d107      	bne.n	800117a <_ZN8DC_motor6PI_runEi+0x1ae>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001178:	e006      	b.n	8001188 <_ZN8DC_motor6PI_runEi+0x1bc>
	__HAL_TIM_SET_COMPARE(this->_PWM_htim, this->_PWM_TIM_CHANNEL, (uint16_t)this->_pulse);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	bf800000 	.word	0xbf800000
 8001194:	2000002c 	.word	0x2000002c

08001198 <_ZN8DC_motor9get_speedEv>:

float DC_motor::get_speed() {
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    return this->_speed;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	ee07 3a90 	vmov	s15, r3
}
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>:
#include "math.h"
#include "chassis.h"//for range

class DC_motor {
public:
    DC_motor(TIM_HandleTypeDef* enc, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* pwm, uint32_t ch)
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	807b      	strh	r3, [r7, #2]
    		: _enc_htim(enc), _dirPort(port), _dirPin(pin), _PWM_htim(pwm), _PWM_TIM_CHANNEL(ch) {}
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xac>)
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	819a      	strh	r2, [r3, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	615a      	str	r2, [r3, #20]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	@ 0x28
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	@ 0x30
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	@ 0x34
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	639a      	str	r2, [r3, #56]	@ 0x38
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	63da      	str	r2, [r3, #60]	@ 0x3c
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f04f 4287 	mov.w	r2, #1132462080	@ 0x43800000
 8001240:	645a      	str	r2, [r3, #68]	@ 0x44
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4a08      	ldr	r2, [pc, #32]	@ (8001268 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb0>)
 8001246:	649a      	str	r2, [r3, #72]	@ 0x48
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4a08      	ldr	r2, [pc, #32]	@ (800126c <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m+0xb4>)
 800124c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	651a      	str	r2, [r3, #80]	@ 0x50
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	3a83126f 	.word	0x3a83126f
 8001268:	41c00000 	.word	0x41c00000
 800126c:	447a0000 	.word	0x447a0000

08001270 <_Z13chassis_setupv>:
	wheel_BR.setspeed(try_speed);
	wheel_BR.update_speed(1);
	wheel_BR.PI_run(2);
}

void chassis_setup() {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim5);
 8001274:	4822      	ldr	r0, [pc, #136]	@ (8001300 <_Z13chassis_setupv+0x90>)
 8001276:	f004 fcab 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
    wheel_FR.setup();
 800127a:	4822      	ldr	r0, [pc, #136]	@ (8001304 <_Z13chassis_setupv+0x94>)
 800127c:	f7ff fe26 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_FR.set_pid(kp[0], ki[0]);
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <_Z13chassis_setupv+0x98>)
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <_Z13chassis_setupv+0x9c>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	eef0 0a47 	vmov.f32	s1, s14
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	481b      	ldr	r0, [pc, #108]	@ (8001304 <_Z13chassis_setupv+0x94>)
 8001296:	f7ff fe49 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
    wheel_FL.setup();
 800129a:	481d      	ldr	r0, [pc, #116]	@ (8001310 <_Z13chassis_setupv+0xa0>)
 800129c:	f7ff fe16 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_FL.set_pid(kp[1], ki[1]);
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <_Z13chassis_setupv+0x98>)
 80012a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <_Z13chassis_setupv+0x9c>)
 80012a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ac:	eef0 0a47 	vmov.f32	s1, s14
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	4816      	ldr	r0, [pc, #88]	@ (8001310 <_Z13chassis_setupv+0xa0>)
 80012b6:	f7ff fe39 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
    wheel_BR.setup();
 80012ba:	4816      	ldr	r0, [pc, #88]	@ (8001314 <_Z13chassis_setupv+0xa4>)
 80012bc:	f7ff fe06 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_BR.set_pid(kp[2], ki[2]);
 80012c0:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <_Z13chassis_setupv+0x98>)
 80012c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <_Z13chassis_setupv+0x9c>)
 80012c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012cc:	eef0 0a47 	vmov.f32	s1, s14
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	480f      	ldr	r0, [pc, #60]	@ (8001314 <_Z13chassis_setupv+0xa4>)
 80012d6:	f7ff fe29 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
    wheel_BL.setup();
 80012da:	480f      	ldr	r0, [pc, #60]	@ (8001318 <_Z13chassis_setupv+0xa8>)
 80012dc:	f7ff fdf6 	bl	8000ecc <_ZN8DC_motor5setupEv>
    wheel_BL.set_pid(kp[3], ki[3]);
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <_Z13chassis_setupv+0x98>)
 80012e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <_Z13chassis_setupv+0x9c>)
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	eef0 0a47 	vmov.f32	s1, s14
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	4808      	ldr	r0, [pc, #32]	@ (8001318 <_Z13chassis_setupv+0xa8>)
 80012f6:	f7ff fe19 	bl	8000f2c <_ZN8DC_motor7set_pidEff>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000493c 	.word	0x2000493c
 8001304:	20000204 	.word	0x20000204
 8001308:	2000000c 	.word	0x2000000c
 800130c:	2000001c 	.word	0x2000001c
 8001310:	20000258 	.word	0x20000258
 8001314:	200002ac 	.word	0x200002ac
 8001318:	20000300 	.word	0x20000300

0800131c <_Z18mecan_IK_transformfff>:
	wheel_FL.set_pid(kp[1], ki[1]);
	wheel_BR.set_pid(kp[2], ki[2]);
	wheel_BL.set_pid(kp[3], ki[3]);
}

void mecan_IK_transform(float _v_x, float _v_y, float _v_w) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	ed87 0a03 	vstr	s0, [r7, #12]
 8001326:	edc7 0a02 	vstr	s1, [r7, #8]
 800132a:	ed87 1a01 	vstr	s2, [r7, #4]
    float factor = (chassis_width + chassis_length) / (pi * wheel_diameter);//2.0f *
 800132e:	4b35      	ldr	r3, [pc, #212]	@ (8001404 <_Z18mecan_IK_transformfff+0xe8>)
 8001330:	ed93 7a00 	vldr	s14, [r3]
 8001334:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <_Z18mecan_IK_transformfff+0xec>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <_Z18mecan_IK_transformfff+0xf0>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001410 <_Z18mecan_IK_transformfff+0xf4>
 8001348:	ee27 7a87 	vmul.f32	s14, s15, s14
 800134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001350:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float v1 = -_v_x + _v_y + _v_w * factor;
 8001354:	ed97 7a02 	vldr	s14, [r7, #8]
 8001358:	edd7 7a03 	vldr	s15, [r7, #12]
 800135c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001360:	edd7 6a01 	vldr	s13, [r7, #4]
 8001364:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a08 	vstr	s15, [r7, #32]
    float v2 = _v_x + _v_y - _v_w * factor;
 8001374:	ed97 7a03 	vldr	s14, [r7, #12]
 8001378:	edd7 7a02 	vldr	s15, [r7, #8]
 800137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001380:	edd7 6a01 	vldr	s13, [r7, #4]
 8001384:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	edc7 7a07 	vstr	s15, [r7, #28]
    float v3 = _v_x + _v_y + _v_w * factor;
 8001394:	ed97 7a03 	vldr	s14, [r7, #12]
 8001398:	edd7 7a02 	vldr	s15, [r7, #8]
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80013a4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b0:	edc7 7a06 	vstr	s15, [r7, #24]
    float v4 = -_v_x + _v_y - _v_w * factor;
 80013b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80013b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80013c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d0:	edc7 7a05 	vstr	s15, [r7, #20]
    wheel_FR.setspeed(v1);
 80013d4:	ed97 0a08 	vldr	s0, [r7, #32]
 80013d8:	480e      	ldr	r0, [pc, #56]	@ (8001414 <_Z18mecan_IK_transformfff+0xf8>)
 80013da:	f7ff fd98 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
    wheel_FL.setspeed(v2);
 80013de:	ed97 0a07 	vldr	s0, [r7, #28]
 80013e2:	480d      	ldr	r0, [pc, #52]	@ (8001418 <_Z18mecan_IK_transformfff+0xfc>)
 80013e4:	f7ff fd93 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
    wheel_BR.setspeed(v3);
 80013e8:	ed97 0a06 	vldr	s0, [r7, #24]
 80013ec:	480b      	ldr	r0, [pc, #44]	@ (800141c <_Z18mecan_IK_transformfff+0x100>)
 80013ee:	f7ff fd8e 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
    wheel_BL.setspeed(v4);
 80013f2:	ed97 0a05 	vldr	s0, [r7, #20]
 80013f6:	480a      	ldr	r0, [pc, #40]	@ (8001420 <_Z18mecan_IK_transformfff+0x104>)
 80013f8:	f7ff fd89 	bl	8000f0e <_ZN8DC_motor8setspeedEf>
}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004
 800140c:	20000008 	.word	0x20000008
 8001410:	40490fda 	.word	0x40490fda
 8001414:	20000204 	.word	0x20000204
 8001418:	20000258 	.word	0x20000258
 800141c:	200002ac 	.word	0x200002ac
 8001420:	20000300 	.word	0x20000300

08001424 <_Z18mecan_FK_transformv>:

void mecan_FK_transform() {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
    float v1 = wheel_FR.get_speed() * wheel_diameter * pi;
 800142a:	4844      	ldr	r0, [pc, #272]	@ (800153c <_Z18mecan_FK_transformv+0x118>)
 800142c:	f7ff feb4 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001430:	eeb0 7a40 	vmov.f32	s14, s0
 8001434:	4b42      	ldr	r3, [pc, #264]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	edc7 7a03 	vstr	s15, [r7, #12]
    float v2 = wheel_FL.get_speed() * wheel_diameter * pi;
 800144a:	483f      	ldr	r0, [pc, #252]	@ (8001548 <_Z18mecan_FK_transformv+0x124>)
 800144c:	f7ff fea4 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001450:	eeb0 7a40 	vmov.f32	s14, s0
 8001454:	4b3a      	ldr	r3, [pc, #232]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	edc7 7a02 	vstr	s15, [r7, #8]
    float v3 = wheel_BR.get_speed() * wheel_diameter * pi;
 800146a:	4838      	ldr	r0, [pc, #224]	@ (800154c <_Z18mecan_FK_transformv+0x128>)
 800146c:	f7ff fe94 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001470:	eeb0 7a40 	vmov.f32	s14, s0
 8001474:	4b32      	ldr	r3, [pc, #200]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 8001482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001486:	edc7 7a01 	vstr	s15, [r7, #4]
    float v4 = wheel_BL.get_speed() * wheel_diameter * pi;
 800148a:	4831      	ldr	r0, [pc, #196]	@ (8001550 <_Z18mecan_FK_transformv+0x12c>)
 800148c:	f7ff fe84 	bl	8001198 <_ZN8DC_motor9get_speedEv>
 8001490:	eeb0 7a40 	vmov.f32	s14, s0
 8001494:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <_Z18mecan_FK_transformv+0x11c>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001544 <_Z18mecan_FK_transformv+0x120>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	edc7 7a00 	vstr	s15, [r7]
    v_x = (-v1 + v2 + v3 - v4) / 4.0f;
 80014aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80014ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014be:	edd7 7a00 	vldr	s15, [r7]
 80014c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <_Z18mecan_FK_transformv+0x130>)
 80014d0:	edc3 7a00 	vstr	s15, [r3]
    v_y = (v1 + v2 + v3 + v4) / 4.0f;
 80014d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	edd7 7a00 	vldr	s15, [r7]
 80014ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f0:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80014f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f8:	4b17      	ldr	r3, [pc, #92]	@ (8001558 <_Z18mecan_FK_transformv+0x134>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]
    v_w = (-v1 +   v2 - v3 + v4) / (chassis_width + chassis_length);
 80014fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001502:	edd7 7a03 	vldr	s15, [r7, #12]
 8001506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800150a:	edd7 7a01 	vldr	s15, [r7, #4]
 800150e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	ee77 6a27 	vadd.f32	s13, s14, s15
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_Z18mecan_FK_transformv+0x138>)
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <_Z18mecan_FK_transformv+0x13c>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152e:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <_Z18mecan_FK_transformv+0x140>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000204 	.word	0x20000204
 8001540:	20000008 	.word	0x20000008
 8001544:	40490fda 	.word	0x40490fda
 8001548:	20000258 	.word	0x20000258
 800154c:	200002ac 	.word	0x200002ac
 8001550:	20000300 	.word	0x20000300
 8001554:	200001ec 	.word	0x200001ec
 8001558:	200001f0 	.word	0x200001f0
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	200001f4 	.word	0x200001f4

08001568 <_Z12localizationf>:

void localization(float dt) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	ed87 0a01 	vstr	s0, [r7, #4]
//    x += v_x * dt;
//    y += v_y * dt;
//    theta += v_w * dt;
    float cosT = cosf(theta);
 8001572:	4b32      	ldr	r3, [pc, #200]	@ (800163c <_Z12localizationf+0xd4>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f012 f9a0 	bl	80138c0 <cosf>
 8001580:	ed87 0a05 	vstr	s0, [r7, #20]
    float sinT = sinf(theta);
 8001584:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <_Z12localizationf+0xd4>)
 8001586:	edd3 7a00 	vldr	s15, [r3]
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	f012 f9db 	bl	8013948 <sinf>
 8001592:	ed87 0a04 	vstr	s0, [r7, #16]

    float vx_world =  cosT * v_x - sinT * v_y;
 8001596:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <_Z12localizationf+0xd8>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a4:	4b27      	ldr	r3, [pc, #156]	@ (8001644 <_Z12localizationf+0xdc>)
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b6:	edc7 7a03 	vstr	s15, [r7, #12]
    float vy_world =  sinT * v_x + cosT * v_y;
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <_Z12localizationf+0xd8>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001644 <_Z12localizationf+0xdc>)
 80015ca:	edd3 6a00 	vldr	s13, [r3]
 80015ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc7 7a02 	vstr	s15, [r7, #8]

    x     += vx_world * dt;
 80015de:	ed97 7a03 	vldr	s14, [r7, #12]
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <_Z12localizationf+0xe0>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f4:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <_Z12localizationf+0xe0>)
 80015f6:	edc3 7a00 	vstr	s15, [r3]
    y     += vy_world * dt;
 80015fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80015fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001602:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <_Z12localizationf+0xe4>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <_Z12localizationf+0xe4>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
    theta += v_w      * dt;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <_Z12localizationf+0xe8>)
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001624:	4b05      	ldr	r3, [pc, #20]	@ (800163c <_Z12localizationf+0xd4>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	4b03      	ldr	r3, [pc, #12]	@ (800163c <_Z12localizationf+0xd4>)
 8001630:	edc3 7a00 	vstr	s15, [r3]
//    if (theta >= 2 * pi)  theta -= 2 * pi;
//    if (theta <  0.0f)    theta += 2 * pi;
}
 8001634:	bf00      	nop
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000200 	.word	0x20000200
 8001640:	200001ec 	.word	0x200001ec
 8001644:	200001f0 	.word	0x200001f0
 8001648:	200001f8 	.word	0x200001f8
 800164c:	200001fc 	.word	0x200001fc
 8001650:	200001f4 	.word	0x200001f4

08001654 <_Z20chassis_update_speedfff>:

void chassis_update_speed(float _v_x, float _v_y, float _v_w) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	ed87 0a03 	vstr	s0, [r7, #12]
 800165e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001662:	ed87 1a01 	vstr	s2, [r7, #4]
    wheel_FR.update_speed(1);
 8001666:	2101      	movs	r1, #1
 8001668:	481b      	ldr	r0, [pc, #108]	@ (80016d8 <_Z20chassis_update_speedfff+0x84>)
 800166a:	f7ff fc73 	bl	8000f54 <_ZN8DC_motor12update_speedEi>
    wheel_FL.update_speed(-1);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	481a      	ldr	r0, [pc, #104]	@ (80016dc <_Z20chassis_update_speedfff+0x88>)
 8001674:	f7ff fc6e 	bl	8000f54 <_ZN8DC_motor12update_speedEi>
    wheel_BR.update_speed(-1);
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	4818      	ldr	r0, [pc, #96]	@ (80016e0 <_Z20chassis_update_speedfff+0x8c>)
 800167e:	f7ff fc69 	bl	8000f54 <_ZN8DC_motor12update_speedEi>
    wheel_BL.update_speed(-1);//-1，改
 8001682:	f04f 31ff 	mov.w	r1, #4294967295
 8001686:	4817      	ldr	r0, [pc, #92]	@ (80016e4 <_Z20chassis_update_speedfff+0x90>)
 8001688:	f7ff fc64 	bl	8000f54 <_ZN8DC_motor12update_speedEi>

    mecan_IK_transform(_v_x, _v_y, _v_w);
 800168c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001690:	edd7 0a02 	vldr	s1, [r7, #8]
 8001694:	ed97 0a03 	vldr	s0, [r7, #12]
 8001698:	f7ff fe40 	bl	800131c <_Z18mecan_IK_transformfff>

    wheel_FR.PI_run(0);
 800169c:	2100      	movs	r1, #0
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <_Z20chassis_update_speedfff+0x84>)
 80016a0:	f7ff fc94 	bl	8000fcc <_ZN8DC_motor6PI_runEi>
    wheel_FL.PI_run(1);
 80016a4:	2101      	movs	r1, #1
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <_Z20chassis_update_speedfff+0x88>)
 80016a8:	f7ff fc90 	bl	8000fcc <_ZN8DC_motor6PI_runEi>
    wheel_BL.PI_run(3);
 80016ac:	2103      	movs	r1, #3
 80016ae:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <_Z20chassis_update_speedfff+0x90>)
 80016b0:	f7ff fc8c 	bl	8000fcc <_ZN8DC_motor6PI_runEi>
    wheel_BR.PI_run(2);
 80016b4:	2102      	movs	r1, #2
 80016b6:	480a      	ldr	r0, [pc, #40]	@ (80016e0 <_Z20chassis_update_speedfff+0x8c>)
 80016b8:	f7ff fc88 	bl	8000fcc <_ZN8DC_motor6PI_runEi>

    mecan_FK_transform();
 80016bc:	f7ff feb2 	bl	8001424 <_Z18mecan_FK_transformv>

    localization(wheel_FL.span);
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <_Z20chassis_update_speedfff+0x88>)
 80016c2:	edd3 7a00 	vldr	s15, [r3]
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f7ff ff4d 	bl	8001568 <_Z12localizationf>
}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000204 	.word	0x20000204
 80016dc:	20000258 	.word	0x20000258
 80016e0:	200002ac 	.word	0x200002ac
 80016e4:	20000300 	.word	0x20000300

080016e8 <_Z41__static_initialization_and_destruction_0ii>:
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d130      	bne.n	800175a <_Z41__static_initialization_and_destruction_0ii+0x72>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <_Z41__static_initialization_and_destruction_0ii+0x72>
DC_motor wheel_FR(&htim1, GPIOB, GPIO_PIN_12, &htim8, TIM_CHANNEL_1);//encoder timer, dir port, dir pin, pwm timer, pwm channel
 8001702:	2300      	movs	r3, #0
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800170e:	4a16      	ldr	r2, [pc, #88]	@ (8001768 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001710:	4916      	ldr	r1, [pc, #88]	@ (800176c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001712:	4817      	ldr	r0, [pc, #92]	@ (8001770 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001714:	f7ff fd50 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor wheel_FL(&htim2, GPIOA, GPIO_PIN_12, &htim8, TIM_CHANNEL_2);
 8001718:	2304      	movs	r3, #4
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001724:	4a13      	ldr	r2, [pc, #76]	@ (8001774 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001726:	4914      	ldr	r1, [pc, #80]	@ (8001778 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001728:	4814      	ldr	r0, [pc, #80]	@ (800177c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800172a:	f7ff fd45 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor wheel_BR(&htim3, GPIOB, GPIO_PIN_14, &htim8, TIM_CHANNEL_3);
 800172e:	2308      	movs	r3, #8
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800173a:	4a0b      	ldr	r2, [pc, #44]	@ (8001768 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800173c:	4910      	ldr	r1, [pc, #64]	@ (8001780 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800173e:	4811      	ldr	r0, [pc, #68]	@ (8001784 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001740:	f7ff fd3a 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
DC_motor wheel_BL(&htim4, GPIOB, GPIO_PIN_15, &htim8, TIM_CHANNEL_4);
 8001744:	230c      	movs	r3, #12
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001750:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001752:	490d      	ldr	r1, [pc, #52]	@ (8001788 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001754:	480d      	ldr	r0, [pc, #52]	@ (800178c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001756:	f7ff fd2f 	bl	80011b8 <_ZN8DC_motorC1EP17TIM_HandleTypeDefP12GPIO_TypeDeftS1_m>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20004984 	.word	0x20004984
 8001768:	40020400 	.word	0x40020400
 800176c:	2000481c 	.word	0x2000481c
 8001770:	20000204 	.word	0x20000204
 8001774:	40020000 	.word	0x40020000
 8001778:	20004864 	.word	0x20004864
 800177c:	20000258 	.word	0x20000258
 8001780:	200048ac 	.word	0x200048ac
 8001784:	200002ac 	.word	0x200002ac
 8001788:	200048f4 	.word	0x200048f4
 800178c:	20000300 	.word	0x20000300

08001790 <_GLOBAL__sub_I_v_x>:
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
 8001794:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001798:	2001      	movs	r0, #1
 800179a:	f7ff ffa5 	bl	80016e8 <_Z41__static_initialization_and_destruction_0ii>
 800179e:	bd80      	pop	{r7, pc}

080017a0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017ac:	f007 ff30 	bl	8009610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80017b0:	4b5a      	ldr	r3, [pc, #360]	@ (800191c <pvPortMallocMicroROS+0x17c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80017b8:	f000 f986 	bl	8001ac8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017bc:	4b58      	ldr	r3, [pc, #352]	@ (8001920 <pvPortMallocMicroROS+0x180>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f040 8090 	bne.w	80018ea <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d01e      	beq.n	800180e <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80017d0:	2208      	movs	r2, #8
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d015      	beq.n	800180e <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f023 0307 	bic.w	r3, r3, #7
 80017e8:	3308      	adds	r3, #8
 80017ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fa:	f383 8811 	msr	BASEPRI, r3
 80017fe:	f3bf 8f6f 	isb	sy
 8001802:	f3bf 8f4f 	dsb	sy
 8001806:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	e7fd      	b.n	800180a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d06a      	beq.n	80018ea <pvPortMallocMicroROS+0x14a>
 8001814:	4b43      	ldr	r3, [pc, #268]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d865      	bhi.n	80018ea <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <pvPortMallocMicroROS+0x188>)
 8001820:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <pvPortMallocMicroROS+0x188>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001828:	e004      	b.n	8001834 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800182a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d903      	bls.n	8001846 <pvPortMallocMicroROS+0xa6>
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f1      	bne.n	800182a <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001846:	4b35      	ldr	r3, [pc, #212]	@ (800191c <pvPortMallocMicroROS+0x17c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184c:	429a      	cmp	r2, r3
 800184e:	d04c      	beq.n	80018ea <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2208      	movs	r2, #8
 8001856:	4413      	add	r3, r2
 8001858:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	1ad2      	subs	r2, r2, r3
 800186a:	2308      	movs	r3, #8
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	429a      	cmp	r2, r3
 8001870:	d920      	bls.n	80018b4 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4413      	add	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00b      	beq.n	800189c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001888:	f383 8811 	msr	BASEPRI, r3
 800188c:	f3bf 8f6f 	isb	sy
 8001890:	f3bf 8f4f 	dsb	sy
 8001894:	613b      	str	r3, [r7, #16]
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1ad2      	subs	r2, r2, r3
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018ae:	69b8      	ldr	r0, [r7, #24]
 80018b0:	f000 f96c 	bl	8001b8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a19      	ldr	r2, [pc, #100]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <pvPortMallocMicroROS+0x18c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d203      	bcs.n	80018d6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <pvPortMallocMicroROS+0x184>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a16      	ldr	r2, [pc, #88]	@ (800192c <pvPortMallocMicroROS+0x18c>)
 80018d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <pvPortMallocMicroROS+0x180>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	431a      	orrs	r2, r3
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80018ea:	f007 fe9f 	bl	800962c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00b      	beq.n	8001910 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80018f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	60fb      	str	r3, [r7, #12]
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001910:	69fb      	ldr	r3, [r7, #28]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3728      	adds	r7, #40	@ 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20003f5c 	.word	0x20003f5c
 8001920:	20003f68 	.word	0x20003f68
 8001924:	20003f60 	.word	0x20003f60
 8001928:	20003f54 	.word	0x20003f54
 800192c:	20003f64 	.word	0x20003f64

08001930 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d04a      	beq.n	80019d8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001942:	2308      	movs	r3, #8
 8001944:	425b      	negs	r3, r3
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <vPortFreeMicroROS+0xb0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10b      	bne.n	8001976 <vPortFreeMicroROS+0x46>
	__asm volatile
 800195e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	60fb      	str	r3, [r7, #12]
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	e7fd      	b.n	8001972 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <vPortFreeMicroROS+0x66>
	__asm volatile
 800197e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001982:	f383 8811 	msr	BASEPRI, r3
 8001986:	f3bf 8f6f 	isb	sy
 800198a:	f3bf 8f4f 	dsb	sy
 800198e:	60bb      	str	r3, [r7, #8]
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	e7fd      	b.n	8001992 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <vPortFreeMicroROS+0xb0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d019      	beq.n	80019d8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d115      	bne.n	80019d8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <vPortFreeMicroROS+0xb0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019bc:	f007 fe28 	bl	8009610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4b07      	ldr	r3, [pc, #28]	@ (80019e4 <vPortFreeMicroROS+0xb4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <vPortFreeMicroROS+0xb4>)
 80019cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019ce:	6938      	ldr	r0, [r7, #16]
 80019d0:	f000 f8dc 	bl	8001b8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80019d4:	f007 fe2a 	bl	800962c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20003f68 	.word	0x20003f68
 80019e4:	20003f60 	.word	0x20003f60

080019e8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80019f4:	2308      	movs	r3, #8
 80019f6:	425b      	negs	r3, r3
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4413      	add	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <getBlockSize+0x38>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

	return count;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20003f68 	.word	0x20003f68

08001a24 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a2e:	f007 fdef 	bl	8009610 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f7ff feb4 	bl	80017a0 <pvPortMallocMicroROS>
 8001a38:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d017      	beq.n	8001a70 <pvPortReallocMicroROS+0x4c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d014      	beq.n	8001a70 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffce 	bl	80019e8 <getBlockSize>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2208      	movs	r2, #8
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d201      	bcs.n	8001a60 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f013 f932 	bl	8014cce <memcpy>

		vPortFreeMicroROS(pv);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ff60 	bl	8001930 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001a70:	f007 fddc 	bl	800962c <xTaskResumeAll>

	return newmem;
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a88:	f007 fdc2 	bl	8009610 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff fe82 	bl	80017a0 <pvPortMallocMicroROS>
 8001a9c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001aa2:	e004      	b.n	8001aae <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	613a      	str	r2, [r7, #16]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1e5a      	subs	r2, r3, #1
 8001ab2:	617a      	str	r2, [r7, #20]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f5      	bne.n	8001aa4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001ab8:	f007 fdb8 	bl	800962c <xTaskResumeAll>
  	return mem;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ace:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8001ad2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ad4:	4b27      	ldr	r3, [pc, #156]	@ (8001b74 <prvHeapInit+0xac>)
 8001ad6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00c      	beq.n	8001afc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3307      	adds	r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b74 <prvHeapInit+0xac>)
 8001af8:	4413      	add	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001b00:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <prvHeapInit+0xb0>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <prvHeapInit+0xb0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b14:	2208      	movs	r2, #8
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 0307 	bic.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	1ad2      	subs	r2, r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <prvHeapInit+0xb4>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <prvHeapInit+0xb8>)
 8001b56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <prvHeapInit+0xbc>)
 8001b5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <prvHeapInit+0xc0>)
 8001b62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20000354 	.word	0x20000354
 8001b78:	20003f54 	.word	0x20003f54
 8001b7c:	20003f5c 	.word	0x20003f5c
 8001b80:	20003f64 	.word	0x20003f64
 8001b84:	20003f60 	.word	0x20003f60
 8001b88:	20003f68 	.word	0x20003f68

08001b8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b94:	4b28      	ldr	r3, [pc, #160]	@ (8001c38 <prvInsertBlockIntoFreeList+0xac>)
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e002      	b.n	8001ba0 <prvInsertBlockIntoFreeList+0x14>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d8f7      	bhi.n	8001b9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d108      	bne.n	8001bce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	441a      	add	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d118      	bne.n	8001c14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <prvInsertBlockIntoFreeList+0xb0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d00d      	beq.n	8001c0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	441a      	add	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	e008      	b.n	8001c1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <prvInsertBlockIntoFreeList+0xb0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e003      	b.n	8001c1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d002      	beq.n	8001c2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20003f54 	.word	0x20003f54
 8001c3c:	20003f5c 	.word	0x20003f5c

08001c40 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001c4e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c54:	4904      	ldr	r1, [pc, #16]	@ (8001c68 <cubemx_transport_open+0x28>)
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f005 f9d6 	bl	8007008 <HAL_UART_Receive_DMA>
    return true;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20003f6c 	.word	0x20003f6c

08001c6c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001c7a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f005 f9e8 	bl	8007052 <HAL_UART_DMAStop>
    return true;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001ca0:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b20      	cmp	r3, #32
 8001cac:	d11c      	bne.n	8001ce8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f005 f936 	bl	8006f28 <HAL_UART_Transmit_DMA>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001cc0:	e002      	b.n	8001cc8 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f006 fc62 	bl	800858c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <cubemx_transport_write+0x4e>
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d1f3      	bne.n	8001cc2 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001cda:	7cfb      	ldrb	r3, [r7, #19]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <cubemx_transport_write+0x58>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	e002      	b.n	8001cea <cubemx_transport_write+0x5e>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e000      	b.n	8001cea <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001ce8:	2300      	movs	r3, #0
    }
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d08:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0e:	b672      	cpsid	i
}
 8001d10:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <cubemx_transport_read+0x9c>)
 8001d20:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d22:	b662      	cpsie	i
}
 8001d24:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f006 fc2d 	bl	800858c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b16      	ldr	r3, [pc, #88]	@ (8001d90 <cubemx_transport_read+0x9c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d103      	bne.n	8001d46 <cubemx_transport_read+0x52>
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dbe3      	blt.n	8001d0e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001d4a:	e011      	b.n	8001d70 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	440b      	add	r3, r1
 8001d56:	4910      	ldr	r1, [pc, #64]	@ (8001d98 <cubemx_transport_read+0xa4>)
 8001d58:	5c8a      	ldrb	r2, [r1, r2]
 8001d5a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d66:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d68:	6013      	str	r3, [r2, #0]
        wrote++;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <cubemx_transport_read+0xa0>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <cubemx_transport_read+0x9c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d003      	beq.n	8001d84 <cubemx_transport_read+0x90>
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3e3      	bcc.n	8001d4c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001d84:	69bb      	ldr	r3, [r7, #24]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20004770 	.word	0x20004770
 8001d94:	2000476c 	.word	0x2000476c
 8001d98:	20003f6c 	.word	0x20003f6c

08001d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da0:	f001 fe0c 	bl	80039bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da4:	f000 f82a 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da8:	f000 fbe0 	bl	800256c <MX_GPIO_Init>
  MX_DMA_Init();
 8001dac:	f000 fba0 	bl	80024f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001db0:	f000 fb74 	bl	800249c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001db4:	f000 f980 	bl	80020b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001db8:	f000 f9d2 	bl	8002160 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001dbc:	f000 fa24 	bl	8002208 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001dc0:	f000 f922 	bl	8002008 <MX_TIM1_Init>
  MX_TIM5_Init();
 8001dc4:	f000 fa74 	bl	80022b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001dc8:	f000 fac0 	bl	800234c <MX_TIM8_Init>
  MX_ADC2_Init();
 8001dcc:	f000 f876 	bl	8001ebc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001dd0:	f000 fd3c 	bl	800284c <main_function>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001dd4:	f006 fafe 	bl	80083d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001dd8:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <main+0x54>)
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <main+0x58>)
 8001dde:	f006 fb43 	bl	8008468 <osThreadNew>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <main+0x5c>)
 8001de6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001de8:	f006 fb18 	bl	800841c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <main+0x50>
 8001df0:	08015b60 	.word	0x08015b60
 8001df4:	08002669 	.word	0x08002669
 8001df8:	20004ad4 	.word	0x20004ad4

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	@ 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	2234      	movs	r2, #52	@ 0x34
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f012 fe96 	bl	8014b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 0308 	add.w	r3, r7, #8
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b23      	ldr	r3, [pc, #140]	@ (8001eb4 <SystemClock_Config+0xb8>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a22      	ldr	r2, [pc, #136]	@ (8001eb4 <SystemClock_Config+0xb8>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <SystemClock_Config+0xb8>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <SystemClock_Config+0xbc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e48:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb8 <SystemClock_Config+0xbc>)
 8001e4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <SystemClock_Config+0xbc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e64:	2310      	movs	r3, #16
 8001e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6c:	f107 031c 	add.w	r3, r7, #28
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 fbbf 	bl	80055f4 <HAL_RCC_OscConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001e7c:	f000 fc7e 	bl	800277c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e80:	230f      	movs	r3, #15
 8001e82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e94:	f107 0308 	add.w	r3, r7, #8
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 f8b4 	bl	8005008 <HAL_RCC_ClockConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ea6:	f000 fc69 	bl	800277c <Error_Handler>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3750      	adds	r7, #80	@ 0x50
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000

08001ebc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ece:	4b4b      	ldr	r3, [pc, #300]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8002000 <MX_ADC2_Init+0x144>)
 8001ed2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ed4:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001eda:	4b48      	ldr	r3, [pc, #288]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001ee0:	4b46      	ldr	r3, [pc, #280]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001ee6:	4b45      	ldr	r3, [pc, #276]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001eec:	4b43      	ldr	r3, [pc, #268]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ef4:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001efa:	4b40      	ldr	r3, [pc, #256]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001efc:	4a41      	ldr	r2, [pc, #260]	@ (8002004 <MX_ADC2_Init+0x148>)
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f00:	4b3e      	ldr	r3, [pc, #248]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 7;
 8001f06:	4b3d      	ldr	r3, [pc, #244]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f08:	2207      	movs	r2, #7
 8001f0a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f14:	4b39      	ldr	r3, [pc, #228]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f1a:	4838      	ldr	r0, [pc, #224]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f1c:	f001 fd90 	bl	8003a40 <HAL_ADC_Init>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001f26:	f000 fc29 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001f2a:	2309      	movs	r3, #9
 8001f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001f32:	2302      	movs	r3, #2
 8001f34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4830      	ldr	r0, [pc, #192]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f3c:	f001 fef2 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001f46:	f000 fc19 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f4a:	2308      	movs	r3, #8
 8001f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f52:	463b      	mov	r3, r7
 8001f54:	4619      	mov	r1, r3
 8001f56:	4829      	ldr	r0, [pc, #164]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f58:	f001 fee4 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001f62:	f000 fc0b 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f66:	230a      	movs	r3, #10
 8001f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4619      	mov	r1, r3
 8001f72:	4822      	ldr	r0, [pc, #136]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f74:	f001 fed6 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8001f7e:	f000 fbfd 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001f82:	230c      	movs	r3, #12
 8001f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001f86:	2304      	movs	r3, #4
 8001f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	481b      	ldr	r0, [pc, #108]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001f90:	f001 fec8 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8001f9a:	f000 fbef 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f9e:	230d      	movs	r3, #13
 8001fa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001fa2:	2305      	movs	r3, #5
 8001fa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4814      	ldr	r0, [pc, #80]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001fac:	f001 feba 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 8001fb6:	f000 fbe1 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001fba:	230e      	movs	r3, #14
 8001fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	480d      	ldr	r0, [pc, #52]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001fc8:	f001 feac 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_ADC2_Init+0x11a>
  {
    Error_Handler();
 8001fd2:	f000 fbd3 	bl	800277c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001fd6:	230f      	movs	r3, #15
 8001fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001fde:	463b      	mov	r3, r7
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4806      	ldr	r0, [pc, #24]	@ (8001ffc <MX_ADC2_Init+0x140>)
 8001fe4:	f001 fe9e 	bl	8003d24 <HAL_ADC_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_ADC2_Init+0x136>
  {
    Error_Handler();
 8001fee:	f000 fbc5 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20004774 	.word	0x20004774
 8002000:	40012100 	.word	0x40012100
 8002004:	0f000001 	.word	0x0f000001

08002008 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08c      	sub	sp, #48	@ 0x30
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	2224      	movs	r2, #36	@ 0x24
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f012 fd90 	bl	8014b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002024:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 8002026:	4a23      	ldr	r2, [pc, #140]	@ (80020b4 <MX_TIM1_Init+0xac>)
 8002028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800202a:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002030:	4b1f      	ldr	r3, [pc, #124]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002036:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 8002038:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800203c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002044:	4b1a      	ldr	r3, [pc, #104]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002050:	2303      	movs	r3, #3
 8002052:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002058:	2301      	movs	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002068:	2301      	movs	r3, #1
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	4619      	mov	r1, r3
 800207a:	480d      	ldr	r0, [pc, #52]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 800207c:	f003 ff30 	bl	8005ee0 <HAL_TIM_Encoder_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002086:	f000 fb79 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <MX_TIM1_Init+0xa8>)
 8002098:	f004 fe14 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80020a2:	f000 fb6b 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	3730      	adds	r7, #48	@ 0x30
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000481c 	.word	0x2000481c
 80020b4:	40010000 	.word	0x40010000

080020b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	@ 0x30
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2224      	movs	r2, #36	@ 0x24
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f012 fd38 	bl	8014b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <MX_TIM2_Init+0xa4>)
 80020d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80020dc:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_TIM2_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_TIM2_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80020e8:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_TIM2_Init+0xa4>)
 80020ea:	f04f 32ff 	mov.w	r2, #4294967295
 80020ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM2_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <MX_TIM2_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020fc:	2303      	movs	r3, #3
 80020fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002104:	2301      	movs	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002114:	2301      	movs	r3, #1
 8002116:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	4619      	mov	r1, r3
 8002126:	480d      	ldr	r0, [pc, #52]	@ (800215c <MX_TIM2_Init+0xa4>)
 8002128:	f003 feda 	bl	8005ee0 <HAL_TIM_Encoder_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002132:	f000 fb23 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4806      	ldr	r0, [pc, #24]	@ (800215c <MX_TIM2_Init+0xa4>)
 8002144:	f004 fdbe 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800214e:	f000 fb15 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	3730      	adds	r7, #48	@ 0x30
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20004864 	.word	0x20004864

08002160 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	2224      	movs	r2, #36	@ 0x24
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f012 fce4 	bl	8014b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800217c:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <MX_TIM3_Init+0xa0>)
 800217e:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <MX_TIM3_Init+0xa4>)
 8002180:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002182:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <MX_TIM3_Init+0xa0>)
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <MX_TIM3_Init+0xa0>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800218e:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <MX_TIM3_Init+0xa0>)
 8002190:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002194:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_TIM3_Init+0xa0>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_TIM3_Init+0xa0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021a2:	2303      	movs	r3, #3
 80021a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021aa:	2301      	movs	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021ba:	2301      	movs	r3, #1
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	4619      	mov	r1, r3
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <MX_TIM3_Init+0xa0>)
 80021ce:	f003 fe87 	bl	8005ee0 <HAL_TIM_Encoder_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80021d8:	f000 fad0 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4805      	ldr	r0, [pc, #20]	@ (8002200 <MX_TIM3_Init+0xa0>)
 80021ea:	f004 fd6b 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021f4:	f000 fac2 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	3730      	adds	r7, #48	@ 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200048ac 	.word	0x200048ac
 8002204:	40000400 	.word	0x40000400

08002208 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	@ 0x30
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2224      	movs	r2, #36	@ 0x24
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f012 fc90 	bl	8014b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002224:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002226:	4a21      	ldr	r2, [pc, #132]	@ (80022ac <MX_TIM4_Init+0xa4>)
 8002228:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800222a:	4b1f      	ldr	r3, [pc, #124]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 800222c:	2200      	movs	r2, #0
 800222e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002230:	4b1d      	ldr	r3, [pc, #116]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002236:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002238:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800223c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223e:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002244:	4b18      	ldr	r3, [pc, #96]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800224a:	2303      	movs	r3, #3
 800224c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002252:	2301      	movs	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002262:	2301      	movs	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	4619      	mov	r1, r3
 8002274:	480c      	ldr	r0, [pc, #48]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002276:	f003 fe33 	bl	8005ee0 <HAL_TIM_Encoder_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002280:	f000 fa7c 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	@ (80022a8 <MX_TIM4_Init+0xa0>)
 8002292:	f004 fd17 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800229c:	f000 fa6e 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	3730      	adds	r7, #48	@ 0x30
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200048f4 	.word	0x200048f4
 80022ac:	40000800 	.word	0x40000800

080022b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
 80022c0:	609a      	str	r2, [r3, #8]
 80022c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c4:	463b      	mov	r3, r7
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002348 <MX_TIM5_Init+0x98>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022d4:	220f      	movs	r2, #15
 80022d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022e0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ec:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022f2:	4814      	ldr	r0, [pc, #80]	@ (8002344 <MX_TIM5_Init+0x94>)
 80022f4:	f003 fc1c 	bl	8005b30 <HAL_TIM_Base_Init>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80022fe:	f000 fa3d 	bl	800277c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	4619      	mov	r1, r3
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <MX_TIM5_Init+0x94>)
 8002310:	f004 f8cc 	bl	80064ac <HAL_TIM_ConfigClockSource>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800231a:	f000 fa2f 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231e:	2300      	movs	r3, #0
 8002320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002326:	463b      	mov	r3, r7
 8002328:	4619      	mov	r1, r3
 800232a:	4806      	ldr	r0, [pc, #24]	@ (8002344 <MX_TIM5_Init+0x94>)
 800232c:	f004 fcca 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002336:	f000 fa21 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000493c 	.word	0x2000493c
 8002348:	40000c00 	.word	0x40000c00

0800234c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b092      	sub	sp, #72	@ 0x48
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002352:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800235c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
 800236a:	611a      	str	r2, [r3, #16]
 800236c:	615a      	str	r2, [r3, #20]
 800236e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2220      	movs	r2, #32
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f012 fbe0 	bl	8014b3c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800237c:	4b45      	ldr	r3, [pc, #276]	@ (8002494 <MX_TIM8_Init+0x148>)
 800237e:	4a46      	ldr	r2, [pc, #280]	@ (8002498 <MX_TIM8_Init+0x14c>)
 8002380:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 16-1;
 8002382:	4b44      	ldr	r3, [pc, #272]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002384:	220f      	movs	r2, #15
 8002386:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	4b42      	ldr	r3, [pc, #264]	@ (8002494 <MX_TIM8_Init+0x148>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 800238e:	4b41      	ldr	r3, [pc, #260]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002390:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002394:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800239c:	4b3d      	ldr	r3, [pc, #244]	@ (8002494 <MX_TIM8_Init+0x148>)
 800239e:	2200      	movs	r2, #0
 80023a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002494 <MX_TIM8_Init+0x148>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023a8:	483a      	ldr	r0, [pc, #232]	@ (8002494 <MX_TIM8_Init+0x148>)
 80023aa:	f003 fc81 	bl	8005cb0 <HAL_TIM_PWM_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80023b4:	f000 f9e2 	bl	800277c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023c4:	4619      	mov	r1, r3
 80023c6:	4833      	ldr	r0, [pc, #204]	@ (8002494 <MX_TIM8_Init+0x148>)
 80023c8:	f004 fc7c 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80023d2:	f000 f9d3 	bl	800277c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	2360      	movs	r3, #96	@ 0x60
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	2200      	movs	r2, #0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4826      	ldr	r0, [pc, #152]	@ (8002494 <MX_TIM8_Init+0x148>)
 80023fc:	f003 ff94 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002406:	f000 f9b9 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800240e:	2204      	movs	r2, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4820      	ldr	r0, [pc, #128]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002414:	f003 ff88 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800241e:	f000 f9ad 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002426:	2208      	movs	r2, #8
 8002428:	4619      	mov	r1, r3
 800242a:	481a      	ldr	r0, [pc, #104]	@ (8002494 <MX_TIM8_Init+0x148>)
 800242c:	f003 ff7c 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8002436:	f000 f9a1 	bl	800277c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800243a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243e:	220c      	movs	r2, #12
 8002440:	4619      	mov	r1, r3
 8002442:	4814      	ldr	r0, [pc, #80]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002444:	f003 ff70 	bl	8006328 <HAL_TIM_PWM_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800244e:	f000 f995 	bl	800277c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002466:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800246a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4807      	ldr	r0, [pc, #28]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002476:	f004 fca1 	bl	8006dbc <HAL_TIMEx_ConfigBreakDeadTime>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 8002480:	f000 f97c 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <MX_TIM8_Init+0x148>)
 8002486:	f000 ff7b 	bl	8003380 <HAL_TIM_MspPostInit>

}
 800248a:	bf00      	nop
 800248c:	3748      	adds	r7, #72	@ 0x48
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20004984 	.word	0x20004984
 8002498:	40010400 	.word	0x40010400

0800249c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <MX_USART2_UART_Init+0x50>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b06      	ldr	r3, [pc, #24]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	@ (80024e8 <MX_USART2_UART_Init+0x4c>)
 80024d4:	f004 fcd8 	bl	8006e88 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024de:	f000 f94d 	bl	800277c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200049cc 	.word	0x200049cc
 80024ec:	40004400 	.word	0x40004400

080024f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <MX_DMA_Init+0x78>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002568 <MX_DMA_Init+0x78>)
 8002500:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002504:	6313      	str	r3, [r2, #48]	@ 0x30
 8002506:	4b18      	ldr	r3, [pc, #96]	@ (8002568 <MX_DMA_Init+0x78>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_DMA_Init+0x78>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <MX_DMA_Init+0x78>)
 800251c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_DMA_Init+0x78>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800252e:	2200      	movs	r2, #0
 8002530:	2105      	movs	r1, #5
 8002532:	2010      	movs	r0, #16
 8002534:	f001 ff5e 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002538:	2010      	movs	r0, #16
 800253a:	f001 ff77 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2105      	movs	r1, #5
 8002542:	2011      	movs	r0, #17
 8002544:	f001 ff56 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002548:	2011      	movs	r0, #17
 800254a:	f001 ff6f 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2105      	movs	r1, #5
 8002552:	203a      	movs	r0, #58	@ 0x3a
 8002554:	f001 ff4e 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002558:	203a      	movs	r0, #58	@ 0x3a
 800255a:	f001 ff67 	bl	800442c <HAL_NVIC_EnableIRQ>

}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	f107 030c 	add.w	r3, r7, #12
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	4b35      	ldr	r3, [pc, #212]	@ (800265c <MX_GPIO_Init+0xf0>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	4a34      	ldr	r2, [pc, #208]	@ (800265c <MX_GPIO_Init+0xf0>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6313      	str	r3, [r2, #48]	@ 0x30
 8002592:	4b32      	ldr	r3, [pc, #200]	@ (800265c <MX_GPIO_Init+0xf0>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	4b2e      	ldr	r3, [pc, #184]	@ (800265c <MX_GPIO_Init+0xf0>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a2d      	ldr	r2, [pc, #180]	@ (800265c <MX_GPIO_Init+0xf0>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <MX_GPIO_Init+0xf0>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	4b27      	ldr	r3, [pc, #156]	@ (800265c <MX_GPIO_Init+0xf0>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a26      	ldr	r2, [pc, #152]	@ (800265c <MX_GPIO_Init+0xf0>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b24      	ldr	r3, [pc, #144]	@ (800265c <MX_GPIO_Init+0xf0>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FR_dir_Pin|BR_dir_Pin|BL_dir_Pin, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80025dc:	4820      	ldr	r0, [pc, #128]	@ (8002660 <MX_GPIO_Init+0xf4>)
 80025de:	f002 fce1 	bl	8004fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FL_dir_GPIO_Port, FL_dir_Pin, GPIO_PIN_RESET);
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025e8:	481e      	ldr	r0, [pc, #120]	@ (8002664 <MX_GPIO_Init+0xf8>)
 80025ea:	f002 fcdb 	bl	8004fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : switch_Pin */
  GPIO_InitStruct.Pin = switch_Pin;
 80025ee:	2310      	movs	r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025f2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80025f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(switch_GPIO_Port, &GPIO_InitStruct);
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	4619      	mov	r1, r3
 8002602:	4818      	ldr	r0, [pc, #96]	@ (8002664 <MX_GPIO_Init+0xf8>)
 8002604:	f002 fb22 	bl	8004c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : FR_dir_Pin BR_dir_Pin BL_dir_Pin */
  GPIO_InitStruct.Pin = FR_dir_Pin|BR_dir_Pin|BL_dir_Pin;
 8002608:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800260c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260e:	2301      	movs	r3, #1
 8002610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 030c 	add.w	r3, r7, #12
 800261e:	4619      	mov	r1, r3
 8002620:	480f      	ldr	r0, [pc, #60]	@ (8002660 <MX_GPIO_Init+0xf4>)
 8002622:	f002 fb13 	bl	8004c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : FL_dir_Pin */
  GPIO_InitStruct.Pin = FL_dir_Pin;
 8002626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800262a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2300      	movs	r3, #0
 8002636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FL_dir_GPIO_Port, &GPIO_InitStruct);
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	4619      	mov	r1, r3
 800263e:	4809      	ldr	r0, [pc, #36]	@ (8002664 <MX_GPIO_Init+0xf8>)
 8002640:	f002 fb04 	bl	8004c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002644:	2200      	movs	r2, #0
 8002646:	2105      	movs	r1, #5
 8002648:	200a      	movs	r0, #10
 800264a:	f001 fed3 	bl	80043f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800264e:	200a      	movs	r0, #10
 8002650:	f001 feec 	bl	800442c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002654:	bf00      	nop
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	40020400 	.word	0x40020400
 8002664:	40020000 	.word	0x40020000

08002668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002668:	b5b0      	push	{r4, r5, r7, lr}
 800266a:	b0a6      	sub	sp, #152	@ 0x98
 800266c:	af02      	add	r7, sp, #8
 800266e:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	rmw_uros_set_custom_transport(
 8002670:	4b34      	ldr	r3, [pc, #208]	@ (8002744 <StartDefaultTask+0xdc>)
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	4b34      	ldr	r3, [pc, #208]	@ (8002748 <StartDefaultTask+0xe0>)
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4b34      	ldr	r3, [pc, #208]	@ (800274c <StartDefaultTask+0xe4>)
 800267a:	4a35      	ldr	r2, [pc, #212]	@ (8002750 <StartDefaultTask+0xe8>)
 800267c:	4935      	ldr	r1, [pc, #212]	@ (8002754 <StartDefaultTask+0xec>)
 800267e:	2001      	movs	r0, #1
 8002680:	f008 fe82 	bl	800b388 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002684:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002688:	4618      	mov	r0, r3
 800268a:	f008 fdfd 	bl	800b288 <rcutils_get_zero_initialized_allocator>

	freeRTOS_allocator.allocate = microros_allocate;
 800268e:	4b32      	ldr	r3, [pc, #200]	@ (8002758 <StartDefaultTask+0xf0>)
 8002690:	67bb      	str	r3, [r7, #120]	@ 0x78
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <StartDefaultTask+0xf4>)
 8002694:	67fb      	str	r3, [r7, #124]	@ 0x7c
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002696:	4b32      	ldr	r3, [pc, #200]	@ (8002760 <StartDefaultTask+0xf8>)
 8002698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800269c:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <StartDefaultTask+0xfc>)
 800269e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80026a2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80026a6:	4618      	mov	r0, r3
 80026a8:	f008 fdfc 	bl	800b2a4 <rcutils_set_default_allocator>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f083 0301 	eor.w	r3, r3, #1
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <StartDefaultTask+0x5a>
	  printf("Error on default allocators (line %d)\n", __LINE__);
 80026b8:	f44f 714b 	mov.w	r1, #812	@ 0x32c
 80026bc:	482a      	ldr	r0, [pc, #168]	@ (8002768 <StartDefaultTask+0x100>)
 80026be:	f012 f97b 	bl	80149b8 <iprintf>
	std_msgs__msg__Int32 msg;
	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 80026c2:	463b      	mov	r3, r7
 80026c4:	4618      	mov	r0, r3
 80026c6:	f008 fe0b 	bl	800b2e0 <rcutils_get_default_allocator>
 80026ca:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80026ce:	463d      	mov	r5, r7
 80026d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 80026d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026dc:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	f008 fd0e 	bl	800b104 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "cubemx_node", "", &support);
 80026e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026ec:	f107 0020 	add.w	r0, r7, #32
 80026f0:	4a1e      	ldr	r2, [pc, #120]	@ (800276c <StartDefaultTask+0x104>)
 80026f2:	491f      	ldr	r1, [pc, #124]	@ (8002770 <StartDefaultTask+0x108>)
 80026f4:	f008 fd50 	bl	800b198 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default(
 80026f8:	f009 facc 	bl	800bc94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80026fc:	4602      	mov	r2, r0
 80026fe:	f107 0120 	add.w	r1, r7, #32
 8002702:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8002706:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <StartDefaultTask+0x10c>)
 8002708:	f008 fd82 	bl	800b210 <rclc_publisher_init_default>
	&publisher,
	&node,
	ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	"cubemx_publisher");

	msg.data = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	673b      	str	r3, [r7, #112]	@ 0x70

	for(;;)
	{
	rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8002710:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8002714:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002718:	2200      	movs	r2, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f008 fcce 	bl	800b0bc <rcl_publish>
 8002720:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	if (ret != RCL_RET_OK)
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <StartDefaultTask+0xce>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 800272c:	f240 314d 	movw	r1, #845	@ 0x34d
 8002730:	4811      	ldr	r0, [pc, #68]	@ (8002778 <StartDefaultTask+0x110>)
 8002732:	f012 f941 	bl	80149b8 <iprintf>
	}

	msg.data++;
 8002736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002738:	3301      	adds	r3, #1
 800273a:	673b      	str	r3, [r7, #112]	@ 0x70
	osDelay(10);
 800273c:	200a      	movs	r0, #10
 800273e:	f005 ff25 	bl	800858c <osDelay>
	{
 8002742:	e7e5      	b.n	8002710 <StartDefaultTask+0xa8>
 8002744:	08001cf5 	.word	0x08001cf5
 8002748:	08001c8d 	.word	0x08001c8d
 800274c:	08001c6d 	.word	0x08001c6d
 8002750:	08001c41 	.word	0x08001c41
 8002754:	200049cc 	.word	0x200049cc
 8002758:	0800285d 	.word	0x0800285d
 800275c:	080028a1 	.word	0x080028a1
 8002760:	080028d9 	.word	0x080028d9
 8002764:	08002945 	.word	0x08002945
 8002768:	08015ad4 	.word	0x08015ad4
 800276c:	08015afc 	.word	0x08015afc
 8002770:	08015b00 	.word	0x08015b00
 8002774:	08015b0c 	.word	0x08015b0c
 8002778:	08015b20 	.word	0x08015b20

0800277c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <Error_Handler+0x8>

08002788 <HAL_TIM_PeriodElapsedCallback>:
float try_speed = 1.0;
bool on=0;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d113      	bne.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x3a>
        // 每 1ms 呼叫一次底盤更新
    	sec++;
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	4a0e      	ldr	r2, [pc, #56]	@ (80027dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80027a2:	6013      	str	r3, [r2, #0]
    	if(on)
 80027a4:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <HAL_TIM_PeriodElapsedCallback+0x2a>
//			else chassis_update_speed(0.0,0.0,0.0);
//    		if(!linear_toward(0.0,0.0,0.0,150.0))chassis_update_speed(cmd_x,cmd_y,0.0);
//			else chassis_update_speed(0.0,0.0,0.0);
//    		mission_one();
//    		mission_four();
    		mission_four_2();
 80027ac:	f000 f9bc 	bl	8002b28 <_Z14mission_four_2v>
 80027b0:	e007      	b.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x3a>
//    		else chassis_update_speed(0.0,0, 0.0);
    	}
    	else
    	{
//    		test_3(0);
    		chassis_update_speed(0.0,0.0,0.0);
 80027b2:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 80027e4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80027b6:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 80027e4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80027ba:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80027e4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80027be:	f7fe ff49 	bl	8001654 <_Z20chassis_update_speedfff>

    	}

    }
    if (htim->Instance == TIM6) {
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_PeriodElapsedCallback+0x48>
        HAL_IncTick();
 80027cc:	f001 f918 	bl	8003a00 <HAL_IncTick>
      }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40000c00 	.word	0x40000c00
 80027dc:	20007a14 	.word	0x20007a14
 80027e0:	20007a18 	.word	0x20007a18
 80027e4:	00000000 	.word	0x00000000
 80027e8:	40001000 	.word	0x40001000

080027ec <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4){
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d11e      	bne.n	800283a <HAL_GPIO_EXTI_Callback+0x4e>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_RESET) on = 1;
 80027fc:	2110      	movs	r1, #16
 80027fe:	4811      	ldr	r0, [pc, #68]	@ (8002844 <HAL_GPIO_EXTI_Callback+0x58>)
 8002800:	f002 fbb8 	bl	8004f74 <HAL_GPIO_ReadPin>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_EXTI_Callback+0x30>
 8002814:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET) on = 0;
	}

}
 800281a:	e00e      	b.n	800283a <HAL_GPIO_EXTI_Callback+0x4e>
		else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)==GPIO_PIN_SET) on = 0;
 800281c:	2110      	movs	r1, #16
 800281e:	4809      	ldr	r0, [pc, #36]	@ (8002844 <HAL_GPIO_EXTI_Callback+0x58>)
 8002820:	f002 fba8 	bl	8004f74 <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_GPIO_EXTI_Callback+0x4e>
 8002834:	4b04      	ldr	r3, [pc, #16]	@ (8002848 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40020000 	.word	0x40020000
 8002848:	20007a18 	.word	0x20007a18

0800284c <main_function>:
void main_function() {
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
    //HAL_Init();
    chassis_setup();  // 初始化四輪的 encoder 與 PWM
 8002850:	f7fe fd0e 	bl	8001270 <_Z13chassis_setupv>
    path_setup();
 8002854:	f001 f874 	bl	8003940 <_Z10path_setupv>
    //pid_setup();
    while (1) {
 8002858:	bf00      	nop
 800285a:	e7fd      	b.n	8002858 <main_function+0xc>

0800285c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002866:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <microros_allocate+0x3c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <microros_allocate+0x3c>)
 8002874:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <microros_allocate+0x40>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <microros_allocate+0x40>)
 8002884:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe ff8a 	bl	80017a0 <pvPortMallocMicroROS>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20007a1c 	.word	0x20007a1c
 800289c:	20007a20 	.word	0x20007a20

080028a0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00c      	beq.n	80028ca <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff f899 	bl	80019e8 <getBlockSize>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <microros_deallocate+0x34>)
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <microros_deallocate+0x34>)
 80028c2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff f833 	bl	8001930 <vPortFreeMicroROS>
  }
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20007a20 	.word	0x20007a20

080028d8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80028e4:	4b15      	ldr	r3, [pc, #84]	@ (800293c <microros_reallocate+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4413      	add	r3, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <microros_reallocate+0x64>)
 80028f2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80028f4:	4b12      	ldr	r3, [pc, #72]	@ (8002940 <microros_reallocate+0x68>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4413      	add	r3, r2
 80028fe:	461a      	mov	r2, r3
 8002900:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <microros_reallocate+0x68>)
 8002902:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800290a:	68b8      	ldr	r0, [r7, #8]
 800290c:	f7fe ff48 	bl	80017a0 <pvPortMallocMicroROS>
 8002910:	4603      	mov	r3, r0
 8002912:	e00e      	b.n	8002932 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7ff f867 	bl	80019e8 <getBlockSize>
 800291a:	4603      	mov	r3, r0
 800291c:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <microros_reallocate+0x68>)
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	461a      	mov	r2, r3
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <microros_reallocate+0x68>)
 8002926:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff f87a 	bl	8001a24 <pvPortReallocMicroROS>
 8002930:	4603      	mov	r3, r0
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20007a1c 	.word	0x20007a1c
 8002940:	20007a20 	.word	0x20007a20

08002944 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	4a0c      	ldr	r2, [pc, #48]	@ (800298c <microros_zero_allocate+0x48>)
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	461a      	mov	r2, r3
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <microros_zero_allocate+0x48>)
 8002962:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	4a08      	ldr	r2, [pc, #32]	@ (8002990 <microros_zero_allocate+0x4c>)
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	4413      	add	r3, r2
 8002972:	461a      	mov	r2, r3
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <microros_zero_allocate+0x4c>)
 8002976:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff f87f 	bl	8001a7e <pvPortCallocMicroROS>
 8002980:	4603      	mov	r3, r0
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20007a1c 	.word	0x20007a1c
 8002990:	20007a20 	.word	0x20007a20
 8002994:	00000000 	.word	0x00000000

08002998 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002998:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800299c:	b086      	sub	sp, #24
 800299e:	af00      	add	r7, sp, #0
 80029a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80029aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029ae:	a320      	add	r3, pc, #128	@ (adr r3, 8002a30 <UTILS_NanosecondsToTimespec+0x98>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fe f8b2 	bl	8000b1c <__aeabi_ldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80029c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002a30 <UTILS_NanosecondsToTimespec+0x98>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fe f8a6 	bl	8000b1c <__aeabi_ldivmod>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da20      	bge.n	8002a1e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <UTILS_NanosecondsToTimespec+0x90>)
 80029e2:	fb82 1203 	smull	r1, r2, r2, r3
 80029e6:	1712      	asrs	r2, r2, #28
 80029e8:	17db      	asrs	r3, r3, #31
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	6979      	ldr	r1, [r7, #20]
 80029f8:	17c8      	asrs	r0, r1, #31
 80029fa:	460c      	mov	r4, r1
 80029fc:	4605      	mov	r5, r0
 80029fe:	ebb2 0804 	subs.w	r8, r2, r4
 8002a02:	eb63 0905 	sbc.w	r9, r3, r5
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	4906      	ldr	r1, [pc, #24]	@ (8002a2c <UTILS_NanosecondsToTimespec+0x94>)
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
    }
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a28:	44b82fa1 	.word	0x44b82fa1
 8002a2c:	3b9aca00 	.word	0x3b9aca00
 8002a30:	3b9aca00 	.word	0x3b9aca00
 8002a34:	00000000 	.word	0x00000000

08002a38 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a3c:	b08e      	sub	sp, #56	@ 0x38
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24
 8002a42:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002a44:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002a48:	2300      	movs	r3, #0
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f007 f860 	bl	8009b24 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a66:	17da      	asrs	r2, r3, #31
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	69b9      	ldr	r1, [r7, #24]
 8002a76:	000b      	movs	r3, r1
 8002a78:	2200      	movs	r2, #0
 8002a7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a80:	2200      	movs	r2, #0
 8002a82:	461c      	mov	r4, r3
 8002a84:	4615      	mov	r5, r2
 8002a86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a8a:	1911      	adds	r1, r2, r4
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	416b      	adcs	r3, r5
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002a96:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002a9a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	f04f 0400 	mov.w	r4, #0
 8002aa6:	f04f 0500 	mov.w	r5, #0
 8002aaa:	015d      	lsls	r5, r3, #5
 8002aac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002ab0:	0154      	lsls	r4, r2, #5
 8002ab2:	4622      	mov	r2, r4
 8002ab4:	462b      	mov	r3, r5
 8002ab6:	ebb2 0800 	subs.w	r8, r2, r0
 8002aba:	eb63 0901 	sbc.w	r9, r3, r1
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002aca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002ace:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4699      	mov	r9, r3
 8002ad6:	eb18 0a00 	adds.w	sl, r8, r0
 8002ada:	eb49 0b01 	adc.w	fp, r9, r1
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002af2:	ebb2 040a 	subs.w	r4, r2, sl
 8002af6:	603c      	str	r4, [r7, #0]
 8002af8:	eb63 030b 	sbc.w	r3, r3, fp
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b02:	4623      	mov	r3, r4
 8002b04:	181b      	adds	r3, r3, r0
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	462b      	mov	r3, r5
 8002b0a:	eb41 0303 	adc.w	r3, r1, r3
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b16:	f7ff ff3f 	bl	8002998 <UTILS_NanosecondsToTimespec>

    return 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3738      	adds	r7, #56	@ 0x38
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002b28 <_Z14mission_four_2v>:
		}
	}
	chassis_update_speed(cmd_x,cmd_y,0.0);
}
void mission_four_2()
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	if (linear_toward(cp[i-1][0],cp[i-1][1],cp[i][0],cp[i][1])) i++;
 8002b2c:	4b23      	ldr	r3, [pc, #140]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	4a23      	ldr	r2, [pc, #140]	@ (8002bc0 <_Z14mission_four_2v+0x98>)
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc0 <_Z14mission_four_2v+0x98>)
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	ed93 7a00 	vldr	s14, [r3]
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc0 <_Z14mission_four_2v+0x98>)
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	edd3 6a00 	vldr	s13, [r3]
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <_Z14mission_four_2v+0x98>)
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	ed93 6a00 	vldr	s12, [r3]
 8002b6c:	eef0 1a46 	vmov.f32	s3, s12
 8002b70:	eeb0 1a66 	vmov.f32	s2, s13
 8002b74:	eef0 0a47 	vmov.f32	s1, s14
 8002b78:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7c:	f000 f83c 	bl	8002bf8 <_Z13linear_towardffff>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <_Z14mission_four_2v+0x68>
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b8e:	6013      	str	r3, [r2, #0]
	if(i==14)stop();
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <_Z14mission_four_2v+0x94>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b0e      	cmp	r3, #14
 8002b96:	d101      	bne.n	8002b9c <_Z14mission_four_2v+0x74>
 8002b98:	f000 f81a 	bl	8002bd0 <_Z4stopv>
//	if(i==15)
//	{
//		if(theta>-2*pi) clockwise();
//		else stop();
//	}
	chassis_update_speed(cmd_x,cmd_y,0.0);
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <_Z14mission_four_2v+0x9c>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	4b09      	ldr	r3, [pc, #36]	@ (8002bc8 <_Z14mission_four_2v+0xa0>)
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8002bcc <_Z14mission_four_2v+0xa4>
 8002bac:	eef0 0a47 	vmov.f32	s1, s14
 8002bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb4:	f7fe fd4e 	bl	8001654 <_Z20chassis_update_speedfff>
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200000bc 	.word	0x200000bc
 8002bc0:	2000004c 	.word	0x2000004c
 8002bc4:	20007a24 	.word	0x20007a24
 8002bc8:	20007a28 	.word	0x20007a28
 8002bcc:	00000000 	.word	0x00000000

08002bd0 <_Z4stopv>:
{
	cmd_x=std_speed;
	cmd_y=0.0;
}
void stop()
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
	cmd_x=0.0;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <_Z4stopv+0x20>)
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
	cmd_y=0.0;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <_Z4stopv+0x24>)
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20007a24 	.word	0x20007a24
 8002bf4:	20007a28 	.word	0x20007a28

08002bf8 <_Z13linear_towardffff>:
bool linear_toward(float from_x,float from_y,float tar_x,float tar_y)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	@ 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	ed87 0a03 	vstr	s0, [r7, #12]
 8002c02:	edc7 0a02 	vstr	s1, [r7, #8]
 8002c06:	ed87 1a01 	vstr	s2, [r7, #4]
 8002c0a:	edc7 1a00 	vstr	s3, [r7]
	float x_error = fabs(x-tar_x),y_error=fabs(y-tar_y),x_moved=fabs(x-from_x),y_moved=fabs(y-from_y);
 8002c0e:	4bc6      	ldr	r3, [pc, #792]	@ (8002f28 <_Z13linear_towardffff+0x330>)
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	f7fe f944 	bl	8000eac <_ZSt4fabsf>
 8002c24:	ed87 0a08 	vstr	s0, [r7, #32]
 8002c28:	4bc0      	ldr	r3, [pc, #768]	@ (8002f2c <_Z13linear_towardffff+0x334>)
 8002c2a:	ed93 7a00 	vldr	s14, [r3]
 8002c2e:	edd7 7a00 	vldr	s15, [r7]
 8002c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c36:	eeb0 0a67 	vmov.f32	s0, s15
 8002c3a:	f7fe f937 	bl	8000eac <_ZSt4fabsf>
 8002c3e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c42:	4bb9      	ldr	r3, [pc, #740]	@ (8002f28 <_Z13linear_towardffff+0x330>)
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c50:	eeb0 0a67 	vmov.f32	s0, s15
 8002c54:	f7fe f92a 	bl	8000eac <_ZSt4fabsf>
 8002c58:	ed87 0a06 	vstr	s0, [r7, #24]
 8002c5c:	4bb3      	ldr	r3, [pc, #716]	@ (8002f2c <_Z13linear_towardffff+0x334>)
 8002c5e:	ed93 7a00 	vldr	s14, [r3]
 8002c62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c6e:	f7fe f91d 	bl	8000eac <_ZSt4fabsf>
 8002c72:	ed87 0a05 	vstr	s0, [r7, #20]
	if(x_error<=error_ok && y_error<=error_ok)
 8002c76:	4bae      	ldr	r3, [pc, #696]	@ (8002f30 <_Z13linear_towardffff+0x338>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d813      	bhi.n	8002cb2 <_Z13linear_towardffff+0xba>
 8002c8a:	4ba9      	ldr	r3, [pc, #676]	@ (8002f30 <_Z13linear_towardffff+0x338>)
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9c:	d809      	bhi.n	8002cb2 <_Z13linear_towardffff+0xba>
	{
		cmd_x=0.0;
 8002c9e:	4ba5      	ldr	r3, [pc, #660]	@ (8002f34 <_Z13linear_towardffff+0x33c>)
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
		cmd_y=0.0;
 8002ca6:	4ba4      	ldr	r3, [pc, #656]	@ (8002f38 <_Z13linear_towardffff+0x340>)
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
		return 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e132      	b.n	8002f18 <_Z13linear_towardffff+0x320>
	}
	else
	{
		float speed = std_speed;
 8002cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8002f3c <_Z13linear_towardffff+0x344>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
		if(x_error>y_error)
 8002cb8:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	f340 8093 	ble.w	8002df2 <_Z13linear_towardffff+0x1fa>
		{
			if(x_moved<buffer_dis) speed = (std_speed-min_speed)*x_moved/buffer_dis+min_speed;
 8002ccc:	4b9c      	ldr	r3, [pc, #624]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cde:	d518      	bpl.n	8002d12 <_Z13linear_towardffff+0x11a>
 8002ce0:	4b96      	ldr	r3, [pc, #600]	@ (8002f3c <_Z13linear_towardffff+0x344>)
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	4b97      	ldr	r3, [pc, #604]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cf4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002cf8:	4b91      	ldr	r3, [pc, #580]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d02:	4b90      	ldr	r3, [pc, #576]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002d04:	edd3 7a00 	vldr	s15, [r3]
 8002d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002d10:	e021      	b.n	8002d56 <_Z13linear_towardffff+0x15e>
			else if(x_error<buffer_dis) speed = (std_speed-min_speed)*x_error/buffer_dis+min_speed;
 8002d12:	4b8b      	ldr	r3, [pc, #556]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d24:	d517      	bpl.n	8002d56 <_Z13linear_towardffff+0x15e>
 8002d26:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <_Z13linear_towardffff+0x344>)
 8002d28:	ed93 7a00 	vldr	s14, [r3]
 8002d2c:	4b85      	ldr	r3, [pc, #532]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002d2e:	edd3 7a00 	vldr	s15, [r3]
 8002d32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d36:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d3a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d3e:	4b80      	ldr	r3, [pc, #512]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d48:	4b7e      	ldr	r3, [pc, #504]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002d4a:	edd3 7a00 	vldr	s15, [r3]
 8002d4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			if(x>tar_x)
 8002d56:	4b74      	ldr	r3, [pc, #464]	@ (8002f28 <_Z13linear_towardffff+0x330>)
 8002d58:	edd3 7a00 	vldr	s15, [r3]
 8002d5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d68:	d523      	bpl.n	8002db2 <_Z13linear_towardffff+0x1ba>
			{
				cmd_x=-speed;
 8002d6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d6e:	eef1 7a67 	vneg.f32	s15, s15
 8002d72:	4b70      	ldr	r3, [pc, #448]	@ (8002f34 <_Z13linear_towardffff+0x33c>)
 8002d74:	edc3 7a00 	vstr	s15, [r3]
				cmd_y=-1*(y-tar_y)*0.6;
 8002d78:	4b6c      	ldr	r3, [pc, #432]	@ (8002f2c <_Z13linear_towardffff+0x334>)
 8002d7a:	ed93 7a00 	vldr	s14, [r3]
 8002d7e:	edd7 7a00 	vldr	s15, [r7]
 8002d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d86:	eef1 7a67 	vneg.f32	s15, s15
 8002d8a:	ee17 3a90 	vmov	r3, s15
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fc0a 	bl	80005a8 <__aeabi_f2d>
 8002d94:	a362      	add	r3, pc, #392	@ (adr r3, 8002f20 <_Z13linear_towardffff+0x328>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fc5d 	bl	8000658 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4610      	mov	r0, r2
 8002da4:	4619      	mov	r1, r3
 8002da6:	f7fd fe69 	bl	8000a7c <__aeabi_d2f>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4a62      	ldr	r2, [pc, #392]	@ (8002f38 <_Z13linear_towardffff+0x340>)
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e0b1      	b.n	8002f16 <_Z13linear_towardffff+0x31e>
			}
			else
			{
				cmd_x=speed;
 8002db2:	4a60      	ldr	r2, [pc, #384]	@ (8002f34 <_Z13linear_towardffff+0x33c>)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	6013      	str	r3, [r2, #0]
				cmd_y=-1*(y-tar_y)*0.6;
 8002db8:	4b5c      	ldr	r3, [pc, #368]	@ (8002f2c <_Z13linear_towardffff+0x334>)
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	edd7 7a00 	vldr	s15, [r7]
 8002dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc6:	eef1 7a67 	vneg.f32	s15, s15
 8002dca:	ee17 3a90 	vmov	r3, s15
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbea 	bl	80005a8 <__aeabi_f2d>
 8002dd4:	a352      	add	r3, pc, #328	@ (adr r3, 8002f20 <_Z13linear_towardffff+0x328>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc3d 	bl	8000658 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	f7fd fe49 	bl	8000a7c <__aeabi_d2f>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4a52      	ldr	r2, [pc, #328]	@ (8002f38 <_Z13linear_towardffff+0x340>)
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e091      	b.n	8002f16 <_Z13linear_towardffff+0x31e>
			}
		}
		else
		{
			if(y_moved<buffer_dis) speed = (std_speed-min_speed)*y_moved/buffer_dis+min_speed;
 8002df2:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002df4:	edd3 7a00 	vldr	s15, [r3]
 8002df8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	d518      	bpl.n	8002e38 <_Z13linear_towardffff+0x240>
 8002e06:	4b4d      	ldr	r3, [pc, #308]	@ (8002f3c <_Z13linear_towardffff+0x344>)
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e16:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e1e:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e28:	4b46      	ldr	r3, [pc, #280]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e32:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8002e36:	e021      	b.n	8002e7c <_Z13linear_towardffff+0x284>
			else if(y_error<buffer_dis) speed = (std_speed-min_speed)*y_error/buffer_dis+min_speed;
 8002e38:	4b41      	ldr	r3, [pc, #260]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d517      	bpl.n	8002e7c <_Z13linear_towardffff+0x284>
 8002e4c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f3c <_Z13linear_towardffff+0x344>)
 8002e4e:	ed93 7a00 	vldr	s14, [r3]
 8002e52:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002e60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e64:	4b36      	ldr	r3, [pc, #216]	@ (8002f40 <_Z13linear_towardffff+0x348>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e6e:	4b35      	ldr	r3, [pc, #212]	@ (8002f44 <_Z13linear_towardffff+0x34c>)
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e78:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			if(y>tar_y)
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <_Z13linear_towardffff+0x334>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ed97 7a00 	vldr	s14, [r7]
 8002e86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8e:	d523      	bpl.n	8002ed8 <_Z13linear_towardffff+0x2e0>
			{
				cmd_x=-1*(x-tar_x)*0.6;
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <_Z13linear_towardffff+0x330>)
 8002e92:	ed93 7a00 	vldr	s14, [r3]
 8002e96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9e:	eef1 7a67 	vneg.f32	s15, s15
 8002ea2:	ee17 3a90 	vmov	r3, s15
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb7e 	bl	80005a8 <__aeabi_f2d>
 8002eac:	a31c      	add	r3, pc, #112	@ (adr r3, 8002f20 <_Z13linear_towardffff+0x328>)
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f7fd fbd1 	bl	8000658 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f7fd fddd 	bl	8000a7c <__aeabi_d2f>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f34 <_Z13linear_towardffff+0x33c>)
 8002ec6:	6013      	str	r3, [r2, #0]
				cmd_y=-speed;
 8002ec8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ecc:	eef1 7a67 	vneg.f32	s15, s15
 8002ed0:	4b19      	ldr	r3, [pc, #100]	@ (8002f38 <_Z13linear_towardffff+0x340>)
 8002ed2:	edc3 7a00 	vstr	s15, [r3]
 8002ed6:	e01e      	b.n	8002f16 <_Z13linear_towardffff+0x31e>
			}
			else
			{
				cmd_x=-1*(x-tar_x)*0.6;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	@ (8002f28 <_Z13linear_towardffff+0x330>)
 8002eda:	ed93 7a00 	vldr	s14, [r3]
 8002ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee6:	eef1 7a67 	vneg.f32	s15, s15
 8002eea:	ee17 3a90 	vmov	r3, s15
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fb5a 	bl	80005a8 <__aeabi_f2d>
 8002ef4:	a30a      	add	r3, pc, #40	@ (adr r3, 8002f20 <_Z13linear_towardffff+0x328>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fbad 	bl	8000658 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fdb9 	bl	8000a7c <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a09      	ldr	r2, [pc, #36]	@ (8002f34 <_Z13linear_towardffff+0x33c>)
 8002f0e:	6013      	str	r3, [r2, #0]
				cmd_y=speed;
 8002f10:	4a09      	ldr	r2, [pc, #36]	@ (8002f38 <_Z13linear_towardffff+0x340>)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	6013      	str	r3, [r2, #0]
			}
		}
		return 0;
 8002f16:	2300      	movs	r3, #0
	}
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3728      	adds	r7, #40	@ 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	33333333 	.word	0x33333333
 8002f24:	3fe33333 	.word	0x3fe33333
 8002f28:	200001f8 	.word	0x200001f8
 8002f2c:	200001fc 	.word	0x200001fc
 8002f30:	20000044 	.word	0x20000044
 8002f34:	20007a24 	.word	0x20007a24
 8002f38:	20007a28 	.word	0x20007a28
 8002f3c:	2000003c 	.word	0x2000003c
 8002f40:	20000048 	.word	0x20000048
 8002f44:	20000040 	.word	0x20000040

08002f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_MspInit+0x54>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	4a11      	ldr	r2, [pc, #68]	@ (8002f9c <HAL_MspInit+0x54>)
 8002f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <HAL_MspInit+0x54>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_MspInit+0x54>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_MspInit+0x54>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7a:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <HAL_MspInit+0x54>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f86:	2200      	movs	r2, #0
 8002f88:	210f      	movs	r1, #15
 8002f8a:	f06f 0001 	mvn.w	r0, #1
 8002f8e:	f001 fa31 	bl	80043f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800

08002fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80030b0 <HAL_ADC_MspInit+0x110>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d172      	bne.n	80030a8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	4a3a      	ldr	r2, [pc, #232]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8002fcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd2:	4b38      	ldr	r3, [pc, #224]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	4a33      	ldr	r2, [pc, #204]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fee:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	4a2c      	ldr	r2, [pc, #176]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	@ 0x30
 800300a:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <HAL_ADC_MspInit+0x114>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC2_IN14
    PC5     ------> ADC2_IN15
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = trace_3_Pin|trace_4_Pin|trace_5_Pin|trace_6_Pin
 8003016:	233d      	movs	r3, #61	@ 0x3d
 8003018:	617b      	str	r3, [r7, #20]
                          |trace_7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800301a:	2303      	movs	r3, #3
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003022:	f107 0314 	add.w	r3, r7, #20
 8003026:	4619      	mov	r1, r3
 8003028:	4823      	ldr	r0, [pc, #140]	@ (80030b8 <HAL_ADC_MspInit+0x118>)
 800302a:	f001 fe0f 	bl	8004c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = trace_2_Pin|trace_1_Pin;
 800302e:	2303      	movs	r3, #3
 8003030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003032:	2303      	movs	r3, #3
 8003034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303a:	f107 0314 	add.w	r3, r7, #20
 800303e:	4619      	mov	r1, r3
 8003040:	481e      	ldr	r0, [pc, #120]	@ (80030bc <HAL_ADC_MspInit+0x11c>)
 8003042:	f001 fe03 	bl	8004c4c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8003046:	4b1e      	ldr	r3, [pc, #120]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 8003048:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_ADC_MspInit+0x124>)
 800304a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800304c:	4b1c      	ldr	r3, [pc, #112]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 800304e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003052:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003054:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800305a:	4b19      	ldr	r3, [pc, #100]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 800305c:	2200      	movs	r2, #0
 800305e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003060:	4b17      	ldr	r3, [pc, #92]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 8003062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003066:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003068:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 800306a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800306e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003070:	4b13      	ldr	r3, [pc, #76]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 8003072:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003076:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003078:	4b11      	ldr	r3, [pc, #68]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 800307a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800307e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003080:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 8003088:	2200      	movs	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800308c:	480c      	ldr	r0, [pc, #48]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 800308e:	f001 f9db 	bl	8004448 <HAL_DMA_Init>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8003098:	f7ff fb70 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a08      	ldr	r2, [pc, #32]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 80030a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80030a2:	4a07      	ldr	r2, [pc, #28]	@ (80030c0 <HAL_ADC_MspInit+0x120>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80030a8:	bf00      	nop
 80030aa:	3728      	adds	r7, #40	@ 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40012100 	.word	0x40012100
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020800 	.word	0x40020800
 80030bc:	40020400 	.word	0x40020400
 80030c0:	200047bc 	.word	0x200047bc
 80030c4:	40026440 	.word	0x40026440

080030c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b090      	sub	sp, #64	@ 0x40
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003298 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d13d      	bne.n	8003166 <HAL_TIM_Encoder_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ee:	4b6b      	ldr	r3, [pc, #428]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80030f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f2:	4a6a      	ldr	r2, [pc, #424]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fa:	4b68      	ldr	r3, [pc, #416]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003104:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
 800310a:	4b64      	ldr	r3, [pc, #400]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	4a63      	ldr	r2, [pc, #396]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6313      	str	r3, [r2, #48]	@ 0x30
 8003116:	4b61      	ldr	r3, [pc, #388]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003122:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003134:	2301      	movs	r3, #1
 8003136:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800313c:	4619      	mov	r1, r3
 800313e:	4858      	ldr	r0, [pc, #352]	@ (80032a0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8003140:	f001 fd84 	bl	8004c4c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2105      	movs	r1, #5
 8003148:	2019      	movs	r0, #25
 800314a:	f001 f953 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800314e:	2019      	movs	r0, #25
 8003150:	f001 f96c 	bl	800442c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8003154:	2200      	movs	r2, #0
 8003156:	2105      	movs	r1, #5
 8003158:	201a      	movs	r0, #26
 800315a:	f001 f94b 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800315e:	201a      	movs	r0, #26
 8003160:	f001 f964 	bl	800442c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003164:	e094      	b.n	8003290 <HAL_TIM_Encoder_MspInit+0x1c8>
  else if(htim_encoder->Instance==TIM2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800316e:	d12c      	bne.n	80031ca <HAL_TIM_Encoder_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	4b49      	ldr	r3, [pc, #292]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	4a48      	ldr	r2, [pc, #288]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003180:	4b46      	ldr	r3, [pc, #280]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	623b      	str	r3, [r7, #32]
 800318a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	4b42      	ldr	r3, [pc, #264]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	4a41      	ldr	r2, [pc, #260]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6313      	str	r3, [r2, #48]	@ 0x30
 800319c:	4b3f      	ldr	r3, [pc, #252]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031a8:	2303      	movs	r3, #3
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ac:	2302      	movs	r3, #2
 80031ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031b8:	2301      	movs	r3, #1
 80031ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031c0:	4619      	mov	r1, r3
 80031c2:	4837      	ldr	r0, [pc, #220]	@ (80032a0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80031c4:	f001 fd42 	bl	8004c4c <HAL_GPIO_Init>
}
 80031c8:	e062      	b.n	8003290 <HAL_TIM_Encoder_MspInit+0x1c8>
  else if(htim_encoder->Instance==TIM3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d12c      	bne.n	800322e <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	4b30      	ldr	r3, [pc, #192]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	4a2f      	ldr	r2, [pc, #188]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e4:	4b2d      	ldr	r3, [pc, #180]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	4b29      	ldr	r3, [pc, #164]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	4a28      	ldr	r2, [pc, #160]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003200:	4b26      	ldr	r3, [pc, #152]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800320c:	2330      	movs	r3, #48	@ 0x30
 800320e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800321c:	2302      	movs	r3, #2
 800321e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003224:	4619      	mov	r1, r3
 8003226:	4820      	ldr	r0, [pc, #128]	@ (80032a8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8003228:	f001 fd10 	bl	8004c4c <HAL_GPIO_Init>
}
 800322c:	e030      	b.n	8003290 <HAL_TIM_Encoder_MspInit+0x1c8>
  else if(htim_encoder->Instance==TIM4)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1e      	ldr	r2, [pc, #120]	@ (80032ac <HAL_TIM_Encoder_MspInit+0x1e4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d12b      	bne.n	8003290 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	4b17      	ldr	r3, [pc, #92]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	4a16      	ldr	r2, [pc, #88]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6413      	str	r3, [r2, #64]	@ 0x40
 8003248:	4b14      	ldr	r3, [pc, #80]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
 8003258:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800325a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325c:	4a0f      	ldr	r2, [pc, #60]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	6313      	str	r3, [r2, #48]	@ 0x30
 8003264:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8003266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003270:	23c0      	movs	r3, #192	@ 0xc0
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003280:	2302      	movs	r3, #2
 8003282:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003288:	4619      	mov	r1, r3
 800328a:	4807      	ldr	r0, [pc, #28]	@ (80032a8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800328c:	f001 fcde 	bl	8004c4c <HAL_GPIO_Init>
}
 8003290:	bf00      	nop
 8003292:	3740      	adds	r7, #64	@ 0x40
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40010000 	.word	0x40010000
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40020400 	.word	0x40020400
 80032ac:	40000800 	.word	0x40000800

080032b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0e      	ldr	r2, [pc, #56]	@ (80032f8 <HAL_TIM_Base_MspInit+0x48>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d115      	bne.n	80032ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_TIM_Base_MspInit+0x4c>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	4a0c      	ldr	r2, [pc, #48]	@ (80032fc <HAL_TIM_Base_MspInit+0x4c>)
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d2:	4b0a      	ldr	r3, [pc, #40]	@ (80032fc <HAL_TIM_Base_MspInit+0x4c>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2105      	movs	r1, #5
 80032e2:	2032      	movs	r0, #50	@ 0x32
 80032e4:	f001 f886 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032e8:	2032      	movs	r0, #50	@ 0x32
 80032ea:	f001 f89f 	bl	800442c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_TIM_PWM_MspInit+0x78>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d12d      	bne.n	800336e <HAL_TIM_PWM_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b19      	ldr	r3, [pc, #100]	@ (800337c <HAL_TIM_PWM_MspInit+0x7c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a18      	ldr	r2, [pc, #96]	@ (800337c <HAL_TIM_PWM_MspInit+0x7c>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b16      	ldr	r3, [pc, #88]	@ (800337c <HAL_TIM_PWM_MspInit+0x7c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800332e:	2200      	movs	r2, #0
 8003330:	2105      	movs	r1, #5
 8003332:	202b      	movs	r0, #43	@ 0x2b
 8003334:	f001 f85e 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003338:	202b      	movs	r0, #43	@ 0x2b
 800333a:	f001 f877 	bl	800442c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800333e:	2200      	movs	r2, #0
 8003340:	2105      	movs	r1, #5
 8003342:	202c      	movs	r0, #44	@ 0x2c
 8003344:	f001 f856 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003348:	202c      	movs	r0, #44	@ 0x2c
 800334a:	f001 f86f 	bl	800442c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800334e:	2200      	movs	r2, #0
 8003350:	2105      	movs	r1, #5
 8003352:	202d      	movs	r0, #45	@ 0x2d
 8003354:	f001 f84e 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003358:	202d      	movs	r0, #45	@ 0x2d
 800335a:	f001 f867 	bl	800442c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	2105      	movs	r1, #5
 8003362:	202e      	movs	r0, #46	@ 0x2e
 8003364:	f001 f846 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003368:	202e      	movs	r0, #46	@ 0x2e
 800336a:	f001 f85f 	bl	800442c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40010400 	.word	0x40010400
 800337c:	40023800 	.word	0x40023800

08003380 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <HAL_TIM_MspPostInit+0x68>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d11e      	bne.n	80033e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_TIM_MspPostInit+0x6c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	4a10      	ldr	r2, [pc, #64]	@ (80033ec <HAL_TIM_MspPostInit+0x6c>)
 80033ac:	f043 0304 	orr.w	r3, r3, #4
 80033b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <HAL_TIM_MspPostInit+0x6c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80033be:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80033c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033d0:	2303      	movs	r3, #3
 80033d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	4619      	mov	r1, r3
 80033da:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <HAL_TIM_MspPostInit+0x70>)
 80033dc:	f001 fc36 	bl	8004c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020800 	.word	0x40020800

080033f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08a      	sub	sp, #40	@ 0x28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 0314 	add.w	r3, r7, #20
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4d      	ldr	r2, [pc, #308]	@ (8003548 <HAL_UART_MspInit+0x154>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f040 8093 	bne.w	800353e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	4b4b      	ldr	r3, [pc, #300]	@ (800354c <HAL_UART_MspInit+0x158>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	4a4a      	ldr	r2, [pc, #296]	@ (800354c <HAL_UART_MspInit+0x158>)
 8003422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003426:	6413      	str	r3, [r2, #64]	@ 0x40
 8003428:	4b48      	ldr	r3, [pc, #288]	@ (800354c <HAL_UART_MspInit+0x158>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	4b44      	ldr	r3, [pc, #272]	@ (800354c <HAL_UART_MspInit+0x158>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	4a43      	ldr	r2, [pc, #268]	@ (800354c <HAL_UART_MspInit+0x158>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	6313      	str	r3, [r2, #48]	@ 0x30
 8003444:	4b41      	ldr	r3, [pc, #260]	@ (800354c <HAL_UART_MspInit+0x158>)
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003450:	230c      	movs	r3, #12
 8003452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345c:	2303      	movs	r3, #3
 800345e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003460:	2307      	movs	r3, #7
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	4839      	ldr	r0, [pc, #228]	@ (8003550 <HAL_UART_MspInit+0x15c>)
 800346c:	f001 fbee 	bl	8004c4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003470:	4b38      	ldr	r3, [pc, #224]	@ (8003554 <HAL_UART_MspInit+0x160>)
 8003472:	4a39      	ldr	r2, [pc, #228]	@ (8003558 <HAL_UART_MspInit+0x164>)
 8003474:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003476:	4b37      	ldr	r3, [pc, #220]	@ (8003554 <HAL_UART_MspInit+0x160>)
 8003478:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800347c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800347e:	4b35      	ldr	r3, [pc, #212]	@ (8003554 <HAL_UART_MspInit+0x160>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003484:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <HAL_UART_MspInit+0x160>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800348a:	4b32      	ldr	r3, [pc, #200]	@ (8003554 <HAL_UART_MspInit+0x160>)
 800348c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003490:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003492:	4b30      	ldr	r3, [pc, #192]	@ (8003554 <HAL_UART_MspInit+0x160>)
 8003494:	2200      	movs	r2, #0
 8003496:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003498:	4b2e      	ldr	r3, [pc, #184]	@ (8003554 <HAL_UART_MspInit+0x160>)
 800349a:	2200      	movs	r2, #0
 800349c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800349e:	4b2d      	ldr	r3, [pc, #180]	@ (8003554 <HAL_UART_MspInit+0x160>)
 80034a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80034a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003554 <HAL_UART_MspInit+0x160>)
 80034a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80034ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034ae:	4b29      	ldr	r3, [pc, #164]	@ (8003554 <HAL_UART_MspInit+0x160>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80034b4:	4827      	ldr	r0, [pc, #156]	@ (8003554 <HAL_UART_MspInit+0x160>)
 80034b6:	f000 ffc7 	bl	8004448 <HAL_DMA_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80034c0:	f7ff f95c 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a23      	ldr	r2, [pc, #140]	@ (8003554 <HAL_UART_MspInit+0x160>)
 80034c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034ca:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <HAL_UART_MspInit+0x160>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80034d0:	4b22      	ldr	r3, [pc, #136]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034d2:	4a23      	ldr	r2, [pc, #140]	@ (8003560 <HAL_UART_MspInit+0x16c>)
 80034d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80034d6:	4b21      	ldr	r3, [pc, #132]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034de:	4b1f      	ldr	r3, [pc, #124]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034e0:	2240      	movs	r2, #64	@ 0x40
 80034e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034ea:	4b1c      	ldr	r3, [pc, #112]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f2:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f8:	4b18      	ldr	r3, [pc, #96]	@ (800355c <HAL_UART_MspInit+0x168>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034fe:	4b17      	ldr	r3, [pc, #92]	@ (800355c <HAL_UART_MspInit+0x168>)
 8003500:	2200      	movs	r2, #0
 8003502:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003504:	4b15      	ldr	r3, [pc, #84]	@ (800355c <HAL_UART_MspInit+0x168>)
 8003506:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800350a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <HAL_UART_MspInit+0x168>)
 800350e:	2200      	movs	r2, #0
 8003510:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003512:	4812      	ldr	r0, [pc, #72]	@ (800355c <HAL_UART_MspInit+0x168>)
 8003514:	f000 ff98 	bl	8004448 <HAL_DMA_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800351e:	f7ff f92d 	bl	800277c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <HAL_UART_MspInit+0x168>)
 8003526:	639a      	str	r2, [r3, #56]	@ 0x38
 8003528:	4a0c      	ldr	r2, [pc, #48]	@ (800355c <HAL_UART_MspInit+0x168>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2105      	movs	r1, #5
 8003532:	2026      	movs	r0, #38	@ 0x26
 8003534:	f000 ff5e 	bl	80043f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003538:	2026      	movs	r0, #38	@ 0x26
 800353a:	f000 ff77 	bl	800442c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800353e:	bf00      	nop
 8003540:	3728      	adds	r7, #40	@ 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40004400 	.word	0x40004400
 800354c:	40023800 	.word	0x40023800
 8003550:	40020000 	.word	0x40020000
 8003554:	20004a14 	.word	0x20004a14
 8003558:	40026088 	.word	0x40026088
 800355c:	20004a74 	.word	0x20004a74
 8003560:	400260a0 	.word	0x400260a0

08003564 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08e      	sub	sp, #56	@ 0x38
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	4b33      	ldr	r3, [pc, #204]	@ (8003648 <HAL_InitTick+0xe4>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	4a32      	ldr	r2, [pc, #200]	@ (8003648 <HAL_InitTick+0xe4>)
 800357e:	f043 0310 	orr.w	r3, r3, #16
 8003582:	6413      	str	r3, [r2, #64]	@ 0x40
 8003584:	4b30      	ldr	r3, [pc, #192]	@ (8003648 <HAL_InitTick+0xe4>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003590:	f107 0210 	add.w	r2, r7, #16
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f001 fe4e 	bl	800523c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80035a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035aa:	f001 fe1f 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 80035ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80035b0:	e004      	b.n	80035bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035b2:	f001 fe1b 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 80035b6:	4603      	mov	r3, r0
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	4a23      	ldr	r2, [pc, #140]	@ (800364c <HAL_InitTick+0xe8>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	3b01      	subs	r3, #1
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80035ca:	4b21      	ldr	r3, [pc, #132]	@ (8003650 <HAL_InitTick+0xec>)
 80035cc:	4a21      	ldr	r2, [pc, #132]	@ (8003654 <HAL_InitTick+0xf0>)
 80035ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80035d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <HAL_InitTick+0xec>)
 80035d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80035d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_InitTick+0xec>)
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80035de:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <HAL_InitTick+0xec>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003650 <HAL_InitTick+0xec>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ea:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_InitTick+0xec>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80035f0:	4817      	ldr	r0, [pc, #92]	@ (8003650 <HAL_InitTick+0xec>)
 80035f2:	f002 fa9d 	bl	8005b30 <HAL_TIM_Base_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80035fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11b      	bne.n	800363c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003604:	4812      	ldr	r0, [pc, #72]	@ (8003650 <HAL_InitTick+0xec>)
 8003606:	f002 fae3 	bl	8005bd0 <HAL_TIM_Base_Start_IT>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003610:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003618:	2036      	movs	r0, #54	@ 0x36
 800361a:	f000 ff07 	bl	800442c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d808      	bhi.n	8003636 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003624:	2200      	movs	r2, #0
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	2036      	movs	r0, #54	@ 0x36
 800362a:	f000 fee3 	bl	80043f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800362e:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <HAL_InitTick+0xf4>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e002      	b.n	800363c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800363c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003640:	4618      	mov	r0, r3
 8003642:	3738      	adds	r7, #56	@ 0x38
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	431bde83 	.word	0x431bde83
 8003650:	20007a2c 	.word	0x20007a2c
 8003654:	40001000 	.word	0x40001000
 8003658:	200000c8 	.word	0x200000c8

0800365c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <NMI_Handler+0x4>

08003664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003668:	bf00      	nop
 800366a:	e7fd      	b.n	8003668 <HardFault_Handler+0x4>

0800366c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003670:	bf00      	nop
 8003672:	e7fd      	b.n	8003670 <MemManage_Handler+0x4>

08003674 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <BusFault_Handler+0x4>

0800367c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <UsageFault_Handler+0x4>

08003684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(switch_Pin);
 8003696:	2010      	movs	r0, #16
 8003698:	f001 fc9e 	bl	8004fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}

080036a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036a4:	4802      	ldr	r0, [pc, #8]	@ (80036b0 <DMA1_Stream5_IRQHandler+0x10>)
 80036a6:	f001 f867 	bl	8004778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20004a14 	.word	0x20004a14

080036b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036b8:	4802      	ldr	r0, [pc, #8]	@ (80036c4 <DMA1_Stream6_IRQHandler+0x10>)
 80036ba:	f001 f85d 	bl	8004778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20004a74 	.word	0x20004a74

080036c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036cc:	4802      	ldr	r0, [pc, #8]	@ (80036d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036ce:	f002 fd3b 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	2000481c 	.word	0x2000481c

080036dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036e0:	4802      	ldr	r0, [pc, #8]	@ (80036ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80036e2:	f002 fd31 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000481c 	.word	0x2000481c

080036f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <USART2_IRQHandler+0x10>)
 80036f6:	f003 fd2b 	bl	8007150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200049cc 	.word	0x200049cc

08003704 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003708:	4802      	ldr	r0, [pc, #8]	@ (8003714 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800370a:	f002 fd1d 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20004984 	.word	0x20004984

08003718 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800371c:	4802      	ldr	r0, [pc, #8]	@ (8003728 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800371e:	f002 fd13 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20004984 	.word	0x20004984

0800372c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003730:	4802      	ldr	r0, [pc, #8]	@ (800373c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003732:	f002 fd09 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20004984 	.word	0x20004984

08003740 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003744:	4802      	ldr	r0, [pc, #8]	@ (8003750 <TIM8_CC_IRQHandler+0x10>)
 8003746:	f002 fcff 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20004984 	.word	0x20004984

08003754 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003758:	4802      	ldr	r0, [pc, #8]	@ (8003764 <TIM5_IRQHandler+0x10>)
 800375a:	f002 fcf5 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2000493c 	.word	0x2000493c

08003768 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800376c:	4802      	ldr	r0, [pc, #8]	@ (8003778 <TIM6_DAC_IRQHandler+0x10>)
 800376e:	f002 fceb 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20007a2c 	.word	0x20007a2c

0800377c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003780:	4802      	ldr	r0, [pc, #8]	@ (800378c <DMA2_Stream2_IRQHandler+0x10>)
 8003782:	f000 fff9 	bl	8004778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200047bc 	.word	0x200047bc

08003790 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return 1;
 8003794:	2301      	movs	r3, #1
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_kill>:

int _kill(int pid, int sig)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037aa:	f011 fa5b 	bl	8014c64 <__errno>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2216      	movs	r2, #22
 80037b2:	601a      	str	r2, [r3, #0]
  return -1;
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_exit>:

void _exit (int status)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffe7 	bl	80037a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <_exit+0x12>

080037d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e00a      	b.n	80037fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037e8:	f3af 8000 	nop.w
 80037ec:	4601      	mov	r1, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	60ba      	str	r2, [r7, #8]
 80037f4:	b2ca      	uxtb	r2, r1
 80037f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbf0      	blt.n	80037e8 <_read+0x12>
  }

  return len;
 8003806:	687b      	ldr	r3, [r7, #4]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e009      	b.n	8003836 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	60ba      	str	r2, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	dbf1      	blt.n	8003822 <_write+0x12>
  }
  return len;
 800383e:	687b      	ldr	r3, [r7, #4]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_close>:

int _close(int file)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003850:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003870:	605a      	str	r2, [r3, #4]
  return 0;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <_isatty>:

int _isatty(int file)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003888:	2301      	movs	r3, #1
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003896:	b480      	push	{r7}
 8003898:	b085      	sub	sp, #20
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b8:	4a14      	ldr	r2, [pc, #80]	@ (800390c <_sbrk+0x5c>)
 80038ba:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <_sbrk+0x60>)
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c4:	4b13      	ldr	r3, [pc, #76]	@ (8003914 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <_sbrk+0x64>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	@ (8003918 <_sbrk+0x68>)
 80038d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d2:	4b10      	ldr	r3, [pc, #64]	@ (8003914 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d207      	bcs.n	80038f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e0:	f011 f9c0 	bl	8014c64 <__errno>
 80038e4:	4603      	mov	r3, r0
 80038e6:	220c      	movs	r2, #12
 80038e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295
 80038ee:	e009      	b.n	8003904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <_sbrk+0x64>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038f6:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <_sbrk+0x64>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	4a05      	ldr	r2, [pc, #20]	@ (8003914 <_sbrk+0x64>)
 8003900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20020000 	.word	0x20020000
 8003910:	00000400 	.word	0x00000400
 8003914:	20007a78 	.word	0x20007a78
 8003918:	20011040 	.word	0x20011040

0800391c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003920:	4b06      	ldr	r3, [pc, #24]	@ (800393c <SystemInit+0x20>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003926:	4a05      	ldr	r2, [pc, #20]	@ (800393c <SystemInit+0x20>)
 8003928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800392c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <_Z10path_setupv>:
adcRead[3]  adc3-3   PA1    V
adcRead[4]  adc3-4   PA0  left
adcRead[5]  adc3-5   PB0  middle right
adcRead[6]  adc3-6   PB1  middle left
*/
void path_setup(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
	//if(HAL_ADC_Start_DMA(&hadc3,(uint32_t *)adcRead,7) != HAL_OK)
	HAL_ADC_Start_DMA(&hadc2,(uint32_t *)adcRead,7);
 8003944:	2207      	movs	r2, #7
 8003946:	4905      	ldr	r1, [pc, #20]	@ (800395c <_Z10path_setupv+0x1c>)
 8003948:	4805      	ldr	r0, [pc, #20]	@ (8003960 <_Z10path_setupv+0x20>)
 800394a:	f000 f8bd 	bl	8003ac8 <HAL_ADC_Start_DMA>
	check++;
 800394e:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <_Z10path_setupv+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	4a03      	ldr	r2, [pc, #12]	@ (8003964 <_Z10path_setupv+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20007a7c 	.word	0x20007a7c
 8003960:	20004774 	.word	0x20004774
 8003964:	20007a8c 	.word	0x20007a8c

08003968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800396c:	f7ff ffd6 	bl	800391c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003970:	480c      	ldr	r0, [pc, #48]	@ (80039a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003972:	490d      	ldr	r1, [pc, #52]	@ (80039a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003974:	4a0d      	ldr	r2, [pc, #52]	@ (80039ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003988:	4c0a      	ldr	r4, [pc, #40]	@ (80039b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003996:	f011 f96b 	bl	8014c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399a:	f7fe f9ff 	bl	8001d9c <main>
  bx  lr    
 800399e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80039a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80039ac:	080169bc 	.word	0x080169bc
  ldr r2, =_sbss
 80039b0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80039b4:	2001103c 	.word	0x2001103c

080039b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b8:	e7fe      	b.n	80039b8 <ADC_IRQHandler>
	...

080039bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039c0:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_Init+0x40>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	@ (80039fc <HAL_Init+0x40>)
 80039c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <HAL_Init+0x40>)
 80039d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <HAL_Init+0x40>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <HAL_Init+0x40>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e4:	2003      	movs	r0, #3
 80039e6:	f000 fcfa 	bl	80043de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ea:	200f      	movs	r0, #15
 80039ec:	f7ff fdba 	bl	8003564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039f0:	f7ff faaa 	bl	8002f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00

08003a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a04:	4b06      	ldr	r3, [pc, #24]	@ (8003a20 <HAL_IncTick+0x20>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_IncTick+0x24>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4413      	add	r3, r2
 8003a10:	4a04      	ldr	r2, [pc, #16]	@ (8003a24 <HAL_IncTick+0x24>)
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	200000cc 	.word	0x200000cc
 8003a24:	20007a90 	.word	0x20007a90

08003a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <HAL_GetTick+0x14>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20007a90 	.word	0x20007a90

08003a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e033      	b.n	8003abe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d109      	bne.n	8003a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fa9e 	bl	8002fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d118      	bne.n	8003ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a86:	f023 0302 	bic.w	r3, r3, #2
 8003a8a:	f043 0202 	orr.w	r2, r3, #2
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa78 	bl	8003f88 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	f043 0201 	orr.w	r2, r3, #1
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8003aae:	e001      	b.n	8003ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_Start_DMA+0x1e>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0e9      	b.n	8003cba <HAL_ADC_Start_DMA+0x1f2>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d018      	beq.n	8003b2e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc4 <HAL_ADC_Start_DMA+0x1fc>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc8 <HAL_ADC_Start_DMA+0x200>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0c9a      	lsrs	r2, r3, #18
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b20:	e002      	b.n	8003b28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f9      	bne.n	8003b22 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3c:	d107      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	f040 80a1 	bne.w	8003ca0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9c:	d106      	bne.n	8003bac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f023 0206 	bic.w	r2, r3, #6
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
 8003baa:	e002      	b.n	8003bb2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bba:	4b44      	ldr	r3, [pc, #272]	@ (8003ccc <HAL_ADC_Start_DMA+0x204>)
 8003bbc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc2:	4a43      	ldr	r2, [pc, #268]	@ (8003cd0 <HAL_ADC_Start_DMA+0x208>)
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bca:	4a42      	ldr	r2, [pc, #264]	@ (8003cd4 <HAL_ADC_Start_DMA+0x20c>)
 8003bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd2:	4a41      	ldr	r2, [pc, #260]	@ (8003cd8 <HAL_ADC_Start_DMA+0x210>)
 8003bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003bde:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003bee:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bfe:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	334c      	adds	r3, #76	@ 0x4c
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f000 fcc8 	bl	80045a4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12a      	bne.n	8003c76 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_ADC_Start_DMA+0x214>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d015      	beq.n	8003c56 <HAL_ADC_Start_DMA+0x18e>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <HAL_ADC_Start_DMA+0x218>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d105      	bne.n	8003c40 <HAL_ADC_Start_DMA+0x178>
 8003c34:	4b25      	ldr	r3, [pc, #148]	@ (8003ccc <HAL_ADC_Start_DMA+0x204>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a27      	ldr	r2, [pc, #156]	@ (8003ce4 <HAL_ADC_Start_DMA+0x21c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d136      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
 8003c4a:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <HAL_ADC_Start_DMA+0x204>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d130      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d129      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	e020      	b.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a18      	ldr	r2, [pc, #96]	@ (8003cdc <HAL_ADC_Start_DMA+0x214>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d11b      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d114      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c9c:	609a      	str	r2, [r3, #8]
 8003c9e:	e00b      	b.n	8003cb8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	f043 0210 	orr.w	r2, r3, #16
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	200000c4 	.word	0x200000c4
 8003cc8:	431bde83 	.word	0x431bde83
 8003ccc:	40012300 	.word	0x40012300
 8003cd0:	08004181 	.word	0x08004181
 8003cd4:	0800423b 	.word	0x0800423b
 8003cd8:	08004257 	.word	0x08004257
 8003cdc:	40012000 	.word	0x40012000
 8003ce0:	40012100 	.word	0x40012100
 8003ce4:	40012200 	.word	0x40012200

08003ce8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x1c>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	e113      	b.n	8003f68 <HAL_ADC_ConfigChannel+0x244>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d925      	bls.n	8003d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4613      	mov	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	4413      	add	r3, r2
 8003d64:	3b1e      	subs	r3, #30
 8003d66:	2207      	movs	r2, #7
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4618      	mov	r0, r3
 8003d88:	4603      	mov	r3, r0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4403      	add	r3, r0
 8003d8e:	3b1e      	subs	r3, #30
 8003d90:	409a      	lsls	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e022      	b.n	8003de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6919      	ldr	r1, [r3, #16]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	2207      	movs	r2, #7
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43da      	mvns	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4403      	add	r3, r0
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d824      	bhi.n	8003e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	3b05      	subs	r3, #5
 8003dfc:	221f      	movs	r2, #31
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43da      	mvns	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	400a      	ands	r2, r1
 8003e0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	3b05      	subs	r3, #5
 8003e26:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e32:	e04c      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d824      	bhi.n	8003e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b23      	subs	r3, #35	@ 0x23
 8003e4e:	221f      	movs	r2, #31
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	3b23      	subs	r3, #35	@ 0x23
 8003e78:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e84:	e023      	b.n	8003ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	3b41      	subs	r3, #65	@ 0x41
 8003e98:	221f      	movs	r2, #31
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b41      	subs	r3, #65	@ 0x41
 8003ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ece:	4b29      	ldr	r3, [pc, #164]	@ (8003f74 <HAL_ADC_ConfigChannel+0x250>)
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <HAL_ADC_ConfigChannel+0x254>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10f      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d8>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b12      	cmp	r3, #18
 8003ee2:	d10b      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1d      	ldr	r2, [pc, #116]	@ (8003f78 <HAL_ADC_ConfigChannel+0x254>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d12b      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f7c <HAL_ADC_ConfigChannel+0x258>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <HAL_ADC_ConfigChannel+0x1f4>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b11      	cmp	r3, #17
 8003f16:	d122      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a11      	ldr	r2, [pc, #68]	@ (8003f7c <HAL_ADC_ConfigChannel+0x258>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f3a:	4b11      	ldr	r3, [pc, #68]	@ (8003f80 <HAL_ADC_ConfigChannel+0x25c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a11      	ldr	r2, [pc, #68]	@ (8003f84 <HAL_ADC_ConfigChannel+0x260>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9a      	lsrs	r2, r3, #18
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f50:	e002      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f9      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40012300 	.word	0x40012300
 8003f78:	40012000 	.word	0x40012000
 8003f7c:	10000012 	.word	0x10000012
 8003f80:	200000c4 	.word	0x200000c4
 8003f84:	431bde83 	.word	0x431bde83

08003f88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f90:	4b79      	ldr	r3, [pc, #484]	@ (8004178 <ADC_Init+0x1f0>)
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	021a      	lsls	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	4a58      	ldr	r2, [pc, #352]	@ (800417c <ADC_Init+0x1f4>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d022      	beq.n	8004066 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800402e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6899      	ldr	r1, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6899      	ldr	r1, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	e00f      	b.n	8004086 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004084:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0202 	bic.w	r2, r2, #2
 8004094:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7e1b      	ldrb	r3, [r3, #24]
 80040a0:	005a      	lsls	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d01b      	beq.n	80040ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040c2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80040d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	3b01      	subs	r3, #1
 80040e0:	035a      	lsls	r2, r3, #13
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e007      	b.n	80040fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800410a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	3b01      	subs	r3, #1
 8004118:	051a      	lsls	r2, r3, #20
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004130:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6899      	ldr	r1, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800413e:	025a      	lsls	r2, r3, #9
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6899      	ldr	r1, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	029a      	lsls	r2, r3, #10
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	40012300 	.word	0x40012300
 800417c:	0f000001 	.word	0x0f000001

08004180 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004196:	2b00      	cmp	r3, #0
 8004198:	d13c      	bne.n	8004214 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d12b      	bne.n	800420c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d127      	bne.n	800420c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d006      	beq.n	80041d8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d119      	bne.n	800420c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0220 	bic.w	r2, r2, #32
 80041e6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	f043 0201 	orr.w	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fd6b 	bl	8003ce8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004212:	e00e      	b.n	8004232 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f7ff fd75 	bl	8003d10 <HAL_ADC_ErrorCallback>
}
 8004226:	e004      	b.n	8004232 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	4798      	blx	r3
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b084      	sub	sp, #16
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004246:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff fd57 	bl	8003cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2240      	movs	r2, #64	@ 0x40
 8004268:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426e:	f043 0204 	orr.w	r2, r3, #4
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7ff fd4a 	bl	8003d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042a0:	4013      	ands	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042b6:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	60d3      	str	r3, [r2, #12]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d0:	4b04      	ldr	r3, [pc, #16]	@ (80042e4 <__NVIC_GetPriorityGrouping+0x18>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	0a1b      	lsrs	r3, r3, #8
 80042d6:	f003 0307 	and.w	r3, r3, #7
}
 80042da:	4618      	mov	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	db0b      	blt.n	8004312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	4907      	ldr	r1, [pc, #28]	@ (8004320 <__NVIC_EnableIRQ+0x38>)
 8004302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004306:	095b      	lsrs	r3, r3, #5
 8004308:	2001      	movs	r0, #1
 800430a:	fa00 f202 	lsl.w	r2, r0, r2
 800430e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	e000e100 	.word	0xe000e100

08004324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	@ (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	@ (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	@ 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
         );
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	@ 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff4c 	bl	8004284 <__NVIC_SetPriorityGrouping>
}
 80043ec:	bf00      	nop
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004406:	f7ff ff61 	bl	80042cc <__NVIC_GetPriorityGrouping>
 800440a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f7ff ffb1 	bl	8004378 <NVIC_EncodePriority>
 8004416:	4602      	mov	r2, r0
 8004418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff ff80 	bl	8004324 <__NVIC_SetPriority>
}
 8004424:	bf00      	nop
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ff54 	bl	80042e8 <__NVIC_EnableIRQ>
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004454:	f7ff fae8 	bl	8003a28 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e099      	b.n	8004598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004484:	e00f      	b.n	80044a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004486:	f7ff facf 	bl	8003a28 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b05      	cmp	r3, #5
 8004492:	d908      	bls.n	80044a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e078      	b.n	8004598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e8      	bne.n	8004486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4b38      	ldr	r3, [pc, #224]	@ (80045a0 <HAL_DMA_Init+0x158>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d107      	bne.n	8004510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	4313      	orrs	r3, r2
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0307 	bic.w	r3, r3, #7
 8004526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	4313      	orrs	r3, r2
 8004530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	2b04      	cmp	r3, #4
 8004538:	d117      	bne.n	800456a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fb01 	bl	8004b54 <DMA_CheckFifoParam>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2240      	movs	r2, #64	@ 0x40
 800455c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004566:	2301      	movs	r3, #1
 8004568:	e016      	b.n	8004598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fab8 	bl	8004ae8 <DMA_CalcBaseAndBitshift>
 8004578:	4603      	mov	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004580:	223f      	movs	r2, #63	@ 0x3f
 8004582:	409a      	lsls	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	f010803f 	.word	0xf010803f

080045a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_DMA_Start_IT+0x26>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e040      	b.n	800464c <HAL_DMA_Start_IT+0xa8>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d12f      	bne.n	800463e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2202      	movs	r2, #2
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fa4a 	bl	8004a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	223f      	movs	r2, #63	@ 0x3f
 80045fe:	409a      	lsls	r2, r3
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0216 	orr.w	r2, r2, #22
 8004612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0208 	orr.w	r2, r2, #8
 800462a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e005      	b.n	800464a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004646:	2302      	movs	r3, #2
 8004648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800464a:	7dfb      	ldrb	r3, [r7, #23]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004660:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004662:	f7ff f9e1 	bl	8003a28 <HAL_GetTick>
 8004666:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d008      	beq.n	8004686 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2280      	movs	r2, #128	@ 0x80
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e052      	b.n	800472c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0216 	bic.w	r2, r2, #22
 8004694:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d103      	bne.n	80046b6 <HAL_DMA_Abort+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0208 	bic.w	r2, r2, #8
 80046c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d6:	e013      	b.n	8004700 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046d8:	f7ff f9a6 	bl	8003a28 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d90c      	bls.n	8004700 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2203      	movs	r2, #3
 80046f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e015      	b.n	800472c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e4      	bne.n	80046d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004712:	223f      	movs	r2, #63	@ 0x3f
 8004714:	409a      	lsls	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d004      	beq.n	8004752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2280      	movs	r2, #128	@ 0x80
 800474c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e00c      	b.n	800476c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2205      	movs	r2, #5
 8004756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004784:	4b8e      	ldr	r3, [pc, #568]	@ (80049c0 <HAL_DMA_IRQHandler+0x248>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a8e      	ldr	r2, [pc, #568]	@ (80049c4 <HAL_DMA_IRQHandler+0x24c>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	0a9b      	lsrs	r3, r3, #10
 8004790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a2:	2208      	movs	r2, #8
 80047a4:	409a      	lsls	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01a      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0204 	bic.w	r2, r2, #4
 80047ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d0:	2208      	movs	r2, #8
 80047d2:	409a      	lsls	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	f043 0201 	orr.w	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e8:	2201      	movs	r2, #1
 80047ea:	409a      	lsls	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d012      	beq.n	800481a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004806:	2201      	movs	r2, #1
 8004808:	409a      	lsls	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004812:	f043 0202 	orr.w	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481e:	2204      	movs	r2, #4
 8004820:	409a      	lsls	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d012      	beq.n	8004850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00b      	beq.n	8004850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483c:	2204      	movs	r2, #4
 800483e:	409a      	lsls	r2, r3
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004848:	f043 0204 	orr.w	r2, r3, #4
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004854:	2210      	movs	r2, #16
 8004856:	409a      	lsls	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	4013      	ands	r3, r2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d043      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d03c      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004872:	2210      	movs	r2, #16
 8004874:	409a      	lsls	r2, r3
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d018      	beq.n	80048ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d108      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d024      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	4798      	blx	r3
 80048a6:	e01f      	b.n	80048e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01b      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
 80048b8:	e016      	b.n	80048e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0208 	bic.w	r2, r2, #8
 80048d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	2220      	movs	r2, #32
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 808f 	beq.w	8004a18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8087 	beq.w	8004a18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490e:	2220      	movs	r2, #32
 8004910:	409a      	lsls	r2, r3
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b05      	cmp	r3, #5
 8004920:	d136      	bne.n	8004990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0216 	bic.w	r2, r2, #22
 8004930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <HAL_DMA_IRQHandler+0x1da>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800494e:	2b00      	cmp	r3, #0
 8004950:	d007      	beq.n	8004962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0208 	bic.w	r2, r2, #8
 8004960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	223f      	movs	r2, #63	@ 0x3f
 8004968:	409a      	lsls	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004982:	2b00      	cmp	r3, #0
 8004984:	d07e      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	4798      	blx	r3
        }
        return;
 800498e:	e079      	b.n	8004a84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01d      	beq.n	80049da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d031      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	4798      	blx	r3
 80049bc:	e02c      	b.n	8004a18 <HAL_DMA_IRQHandler+0x2a0>
 80049be:	bf00      	nop
 80049c0:	200000c4 	.word	0x200000c4
 80049c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d023      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	4798      	blx	r3
 80049d8:	e01e      	b.n	8004a18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10f      	bne.n	8004a08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0210 	bic.w	r2, r2, #16
 80049f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d032      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d022      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2205      	movs	r2, #5
 8004a30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	3301      	adds	r3, #1
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d307      	bcc.n	8004a60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f2      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x2cc>
 8004a5e:	e000      	b.n	8004a62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
 8004a82:	e000      	b.n	8004a86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a84:	bf00      	nop
    }
  }
}
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b40      	cmp	r3, #64	@ 0x40
 8004ab8:	d108      	bne.n	8004acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004aca:	e007      	b.n	8004adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	60da      	str	r2, [r3, #12]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	3b10      	subs	r3, #16
 8004af8:	4a14      	ldr	r2, [pc, #80]	@ (8004b4c <DMA_CalcBaseAndBitshift+0x64>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b02:	4a13      	ldr	r2, [pc, #76]	@ (8004b50 <DMA_CalcBaseAndBitshift+0x68>)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d909      	bls.n	8004b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	1d1a      	adds	r2, r3, #4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b28:	e007      	b.n	8004b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	aaaaaaab 	.word	0xaaaaaaab
 8004b50:	08015b9c 	.word	0x08015b9c

08004b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d11f      	bne.n	8004bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d856      	bhi.n	8004c22 <DMA_CheckFifoParam+0xce>
 8004b74:	a201      	add	r2, pc, #4	@ (adr r2, 8004b7c <DMA_CheckFifoParam+0x28>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004b8d 	.word	0x08004b8d
 8004b80:	08004b9f 	.word	0x08004b9f
 8004b84:	08004b8d 	.word	0x08004b8d
 8004b88:	08004c23 	.word	0x08004c23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d046      	beq.n	8004c26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b9c:	e043      	b.n	8004c26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ba6:	d140      	bne.n	8004c2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bac:	e03d      	b.n	8004c2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bb6:	d121      	bne.n	8004bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d837      	bhi.n	8004c2e <DMA_CheckFifoParam+0xda>
 8004bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <DMA_CheckFifoParam+0x70>)
 8004bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc4:	08004bd5 	.word	0x08004bd5
 8004bc8:	08004bdb 	.word	0x08004bdb
 8004bcc:	08004bd5 	.word	0x08004bd5
 8004bd0:	08004bed 	.word	0x08004bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd8:	e030      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d025      	beq.n	8004c32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bea:	e022      	b.n	8004c32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bf4:	d11f      	bne.n	8004c36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bfa:	e01c      	b.n	8004c36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d903      	bls.n	8004c0a <DMA_CheckFifoParam+0xb6>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d003      	beq.n	8004c10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c08:	e018      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c0e:	e015      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00e      	beq.n	8004c3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c20:	e00b      	b.n	8004c3a <DMA_CheckFifoParam+0xe6>
      break;
 8004c22:	bf00      	nop
 8004c24:	e00a      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      break;
 8004c26:	bf00      	nop
 8004c28:	e008      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e006      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e004      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      break;
 8004c32:	bf00      	nop
 8004c34:	e002      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c36:	bf00      	nop
 8004c38:	e000      	b.n	8004c3c <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop

08004c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	@ 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c62:	2300      	movs	r3, #0
 8004c64:	61fb      	str	r3, [r7, #28]
 8004c66:	e165      	b.n	8004f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	f040 8154 	bne.w	8004f2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d005      	beq.n	8004c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d130      	bne.n	8004d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	2203      	movs	r2, #3
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 0201 	and.w	r2, r3, #1
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d017      	beq.n	8004d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	2203      	movs	r2, #3
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4013      	ands	r3, r2
 8004d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d123      	bne.n	8004d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	08da      	lsrs	r2, r3, #3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3208      	adds	r2, #8
 8004d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	220f      	movs	r2, #15
 8004d60:	fa02 f303 	lsl.w	r3, r2, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	08da      	lsrs	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3208      	adds	r2, #8
 8004d8a:	69b9      	ldr	r1, [r7, #24]
 8004d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	2203      	movs	r2, #3
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f003 0203 	and.w	r2, r3, #3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80ae 	beq.w	8004f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f4c <HAL_GPIO_Init+0x300>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	4a5c      	ldr	r2, [pc, #368]	@ (8004f4c <HAL_GPIO_Init+0x300>)
 8004ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004de2:	4b5a      	ldr	r3, [pc, #360]	@ (8004f4c <HAL_GPIO_Init+0x300>)
 8004de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dee:	4a58      	ldr	r2, [pc, #352]	@ (8004f50 <HAL_GPIO_Init+0x304>)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	3302      	adds	r3, #2
 8004df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	220f      	movs	r2, #15
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a4f      	ldr	r2, [pc, #316]	@ (8004f54 <HAL_GPIO_Init+0x308>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d025      	beq.n	8004e66 <HAL_GPIO_Init+0x21a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8004f58 <HAL_GPIO_Init+0x30c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <HAL_GPIO_Init+0x216>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a4d      	ldr	r2, [pc, #308]	@ (8004f5c <HAL_GPIO_Init+0x310>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d019      	beq.n	8004e5e <HAL_GPIO_Init+0x212>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f60 <HAL_GPIO_Init+0x314>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d013      	beq.n	8004e5a <HAL_GPIO_Init+0x20e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a4b      	ldr	r2, [pc, #300]	@ (8004f64 <HAL_GPIO_Init+0x318>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00d      	beq.n	8004e56 <HAL_GPIO_Init+0x20a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004f68 <HAL_GPIO_Init+0x31c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d007      	beq.n	8004e52 <HAL_GPIO_Init+0x206>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a49      	ldr	r2, [pc, #292]	@ (8004f6c <HAL_GPIO_Init+0x320>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d101      	bne.n	8004e4e <HAL_GPIO_Init+0x202>
 8004e4a:	2306      	movs	r3, #6
 8004e4c:	e00c      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e4e:	2307      	movs	r3, #7
 8004e50:	e00a      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e52:	2305      	movs	r3, #5
 8004e54:	e008      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e56:	2304      	movs	r3, #4
 8004e58:	e006      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e004      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <HAL_GPIO_Init+0x21c>
 8004e66:	2300      	movs	r3, #0
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f002 0203 	and.w	r2, r2, #3
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	4093      	lsls	r3, r2
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e78:	4935      	ldr	r1, [pc, #212]	@ (8004f50 <HAL_GPIO_Init+0x304>)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e86:	4b3a      	ldr	r3, [pc, #232]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eaa:	4a31      	ldr	r2, [pc, #196]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb0:	4b2f      	ldr	r3, [pc, #188]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed4:	4a26      	ldr	r2, [pc, #152]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eda:	4b25      	ldr	r3, [pc, #148]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f04:	4b1a      	ldr	r3, [pc, #104]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f28:	4a11      	ldr	r2, [pc, #68]	@ (8004f70 <HAL_GPIO_Init+0x324>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	f67f ae96 	bls.w	8004c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	@ 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40013800 	.word	0x40013800
 8004f54:	40020000 	.word	0x40020000
 8004f58:	40020400 	.word	0x40020400
 8004f5c:	40020800 	.word	0x40020800
 8004f60:	40020c00 	.word	0x40020c00
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40021400 	.word	0x40021400
 8004f6c:	40021800 	.word	0x40021800
 8004f70:	40013c00 	.word	0x40013c00

08004f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691a      	ldr	r2, [r3, #16]
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e001      	b.n	8004f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004fb4:	787b      	ldrb	r3, [r7, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fc0:	e003      	b.n	8004fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004fc2:	887b      	ldrh	r3, [r7, #2]
 8004fc4:	041a      	lsls	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	619a      	str	r2, [r3, #24]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fe2:	4b08      	ldr	r3, [pc, #32]	@ (8005004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fee:	4a05      	ldr	r2, [pc, #20]	@ (8005004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fd fbf8 	bl	80027ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40013c00 	.word	0x40013c00

08005008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0cc      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4b68      	ldr	r3, [pc, #416]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d90c      	bls.n	8005044 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b65      	ldr	r3, [pc, #404]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b63      	ldr	r3, [pc, #396]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0b8      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d020      	beq.n	8005092 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800505c:	4b59      	ldr	r3, [pc, #356]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a58      	ldr	r2, [pc, #352]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005066:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005074:	4b53      	ldr	r3, [pc, #332]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4a52      	ldr	r2, [pc, #328]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800507e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005080:	4b50      	ldr	r3, [pc, #320]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	494d      	ldr	r1, [pc, #308]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	4313      	orrs	r3, r2
 8005090:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d044      	beq.n	8005128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d107      	bne.n	80050b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050a6:	4b47      	ldr	r3, [pc, #284]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d119      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e07f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d003      	beq.n	80050c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c6:	4b3f      	ldr	r3, [pc, #252]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e06f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d6:	4b3b      	ldr	r3, [pc, #236]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e067      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b37      	ldr	r3, [pc, #220]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4934      	ldr	r1, [pc, #208]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f8:	f7fe fc96 	bl	8003a28 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fe fc92 	bl	8003a28 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e04f      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b2b      	ldr	r3, [pc, #172]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005128:	4b25      	ldr	r3, [pc, #148]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d20c      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005136:	4b22      	ldr	r3, [pc, #136]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513e:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d001      	beq.n	8005150 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e032      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515c:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4916      	ldr	r1, [pc, #88]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d009      	beq.n	800518e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517a:	4b12      	ldr	r3, [pc, #72]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	490e      	ldr	r1, [pc, #56]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800518e:	f000 f887 	bl	80052a0 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b0b      	ldr	r3, [pc, #44]	@ (80051c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	091b      	lsrs	r3, r3, #4
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490a      	ldr	r1, [pc, #40]	@ (80051c8 <HAL_RCC_ClockConfig+0x1c0>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051aa:	4b09      	ldr	r3, [pc, #36]	@ (80051d0 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe f9d8 	bl	8003564 <HAL_InitTick>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40023c00 	.word	0x40023c00
 80051c4:	40023800 	.word	0x40023800
 80051c8:	08015b84 	.word	0x08015b84
 80051cc:	200000c4 	.word	0x200000c4
 80051d0:	200000c8 	.word	0x200000c8

080051d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051d8:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80051da:	681b      	ldr	r3, [r3, #0]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	200000c4 	.word	0x200000c4

080051ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051f0:	f7ff fff0 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b05      	ldr	r3, [pc, #20]	@ (800520c <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	0a9b      	lsrs	r3, r3, #10
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	4903      	ldr	r1, [pc, #12]	@ (8005210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40023800 	.word	0x40023800
 8005210:	08015b94 	.word	0x08015b94

08005214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005218:	f7ff ffdc 	bl	80051d4 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0b5b      	lsrs	r3, r3, #13
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4903      	ldr	r1, [pc, #12]	@ (8005238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40023800 	.word	0x40023800
 8005238:	08015b94 	.word	0x08015b94

0800523c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	220f      	movs	r2, #15
 800524a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800524c:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	f003 0203 	and.w	r2, r3, #3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005258:	4b0f      	ldr	r3, [pc, #60]	@ (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005270:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <HAL_RCC_GetClockConfig+0x5c>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	08db      	lsrs	r3, r3, #3
 8005276:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800527e:	4b07      	ldr	r3, [pc, #28]	@ (800529c <HAL_RCC_GetClockConfig+0x60>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 020f 	and.w	r2, r3, #15
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	601a      	str	r2, [r3, #0]
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800
 800529c:	40023c00 	.word	0x40023c00

080052a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a4:	b0a6      	sub	sp, #152	@ 0x98
 80052a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052c6:	4bc8      	ldr	r3, [pc, #800]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 030c 	and.w	r3, r3, #12
 80052ce:	2b0c      	cmp	r3, #12
 80052d0:	f200 817e 	bhi.w	80055d0 <HAL_RCC_GetSysClockFreq+0x330>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005311 	.word	0x08005311
 80052e0:	080055d1 	.word	0x080055d1
 80052e4:	080055d1 	.word	0x080055d1
 80052e8:	080055d1 	.word	0x080055d1
 80052ec:	08005319 	.word	0x08005319
 80052f0:	080055d1 	.word	0x080055d1
 80052f4:	080055d1 	.word	0x080055d1
 80052f8:	080055d1 	.word	0x080055d1
 80052fc:	08005321 	.word	0x08005321
 8005300:	080055d1 	.word	0x080055d1
 8005304:	080055d1 	.word	0x080055d1
 8005308:	080055d1 	.word	0x080055d1
 800530c:	0800548b 	.word	0x0800548b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005310:	4bb6      	ldr	r3, [pc, #728]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x34c>)
 8005312:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005316:	e15f      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005318:	4bb5      	ldr	r3, [pc, #724]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x350>)
 800531a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800531e:	e15b      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005320:	4bb1      	ldr	r3, [pc, #708]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005328:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800532c:	4bae      	ldr	r3, [pc, #696]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d031      	beq.n	800539c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005338:	4bab      	ldr	r3, [pc, #684]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	099b      	lsrs	r3, r3, #6
 800533e:	2200      	movs	r2, #0
 8005340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005342:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005344:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	663b      	str	r3, [r7, #96]	@ 0x60
 800534c:	2300      	movs	r3, #0
 800534e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005350:	4ba7      	ldr	r3, [pc, #668]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005352:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005356:	462a      	mov	r2, r5
 8005358:	fb03 f202 	mul.w	r2, r3, r2
 800535c:	2300      	movs	r3, #0
 800535e:	4621      	mov	r1, r4
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	4aa2      	ldr	r2, [pc, #648]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8005368:	4621      	mov	r1, r4
 800536a:	fba1 1202 	umull	r1, r2, r1, r2
 800536e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005370:	460a      	mov	r2, r1
 8005372:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005374:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005376:	4413      	add	r3, r2
 8005378:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800537a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800537e:	2200      	movs	r2, #0
 8005380:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005382:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005384:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005388:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800538c:	f7fb fc16 	bl	8000bbc <__aeabi_uldivmod>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4613      	mov	r3, r2
 8005396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800539a:	e064      	b.n	8005466 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539c:	4b92      	ldr	r3, [pc, #584]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	099b      	lsrs	r3, r3, #6
 80053a2:	2200      	movs	r2, #0
 80053a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a6:	657a      	str	r2, [r7, #84]	@ 0x54
 80053a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053b0:	2300      	movs	r3, #0
 80053b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80053b8:	4622      	mov	r2, r4
 80053ba:	462b      	mov	r3, r5
 80053bc:	f04f 0000 	mov.w	r0, #0
 80053c0:	f04f 0100 	mov.w	r1, #0
 80053c4:	0159      	lsls	r1, r3, #5
 80053c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053ca:	0150      	lsls	r0, r2, #5
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4621      	mov	r1, r4
 80053d2:	1a51      	subs	r1, r2, r1
 80053d4:	6139      	str	r1, [r7, #16]
 80053d6:	4629      	mov	r1, r5
 80053d8:	eb63 0301 	sbc.w	r3, r3, r1
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ea:	4659      	mov	r1, fp
 80053ec:	018b      	lsls	r3, r1, #6
 80053ee:	4651      	mov	r1, sl
 80053f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f4:	4651      	mov	r1, sl
 80053f6:	018a      	lsls	r2, r1, #6
 80053f8:	4651      	mov	r1, sl
 80053fa:	ebb2 0801 	subs.w	r8, r2, r1
 80053fe:	4659      	mov	r1, fp
 8005400:	eb63 0901 	sbc.w	r9, r3, r1
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	f04f 0300 	mov.w	r3, #0
 800540c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005410:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005414:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005418:	4690      	mov	r8, r2
 800541a:	4699      	mov	r9, r3
 800541c:	4623      	mov	r3, r4
 800541e:	eb18 0303 	adds.w	r3, r8, r3
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	462b      	mov	r3, r5
 8005426:	eb49 0303 	adc.w	r3, r9, r3
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005438:	4629      	mov	r1, r5
 800543a:	028b      	lsls	r3, r1, #10
 800543c:	4621      	mov	r1, r4
 800543e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005442:	4621      	mov	r1, r4
 8005444:	028a      	lsls	r2, r1, #10
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800544e:	2200      	movs	r2, #0
 8005450:	643b      	str	r3, [r7, #64]	@ 0x40
 8005452:	647a      	str	r2, [r7, #68]	@ 0x44
 8005454:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005458:	f7fb fbb0 	bl	8000bbc <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005466:	4b60      	ldr	r3, [pc, #384]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	3301      	adds	r3, #1
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8005478:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800547c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005488:	e0a6      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800548a:	4b57      	ldr	r3, [pc, #348]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005496:	4b54      	ldr	r3, [pc, #336]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d02a      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054a2:	4b51      	ldr	r3, [pc, #324]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	099b      	lsrs	r3, r3, #6
 80054a8:	2200      	movs	r2, #0
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80054b4:	2100      	movs	r1, #0
 80054b6:	4b4e      	ldr	r3, [pc, #312]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80054b8:	fb03 f201 	mul.w	r2, r3, r1
 80054bc:	2300      	movs	r3, #0
 80054be:	fb00 f303 	mul.w	r3, r0, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	4a4a      	ldr	r2, [pc, #296]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80054c6:	fba0 1202 	umull	r1, r2, r0, r2
 80054ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80054cc:	460a      	mov	r2, r1
 80054ce:	673a      	str	r2, [r7, #112]	@ 0x70
 80054d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80054d2:	4413      	add	r3, r2
 80054d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80054d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054da:	2200      	movs	r2, #0
 80054dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054de:	637a      	str	r2, [r7, #52]	@ 0x34
 80054e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80054e8:	f7fb fb68 	bl	8000bbc <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4613      	mov	r3, r2
 80054f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054f6:	e05b      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f8:	4b3b      	ldr	r3, [pc, #236]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	099b      	lsrs	r3, r3, #6
 80054fe:	2200      	movs	r2, #0
 8005500:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	2300      	movs	r3, #0
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005514:	4642      	mov	r2, r8
 8005516:	464b      	mov	r3, r9
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	0159      	lsls	r1, r3, #5
 8005522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005526:	0150      	lsls	r0, r2, #5
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4641      	mov	r1, r8
 800552e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005532:	4649      	mov	r1, r9
 8005534:	eb63 0b01 	sbc.w	fp, r3, r1
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005544:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005548:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800554c:	ebb2 040a 	subs.w	r4, r2, sl
 8005550:	eb63 050b 	sbc.w	r5, r3, fp
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	00eb      	lsls	r3, r5, #3
 800555e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005562:	00e2      	lsls	r2, r4, #3
 8005564:	4614      	mov	r4, r2
 8005566:	461d      	mov	r5, r3
 8005568:	4643      	mov	r3, r8
 800556a:	18e3      	adds	r3, r4, r3
 800556c:	603b      	str	r3, [r7, #0]
 800556e:	464b      	mov	r3, r9
 8005570:	eb45 0303 	adc.w	r3, r5, r3
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005582:	4629      	mov	r1, r5
 8005584:	028b      	lsls	r3, r1, #10
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800558c:	4621      	mov	r1, r4
 800558e:	028a      	lsls	r2, r1, #10
 8005590:	4610      	mov	r0, r2
 8005592:	4619      	mov	r1, r3
 8005594:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005598:	2200      	movs	r2, #0
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	61fa      	str	r2, [r7, #28]
 800559e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055a2:	f7fb fb0b 	bl	8000bbc <__aeabi_uldivmod>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4613      	mov	r3, r2
 80055ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80055b0:	4b0d      	ldr	r3, [pc, #52]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	0f1b      	lsrs	r3, r3, #28
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80055be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80055ce:	e003      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x34c>)
 80055d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80055d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3798      	adds	r7, #152	@ 0x98
 80055e0:	46bd      	mov	sp, r7
 80055e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	00f42400 	.word	0x00f42400
 80055f0:	017d7840 	.word	0x017d7840

080055f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e28d      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 8083 	beq.w	800571a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005614:	4b94      	ldr	r3, [pc, #592]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b04      	cmp	r3, #4
 800561e:	d019      	beq.n	8005654 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005620:	4b91      	ldr	r3, [pc, #580]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 030c 	and.w	r3, r3, #12
        || \
 8005628:	2b08      	cmp	r3, #8
 800562a:	d106      	bne.n	800563a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800562c:	4b8e      	ldr	r3, [pc, #568]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005634:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005638:	d00c      	beq.n	8005654 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563a:	4b8b      	ldr	r3, [pc, #556]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005642:	2b0c      	cmp	r3, #12
 8005644:	d112      	bne.n	800566c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005646:	4b88      	ldr	r3, [pc, #544]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800564e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005652:	d10b      	bne.n	800566c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005654:	4b84      	ldr	r3, [pc, #528]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05b      	beq.n	8005718 <HAL_RCC_OscConfig+0x124>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d157      	bne.n	8005718 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e25a      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005674:	d106      	bne.n	8005684 <HAL_RCC_OscConfig+0x90>
 8005676:	4b7c      	ldr	r3, [pc, #496]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a7b      	ldr	r2, [pc, #492]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e01d      	b.n	80056c0 <HAL_RCC_OscConfig+0xcc>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0xb4>
 800568e:	4b76      	ldr	r3, [pc, #472]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a75      	ldr	r2, [pc, #468]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005694:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	4b73      	ldr	r3, [pc, #460]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a72      	ldr	r2, [pc, #456]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e00b      	b.n	80056c0 <HAL_RCC_OscConfig+0xcc>
 80056a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80056ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d013      	beq.n	80056f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fe f9ae 	bl	8003a28 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fe f9aa 	bl	8003a28 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	@ 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e21f      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	4b61      	ldr	r3, [pc, #388]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0xdc>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fe f99a 	bl	8003a28 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fe f996 	bl	8003a28 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	@ 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e20b      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570a:	4b57      	ldr	r3, [pc, #348]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x104>
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d06f      	beq.n	8005806 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005726:	4b50      	ldr	r3, [pc, #320]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b00      	cmp	r3, #0
 8005730:	d017      	beq.n	8005762 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005732:	4b4d      	ldr	r3, [pc, #308]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
        || \
 800573a:	2b08      	cmp	r3, #8
 800573c:	d105      	bne.n	800574a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800573e:	4b4a      	ldr	r3, [pc, #296]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574a:	4b47      	ldr	r3, [pc, #284]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d11c      	bne.n	8005790 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005756:	4b44      	ldr	r3, [pc, #272]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d116      	bne.n	8005790 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005762:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_RCC_OscConfig+0x186>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d001      	beq.n	800577a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e1d3      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800577a:	4b3b      	ldr	r3, [pc, #236]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4937      	ldr	r1, [pc, #220]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800578a:	4313      	orrs	r3, r2
 800578c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800578e:	e03a      	b.n	8005806 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d020      	beq.n	80057da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005798:	4b34      	ldr	r3, [pc, #208]	@ (800586c <HAL_RCC_OscConfig+0x278>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fe f943 	bl	8003a28 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057a6:	f7fe f93f 	bl	8003a28 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e1b4      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c4:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4925      	ldr	r1, [pc, #148]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	600b      	str	r3, [r1, #0]
 80057d8:	e015      	b.n	8005806 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057da:	4b24      	ldr	r3, [pc, #144]	@ (800586c <HAL_RCC_OscConfig+0x278>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fe f922 	bl	8003a28 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e8:	f7fe f91e 	bl	8003a28 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e193      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d036      	beq.n	8005880 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d016      	beq.n	8005848 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800581a:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <HAL_RCC_OscConfig+0x27c>)
 800581c:	2201      	movs	r2, #1
 800581e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005820:	f7fe f902 	bl	8003a28 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005828:	f7fe f8fe 	bl	8003a28 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e173      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800583a:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_RCC_OscConfig+0x274>)
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d0f0      	beq.n	8005828 <HAL_RCC_OscConfig+0x234>
 8005846:	e01b      	b.n	8005880 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005848:	4b09      	ldr	r3, [pc, #36]	@ (8005870 <HAL_RCC_OscConfig+0x27c>)
 800584a:	2200      	movs	r2, #0
 800584c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800584e:	f7fe f8eb 	bl	8003a28 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005854:	e00e      	b.n	8005874 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005856:	f7fe f8e7 	bl	8003a28 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b02      	cmp	r3, #2
 8005862:	d907      	bls.n	8005874 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e15c      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
 8005868:	40023800 	.word	0x40023800
 800586c:	42470000 	.word	0x42470000
 8005870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005874:	4b8a      	ldr	r3, [pc, #552]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1ea      	bne.n	8005856 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8097 	beq.w	80059bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800588e:	2300      	movs	r3, #0
 8005890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005892:	4b83      	ldr	r3, [pc, #524]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10f      	bne.n	80058be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589e:	2300      	movs	r3, #0
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	4b7f      	ldr	r3, [pc, #508]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	4a7e      	ldr	r2, [pc, #504]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80058a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80058ae:	4b7c      	ldr	r3, [pc, #496]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058ba:	2301      	movs	r3, #1
 80058bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058be:	4b79      	ldr	r3, [pc, #484]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d118      	bne.n	80058fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058ca:	4b76      	ldr	r3, [pc, #472]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a75      	ldr	r2, [pc, #468]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b0>)
 80058d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d6:	f7fe f8a7 	bl	8003a28 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058de:	f7fe f8a3 	bl	8003a28 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e118      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058f0:	4b6c      	ldr	r3, [pc, #432]	@ (8005aa4 <HAL_RCC_OscConfig+0x4b0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d106      	bne.n	8005912 <HAL_RCC_OscConfig+0x31e>
 8005904:	4b66      	ldr	r3, [pc, #408]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005908:	4a65      	ldr	r2, [pc, #404]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005910:	e01c      	b.n	800594c <HAL_RCC_OscConfig+0x358>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	2b05      	cmp	r3, #5
 8005918:	d10c      	bne.n	8005934 <HAL_RCC_OscConfig+0x340>
 800591a:	4b61      	ldr	r3, [pc, #388]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591e:	4a60      	ldr	r2, [pc, #384]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005920:	f043 0304 	orr.w	r3, r3, #4
 8005924:	6713      	str	r3, [r2, #112]	@ 0x70
 8005926:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592a:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	6713      	str	r3, [r2, #112]	@ 0x70
 8005932:	e00b      	b.n	800594c <HAL_RCC_OscConfig+0x358>
 8005934:	4b5a      	ldr	r3, [pc, #360]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005938:	4a59      	ldr	r2, [pc, #356]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005940:	4b57      	ldr	r3, [pc, #348]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005944:	4a56      	ldr	r2, [pc, #344]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005946:	f023 0304 	bic.w	r3, r3, #4
 800594a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d015      	beq.n	8005980 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fe f868 	bl	8003a28 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800595a:	e00a      	b.n	8005972 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595c:	f7fe f864 	bl	8003a28 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e0d7      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005972:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0ee      	beq.n	800595c <HAL_RCC_OscConfig+0x368>
 800597e:	e014      	b.n	80059aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fe f852 	bl	8003a28 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005986:	e00a      	b.n	800599e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005988:	f7fe f84e 	bl	8003a28 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e0c1      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800599e:	4b40      	ldr	r3, [pc, #256]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1ee      	bne.n	8005988 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d105      	bne.n	80059bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b0:	4b3b      	ldr	r3, [pc, #236]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b4:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80059b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 80ad 	beq.w	8005b20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059c6:	4b36      	ldr	r3, [pc, #216]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d060      	beq.n	8005a94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d145      	bne.n	8005a66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059da:	4b33      	ldr	r3, [pc, #204]	@ (8005aa8 <HAL_RCC_OscConfig+0x4b4>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e0:	f7fe f822 	bl	8003a28 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fe f81e 	bl	8003a28 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e093      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	4b29      	ldr	r3, [pc, #164]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1f0      	bne.n	80059e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	071b      	lsls	r3, r3, #28
 8005a32:	491b      	ldr	r1, [pc, #108]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a38:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa8 <HAL_RCC_OscConfig+0x4b4>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3e:	f7fd fff3 	bl	8003a28 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a46:	f7fd ffef 	bl	8003a28 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e064      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a58:	4b11      	ldr	r3, [pc, #68]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x452>
 8005a64:	e05c      	b.n	8005b20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a66:	4b10      	ldr	r3, [pc, #64]	@ (8005aa8 <HAL_RCC_OscConfig+0x4b4>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6c:	f7fd ffdc 	bl	8003a28 <HAL_GetTick>
 8005a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a72:	e008      	b.n	8005a86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a74:	f7fd ffd8 	bl	8003a28 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e04d      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a86:	4b06      	ldr	r3, [pc, #24]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f0      	bne.n	8005a74 <HAL_RCC_OscConfig+0x480>
 8005a92:	e045      	b.n	8005b20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d107      	bne.n	8005aac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e040      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
 8005aa0:	40023800 	.word	0x40023800
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aac:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <HAL_RCC_OscConfig+0x538>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d030      	beq.n	8005b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d129      	bne.n	8005b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d122      	bne.n	8005b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005adc:	4013      	ands	r3, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d119      	bne.n	8005b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af2:	085b      	lsrs	r3, r3, #1
 8005af4:	3b01      	subs	r3, #1
 8005af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d10f      	bne.n	8005b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d001      	beq.n	8005b20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e000      	b.n	8005b22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023800 	.word	0x40023800

08005b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e041      	b.n	8005bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fd fbaa 	bl	80032b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4610      	mov	r0, r2
 8005b70:	f000 fd8c 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d001      	beq.n	8005be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e04e      	b.n	8005c86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a23      	ldr	r2, [pc, #140]	@ (8005c94 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d022      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c12:	d01d      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d018      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1e      	ldr	r2, [pc, #120]	@ (8005c9c <HAL_TIM_Base_Start_IT+0xcc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d013      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00e      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1b      	ldr	r2, [pc, #108]	@ (8005ca4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d009      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a19      	ldr	r2, [pc, #100]	@ (8005ca8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d004      	beq.n	8005c50 <HAL_TIM_Base_Start_IT+0x80>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	@ (8005cac <HAL_TIM_Base_Start_IT+0xdc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d111      	bne.n	8005c74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b06      	cmp	r3, #6
 8005c60:	d010      	beq.n	8005c84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c72:	e007      	b.n	8005c84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40010000 	.word	0x40010000
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800
 8005ca0:	40000c00 	.word	0x40000c00
 8005ca4:	40010400 	.word	0x40010400
 8005ca8:	40014000 	.word	0x40014000
 8005cac:	40001800 	.word	0x40001800

08005cb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e041      	b.n	8005d46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fd fb12 	bl	8003300 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 fccc 	bl	800668c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <HAL_TIM_PWM_Start+0x24>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e022      	b.n	8005dba <HAL_TIM_PWM_Start+0x6a>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d109      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x3e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e015      	b.n	8005dba <HAL_TIM_PWM_Start+0x6a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d109      	bne.n	8005da8 <HAL_TIM_PWM_Start+0x58>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	bf14      	ite	ne
 8005da0:	2301      	movne	r3, #1
 8005da2:	2300      	moveq	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e008      	b.n	8005dba <HAL_TIM_PWM_Start+0x6a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e07c      	b.n	8005ebc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0x82>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd0:	e013      	b.n	8005dfa <HAL_TIM_PWM_Start+0xaa>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIM_PWM_Start+0x92>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005de0:	e00b      	b.n	8005dfa <HAL_TIM_PWM_Start+0xaa>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_PWM_Start+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df0:	e003      	b.n	8005dfa <HAL_TIM_PWM_Start+0xaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 ff38 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <HAL_TIM_PWM_Start+0x174>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d004      	beq.n	8005e1c <HAL_TIM_PWM_Start+0xcc>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec8 <HAL_TIM_PWM_Start+0x178>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d101      	bne.n	8005e20 <HAL_TIM_PWM_Start+0xd0>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <HAL_TIM_PWM_Start+0xd2>
 8005e20:	2300      	movs	r3, #0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d007      	beq.n	8005e36 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a22      	ldr	r2, [pc, #136]	@ (8005ec4 <HAL_TIM_PWM_Start+0x174>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e48:	d01d      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <HAL_TIM_PWM_Start+0x17c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	@ (8005ed0 <HAL_TIM_PWM_Start+0x180>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	@ (8005ed4 <HAL_TIM_PWM_Start+0x184>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a16      	ldr	r2, [pc, #88]	@ (8005ec8 <HAL_TIM_PWM_Start+0x178>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <HAL_TIM_PWM_Start+0x188>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIM_PWM_Start+0x136>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a16      	ldr	r2, [pc, #88]	@ (8005edc <HAL_TIM_PWM_Start+0x18c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d111      	bne.n	8005eaa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b06      	cmp	r3, #6
 8005e96:	d010      	beq.n	8005eba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0201 	orr.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea8:	e007      	b.n	8005eba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	40010000 	.word	0x40010000
 8005ec8:	40010400 	.word	0x40010400
 8005ecc:	40000400 	.word	0x40000400
 8005ed0:	40000800 	.word	0x40000800
 8005ed4:	40000c00 	.word	0x40000c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40001800 	.word	0x40001800

08005ee0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e097      	b.n	8006024 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7fd f8dd 	bl	80030c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2202      	movs	r2, #2
 8005f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f24:	f023 0307 	bic.w	r3, r3, #7
 8005f28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	4610      	mov	r0, r2
 8005f36:	f000 fba9 	bl	800668c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f62:	f023 0303 	bic.w	r3, r3, #3
 8005f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	021b      	lsls	r3, r3, #8
 8005f72:	4313      	orrs	r3, r2
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f80:	f023 030c 	bic.w	r3, r3, #12
 8005f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	011a      	lsls	r2, r3, #4
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	031b      	lsls	r3, r3, #12
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800603c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006044:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800604c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006054:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d110      	bne.n	800607e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d102      	bne.n	8006068 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006062:	7b7b      	ldrb	r3, [r7, #13]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e069      	b.n	8006140 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800607c:	e031      	b.n	80060e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d110      	bne.n	80060a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d102      	bne.n	8006090 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800608a:	7b3b      	ldrb	r3, [r7, #12]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d001      	beq.n	8006094 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e055      	b.n	8006140 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80060a4:	e01d      	b.n	80060e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a6:	7bfb      	ldrb	r3, [r7, #15]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d108      	bne.n	80060be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060ac:	7bbb      	ldrb	r3, [r7, #14]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d105      	bne.n	80060be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060b2:	7b7b      	ldrb	r3, [r7, #13]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d102      	bne.n	80060be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060b8:	7b3b      	ldrb	r3, [r7, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e03e      	b.n	8006140 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2202      	movs	r2, #2
 80060ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <HAL_TIM_Encoder_Start+0xc4>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d008      	beq.n	8006100 <HAL_TIM_Encoder_Start+0xd4>
 80060ee:	e00f      	b.n	8006110 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2201      	movs	r2, #1
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fdbd 	bl	8006c78 <TIM_CCxChannelCmd>
      break;
 80060fe:	e016      	b.n	800612e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	2104      	movs	r1, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fdb5 	bl	8006c78 <TIM_CCxChannelCmd>
      break;
 800610e:	e00e      	b.n	800612e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2201      	movs	r2, #1
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fdad 	bl	8006c78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2201      	movs	r2, #1
 8006124:	2104      	movs	r1, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fda6 	bl	8006c78 <TIM_CCxChannelCmd>
      break;
 800612c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0201 	orr.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d020      	beq.n	80061ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0202 	mvn.w	r2, #2
 800617c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fa5b 	bl	800664e <HAL_TIM_IC_CaptureCallback>
 8006198:	e005      	b.n	80061a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa4d 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fa5e 	bl	8006662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f003 0304 	and.w	r3, r3, #4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d020      	beq.n	80061f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01b      	beq.n	80061f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0204 	mvn.w	r2, #4
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 fa35 	bl	800664e <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa27 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa38 	bl	8006662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d020      	beq.n	8006244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01b      	beq.n	8006244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0208 	mvn.w	r2, #8
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2204      	movs	r2, #4
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa0f 	bl	800664e <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa01 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fa12 	bl	8006662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f003 0310 	and.w	r3, r3, #16
 800624a:	2b00      	cmp	r3, #0
 800624c:	d020      	beq.n	8006290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d01b      	beq.n	8006290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0210 	mvn.w	r2, #16
 8006260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2208      	movs	r2, #8
 8006266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006272:	2b00      	cmp	r3, #0
 8006274:	d003      	beq.n	800627e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9e9 	bl	800664e <HAL_TIM_IC_CaptureCallback>
 800627c:	e005      	b.n	800628a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f9db 	bl	800663a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f9ec 	bl	8006662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00c      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d007      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0201 	mvn.w	r2, #1
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7fc fa6a 	bl	8002788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 fdce 	bl	8006e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00c      	beq.n	80062fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9bd 	bl	8006676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00c      	beq.n	8006320 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b00      	cmp	r3, #0
 800630e:	d007      	beq.n	8006320 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0220 	mvn.w	r2, #32
 8006318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fda0 	bl	8006e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006342:	2302      	movs	r3, #2
 8006344:	e0ae      	b.n	80064a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b0c      	cmp	r3, #12
 8006352:	f200 809f 	bhi.w	8006494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006391 	.word	0x08006391
 8006360:	08006495 	.word	0x08006495
 8006364:	08006495 	.word	0x08006495
 8006368:	08006495 	.word	0x08006495
 800636c:	080063d1 	.word	0x080063d1
 8006370:	08006495 	.word	0x08006495
 8006374:	08006495 	.word	0x08006495
 8006378:	08006495 	.word	0x08006495
 800637c:	08006413 	.word	0x08006413
 8006380:	08006495 	.word	0x08006495
 8006384:	08006495 	.word	0x08006495
 8006388:	08006495 	.word	0x08006495
 800638c:	08006453 	.word	0x08006453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fa24 	bl	80067e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e064      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fa74 	bl	80068c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e043      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fac9 	bl	80069b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e023      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fb1d 	bl	8006a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e002      	b.n	800649a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	75fb      	strb	r3, [r7, #23]
      break;
 8006498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_TIM_ConfigClockSource+0x1c>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e0b4      	b.n	8006632 <HAL_TIM_ConfigClockSource+0x186>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006500:	d03e      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0xd4>
 8006502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006506:	f200 8087 	bhi.w	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 800650a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650e:	f000 8086 	beq.w	800661e <HAL_TIM_ConfigClockSource+0x172>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006516:	d87f      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006518:	2b70      	cmp	r3, #112	@ 0x70
 800651a:	d01a      	beq.n	8006552 <HAL_TIM_ConfigClockSource+0xa6>
 800651c:	2b70      	cmp	r3, #112	@ 0x70
 800651e:	d87b      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b60      	cmp	r3, #96	@ 0x60
 8006522:	d050      	beq.n	80065c6 <HAL_TIM_ConfigClockSource+0x11a>
 8006524:	2b60      	cmp	r3, #96	@ 0x60
 8006526:	d877      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b50      	cmp	r3, #80	@ 0x50
 800652a:	d03c      	beq.n	80065a6 <HAL_TIM_ConfigClockSource+0xfa>
 800652c:	2b50      	cmp	r3, #80	@ 0x50
 800652e:	d873      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b40      	cmp	r3, #64	@ 0x40
 8006532:	d058      	beq.n	80065e6 <HAL_TIM_ConfigClockSource+0x13a>
 8006534:	2b40      	cmp	r3, #64	@ 0x40
 8006536:	d86f      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b30      	cmp	r3, #48	@ 0x30
 800653a:	d064      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 800653c:	2b30      	cmp	r3, #48	@ 0x30
 800653e:	d86b      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d060      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 8006544:	2b20      	cmp	r3, #32
 8006546:	d867      	bhi.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d05c      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	2b10      	cmp	r3, #16
 800654e:	d05a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0x15a>
 8006550:	e062      	b.n	8006618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006562:	f000 fb69 	bl	8006c38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	609a      	str	r2, [r3, #8]
      break;
 800657e:	e04f      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006590:	f000 fb52 	bl	8006c38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065a2:	609a      	str	r2, [r3, #8]
      break;
 80065a4:	e03c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065b2:	461a      	mov	r2, r3
 80065b4:	f000 fac6 	bl	8006b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2150      	movs	r1, #80	@ 0x50
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fb1f 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 80065c4:	e02c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065d2:	461a      	mov	r2, r3
 80065d4:	f000 fae5 	bl	8006ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2160      	movs	r1, #96	@ 0x60
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fb0f 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 80065e4:	e01c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065f2:	461a      	mov	r2, r3
 80065f4:	f000 faa6 	bl	8006b44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2140      	movs	r1, #64	@ 0x40
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 faff 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 8006604:	e00c      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f000 faf6 	bl	8006c02 <TIM_ITRx_SetConfig>
      break;
 8006616:	e003      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
      break;
 800661c:	e000      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800661e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
	...

0800668c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a46      	ldr	r2, [pc, #280]	@ (80067b8 <TIM_Base_SetConfig+0x12c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066aa:	d00f      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a43      	ldr	r2, [pc, #268]	@ (80067bc <TIM_Base_SetConfig+0x130>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00b      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a42      	ldr	r2, [pc, #264]	@ (80067c0 <TIM_Base_SetConfig+0x134>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d007      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a41      	ldr	r2, [pc, #260]	@ (80067c4 <TIM_Base_SetConfig+0x138>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d003      	beq.n	80066cc <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a40      	ldr	r2, [pc, #256]	@ (80067c8 <TIM_Base_SetConfig+0x13c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a35      	ldr	r2, [pc, #212]	@ (80067b8 <TIM_Base_SetConfig+0x12c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d02b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ec:	d027      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a32      	ldr	r2, [pc, #200]	@ (80067bc <TIM_Base_SetConfig+0x130>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d023      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a31      	ldr	r2, [pc, #196]	@ (80067c0 <TIM_Base_SetConfig+0x134>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d01f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a30      	ldr	r2, [pc, #192]	@ (80067c4 <TIM_Base_SetConfig+0x138>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2f      	ldr	r2, [pc, #188]	@ (80067c8 <TIM_Base_SetConfig+0x13c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d017      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2e      	ldr	r2, [pc, #184]	@ (80067cc <TIM_Base_SetConfig+0x140>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d013      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2d      	ldr	r2, [pc, #180]	@ (80067d0 <TIM_Base_SetConfig+0x144>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d00f      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2c      	ldr	r2, [pc, #176]	@ (80067d4 <TIM_Base_SetConfig+0x148>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00b      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2b      	ldr	r2, [pc, #172]	@ (80067d8 <TIM_Base_SetConfig+0x14c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d007      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2a      	ldr	r2, [pc, #168]	@ (80067dc <TIM_Base_SetConfig+0x150>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d003      	beq.n	800673e <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a29      	ldr	r2, [pc, #164]	@ (80067e0 <TIM_Base_SetConfig+0x154>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d108      	bne.n	8006750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a10      	ldr	r2, [pc, #64]	@ (80067b8 <TIM_Base_SetConfig+0x12c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d003      	beq.n	8006784 <TIM_Base_SetConfig+0xf8>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a12      	ldr	r2, [pc, #72]	@ (80067c8 <TIM_Base_SetConfig+0x13c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d103      	bne.n	800678c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d105      	bne.n	80067aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f023 0201 	bic.w	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	611a      	str	r2, [r3, #16]
  }
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800
 80067d8:	40001800 	.word	0x40001800
 80067dc:	40001c00 	.word	0x40001c00
 80067e0:	40002000 	.word	0x40002000

080067e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 0201 	bic.w	r2, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 0302 	bic.w	r3, r3, #2
 800682c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a20      	ldr	r2, [pc, #128]	@ (80068bc <TIM_OC1_SetConfig+0xd8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC1_SetConfig+0x64>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1f      	ldr	r2, [pc, #124]	@ (80068c0 <TIM_OC1_SetConfig+0xdc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10c      	bne.n	8006862 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0308 	bic.w	r3, r3, #8
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 0304 	bic.w	r3, r3, #4
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a15      	ldr	r2, [pc, #84]	@ (80068bc <TIM_OC1_SetConfig+0xd8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <TIM_OC1_SetConfig+0x8e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a14      	ldr	r2, [pc, #80]	@ (80068c0 <TIM_OC1_SetConfig+0xdc>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d111      	bne.n	8006896 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	621a      	str	r2, [r3, #32]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400

080068c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 0210 	bic.w	r2, r3, #16
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0320 	bic.w	r3, r3, #32
 800690e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a22      	ldr	r2, [pc, #136]	@ (80069a8 <TIM_OC2_SetConfig+0xe4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_OC2_SetConfig+0x68>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a21      	ldr	r2, [pc, #132]	@ (80069ac <TIM_OC2_SetConfig+0xe8>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d10d      	bne.n	8006948 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a17      	ldr	r2, [pc, #92]	@ (80069a8 <TIM_OC2_SetConfig+0xe4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC2_SetConfig+0x94>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <TIM_OC2_SetConfig+0xe8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d113      	bne.n	8006980 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800695e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40010400 	.word	0x40010400

080069b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0303 	bic.w	r3, r3, #3
 80069e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a21      	ldr	r2, [pc, #132]	@ (8006a90 <TIM_OC3_SetConfig+0xe0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d003      	beq.n	8006a16 <TIM_OC3_SetConfig+0x66>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a20      	ldr	r2, [pc, #128]	@ (8006a94 <TIM_OC3_SetConfig+0xe4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d10d      	bne.n	8006a32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a16      	ldr	r2, [pc, #88]	@ (8006a90 <TIM_OC3_SetConfig+0xe0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC3_SetConfig+0x92>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a15      	ldr	r2, [pc, #84]	@ (8006a94 <TIM_OC3_SetConfig+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d113      	bne.n	8006a6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400

08006a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	031b      	lsls	r3, r3, #12
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a12      	ldr	r2, [pc, #72]	@ (8006b3c <TIM_OC4_SetConfig+0xa4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC4_SetConfig+0x68>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a11      	ldr	r2, [pc, #68]	@ (8006b40 <TIM_OC4_SetConfig+0xa8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d109      	bne.n	8006b14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	621a      	str	r2, [r3, #32]
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	40010400 	.word	0x40010400

08006b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f023 030a 	bic.w	r3, r3, #10
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b087      	sub	sp, #28
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	031b      	lsls	r3, r3, #12
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006bde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	011b      	lsls	r3, r3, #4
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	621a      	str	r2, [r3, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	371c      	adds	r7, #28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b085      	sub	sp, #20
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f043 0307 	orr.w	r3, r3, #7
 8006c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	021a      	lsls	r2, r3, #8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	609a      	str	r2, [r3, #8]
}
 8006c6c:	bf00      	nop
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e05a      	b.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a21      	ldr	r2, [pc, #132]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d022      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d28:	d01d      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d018      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a1b      	ldr	r2, [pc, #108]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1a      	ldr	r2, [pc, #104]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a18      	ldr	r2, [pc, #96]	@ (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a15      	ldr	r2, [pc, #84]	@ (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d10c      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40000400 	.word	0x40000400
 8006da8:	40000800 	.word	0x40000800
 8006dac:	40000c00 	.word	0x40000c00
 8006db0:	40010400 	.word	0x40010400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40001800 	.word	0x40001800

08006dbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e03d      	b.n	8006e54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e042      	b.n	8006f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fc faa0 	bl	80033f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2224      	movs	r2, #36	@ 0x24
 8006eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 ffc9 	bl	8007e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08c      	sub	sp, #48	@ 0x30
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	4613      	mov	r3, r2
 8006f34:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d156      	bne.n	8006ff0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_UART_Transmit_DMA+0x26>
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e04f      	b.n	8006ff2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	88fa      	ldrh	r2, [r7, #6]
 8006f62:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2221      	movs	r2, #33	@ 0x21
 8006f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f76:	4a21      	ldr	r2, [pc, #132]	@ (8006ffc <HAL_UART_Transmit_DMA+0xd4>)
 8006f78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f7e:	4a20      	ldr	r2, [pc, #128]	@ (8007000 <HAL_UART_Transmit_DMA+0xd8>)
 8006f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_UART_Transmit_DMA+0xdc>)
 8006f88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8e:	2200      	movs	r2, #0
 8006f90:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006f92:	f107 0308 	add.w	r3, r7, #8
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	f7fd fafb 	bl	80045a4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fb6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	e853 3f00 	ldrex	r3, [r3]
 8006fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3314      	adds	r3, #20
 8006fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	6a39      	ldr	r1, [r7, #32]
 8006fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e5      	bne.n	8006fb8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3730      	adds	r7, #48	@ 0x30
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	080076f1 	.word	0x080076f1
 8007000:	0800778b 	.word	0x0800778b
 8007004:	0800790f 	.word	0x0800790f

08007008 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b20      	cmp	r3, #32
 8007020:	d112      	bne.n	8007048 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_UART_Receive_DMA+0x26>
 8007028:	88fb      	ldrh	r3, [r7, #6]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e00b      	b.n	800704a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	461a      	mov	r2, r3
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fcb0 	bl	80079a4 <UART_Start_Receive_DMA>
 8007044:	4603      	mov	r3, r0
 8007046:	e000      	b.n	800704a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007048:	2302      	movs	r3, #2
  }
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b090      	sub	sp, #64	@ 0x40
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007068:	2b80      	cmp	r3, #128	@ 0x80
 800706a:	bf0c      	ite	eq
 800706c:	2301      	moveq	r3, #1
 800706e:	2300      	movne	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b21      	cmp	r3, #33	@ 0x21
 800707e:	d128      	bne.n	80070d2 <HAL_UART_DMAStop+0x80>
 8007080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d025      	beq.n	80070d2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3314      	adds	r3, #20
 800708c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	623b      	str	r3, [r7, #32]
   return(result);
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800709c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3314      	adds	r3, #20
 80070a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80070a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d004      	beq.n	80070cc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd fac4 	bl	8004654 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fd03 	bl	8007ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070dc:	2b40      	cmp	r3, #64	@ 0x40
 80070de:	bf0c      	ite	eq
 80070e0:	2301      	moveq	r3, #1
 80070e2:	2300      	movne	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b22      	cmp	r3, #34	@ 0x22
 80070f2:	d128      	bne.n	8007146 <HAL_UART_DMAStop+0xf4>
 80070f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d025      	beq.n	8007146 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3314      	adds	r3, #20
 8007100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	60fb      	str	r3, [r7, #12]
   return(result);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3314      	adds	r3, #20
 8007118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800711a:	61fa      	str	r2, [r7, #28]
 800711c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	69b9      	ldr	r1, [r7, #24]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	617b      	str	r3, [r7, #20]
   return(result);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e5      	bne.n	80070fa <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713a:	4618      	mov	r0, r3
 800713c:	f7fd fa8a 	bl	8004654 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fcf1 	bl	8007b28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3740      	adds	r7, #64	@ 0x40
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b0ba      	sub	sp, #232	@ 0xe8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007176:	2300      	movs	r3, #0
 8007178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800717c:	2300      	movs	r3, #0
 800717e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800718e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10f      	bne.n	80071b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <HAL_UART_IRQHandler+0x66>
 80071a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fd99 	bl	8007ce6 <UART_Receive_IT>
      return;
 80071b4:	e25b      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80de 	beq.w	800737c <HAL_UART_IRQHandler+0x22c>
 80071c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80d1 	beq.w	800737c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_UART_IRQHandler+0xae>
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f6:	f043 0201 	orr.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007202:	f003 0304 	and.w	r3, r3, #4
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <HAL_UART_IRQHandler+0xd2>
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721a:	f043 0202 	orr.w	r2, r3, #2
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <HAL_UART_IRQHandler+0xf6>
 800722e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d005      	beq.n	8007246 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	f043 0204 	orr.w	r2, r3, #4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d011      	beq.n	8007276 <HAL_UART_IRQHandler+0x126>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d105      	bne.n	800726a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	f043 0208 	orr.w	r2, r3, #8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 81f2 	beq.w	8007664 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007284:	f003 0320 	and.w	r3, r3, #32
 8007288:	2b00      	cmp	r3, #0
 800728a:	d008      	beq.n	800729e <HAL_UART_IRQHandler+0x14e>
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fd24 	bl	8007ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a8:	2b40      	cmp	r3, #64	@ 0x40
 80072aa:	bf0c      	ite	eq
 80072ac:	2301      	moveq	r3, #1
 80072ae:	2300      	movne	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d103      	bne.n	80072ca <HAL_UART_IRQHandler+0x17a>
 80072c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d04f      	beq.n	800736a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fc2c 	bl	8007b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072da:	2b40      	cmp	r3, #64	@ 0x40
 80072dc:	d141      	bne.n	8007362 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3314      	adds	r3, #20
 80072e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3314      	adds	r3, #20
 8007306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800730a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800730e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1d9      	bne.n	80072de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d013      	beq.n	800735a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007336:	4a7e      	ldr	r2, [pc, #504]	@ (8007530 <HAL_UART_IRQHandler+0x3e0>)
 8007338:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733e:	4618      	mov	r0, r3
 8007340:	f7fd f9f8 	bl	8004734 <HAL_DMA_Abort_IT>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d016      	beq.n	8007378 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	e00e      	b.n	8007378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9b2 	bl	80076c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00a      	b.n	8007378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9ae 	bl	80076c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e006      	b.n	8007378 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9aa 	bl	80076c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007376:	e175      	b.n	8007664 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	bf00      	nop
    return;
 800737a:	e173      	b.n	8007664 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007380:	2b01      	cmp	r3, #1
 8007382:	f040 814f 	bne.w	8007624 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8148 	beq.w	8007624 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 8141 	beq.w	8007624 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c2:	2b40      	cmp	r3, #64	@ 0x40
 80073c4:	f040 80b6 	bne.w	8007534 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 8145 	beq.w	8007668 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073e6:	429a      	cmp	r2, r3
 80073e8:	f080 813e 	bcs.w	8007668 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073fe:	f000 8088 	beq.w	8007512 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	330c      	adds	r3, #12
 8007408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800741c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800742e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007432:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800743a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d9      	bne.n	8007402 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3314      	adds	r3, #20
 8007454:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800745e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007472:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800747a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e1      	bne.n	800744e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007494:	e853 3f00 	ldrex	r3, [r3]
 8007498:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800749a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800749c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3314      	adds	r3, #20
 80074aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074b6:	e841 2300 	strex	r3, r2, [r1]
 80074ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1e3      	bne.n	800748a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	330c      	adds	r3, #12
 80074d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074e2:	f023 0310 	bic.w	r3, r3, #16
 80074e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	330c      	adds	r3, #12
 80074f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074fc:	e841 2300 	strex	r3, r2, [r1]
 8007500:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007504:	2b00      	cmp	r3, #0
 8007506:	d1e3      	bne.n	80074d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750c:	4618      	mov	r0, r3
 800750e:	f7fd f8a1 	bl	8004654 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007520:	b29b      	uxth	r3, r3
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	b29b      	uxth	r3, r3
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f8d5 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800752e:	e09b      	b.n	8007668 <HAL_UART_IRQHandler+0x518>
 8007530:	08007bef 	.word	0x08007bef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800753c:	b29b      	uxth	r3, r3
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007548:	b29b      	uxth	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 808e 	beq.w	800766c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8089 	beq.w	800766c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800756a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	330c      	adds	r3, #12
 800757a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800757e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007580:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800758c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e3      	bne.n	800755a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3314      	adds	r3, #20
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	623b      	str	r3, [r7, #32]
   return(result);
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	f023 0301 	bic.w	r3, r3, #1
 80075a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3314      	adds	r3, #20
 80075b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80075b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075be:	e841 2300 	strex	r3, r2, [r1]
 80075c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e3      	bne.n	8007592 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	330c      	adds	r3, #12
 80075de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0310 	bic.w	r3, r3, #16
 80075ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075fc:	61fa      	str	r2, [r7, #28]
 80075fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	69b9      	ldr	r1, [r7, #24]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	617b      	str	r3, [r7, #20]
   return(result);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e3      	bne.n	80075d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2202      	movs	r2, #2
 8007614:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007616:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f85b 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007622:	e023      	b.n	800766c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762c:	2b00      	cmp	r3, #0
 800762e:	d009      	beq.n	8007644 <HAL_UART_IRQHandler+0x4f4>
 8007630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 faea 	bl	8007c16 <UART_Transmit_IT>
    return;
 8007642:	e014      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00e      	beq.n	800766e <HAL_UART_IRQHandler+0x51e>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 fb2a 	bl	8007cb6 <UART_EndTransmit_IT>
    return;
 8007662:	e004      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
    return;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
      return;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_UART_IRQHandler+0x51e>
      return;
 800766c:	bf00      	nop
  }
}
 800766e:	37e8      	adds	r7, #232	@ 0xe8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b090      	sub	sp, #64	@ 0x40
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007708:	2b00      	cmp	r3, #0
 800770a:	d137      	bne.n	800777c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800770c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800770e:	2200      	movs	r2, #0
 8007710:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3314      	adds	r3, #20
 8007718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	623b      	str	r3, [r7, #32]
   return(result);
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007728:	63bb      	str	r3, [r7, #56]	@ 0x38
 800772a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3314      	adds	r3, #20
 8007730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007732:	633a      	str	r2, [r7, #48]	@ 0x30
 8007734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007736:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e5      	bne.n	8007712 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	60fb      	str	r3, [r7, #12]
   return(result);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800775c:	637b      	str	r3, [r7, #52]	@ 0x34
 800775e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007766:	61fa      	str	r2, [r7, #28]
 8007768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	69b9      	ldr	r1, [r7, #24]
 800776c:	69fa      	ldr	r2, [r7, #28]
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	617b      	str	r3, [r7, #20]
   return(result);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e5      	bne.n	8007746 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800777a:	e002      	b.n	8007782 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800777c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800777e:	f7ff ff79 	bl	8007674 <HAL_UART_TxCpltCallback>
}
 8007782:	bf00      	nop
 8007784:	3740      	adds	r7, #64	@ 0x40
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007798:	68f8      	ldr	r0, [r7, #12]
 800779a:	f7ff ff75 	bl	8007688 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779e:	bf00      	nop
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b09c      	sub	sp, #112	@ 0x70
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d172      	bne.n	80078a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80077c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077c4:	2200      	movs	r2, #0
 80077c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	330c      	adds	r3, #12
 80077e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077f0:	e841 2300 	strex	r3, r2, [r1]
 80077f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1e5      	bne.n	80077c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3314      	adds	r3, #20
 8007802:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800780c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	667b      	str	r3, [r7, #100]	@ 0x64
 8007814:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3314      	adds	r3, #20
 800781a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800781c:	647a      	str	r2, [r7, #68]	@ 0x44
 800781e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800782a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e5      	bne.n	80077fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3314      	adds	r3, #20
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	623b      	str	r3, [r7, #32]
   return(result);
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007846:	663b      	str	r3, [r7, #96]	@ 0x60
 8007848:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3314      	adds	r3, #20
 800784e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007850:	633a      	str	r2, [r7, #48]	@ 0x30
 8007852:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e5      	bne.n	8007830 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800786e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007870:	2b01      	cmp	r3, #1
 8007872:	d119      	bne.n	80078a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60fb      	str	r3, [r7, #12]
   return(result);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800788c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	330c      	adds	r3, #12
 8007892:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007894:	61fa      	str	r2, [r7, #28]
 8007896:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	69b9      	ldr	r1, [r7, #24]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	617b      	str	r3, [r7, #20]
   return(result);
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e5      	bne.n	8007874 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078aa:	2200      	movs	r2, #0
 80078ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d106      	bne.n	80078c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078ba:	4619      	mov	r1, r3
 80078bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078be:	f7ff ff0b 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078c2:	e002      	b.n	80078ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80078c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078c6:	f7ff fee9 	bl	800769c <HAL_UART_RxCpltCallback>
}
 80078ca:	bf00      	nop
 80078cc:	3770      	adds	r7, #112	@ 0x70
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d108      	bne.n	8007900 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078f2:	085b      	lsrs	r3, r3, #1
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff feed 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078fe:	e002      	b.n	8007906 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7ff fed5 	bl	80076b0 <HAL_UART_RxHalfCpltCallback>
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800791e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792a:	2b80      	cmp	r3, #128	@ 0x80
 800792c:	bf0c      	ite	eq
 800792e:	2301      	moveq	r3, #1
 8007930:	2300      	movne	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b21      	cmp	r3, #33	@ 0x21
 8007940:	d108      	bne.n	8007954 <UART_DMAError+0x46>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800794e:	68b8      	ldr	r0, [r7, #8]
 8007950:	f000 f8c2 	bl	8007ad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795e:	2b40      	cmp	r3, #64	@ 0x40
 8007960:	bf0c      	ite	eq
 8007962:	2301      	moveq	r3, #1
 8007964:	2300      	movne	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b22      	cmp	r3, #34	@ 0x22
 8007974:	d108      	bne.n	8007988 <UART_DMAError+0x7a>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f000 f8d0 	bl	8007b28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798c:	f043 0210 	orr.w	r2, r3, #16
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f7ff fe95 	bl	80076c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b098      	sub	sp, #96	@ 0x60
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	88fa      	ldrh	r2, [r7, #6]
 80079bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2222      	movs	r2, #34	@ 0x22
 80079c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	4a3e      	ldr	r2, [pc, #248]	@ (8007acc <UART_Start_Receive_DMA+0x128>)
 80079d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	4a3d      	ldr	r2, [pc, #244]	@ (8007ad0 <UART_Start_Receive_DMA+0x12c>)
 80079da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ad4 <UART_Start_Receive_DMA+0x130>)
 80079e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e8:	2200      	movs	r2, #0
 80079ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079ec:	f107 0308 	add.w	r3, r7, #8
 80079f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3304      	adds	r3, #4
 80079fc:	4619      	mov	r1, r3
 80079fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	f7fc fdce 	bl	80045a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d019      	beq.n	8007a5a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3314      	adds	r3, #20
 8007a78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3314      	adds	r3, #20
 8007a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3314      	adds	r3, #20
 8007aac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007aae:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6a39      	ldr	r1, [r7, #32]
 8007ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e5      	bne.n	8007a8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3760      	adds	r7, #96	@ 0x60
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	080077a7 	.word	0x080077a7
 8007ad0:	080078d3 	.word	0x080078d3
 8007ad4:	0800790f 	.word	0x0800790f

08007ad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b089      	sub	sp, #36	@ 0x24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	330c      	adds	r3, #12
 8007ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	69fa      	ldr	r2, [r7, #28]
 8007b00:	61ba      	str	r2, [r7, #24]
 8007b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6979      	ldr	r1, [r7, #20]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e5      	bne.n	8007ae0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b1c:	bf00      	nop
 8007b1e:	3724      	adds	r7, #36	@ 0x24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b095      	sub	sp, #84	@ 0x54
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	330c      	adds	r3, #12
 8007b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b3a:	e853 3f00 	ldrex	r3, [r3]
 8007b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e5      	bne.n	8007b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3314      	adds	r3, #20
 8007b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f023 0301 	bic.w	r3, r3, #1
 8007b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3314      	adds	r3, #20
 8007b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e5      	bne.n	8007b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d119      	bne.n	8007bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	330c      	adds	r3, #12
 8007ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f023 0310 	bic.w	r3, r3, #16
 8007bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bc0:	61ba      	str	r2, [r7, #24]
 8007bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6979      	ldr	r1, [r7, #20]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e5      	bne.n	8007ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007be2:	bf00      	nop
 8007be4:	3754      	adds	r7, #84	@ 0x54
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b084      	sub	sp, #16
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f7ff fd5b 	bl	80076c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c0e:	bf00      	nop
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b21      	cmp	r3, #33	@ 0x21
 8007c28:	d13e      	bne.n	8007ca8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c32:	d114      	bne.n	8007c5e <UART_Transmit_IT+0x48>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d110      	bne.n	8007c5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a1b      	ldr	r3, [r3, #32]
 8007c56:	1c9a      	adds	r2, r3, #2
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	621a      	str	r2, [r3, #32]
 8007c5c:	e008      	b.n	8007c70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	1c59      	adds	r1, r3, #1
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	6211      	str	r1, [r2, #32]
 8007c68:	781a      	ldrb	r2, [r3, #0]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10f      	bne.n	8007ca4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ca2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e000      	b.n	8007caa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ca8:	2302      	movs	r3, #2
  }
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fccc 	bl	8007674 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b08c      	sub	sp, #48	@ 0x30
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b22      	cmp	r3, #34	@ 0x22
 8007cf8:	f040 80ae 	bne.w	8007e58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d04:	d117      	bne.n	8007d36 <UART_Receive_IT+0x50>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d113      	bne.n	8007d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2e:	1c9a      	adds	r2, r3, #2
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d34:	e026      	b.n	8007d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d48:	d007      	beq.n	8007d5a <UART_Receive_IT+0x74>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <UART_Receive_IT+0x82>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e008      	b.n	8007d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4619      	mov	r1, r3
 8007d92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d15d      	bne.n	8007e54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0220 	bic.w	r2, r2, #32
 8007da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695a      	ldr	r2, [r3, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d135      	bne.n	8007e4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	330c      	adds	r3, #12
 8007dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	613b      	str	r3, [r7, #16]
   return(result);
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f023 0310 	bic.w	r3, r3, #16
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	330c      	adds	r3, #12
 8007e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e04:	623a      	str	r2, [r7, #32]
 8007e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	69f9      	ldr	r1, [r7, #28]
 8007e0a:	6a3a      	ldr	r2, [r7, #32]
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d10a      	bne.n	8007e3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff fc48 	bl	80076d8 <HAL_UARTEx_RxEventCallback>
 8007e48:	e002      	b.n	8007e50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fc26 	bl	800769c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e002      	b.n	8007e5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	e000      	b.n	8007e5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e58:	2302      	movs	r3, #2
  }
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3730      	adds	r7, #48	@ 0x30
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
	...

08007e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e68:	b0c0      	sub	sp, #256	@ 0x100
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	68d9      	ldr	r1, [r3, #12]
 8007e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	ea40 0301 	orr.w	r3, r0, r1
 8007e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ebc:	f021 010c 	bic.w	r1, r1, #12
 8007ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007eca:	430b      	orrs	r3, r1
 8007ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ede:	6999      	ldr	r1, [r3, #24]
 8007ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	ea40 0301 	orr.w	r3, r0, r1
 8007eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b8f      	ldr	r3, [pc, #572]	@ (8008130 <UART_SetConfig+0x2cc>)
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d005      	beq.n	8007f04 <UART_SetConfig+0xa0>
 8007ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b8d      	ldr	r3, [pc, #564]	@ (8008134 <UART_SetConfig+0x2d0>)
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d104      	bne.n	8007f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fd f986 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 8007f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f0c:	e003      	b.n	8007f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f0e:	f7fd f96d 	bl	80051ec <HAL_RCC_GetPCLK1Freq>
 8007f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f20:	f040 810c 	bne.w	800813c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f36:	4622      	mov	r2, r4
 8007f38:	462b      	mov	r3, r5
 8007f3a:	1891      	adds	r1, r2, r2
 8007f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f46:	4621      	mov	r1, r4
 8007f48:	eb12 0801 	adds.w	r8, r2, r1
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	eb43 0901 	adc.w	r9, r3, r1
 8007f52:	f04f 0200 	mov.w	r2, #0
 8007f56:	f04f 0300 	mov.w	r3, #0
 8007f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f66:	4690      	mov	r8, r2
 8007f68:	4699      	mov	r9, r3
 8007f6a:	4623      	mov	r3, r4
 8007f6c:	eb18 0303 	adds.w	r3, r8, r3
 8007f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f74:	462b      	mov	r3, r5
 8007f76:	eb49 0303 	adc.w	r3, r9, r3
 8007f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f92:	460b      	mov	r3, r1
 8007f94:	18db      	adds	r3, r3, r3
 8007f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f98:	4613      	mov	r3, r2
 8007f9a:	eb42 0303 	adc.w	r3, r2, r3
 8007f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007fa8:	f7f8 fe08 	bl	8000bbc <__aeabi_uldivmod>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	4b61      	ldr	r3, [pc, #388]	@ (8008138 <UART_SetConfig+0x2d4>)
 8007fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb6:	095b      	lsrs	r3, r3, #5
 8007fb8:	011c      	lsls	r4, r3, #4
 8007fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fcc:	4642      	mov	r2, r8
 8007fce:	464b      	mov	r3, r9
 8007fd0:	1891      	adds	r1, r2, r2
 8007fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007fd4:	415b      	adcs	r3, r3
 8007fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007fdc:	4641      	mov	r1, r8
 8007fde:	eb12 0a01 	adds.w	sl, r2, r1
 8007fe2:	4649      	mov	r1, r9
 8007fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ffc:	4692      	mov	sl, r2
 8007ffe:	469b      	mov	fp, r3
 8008000:	4643      	mov	r3, r8
 8008002:	eb1a 0303 	adds.w	r3, sl, r3
 8008006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800800a:	464b      	mov	r3, r9
 800800c:	eb4b 0303 	adc.w	r3, fp, r3
 8008010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008028:	460b      	mov	r3, r1
 800802a:	18db      	adds	r3, r3, r3
 800802c:	643b      	str	r3, [r7, #64]	@ 0x40
 800802e:	4613      	mov	r3, r2
 8008030:	eb42 0303 	adc.w	r3, r2, r3
 8008034:	647b      	str	r3, [r7, #68]	@ 0x44
 8008036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800803a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800803e:	f7f8 fdbd 	bl	8000bbc <__aeabi_uldivmod>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4611      	mov	r1, r2
 8008048:	4b3b      	ldr	r3, [pc, #236]	@ (8008138 <UART_SetConfig+0x2d4>)
 800804a:	fba3 2301 	umull	r2, r3, r3, r1
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	2264      	movs	r2, #100	@ 0x64
 8008052:	fb02 f303 	mul.w	r3, r2, r3
 8008056:	1acb      	subs	r3, r1, r3
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800805e:	4b36      	ldr	r3, [pc, #216]	@ (8008138 <UART_SetConfig+0x2d4>)
 8008060:	fba3 2302 	umull	r2, r3, r3, r2
 8008064:	095b      	lsrs	r3, r3, #5
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800806c:	441c      	add	r4, r3
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800807c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	1891      	adds	r1, r2, r2
 8008086:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008088:	415b      	adcs	r3, r3
 800808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800808c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008090:	4641      	mov	r1, r8
 8008092:	1851      	adds	r1, r2, r1
 8008094:	6339      	str	r1, [r7, #48]	@ 0x30
 8008096:	4649      	mov	r1, r9
 8008098:	414b      	adcs	r3, r1
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80080a8:	4659      	mov	r1, fp
 80080aa:	00cb      	lsls	r3, r1, #3
 80080ac:	4651      	mov	r1, sl
 80080ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080b2:	4651      	mov	r1, sl
 80080b4:	00ca      	lsls	r2, r1, #3
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	4642      	mov	r2, r8
 80080be:	189b      	adds	r3, r3, r2
 80080c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080c4:	464b      	mov	r3, r9
 80080c6:	460a      	mov	r2, r1
 80080c8:	eb42 0303 	adc.w	r3, r2, r3
 80080cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080e4:	460b      	mov	r3, r1
 80080e6:	18db      	adds	r3, r3, r3
 80080e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080ea:	4613      	mov	r3, r2
 80080ec:	eb42 0303 	adc.w	r3, r2, r3
 80080f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80080fa:	f7f8 fd5f 	bl	8000bbc <__aeabi_uldivmod>
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4b0d      	ldr	r3, [pc, #52]	@ (8008138 <UART_SetConfig+0x2d4>)
 8008104:	fba3 1302 	umull	r1, r3, r3, r2
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	2164      	movs	r1, #100	@ 0x64
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	00db      	lsls	r3, r3, #3
 8008114:	3332      	adds	r3, #50	@ 0x32
 8008116:	4a08      	ldr	r2, [pc, #32]	@ (8008138 <UART_SetConfig+0x2d4>)
 8008118:	fba2 2303 	umull	r2, r3, r2, r3
 800811c:	095b      	lsrs	r3, r3, #5
 800811e:	f003 0207 	and.w	r2, r3, #7
 8008122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4422      	add	r2, r4
 800812a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800812c:	e106      	b.n	800833c <UART_SetConfig+0x4d8>
 800812e:	bf00      	nop
 8008130:	40011000 	.word	0x40011000
 8008134:	40011400 	.word	0x40011400
 8008138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800813c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008140:	2200      	movs	r2, #0
 8008142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800814a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800814e:	4642      	mov	r2, r8
 8008150:	464b      	mov	r3, r9
 8008152:	1891      	adds	r1, r2, r2
 8008154:	6239      	str	r1, [r7, #32]
 8008156:	415b      	adcs	r3, r3
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
 800815a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800815e:	4641      	mov	r1, r8
 8008160:	1854      	adds	r4, r2, r1
 8008162:	4649      	mov	r1, r9
 8008164:	eb43 0501 	adc.w	r5, r3, r1
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	00eb      	lsls	r3, r5, #3
 8008172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008176:	00e2      	lsls	r2, r4, #3
 8008178:	4614      	mov	r4, r2
 800817a:	461d      	mov	r5, r3
 800817c:	4643      	mov	r3, r8
 800817e:	18e3      	adds	r3, r4, r3
 8008180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008184:	464b      	mov	r3, r9
 8008186:	eb45 0303 	adc.w	r3, r5, r3
 800818a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800819a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081aa:	4629      	mov	r1, r5
 80081ac:	008b      	lsls	r3, r1, #2
 80081ae:	4621      	mov	r1, r4
 80081b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081b4:	4621      	mov	r1, r4
 80081b6:	008a      	lsls	r2, r1, #2
 80081b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081bc:	f7f8 fcfe 	bl	8000bbc <__aeabi_uldivmod>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4b60      	ldr	r3, [pc, #384]	@ (8008348 <UART_SetConfig+0x4e4>)
 80081c6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	011c      	lsls	r4, r3, #4
 80081ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081e0:	4642      	mov	r2, r8
 80081e2:	464b      	mov	r3, r9
 80081e4:	1891      	adds	r1, r2, r2
 80081e6:	61b9      	str	r1, [r7, #24]
 80081e8:	415b      	adcs	r3, r3
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081f0:	4641      	mov	r1, r8
 80081f2:	1851      	adds	r1, r2, r1
 80081f4:	6139      	str	r1, [r7, #16]
 80081f6:	4649      	mov	r1, r9
 80081f8:	414b      	adcs	r3, r1
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	f04f 0200 	mov.w	r2, #0
 8008200:	f04f 0300 	mov.w	r3, #0
 8008204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008208:	4659      	mov	r1, fp
 800820a:	00cb      	lsls	r3, r1, #3
 800820c:	4651      	mov	r1, sl
 800820e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008212:	4651      	mov	r1, sl
 8008214:	00ca      	lsls	r2, r1, #3
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	4603      	mov	r3, r0
 800821c:	4642      	mov	r2, r8
 800821e:	189b      	adds	r3, r3, r2
 8008220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008224:	464b      	mov	r3, r9
 8008226:	460a      	mov	r2, r1
 8008228:	eb42 0303 	adc.w	r3, r2, r3
 800822c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800823a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	f04f 0300 	mov.w	r3, #0
 8008244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008248:	4649      	mov	r1, r9
 800824a:	008b      	lsls	r3, r1, #2
 800824c:	4641      	mov	r1, r8
 800824e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008252:	4641      	mov	r1, r8
 8008254:	008a      	lsls	r2, r1, #2
 8008256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800825a:	f7f8 fcaf 	bl	8000bbc <__aeabi_uldivmod>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4611      	mov	r1, r2
 8008264:	4b38      	ldr	r3, [pc, #224]	@ (8008348 <UART_SetConfig+0x4e4>)
 8008266:	fba3 2301 	umull	r2, r3, r3, r1
 800826a:	095b      	lsrs	r3, r3, #5
 800826c:	2264      	movs	r2, #100	@ 0x64
 800826e:	fb02 f303 	mul.w	r3, r2, r3
 8008272:	1acb      	subs	r3, r1, r3
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	3332      	adds	r3, #50	@ 0x32
 8008278:	4a33      	ldr	r2, [pc, #204]	@ (8008348 <UART_SetConfig+0x4e4>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008284:	441c      	add	r4, r3
 8008286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800828a:	2200      	movs	r2, #0
 800828c:	673b      	str	r3, [r7, #112]	@ 0x70
 800828e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	1891      	adds	r1, r2, r2
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	415b      	adcs	r3, r3
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082a4:	4641      	mov	r1, r8
 80082a6:	1851      	adds	r1, r2, r1
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	4649      	mov	r1, r9
 80082ac:	414b      	adcs	r3, r1
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082bc:	4659      	mov	r1, fp
 80082be:	00cb      	lsls	r3, r1, #3
 80082c0:	4651      	mov	r1, sl
 80082c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082c6:	4651      	mov	r1, sl
 80082c8:	00ca      	lsls	r2, r1, #3
 80082ca:	4610      	mov	r0, r2
 80082cc:	4619      	mov	r1, r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	4642      	mov	r2, r8
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082d6:	464b      	mov	r3, r9
 80082d8:	460a      	mov	r2, r1
 80082da:	eb42 0303 	adc.w	r3, r2, r3
 80082de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80082f8:	4649      	mov	r1, r9
 80082fa:	008b      	lsls	r3, r1, #2
 80082fc:	4641      	mov	r1, r8
 80082fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008302:	4641      	mov	r1, r8
 8008304:	008a      	lsls	r2, r1, #2
 8008306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800830a:	f7f8 fc57 	bl	8000bbc <__aeabi_uldivmod>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4b0d      	ldr	r3, [pc, #52]	@ (8008348 <UART_SetConfig+0x4e4>)
 8008314:	fba3 1302 	umull	r1, r3, r3, r2
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	2164      	movs	r1, #100	@ 0x64
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	3332      	adds	r3, #50	@ 0x32
 8008326:	4a08      	ldr	r2, [pc, #32]	@ (8008348 <UART_SetConfig+0x4e4>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	f003 020f 	and.w	r2, r3, #15
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4422      	add	r2, r4
 800833a:	609a      	str	r2, [r3, #8]
}
 800833c:	bf00      	nop
 800833e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008342:	46bd      	mov	sp, r7
 8008344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008348:	51eb851f 	.word	0x51eb851f

0800834c <__NVIC_SetPriority>:
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800835c:	2b00      	cmp	r3, #0
 800835e:	db0a      	blt.n	8008376 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	b2da      	uxtb	r2, r3
 8008364:	490c      	ldr	r1, [pc, #48]	@ (8008398 <__NVIC_SetPriority+0x4c>)
 8008366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800836a:	0112      	lsls	r2, r2, #4
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	440b      	add	r3, r1
 8008370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008374:	e00a      	b.n	800838c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	b2da      	uxtb	r2, r3
 800837a:	4908      	ldr	r1, [pc, #32]	@ (800839c <__NVIC_SetPriority+0x50>)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	3b04      	subs	r3, #4
 8008384:	0112      	lsls	r2, r2, #4
 8008386:	b2d2      	uxtb	r2, r2
 8008388:	440b      	add	r3, r1
 800838a:	761a      	strb	r2, [r3, #24]
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	e000e100 	.word	0xe000e100
 800839c:	e000ed00 	.word	0xe000ed00

080083a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80083a4:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <SysTick_Handler+0x1c>)
 80083a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80083a8:	f001 fd40 	bl	8009e2c <xTaskGetSchedulerState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d001      	beq.n	80083b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80083b2:	f002 fb39 	bl	800aa28 <xPortSysTickHandler>
  }
}
 80083b6:	bf00      	nop
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	e000e010 	.word	0xe000e010

080083c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80083c4:	2100      	movs	r1, #0
 80083c6:	f06f 0004 	mvn.w	r0, #4
 80083ca:	f7ff ffbf 	bl	800834c <__NVIC_SetPriority>
#endif
}
 80083ce:	bf00      	nop
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083da:	f3ef 8305 	mrs	r3, IPSR
 80083de:	603b      	str	r3, [r7, #0]
  return(result);
 80083e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083e6:	f06f 0305 	mvn.w	r3, #5
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e00c      	b.n	8008408 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <osKernelInitialize+0x44>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d105      	bne.n	8008402 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083f6:	4b08      	ldr	r3, [pc, #32]	@ (8008418 <osKernelInitialize+0x44>)
 80083f8:	2201      	movs	r2, #1
 80083fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	e002      	b.n	8008408 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008402:	f04f 33ff 	mov.w	r3, #4294967295
 8008406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008408:	687b      	ldr	r3, [r7, #4]
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	20007a94 	.word	0x20007a94

0800841c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008422:	f3ef 8305 	mrs	r3, IPSR
 8008426:	603b      	str	r3, [r7, #0]
  return(result);
 8008428:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800842a:	2b00      	cmp	r3, #0
 800842c:	d003      	beq.n	8008436 <osKernelStart+0x1a>
    stat = osErrorISR;
 800842e:	f06f 0305 	mvn.w	r3, #5
 8008432:	607b      	str	r3, [r7, #4]
 8008434:	e010      	b.n	8008458 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008436:	4b0b      	ldr	r3, [pc, #44]	@ (8008464 <osKernelStart+0x48>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d109      	bne.n	8008452 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800843e:	f7ff ffbf 	bl	80083c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008442:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <osKernelStart+0x48>)
 8008444:	2202      	movs	r2, #2
 8008446:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008448:	f001 f87a 	bl	8009540 <vTaskStartScheduler>
      stat = osOK;
 800844c:	2300      	movs	r3, #0
 800844e:	607b      	str	r3, [r7, #4]
 8008450:	e002      	b.n	8008458 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008452:	f04f 33ff 	mov.w	r3, #4294967295
 8008456:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008458:	687b      	ldr	r3, [r7, #4]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20007a94 	.word	0x20007a94

08008468 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b08e      	sub	sp, #56	@ 0x38
 800846c:	af04      	add	r7, sp, #16
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008478:	f3ef 8305 	mrs	r3, IPSR
 800847c:	617b      	str	r3, [r7, #20]
  return(result);
 800847e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008480:	2b00      	cmp	r3, #0
 8008482:	d17e      	bne.n	8008582 <osThreadNew+0x11a>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d07b      	beq.n	8008582 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800848a:	2380      	movs	r3, #128	@ 0x80
 800848c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800848e:	2318      	movs	r3, #24
 8008490:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008496:	f04f 33ff 	mov.w	r3, #4294967295
 800849a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d045      	beq.n	800852e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <osThreadNew+0x48>
        name = attr->name;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <osThreadNew+0x6e>
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	2b38      	cmp	r3, #56	@ 0x38
 80084c8:	d805      	bhi.n	80084d6 <osThreadNew+0x6e>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d001      	beq.n	80084da <osThreadNew+0x72>
        return (NULL);
 80084d6:	2300      	movs	r3, #0
 80084d8:	e054      	b.n	8008584 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	089b      	lsrs	r3, r3, #2
 80084e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00e      	beq.n	8008510 <osThreadNew+0xa8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	2b5b      	cmp	r3, #91	@ 0x5b
 80084f8:	d90a      	bls.n	8008510 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d006      	beq.n	8008510 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <osThreadNew+0xa8>
        mem = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	61bb      	str	r3, [r7, #24]
 800850e:	e010      	b.n	8008532 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10c      	bne.n	8008532 <osThreadNew+0xca>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d108      	bne.n	8008532 <osThreadNew+0xca>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <osThreadNew+0xca>
          mem = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	61bb      	str	r3, [r7, #24]
 800852c:	e001      	b.n	8008532 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d110      	bne.n	800855a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008540:	9202      	str	r2, [sp, #8]
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6a3a      	ldr	r2, [r7, #32]
 800854c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fe1a 	bl	8009188 <xTaskCreateStatic>
 8008554:	4603      	mov	r3, r0
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	e013      	b.n	8008582 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d110      	bne.n	8008582 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008560:	6a3b      	ldr	r3, [r7, #32]
 8008562:	b29a      	uxth	r2, r3
 8008564:	f107 0310 	add.w	r3, r7, #16
 8008568:	9301      	str	r3, [sp, #4]
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fe68 	bl	8009248 <xTaskCreate>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d001      	beq.n	8008582 <osThreadNew+0x11a>
            hTask = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008582:	693b      	ldr	r3, [r7, #16]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3728      	adds	r7, #40	@ 0x28
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008594:	f3ef 8305 	mrs	r3, IPSR
 8008598:	60bb      	str	r3, [r7, #8]
  return(result);
 800859a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <osDelay+0x1c>
    stat = osErrorISR;
 80085a0:	f06f 0305 	mvn.w	r3, #5
 80085a4:	60fb      	str	r3, [r7, #12]
 80085a6:	e007      	b.n	80085b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 ff8e 	bl	80094d4 <vTaskDelay>
    }
  }

  return (stat);
 80085b8:	68fb      	ldr	r3, [r7, #12]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
	...

080085c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4a07      	ldr	r2, [pc, #28]	@ (80085f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80085d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4a06      	ldr	r2, [pc, #24]	@ (80085f4 <vApplicationGetIdleTaskMemory+0x30>)
 80085da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2280      	movs	r2, #128	@ 0x80
 80085e0:	601a      	str	r2, [r3, #0]
}
 80085e2:	bf00      	nop
 80085e4:	3714      	adds	r7, #20
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20007a98 	.word	0x20007a98
 80085f4:	20007af4 	.word	0x20007af4

080085f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4a07      	ldr	r2, [pc, #28]	@ (8008624 <vApplicationGetTimerTaskMemory+0x2c>)
 8008608:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	4a06      	ldr	r2, [pc, #24]	@ (8008628 <vApplicationGetTimerTaskMemory+0x30>)
 800860e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008616:	601a      	str	r2, [r3, #0]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	20007cf4 	.word	0x20007cf4
 8008628:	20007d50 	.word	0x20007d50

0800862c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f103 0208 	add.w	r2, r3, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f103 0208 	add.w	r2, r3, #8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f103 0208 	add.w	r2, r3, #8
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008686:	b480      	push	{r7}
 8008688:	b085      	sub	sp, #20
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	683a      	ldr	r2, [r7, #0]
 80086b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	1c5a      	adds	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	601a      	str	r2, [r3, #0]
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e4:	d103      	bne.n	80086ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	e00c      	b.n	8008708 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3308      	adds	r3, #8
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e002      	b.n	80086fc <vListInsert+0x2e>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	429a      	cmp	r2, r3
 8008706:	d2f6      	bcs.n	80086f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	601a      	str	r2, [r3, #0]
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6892      	ldr	r2, [r2, #8]
 8008756:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6852      	ldr	r2, [r2, #4]
 8008760:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	429a      	cmp	r2, r3
 800876a:	d103      	bne.n	8008774 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689a      	ldr	r2, [r3, #8]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1e5a      	subs	r2, r3, #1
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10b      	bne.n	80087c0 <xQueueGenericReset+0x2c>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60bb      	str	r3, [r7, #8]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80087c0:	f002 f8a2 	bl	800a908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087cc:	68f9      	ldr	r1, [r7, #12]
 80087ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f0:	3b01      	subs	r3, #1
 80087f2:	68f9      	ldr	r1, [r7, #12]
 80087f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087f6:	fb01 f303 	mul.w	r3, r1, r3
 80087fa:	441a      	add	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	22ff      	movs	r2, #255	@ 0xff
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	22ff      	movs	r2, #255	@ 0xff
 800880c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d114      	bne.n	8008840 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d01a      	beq.n	8008854 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3310      	adds	r3, #16
 8008822:	4618      	mov	r0, r3
 8008824:	f001 f91a 	bl	8009a5c <xTaskRemoveFromEventList>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d012      	beq.n	8008854 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800882e:	4b0d      	ldr	r3, [pc, #52]	@ (8008864 <xQueueGenericReset+0xd0>)
 8008830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	e009      	b.n	8008854 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3310      	adds	r3, #16
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff fef1 	bl	800862c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3324      	adds	r3, #36	@ 0x24
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff feec 	bl	800862c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008854:	f002 f88a 	bl	800a96c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008858:	2301      	movs	r3, #1
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	e000ed04 	.word	0xe000ed04

08008868 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b08e      	sub	sp, #56	@ 0x38
 800886c:	af02      	add	r7, sp, #8
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10b      	bne.n	8008894 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800887c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008880:	f383 8811 	msr	BASEPRI, r3
 8008884:	f3bf 8f6f 	isb	sy
 8008888:	f3bf 8f4f 	dsb	sy
 800888c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800888e:	bf00      	nop
 8008890:	bf00      	nop
 8008892:	e7fd      	b.n	8008890 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <xQueueGenericCreateStatic+0x56>
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <xQueueGenericCreateStatic+0x5a>
 80088be:	2301      	movs	r3, #1
 80088c0:	e000      	b.n	80088c4 <xQueueGenericCreateStatic+0x5c>
 80088c2:	2300      	movs	r3, #0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	623b      	str	r3, [r7, #32]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <xQueueGenericCreateStatic+0x84>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d101      	bne.n	80088f0 <xQueueGenericCreateStatic+0x88>
 80088ec:	2301      	movs	r3, #1
 80088ee:	e000      	b.n	80088f2 <xQueueGenericCreateStatic+0x8a>
 80088f0:	2300      	movs	r3, #0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	61fb      	str	r3, [r7, #28]
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	e7fd      	b.n	800890a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800890e:	2350      	movs	r3, #80	@ 0x50
 8008910:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2b50      	cmp	r3, #80	@ 0x50
 8008916:	d00b      	beq.n	8008930 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61bb      	str	r3, [r7, #24]
}
 800892a:	bf00      	nop
 800892c:	bf00      	nop
 800892e:	e7fd      	b.n	800892c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008930:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00d      	beq.n	8008958 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800893c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008944:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	4613      	mov	r3, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	68b9      	ldr	r1, [r7, #8]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 f805 	bl	8008962 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800895a:	4618      	mov	r0, r3
 800895c:	3730      	adds	r7, #48	@ 0x30
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d103      	bne.n	800897e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	e002      	b.n	8008984 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008990:	2101      	movs	r1, #1
 8008992:	69b8      	ldr	r0, [r7, #24]
 8008994:	f7ff fefe 	bl	8008794 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089a0:	bf00      	nop
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	@ 0x38
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80089b6:	2300      	movs	r3, #0
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10b      	bne.n	80089dc <xQueueGenericSend+0x34>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089d6:	bf00      	nop
 80089d8:	bf00      	nop
 80089da:	e7fd      	b.n	80089d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <xQueueGenericSend+0x42>
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <xQueueGenericSend+0x46>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <xQueueGenericSend+0x48>
 80089ee:	2300      	movs	r3, #0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <xQueueGenericSend+0x64>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <xQueueGenericSend+0x72>
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d101      	bne.n	8008a1e <xQueueGenericSend+0x76>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e000      	b.n	8008a20 <xQueueGenericSend+0x78>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d10b      	bne.n	8008a3c <xQueueGenericSend+0x94>
	__asm volatile
 8008a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	623b      	str	r3, [r7, #32]
}
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	e7fd      	b.n	8008a38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a3c:	f001 f9f6 	bl	8009e2c <xTaskGetSchedulerState>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d102      	bne.n	8008a4c <xQueueGenericSend+0xa4>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <xQueueGenericSend+0xa8>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e000      	b.n	8008a52 <xQueueGenericSend+0xaa>
 8008a50:	2300      	movs	r3, #0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10b      	bne.n	8008a6e <xQueueGenericSend+0xc6>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	61fb      	str	r3, [r7, #28]
}
 8008a68:	bf00      	nop
 8008a6a:	bf00      	nop
 8008a6c:	e7fd      	b.n	8008a6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a6e:	f001 ff4b 	bl	800a908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d302      	bcc.n	8008a84 <xQueueGenericSend+0xdc>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d129      	bne.n	8008ad8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a8a:	f000 fa0f 	bl	8008eac <prvCopyDataToQueue>
 8008a8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d010      	beq.n	8008aba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9a:	3324      	adds	r3, #36	@ 0x24
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 ffdd 	bl	8009a5c <xTaskRemoveFromEventList>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d013      	beq.n	8008ad0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8008ba8 <xQueueGenericSend+0x200>)
 8008aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aae:	601a      	str	r2, [r3, #0]
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	e00a      	b.n	8008ad0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ac0:	4b39      	ldr	r3, [pc, #228]	@ (8008ba8 <xQueueGenericSend+0x200>)
 8008ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ac6:	601a      	str	r2, [r3, #0]
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ad0:	f001 ff4c 	bl	800a96c <vPortExitCritical>
				return pdPASS;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e063      	b.n	8008ba0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d103      	bne.n	8008ae6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ade:	f001 ff45 	bl	800a96c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	e05c      	b.n	8008ba0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aec:	f107 0314 	add.w	r3, r7, #20
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 f83f 	bl	8009b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008afa:	f001 ff37 	bl	800a96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008afe:	f000 fd87 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b02:	f001 ff01 	bl	800a908 <vPortEnterCritical>
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b0c:	b25b      	sxtb	r3, r3
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b12:	d103      	bne.n	8008b1c <xQueueGenericSend+0x174>
 8008b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b22:	b25b      	sxtb	r3, r3
 8008b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b28:	d103      	bne.n	8008b32 <xQueueGenericSend+0x18a>
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b32:	f001 ff1b 	bl	800a96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b36:	1d3a      	adds	r2, r7, #4
 8008b38:	f107 0314 	add.w	r3, r7, #20
 8008b3c:	4611      	mov	r1, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f82e 	bl	8009ba0 <xTaskCheckForTimeOut>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d124      	bne.n	8008b94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b4c:	f000 faa6 	bl	800909c <prvIsQueueFull>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d018      	beq.n	8008b88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b58:	3310      	adds	r3, #16
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	4611      	mov	r1, r2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f000 ff2a 	bl	80099b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b66:	f000 fa31 	bl	8008fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008b6a:	f000 fd5f 	bl	800962c <xTaskResumeAll>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f af7c 	bne.w	8008a6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008b76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba8 <xQueueGenericSend+0x200>)
 8008b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	e772      	b.n	8008a6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b8a:	f000 fa1f 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b8e:	f000 fd4d 	bl	800962c <xTaskResumeAll>
 8008b92:	e76c      	b.n	8008a6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b96:	f000 fa19 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b9a:	f000 fd47 	bl	800962c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3738      	adds	r7, #56	@ 0x38
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b090      	sub	sp, #64	@ 0x40
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10b      	bne.n	8008bdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	e7fd      	b.n	8008bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d103      	bne.n	8008bea <xQueueGenericSendFromISR+0x3e>
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <xQueueGenericSendFromISR+0x42>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <xQueueGenericSendFromISR+0x44>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10b      	bne.n	8008c0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c06:	bf00      	nop
 8008c08:	bf00      	nop
 8008c0a:	e7fd      	b.n	8008c08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d103      	bne.n	8008c1a <xQueueGenericSendFromISR+0x6e>
 8008c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d101      	bne.n	8008c1e <xQueueGenericSendFromISR+0x72>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e000      	b.n	8008c20 <xQueueGenericSendFromISR+0x74>
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	623b      	str	r3, [r7, #32]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c3c:	f001 ff44 	bl	800aac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008c40:	f3ef 8211 	mrs	r2, BASEPRI
 8008c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008c58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d302      	bcc.n	8008c6e <xQueueGenericSendFromISR+0xc2>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d12f      	bne.n	8008cce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c84:	f000 f912 	bl	8008eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d112      	bne.n	8008cb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9c:	3324      	adds	r3, #36	@ 0x24
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fedc 	bl	8009a5c <xTaskRemoveFromEventList>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00e      	beq.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	e007      	b.n	8008cc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	b25a      	sxtb	r2, r3
 8008cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008ccc:	e001      	b.n	8008cd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008cdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3740      	adds	r7, #64	@ 0x40
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08c      	sub	sp, #48	@ 0x30
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10b      	bne.n	8008d1a <xQueueReceive+0x32>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	623b      	str	r3, [r7, #32]
}
 8008d14:	bf00      	nop
 8008d16:	bf00      	nop
 8008d18:	e7fd      	b.n	8008d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d103      	bne.n	8008d28 <xQueueReceive+0x40>
 8008d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <xQueueReceive+0x44>
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e000      	b.n	8008d2e <xQueueReceive+0x46>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <xQueueReceive+0x62>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	61fb      	str	r3, [r7, #28]
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	e7fd      	b.n	8008d46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d4a:	f001 f86f 	bl	8009e2c <xTaskGetSchedulerState>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d102      	bne.n	8008d5a <xQueueReceive+0x72>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <xQueueReceive+0x76>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e000      	b.n	8008d60 <xQueueReceive+0x78>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d10b      	bne.n	8008d7c <xQueueReceive+0x94>
	__asm volatile
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	61bb      	str	r3, [r7, #24]
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	e7fd      	b.n	8008d78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d7c:	f001 fdc4 	bl	800a908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d01f      	beq.n	8008dcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d8c:	68b9      	ldr	r1, [r7, #8]
 8008d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d90:	f000 f8f6 	bl	8008f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	1e5a      	subs	r2, r3, #1
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00f      	beq.n	8008dc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da6:	3310      	adds	r3, #16
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fe57 	bl	8009a5c <xTaskRemoveFromEventList>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008db4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea8 <xQueueReceive+0x1c0>)
 8008db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008dc4:	f001 fdd2 	bl	800a96c <vPortExitCritical>
				return pdPASS;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e069      	b.n	8008ea0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d103      	bne.n	8008dda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dd2:	f001 fdcb 	bl	800a96c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e062      	b.n	8008ea0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008de0:	f107 0310 	add.w	r3, r7, #16
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fec5 	bl	8009b74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dea:	2301      	movs	r3, #1
 8008dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dee:	f001 fdbd 	bl	800a96c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008df2:	f000 fc0d 	bl	8009610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008df6:	f001 fd87 	bl	800a908 <vPortEnterCritical>
 8008dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e00:	b25b      	sxtb	r3, r3
 8008e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e06:	d103      	bne.n	8008e10 <xQueueReceive+0x128>
 8008e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1c:	d103      	bne.n	8008e26 <xQueueReceive+0x13e>
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e26:	f001 fda1 	bl	800a96c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e2a:	1d3a      	adds	r2, r7, #4
 8008e2c:	f107 0310 	add.w	r3, r7, #16
 8008e30:	4611      	mov	r1, r2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 feb4 	bl	8009ba0 <xTaskCheckForTimeOut>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d123      	bne.n	8008e86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e40:	f000 f916 	bl	8009070 <prvIsQueueEmpty>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d017      	beq.n	8008e7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	3324      	adds	r3, #36	@ 0x24
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fdb0 	bl	80099b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e5a:	f000 f8b7 	bl	8008fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e5e:	f000 fbe5 	bl	800962c <xTaskResumeAll>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d189      	bne.n	8008d7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e68:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea8 <xQueueReceive+0x1c0>)
 8008e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	e780      	b.n	8008d7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e7c:	f000 f8a6 	bl	8008fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e80:	f000 fbd4 	bl	800962c <xTaskResumeAll>
 8008e84:	e77a      	b.n	8008d7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e88:	f000 f8a0 	bl	8008fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e8c:	f000 fbce 	bl	800962c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e92:	f000 f8ed 	bl	8009070 <prvIsQueueEmpty>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f43f af6f 	beq.w	8008d7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3730      	adds	r7, #48	@ 0x30
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10d      	bne.n	8008ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d14d      	bne.n	8008f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 ffc6 	bl	8009e68 <xTaskPriorityDisinherit>
 8008edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	e043      	b.n	8008f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d119      	bne.n	8008f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6858      	ldr	r0, [r3, #4]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	f00b fee9 	bl	8014cce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f04:	441a      	add	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	685a      	ldr	r2, [r3, #4]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d32b      	bcc.n	8008f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]
 8008f1e:	e026      	b.n	8008f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68d8      	ldr	r0, [r3, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	461a      	mov	r2, r3
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	f00b fecf 	bl	8014cce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	425b      	negs	r3, r3
 8008f3a:	441a      	add	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d207      	bcs.n	8008f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f54:	425b      	negs	r3, r3
 8008f56:	441a      	add	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d105      	bne.n	8008f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008f76:	697b      	ldr	r3, [r7, #20]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d018      	beq.n	8008fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f9a:	441a      	add	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d303      	bcc.n	8008fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68d9      	ldr	r1, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6838      	ldr	r0, [r7, #0]
 8008fc0:	f00b fe85 	bl	8014cce <memcpy>
	}
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fd4:	f001 fc98 	bl	800a908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe0:	e011      	b.n	8009006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d012      	beq.n	8009010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3324      	adds	r3, #36	@ 0x24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fd34 	bl	8009a5c <xTaskRemoveFromEventList>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ffa:	f000 fe35 	bl	8009c68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
 8009000:	3b01      	subs	r3, #1
 8009002:	b2db      	uxtb	r3, r3
 8009004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800900a:	2b00      	cmp	r3, #0
 800900c:	dce9      	bgt.n	8008fe2 <prvUnlockQueue+0x16>
 800900e:	e000      	b.n	8009012 <prvUnlockQueue+0x46>
					break;
 8009010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	22ff      	movs	r2, #255	@ 0xff
 8009016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800901a:	f001 fca7 	bl	800a96c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800901e:	f001 fc73 	bl	800a908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800902a:	e011      	b.n	8009050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d012      	beq.n	800905a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	3310      	adds	r3, #16
 8009038:	4618      	mov	r0, r3
 800903a:	f000 fd0f 	bl	8009a5c <xTaskRemoveFromEventList>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d001      	beq.n	8009048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009044:	f000 fe10 	bl	8009c68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	3b01      	subs	r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dce9      	bgt.n	800902c <prvUnlockQueue+0x60>
 8009058:	e000      	b.n	800905c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800905a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	22ff      	movs	r2, #255	@ 0xff
 8009060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009064:	f001 fc82 	bl	800a96c <vPortExitCritical>
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009078:	f001 fc46 	bl	800a908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009084:	2301      	movs	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e001      	b.n	800908e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800908a:	2300      	movs	r3, #0
 800908c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800908e:	f001 fc6d 	bl	800a96c <vPortExitCritical>

	return xReturn;
 8009092:	68fb      	ldr	r3, [r7, #12]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3710      	adds	r7, #16
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090a4:	f001 fc30 	bl	800a908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d102      	bne.n	80090ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e001      	b.n	80090be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090be:	f001 fc55 	bl	800a96c <vPortExitCritical>

	return xReturn;
 80090c2:	68fb      	ldr	r3, [r7, #12]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
 80090da:	e014      	b.n	8009106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80090dc:	4a0f      	ldr	r2, [pc, #60]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10b      	bne.n	8009100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090e8:	490c      	ldr	r1, [pc, #48]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090f2:	4a0a      	ldr	r2, [pc, #40]	@ (800911c <vQueueAddToRegistry+0x50>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	4413      	add	r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090fe:	e006      	b.n	800910e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	3301      	adds	r3, #1
 8009104:	60fb      	str	r3, [r7, #12]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b07      	cmp	r3, #7
 800910a:	d9e7      	bls.n	80090dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	20008150 	.word	0x20008150

08009120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009130:	f001 fbea 	bl	800a908 <vPortEnterCritical>
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800913a:	b25b      	sxtb	r3, r3
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d103      	bne.n	800914a <vQueueWaitForMessageRestricted+0x2a>
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009150:	b25b      	sxtb	r3, r3
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d103      	bne.n	8009160 <vQueueWaitForMessageRestricted+0x40>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009160:	f001 fc04 	bl	800a96c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009168:	2b00      	cmp	r3, #0
 800916a:	d106      	bne.n	800917a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	3324      	adds	r3, #36	@ 0x24
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fc45 	bl	8009a04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800917a:	6978      	ldr	r0, [r7, #20]
 800917c:	f7ff ff26 	bl	8008fcc <prvUnlockQueue>
	}
 8009180:	bf00      	nop
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08e      	sub	sp, #56	@ 0x38
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10b      	bne.n	80091b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800919c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091a0:	f383 8811 	msr	BASEPRI, r3
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	623b      	str	r3, [r7, #32]
}
 80091ae:	bf00      	nop
 80091b0:	bf00      	nop
 80091b2:	e7fd      	b.n	80091b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80091b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10b      	bne.n	80091d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80091ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091be:	f383 8811 	msr	BASEPRI, r3
 80091c2:	f3bf 8f6f 	isb	sy
 80091c6:	f3bf 8f4f 	dsb	sy
 80091ca:	61fb      	str	r3, [r7, #28]
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	e7fd      	b.n	80091ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091d2:	235c      	movs	r3, #92	@ 0x5c
 80091d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80091da:	d00b      	beq.n	80091f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	61bb      	str	r3, [r7, #24]
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80091f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80091f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01e      	beq.n	800923a <xTaskCreateStatic+0xb2>
 80091fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d01b      	beq.n	800923a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800920a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	2202      	movs	r2, #2
 8009210:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009214:	2300      	movs	r3, #0
 8009216:	9303      	str	r3, [sp, #12]
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	9302      	str	r3, [sp, #8]
 800921c:	f107 0314 	add.w	r3, r7, #20
 8009220:	9301      	str	r3, [sp, #4]
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68b9      	ldr	r1, [r7, #8]
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f000 f850 	bl	80092d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009234:	f000 f8de 	bl	80093f4 <prvAddNewTaskToReadyList>
 8009238:	e001      	b.n	800923e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800923e:	697b      	ldr	r3, [r7, #20]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	3728      	adds	r7, #40	@ 0x28
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08c      	sub	sp, #48	@ 0x30
 800924c:	af04      	add	r7, sp, #16
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4618      	mov	r0, r3
 800925e:	f001 fc75 	bl	800ab4c <pvPortMalloc>
 8009262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00e      	beq.n	8009288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800926a:	205c      	movs	r0, #92	@ 0x5c
 800926c:	f001 fc6e 	bl	800ab4c <pvPortMalloc>
 8009270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	631a      	str	r2, [r3, #48]	@ 0x30
 800927e:	e005      	b.n	800928c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009280:	6978      	ldr	r0, [r7, #20]
 8009282:	f001 fd31 	bl	800ace8 <vPortFree>
 8009286:	e001      	b.n	800928c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d017      	beq.n	80092c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800929a:	88fa      	ldrh	r2, [r7, #6]
 800929c:	2300      	movs	r3, #0
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	9302      	str	r3, [sp, #8]
 80092a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68b9      	ldr	r1, [r7, #8]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f80e 	bl	80092d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092b6:	69f8      	ldr	r0, [r7, #28]
 80092b8:	f000 f89c 	bl	80093f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092bc:	2301      	movs	r3, #1
 80092be:	61bb      	str	r3, [r7, #24]
 80092c0:	e002      	b.n	80092c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295
 80092c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092c8:	69bb      	ldr	r3, [r7, #24]
	}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}

080092d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b088      	sub	sp, #32
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	60f8      	str	r0, [r7, #12]
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
 80092de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	461a      	mov	r2, r3
 80092ea:	21a5      	movs	r1, #165	@ 0xa5
 80092ec:	f00b fc26 	bl	8014b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80092fa:	3b01      	subs	r3, #1
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f023 0307 	bic.w	r3, r3, #7
 8009308:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	f003 0307 	and.w	r3, r3, #7
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	617b      	str	r3, [r7, #20]
}
 8009326:	bf00      	nop
 8009328:	bf00      	nop
 800932a:	e7fd      	b.n	8009328 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01f      	beq.n	8009372 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009332:	2300      	movs	r3, #0
 8009334:	61fb      	str	r3, [r7, #28]
 8009336:	e012      	b.n	800935e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	4413      	add	r3, r2
 800933e:	7819      	ldrb	r1, [r3, #0]
 8009340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	4413      	add	r3, r2
 8009346:	3334      	adds	r3, #52	@ 0x34
 8009348:	460a      	mov	r2, r1
 800934a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d006      	beq.n	8009366 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	3301      	adds	r3, #1
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	2b0f      	cmp	r3, #15
 8009362:	d9e9      	bls.n	8009338 <prvInitialiseNewTask+0x66>
 8009364:	e000      	b.n	8009368 <prvInitialiseNewTask+0x96>
			{
				break;
 8009366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009370:	e003      	b.n	800937a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	2b37      	cmp	r3, #55	@ 0x37
 800937e:	d901      	bls.n	8009384 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009380:	2337      	movs	r3, #55	@ 0x37
 8009382:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009388:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800938e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	2200      	movs	r2, #0
 8009394:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	3304      	adds	r3, #4
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff f966 	bl	800866c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a2:	3318      	adds	r3, #24
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7ff f961 	bl	800866c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	2200      	movs	r2, #0
 80093c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	69b8      	ldr	r0, [r7, #24]
 80093d4:	f001 f966 	bl	800a6a4 <pxPortInitialiseStack>
 80093d8:	4602      	mov	r2, r0
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d002      	beq.n	80093ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ea:	bf00      	nop
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093fc:	f001 fa84 	bl	800a908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009400:	4b2d      	ldr	r3, [pc, #180]	@ (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3301      	adds	r3, #1
 8009406:	4a2c      	ldr	r2, [pc, #176]	@ (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 8009408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800940a:	4b2c      	ldr	r3, [pc, #176]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d109      	bne.n	8009426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009412:	4a2a      	ldr	r2, [pc, #168]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009418:	4b27      	ldr	r3, [pc, #156]	@ (80094b8 <prvAddNewTaskToReadyList+0xc4>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d110      	bne.n	8009442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009420:	f000 fc46 	bl	8009cb0 <prvInitialiseTaskLists>
 8009424:	e00d      	b.n	8009442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009426:	4b26      	ldr	r3, [pc, #152]	@ (80094c0 <prvAddNewTaskToReadyList+0xcc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800942e:	4b23      	ldr	r3, [pc, #140]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009438:	429a      	cmp	r2, r3
 800943a:	d802      	bhi.n	8009442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800943c:	4a1f      	ldr	r2, [pc, #124]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009442:	4b20      	ldr	r3, [pc, #128]	@ (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	4a1e      	ldr	r2, [pc, #120]	@ (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 800944a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800944c:	4b1d      	ldr	r3, [pc, #116]	@ (80094c4 <prvAddNewTaskToReadyList+0xd0>)
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009458:	4b1b      	ldr	r3, [pc, #108]	@ (80094c8 <prvAddNewTaskToReadyList+0xd4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	429a      	cmp	r2, r3
 800945e:	d903      	bls.n	8009468 <prvAddNewTaskToReadyList+0x74>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	4a18      	ldr	r2, [pc, #96]	@ (80094c8 <prvAddNewTaskToReadyList+0xd4>)
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4a15      	ldr	r2, [pc, #84]	@ (80094cc <prvAddNewTaskToReadyList+0xd8>)
 8009476:	441a      	add	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3304      	adds	r3, #4
 800947c:	4619      	mov	r1, r3
 800947e:	4610      	mov	r0, r2
 8009480:	f7ff f901 	bl	8008686 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009484:	f001 fa72 	bl	800a96c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009488:	4b0d      	ldr	r3, [pc, #52]	@ (80094c0 <prvAddNewTaskToReadyList+0xcc>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00e      	beq.n	80094ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <prvAddNewTaskToReadyList+0xc8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949a:	429a      	cmp	r2, r3
 800949c:	d207      	bcs.n	80094ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800949e:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <prvAddNewTaskToReadyList+0xdc>)
 80094a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20008664 	.word	0x20008664
 80094bc:	20008190 	.word	0x20008190
 80094c0:	20008670 	.word	0x20008670
 80094c4:	20008680 	.word	0x20008680
 80094c8:	2000866c 	.word	0x2000866c
 80094cc:	20008194 	.word	0x20008194
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d018      	beq.n	8009518 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80094e6:	4b14      	ldr	r3, [pc, #80]	@ (8009538 <vTaskDelay+0x64>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00b      	beq.n	8009506 <vTaskDelay+0x32>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	60bb      	str	r3, [r7, #8]
}
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009506:	f000 f883 	bl	8009610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800950a:	2100      	movs	r1, #0
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fd1b 	bl	8009f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009512:	f000 f88b 	bl	800962c <xTaskResumeAll>
 8009516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d107      	bne.n	800952e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800951e:	4b07      	ldr	r3, [pc, #28]	@ (800953c <vTaskDelay+0x68>)
 8009520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800952e:	bf00      	nop
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	2000868c 	.word	0x2000868c
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08a      	sub	sp, #40	@ 0x28
 8009544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800954e:	463a      	mov	r2, r7
 8009550:	1d39      	adds	r1, r7, #4
 8009552:	f107 0308 	add.w	r3, r7, #8
 8009556:	4618      	mov	r0, r3
 8009558:	f7ff f834 	bl	80085c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	9202      	str	r2, [sp, #8]
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	2300      	movs	r3, #0
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	460a      	mov	r2, r1
 800956e:	4922      	ldr	r1, [pc, #136]	@ (80095f8 <vTaskStartScheduler+0xb8>)
 8009570:	4822      	ldr	r0, [pc, #136]	@ (80095fc <vTaskStartScheduler+0xbc>)
 8009572:	f7ff fe09 	bl	8009188 <xTaskCreateStatic>
 8009576:	4603      	mov	r3, r0
 8009578:	4a21      	ldr	r2, [pc, #132]	@ (8009600 <vTaskStartScheduler+0xc0>)
 800957a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800957c:	4b20      	ldr	r3, [pc, #128]	@ (8009600 <vTaskStartScheduler+0xc0>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	e001      	b.n	800958e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d102      	bne.n	800959a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009594:	f000 fd2c 	bl	8009ff0 <xTimerCreateTimerTask>
 8009598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d116      	bne.n	80095ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80095a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	613b      	str	r3, [r7, #16]
}
 80095b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80095b4:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <vTaskStartScheduler+0xc4>)
 80095b6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80095bc:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <vTaskStartScheduler+0xc8>)
 80095be:	2201      	movs	r2, #1
 80095c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80095c2:	4b12      	ldr	r3, [pc, #72]	@ (800960c <vTaskStartScheduler+0xcc>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80095c8:	f001 f8fa 	bl	800a7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80095cc:	e00f      	b.n	80095ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d4:	d10b      	bne.n	80095ee <vTaskStartScheduler+0xae>
	__asm volatile
 80095d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095da:	f383 8811 	msr	BASEPRI, r3
 80095de:	f3bf 8f6f 	isb	sy
 80095e2:	f3bf 8f4f 	dsb	sy
 80095e6:	60fb      	str	r3, [r7, #12]
}
 80095e8:	bf00      	nop
 80095ea:	bf00      	nop
 80095ec:	e7fd      	b.n	80095ea <vTaskStartScheduler+0xaa>
}
 80095ee:	bf00      	nop
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	08015b3c 	.word	0x08015b3c
 80095fc:	08009c81 	.word	0x08009c81
 8009600:	20008688 	.word	0x20008688
 8009604:	20008684 	.word	0x20008684
 8009608:	20008670 	.word	0x20008670
 800960c:	20008668 	.word	0x20008668

08009610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <vTaskSuspendAll+0x18>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3301      	adds	r3, #1
 800961a:	4a03      	ldr	r2, [pc, #12]	@ (8009628 <vTaskSuspendAll+0x18>)
 800961c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800961e:	bf00      	nop
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	2000868c 	.word	0x2000868c

0800962c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800963a:	4b42      	ldr	r3, [pc, #264]	@ (8009744 <xTaskResumeAll+0x118>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10b      	bne.n	800965a <xTaskResumeAll+0x2e>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	603b      	str	r3, [r7, #0]
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	e7fd      	b.n	8009656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800965a:	f001 f955 	bl	800a908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800965e:	4b39      	ldr	r3, [pc, #228]	@ (8009744 <xTaskResumeAll+0x118>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3b01      	subs	r3, #1
 8009664:	4a37      	ldr	r2, [pc, #220]	@ (8009744 <xTaskResumeAll+0x118>)
 8009666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009668:	4b36      	ldr	r3, [pc, #216]	@ (8009744 <xTaskResumeAll+0x118>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d162      	bne.n	8009736 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009670:	4b35      	ldr	r3, [pc, #212]	@ (8009748 <xTaskResumeAll+0x11c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05e      	beq.n	8009736 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009678:	e02f      	b.n	80096da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800967a:	4b34      	ldr	r3, [pc, #208]	@ (800974c <xTaskResumeAll+0x120>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3318      	adds	r3, #24
 8009686:	4618      	mov	r0, r3
 8009688:	f7ff f85a 	bl	8008740 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7ff f855 	bl	8008740 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800969a:	4b2d      	ldr	r3, [pc, #180]	@ (8009750 <xTaskResumeAll+0x124>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d903      	bls.n	80096aa <xTaskResumeAll+0x7e>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009750 <xTaskResumeAll+0x124>)
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ae:	4613      	mov	r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4a27      	ldr	r2, [pc, #156]	@ (8009754 <xTaskResumeAll+0x128>)
 80096b8:	441a      	add	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3304      	adds	r3, #4
 80096be:	4619      	mov	r1, r3
 80096c0:	4610      	mov	r0, r2
 80096c2:	f7fe ffe0 	bl	8008686 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ca:	4b23      	ldr	r3, [pc, #140]	@ (8009758 <xTaskResumeAll+0x12c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80096d4:	4b21      	ldr	r3, [pc, #132]	@ (800975c <xTaskResumeAll+0x130>)
 80096d6:	2201      	movs	r2, #1
 80096d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096da:	4b1c      	ldr	r3, [pc, #112]	@ (800974c <xTaskResumeAll+0x120>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1cb      	bne.n	800967a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80096e8:	f000 fb80 	bl	8009dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80096ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009760 <xTaskResumeAll+0x134>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d010      	beq.n	800971a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096f8:	f000 f846 	bl	8009788 <xTaskIncrementTick>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009702:	4b16      	ldr	r3, [pc, #88]	@ (800975c <xTaskResumeAll+0x130>)
 8009704:	2201      	movs	r2, #1
 8009706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	3b01      	subs	r3, #1
 800970c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f1      	bne.n	80096f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009714:	4b12      	ldr	r3, [pc, #72]	@ (8009760 <xTaskResumeAll+0x134>)
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800971a:	4b10      	ldr	r3, [pc, #64]	@ (800975c <xTaskResumeAll+0x130>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d009      	beq.n	8009736 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009722:	2301      	movs	r3, #1
 8009724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009726:	4b0f      	ldr	r3, [pc, #60]	@ (8009764 <xTaskResumeAll+0x138>)
 8009728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009736:	f001 f919 	bl	800a96c <vPortExitCritical>

	return xAlreadyYielded;
 800973a:	68bb      	ldr	r3, [r7, #8]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	2000868c 	.word	0x2000868c
 8009748:	20008664 	.word	0x20008664
 800974c:	20008624 	.word	0x20008624
 8009750:	2000866c 	.word	0x2000866c
 8009754:	20008194 	.word	0x20008194
 8009758:	20008190 	.word	0x20008190
 800975c:	20008678 	.word	0x20008678
 8009760:	20008674 	.word	0x20008674
 8009764:	e000ed04 	.word	0xe000ed04

08009768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800976e:	4b05      	ldr	r3, [pc, #20]	@ (8009784 <xTaskGetTickCount+0x1c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009774:	687b      	ldr	r3, [r7, #4]
}
 8009776:	4618      	mov	r0, r3
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	20008668 	.word	0x20008668

08009788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b086      	sub	sp, #24
 800978c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009792:	4b4f      	ldr	r3, [pc, #316]	@ (80098d0 <xTaskIncrementTick+0x148>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 8090 	bne.w	80098bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800979c:	4b4d      	ldr	r3, [pc, #308]	@ (80098d4 <xTaskIncrementTick+0x14c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3301      	adds	r3, #1
 80097a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097a4:	4a4b      	ldr	r2, [pc, #300]	@ (80098d4 <xTaskIncrementTick+0x14c>)
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d121      	bne.n	80097f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80097b0:	4b49      	ldr	r3, [pc, #292]	@ (80098d8 <xTaskIncrementTick+0x150>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80097ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	603b      	str	r3, [r7, #0]
}
 80097cc:	bf00      	nop
 80097ce:	bf00      	nop
 80097d0:	e7fd      	b.n	80097ce <xTaskIncrementTick+0x46>
 80097d2:	4b41      	ldr	r3, [pc, #260]	@ (80098d8 <xTaskIncrementTick+0x150>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	4b40      	ldr	r3, [pc, #256]	@ (80098dc <xTaskIncrementTick+0x154>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a3e      	ldr	r2, [pc, #248]	@ (80098d8 <xTaskIncrementTick+0x150>)
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	4a3e      	ldr	r2, [pc, #248]	@ (80098dc <xTaskIncrementTick+0x154>)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	4b3e      	ldr	r3, [pc, #248]	@ (80098e0 <xTaskIncrementTick+0x158>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	4a3c      	ldr	r2, [pc, #240]	@ (80098e0 <xTaskIncrementTick+0x158>)
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	f000 fafc 	bl	8009dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097f4:	4b3b      	ldr	r3, [pc, #236]	@ (80098e4 <xTaskIncrementTick+0x15c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	693a      	ldr	r2, [r7, #16]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d349      	bcc.n	8009892 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097fe:	4b36      	ldr	r3, [pc, #216]	@ (80098d8 <xTaskIncrementTick+0x150>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009808:	4b36      	ldr	r3, [pc, #216]	@ (80098e4 <xTaskIncrementTick+0x15c>)
 800980a:	f04f 32ff 	mov.w	r2, #4294967295
 800980e:	601a      	str	r2, [r3, #0]
					break;
 8009810:	e03f      	b.n	8009892 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009812:	4b31      	ldr	r3, [pc, #196]	@ (80098d8 <xTaskIncrementTick+0x150>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	429a      	cmp	r2, r3
 8009828:	d203      	bcs.n	8009832 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800982a:	4a2e      	ldr	r2, [pc, #184]	@ (80098e4 <xTaskIncrementTick+0x15c>)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009830:	e02f      	b.n	8009892 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	3304      	adds	r3, #4
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe ff82 	bl	8008740 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	2b00      	cmp	r3, #0
 8009842:	d004      	beq.n	800984e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	3318      	adds	r3, #24
 8009848:	4618      	mov	r0, r3
 800984a:	f7fe ff79 	bl	8008740 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009852:	4b25      	ldr	r3, [pc, #148]	@ (80098e8 <xTaskIncrementTick+0x160>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d903      	bls.n	8009862 <xTaskIncrementTick+0xda>
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985e:	4a22      	ldr	r2, [pc, #136]	@ (80098e8 <xTaskIncrementTick+0x160>)
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	4a1f      	ldr	r2, [pc, #124]	@ (80098ec <xTaskIncrementTick+0x164>)
 8009870:	441a      	add	r2, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe ff04 	bl	8008686 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009882:	4b1b      	ldr	r3, [pc, #108]	@ (80098f0 <xTaskIncrementTick+0x168>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	429a      	cmp	r2, r3
 800988a:	d3b8      	bcc.n	80097fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009890:	e7b5      	b.n	80097fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009892:	4b17      	ldr	r3, [pc, #92]	@ (80098f0 <xTaskIncrementTick+0x168>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009898:	4914      	ldr	r1, [pc, #80]	@ (80098ec <xTaskIncrementTick+0x164>)
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d901      	bls.n	80098ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80098aa:	2301      	movs	r3, #1
 80098ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80098ae:	4b11      	ldr	r3, [pc, #68]	@ (80098f4 <xTaskIncrementTick+0x16c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d007      	beq.n	80098c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80098b6:	2301      	movs	r3, #1
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e004      	b.n	80098c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80098bc:	4b0e      	ldr	r3, [pc, #56]	@ (80098f8 <xTaskIncrementTick+0x170>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	4a0d      	ldr	r2, [pc, #52]	@ (80098f8 <xTaskIncrementTick+0x170>)
 80098c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80098c6:	697b      	ldr	r3, [r7, #20]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3718      	adds	r7, #24
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	2000868c 	.word	0x2000868c
 80098d4:	20008668 	.word	0x20008668
 80098d8:	2000861c 	.word	0x2000861c
 80098dc:	20008620 	.word	0x20008620
 80098e0:	2000867c 	.word	0x2000867c
 80098e4:	20008684 	.word	0x20008684
 80098e8:	2000866c 	.word	0x2000866c
 80098ec:	20008194 	.word	0x20008194
 80098f0:	20008190 	.word	0x20008190
 80098f4:	20008678 	.word	0x20008678
 80098f8:	20008674 	.word	0x20008674

080098fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009902:	4b28      	ldr	r3, [pc, #160]	@ (80099a4 <vTaskSwitchContext+0xa8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800990a:	4b27      	ldr	r3, [pc, #156]	@ (80099a8 <vTaskSwitchContext+0xac>)
 800990c:	2201      	movs	r2, #1
 800990e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009910:	e042      	b.n	8009998 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009912:	4b25      	ldr	r3, [pc, #148]	@ (80099a8 <vTaskSwitchContext+0xac>)
 8009914:	2200      	movs	r2, #0
 8009916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009918:	4b24      	ldr	r3, [pc, #144]	@ (80099ac <vTaskSwitchContext+0xb0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	e011      	b.n	8009944 <vTaskSwitchContext+0x48>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10b      	bne.n	800993e <vTaskSwitchContext+0x42>
	__asm volatile
 8009926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	607b      	str	r3, [r7, #4]
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	e7fd      	b.n	800993a <vTaskSwitchContext+0x3e>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3b01      	subs	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
 8009944:	491a      	ldr	r1, [pc, #104]	@ (80099b0 <vTaskSwitchContext+0xb4>)
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	440b      	add	r3, r1
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d0e3      	beq.n	8009920 <vTaskSwitchContext+0x24>
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a13      	ldr	r2, [pc, #76]	@ (80099b0 <vTaskSwitchContext+0xb4>)
 8009964:	4413      	add	r3, r2
 8009966:	60bb      	str	r3, [r7, #8]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	605a      	str	r2, [r3, #4]
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	3308      	adds	r3, #8
 800997a:	429a      	cmp	r2, r3
 800997c:	d104      	bne.n	8009988 <vTaskSwitchContext+0x8c>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	605a      	str	r2, [r3, #4]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	4a09      	ldr	r2, [pc, #36]	@ (80099b4 <vTaskSwitchContext+0xb8>)
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	4a06      	ldr	r2, [pc, #24]	@ (80099ac <vTaskSwitchContext+0xb0>)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6013      	str	r3, [r2, #0]
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	2000868c 	.word	0x2000868c
 80099a8:	20008678 	.word	0x20008678
 80099ac:	2000866c 	.word	0x2000866c
 80099b0:	20008194 	.word	0x20008194
 80099b4:	20008190 	.word	0x20008190

080099b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10b      	bne.n	80099e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	60fb      	str	r3, [r7, #12]
}
 80099da:	bf00      	nop
 80099dc:	bf00      	nop
 80099de:	e7fd      	b.n	80099dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099e0:	4b07      	ldr	r3, [pc, #28]	@ (8009a00 <vTaskPlaceOnEventList+0x48>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3318      	adds	r3, #24
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f7fe fe70 	bl	80086ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ee:	2101      	movs	r1, #1
 80099f0:	6838      	ldr	r0, [r7, #0]
 80099f2:	f000 faa9 	bl	8009f48 <prvAddCurrentTaskToDelayedList>
}
 80099f6:	bf00      	nop
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	20008190 	.word	0x20008190

08009a04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10b      	bne.n	8009a2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	617b      	str	r3, [r7, #20]
}
 8009a28:	bf00      	nop
 8009a2a:	bf00      	nop
 8009a2c:	e7fd      	b.n	8009a2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3318      	adds	r3, #24
 8009a34:	4619      	mov	r1, r3
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f7fe fe25 	bl	8008686 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009a42:	f04f 33ff 	mov.w	r3, #4294967295
 8009a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	68b8      	ldr	r0, [r7, #8]
 8009a4c:	f000 fa7c 	bl	8009f48 <prvAddCurrentTaskToDelayedList>
	}
 8009a50:	bf00      	nop
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20008190 	.word	0x20008190

08009a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10b      	bne.n	8009a8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a76:	f383 8811 	msr	BASEPRI, r3
 8009a7a:	f3bf 8f6f 	isb	sy
 8009a7e:	f3bf 8f4f 	dsb	sy
 8009a82:	60fb      	str	r3, [r7, #12]
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	e7fd      	b.n	8009a86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	3318      	adds	r3, #24
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe fe56 	bl	8008740 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a94:	4b1d      	ldr	r3, [pc, #116]	@ (8009b0c <xTaskRemoveFromEventList+0xb0>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d11d      	bne.n	8009ad8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7fe fe4d 	bl	8008740 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aaa:	4b19      	ldr	r3, [pc, #100]	@ (8009b10 <xTaskRemoveFromEventList+0xb4>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d903      	bls.n	8009aba <xTaskRemoveFromEventList+0x5e>
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	4a16      	ldr	r2, [pc, #88]	@ (8009b10 <xTaskRemoveFromEventList+0xb4>)
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4a13      	ldr	r2, [pc, #76]	@ (8009b14 <xTaskRemoveFromEventList+0xb8>)
 8009ac8:	441a      	add	r2, r3
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f7fe fdd8 	bl	8008686 <vListInsertEnd>
 8009ad6:	e005      	b.n	8009ae4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	3318      	adds	r3, #24
 8009adc:	4619      	mov	r1, r3
 8009ade:	480e      	ldr	r0, [pc, #56]	@ (8009b18 <xTaskRemoveFromEventList+0xbc>)
 8009ae0:	f7fe fdd1 	bl	8008686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8009b1c <xTaskRemoveFromEventList+0xc0>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d905      	bls.n	8009afe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009af2:	2301      	movs	r3, #1
 8009af4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009af6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b20 <xTaskRemoveFromEventList+0xc4>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
 8009afc:	e001      	b.n	8009b02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009b02:	697b      	ldr	r3, [r7, #20]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	2000868c 	.word	0x2000868c
 8009b10:	2000866c 	.word	0x2000866c
 8009b14:	20008194 	.word	0x20008194
 8009b18:	20008624 	.word	0x20008624
 8009b1c:	20008190 	.word	0x20008190
 8009b20:	20008678 	.word	0x20008678

08009b24 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10b      	bne.n	8009b4a <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b36:	f383 8811 	msr	BASEPRI, r3
 8009b3a:	f3bf 8f6f 	isb	sy
 8009b3e:	f3bf 8f4f 	dsb	sy
 8009b42:	60fb      	str	r3, [r7, #12]
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	e7fd      	b.n	8009b46 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009b4a:	f000 fedd 	bl	800a908 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b4e:	4b07      	ldr	r3, [pc, #28]	@ (8009b6c <vTaskSetTimeOutState+0x48>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009b56:	4b06      	ldr	r3, [pc, #24]	@ (8009b70 <vTaskSetTimeOutState+0x4c>)
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009b5e:	f000 ff05 	bl	800a96c <vPortExitCritical>
}
 8009b62:	bf00      	nop
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	2000867c 	.word	0x2000867c
 8009b70:	20008668 	.word	0x20008668

08009b74 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009b7c:	4b06      	ldr	r3, [pc, #24]	@ (8009b98 <vTaskInternalSetTimeOutState+0x24>)
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009b84:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <vTaskInternalSetTimeOutState+0x28>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	605a      	str	r2, [r3, #4]
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	2000867c 	.word	0x2000867c
 8009b9c:	20008668 	.word	0x20008668

08009ba0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10b      	bne.n	8009bc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	613b      	str	r3, [r7, #16]
}
 8009bc2:	bf00      	nop
 8009bc4:	bf00      	nop
 8009bc6:	e7fd      	b.n	8009bc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10b      	bne.n	8009be6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	60fb      	str	r3, [r7, #12]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009be6:	f000 fe8f 	bl	800a908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009bea:	4b1d      	ldr	r3, [pc, #116]	@ (8009c60 <xTaskCheckForTimeOut+0xc0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c02:	d102      	bne.n	8009c0a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c04:	2300      	movs	r3, #0
 8009c06:	61fb      	str	r3, [r7, #28]
 8009c08:	e023      	b.n	8009c52 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	4b15      	ldr	r3, [pc, #84]	@ (8009c64 <xTaskCheckForTimeOut+0xc4>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d007      	beq.n	8009c26 <xTaskCheckForTimeOut+0x86>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d302      	bcc.n	8009c26 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009c20:	2301      	movs	r3, #1
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e015      	b.n	8009c52 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	697a      	ldr	r2, [r7, #20]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d20b      	bcs.n	8009c48 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff ff99 	bl	8009b74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61fb      	str	r3, [r7, #28]
 8009c46:	e004      	b.n	8009c52 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009c52:	f000 fe8b 	bl	800a96c <vPortExitCritical>

	return xReturn;
 8009c56:	69fb      	ldr	r3, [r7, #28]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20008668 	.word	0x20008668
 8009c64:	2000867c 	.word	0x2000867c

08009c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009c6c:	4b03      	ldr	r3, [pc, #12]	@ (8009c7c <vTaskMissedYield+0x14>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	bf00      	nop
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20008678 	.word	0x20008678

08009c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009c88:	f000 f852 	bl	8009d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009c8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ca8 <prvIdleTask+0x28>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d9f9      	bls.n	8009c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009c94:	4b05      	ldr	r3, [pc, #20]	@ (8009cac <prvIdleTask+0x2c>)
 8009c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ca4:	e7f0      	b.n	8009c88 <prvIdleTask+0x8>
 8009ca6:	bf00      	nop
 8009ca8:	20008194 	.word	0x20008194
 8009cac:	e000ed04 	.word	0xe000ed04

08009cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	607b      	str	r3, [r7, #4]
 8009cba:	e00c      	b.n	8009cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4a12      	ldr	r2, [pc, #72]	@ (8009d10 <prvInitialiseTaskLists+0x60>)
 8009cc8:	4413      	add	r3, r2
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7fe fcae 	bl	800862c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	607b      	str	r3, [r7, #4]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b37      	cmp	r3, #55	@ 0x37
 8009cda:	d9ef      	bls.n	8009cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009cdc:	480d      	ldr	r0, [pc, #52]	@ (8009d14 <prvInitialiseTaskLists+0x64>)
 8009cde:	f7fe fca5 	bl	800862c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ce2:	480d      	ldr	r0, [pc, #52]	@ (8009d18 <prvInitialiseTaskLists+0x68>)
 8009ce4:	f7fe fca2 	bl	800862c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ce8:	480c      	ldr	r0, [pc, #48]	@ (8009d1c <prvInitialiseTaskLists+0x6c>)
 8009cea:	f7fe fc9f 	bl	800862c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009cee:	480c      	ldr	r0, [pc, #48]	@ (8009d20 <prvInitialiseTaskLists+0x70>)
 8009cf0:	f7fe fc9c 	bl	800862c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009cf4:	480b      	ldr	r0, [pc, #44]	@ (8009d24 <prvInitialiseTaskLists+0x74>)
 8009cf6:	f7fe fc99 	bl	800862c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009d28 <prvInitialiseTaskLists+0x78>)
 8009cfc:	4a05      	ldr	r2, [pc, #20]	@ (8009d14 <prvInitialiseTaskLists+0x64>)
 8009cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d00:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <prvInitialiseTaskLists+0x7c>)
 8009d02:	4a05      	ldr	r2, [pc, #20]	@ (8009d18 <prvInitialiseTaskLists+0x68>)
 8009d04:	601a      	str	r2, [r3, #0]
}
 8009d06:	bf00      	nop
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20008194 	.word	0x20008194
 8009d14:	200085f4 	.word	0x200085f4
 8009d18:	20008608 	.word	0x20008608
 8009d1c:	20008624 	.word	0x20008624
 8009d20:	20008638 	.word	0x20008638
 8009d24:	20008650 	.word	0x20008650
 8009d28:	2000861c 	.word	0x2000861c
 8009d2c:	20008620 	.word	0x20008620

08009d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d36:	e019      	b.n	8009d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009d38:	f000 fde6 	bl	800a908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d3c:	4b10      	ldr	r3, [pc, #64]	@ (8009d80 <prvCheckTasksWaitingTermination+0x50>)
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3304      	adds	r3, #4
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fcf9 	bl	8008740 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d84 <prvCheckTasksWaitingTermination+0x54>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	4a0b      	ldr	r2, [pc, #44]	@ (8009d84 <prvCheckTasksWaitingTermination+0x54>)
 8009d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009d58:	4b0b      	ldr	r3, [pc, #44]	@ (8009d88 <prvCheckTasksWaitingTermination+0x58>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8009d88 <prvCheckTasksWaitingTermination+0x58>)
 8009d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009d62:	f000 fe03 	bl	800a96c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f810 	bl	8009d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009d6c:	4b06      	ldr	r3, [pc, #24]	@ (8009d88 <prvCheckTasksWaitingTermination+0x58>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1e1      	bne.n	8009d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20008638 	.word	0x20008638
 8009d84:	20008664 	.word	0x20008664
 8009d88:	2000864c 	.word	0x2000864c

08009d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d108      	bne.n	8009db0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 ffa0 	bl	800ace8 <vPortFree>
				vPortFree( pxTCB );
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 ff9d 	bl	800ace8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009dae:	e019      	b.n	8009de4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d103      	bne.n	8009dc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 ff94 	bl	800ace8 <vPortFree>
	}
 8009dc0:	e010      	b.n	8009de4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009dc8:	2b02      	cmp	r3, #2
 8009dca:	d00b      	beq.n	8009de4 <prvDeleteTCB+0x58>
	__asm volatile
 8009dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd0:	f383 8811 	msr	BASEPRI, r3
 8009dd4:	f3bf 8f6f 	isb	sy
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	60fb      	str	r3, [r7, #12]
}
 8009dde:	bf00      	nop
 8009de0:	bf00      	nop
 8009de2:	e7fd      	b.n	8009de0 <prvDeleteTCB+0x54>
	}
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009df2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e24 <prvResetNextTaskUnblockTime+0x38>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d104      	bne.n	8009e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009e28 <prvResetNextTaskUnblockTime+0x3c>)
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e04:	e008      	b.n	8009e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e06:	4b07      	ldr	r3, [pc, #28]	@ (8009e24 <prvResetNextTaskUnblockTime+0x38>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	4a04      	ldr	r2, [pc, #16]	@ (8009e28 <prvResetNextTaskUnblockTime+0x3c>)
 8009e16:	6013      	str	r3, [r2, #0]
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	2000861c 	.word	0x2000861c
 8009e28:	20008684 	.word	0x20008684

08009e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e32:	4b0b      	ldr	r3, [pc, #44]	@ (8009e60 <xTaskGetSchedulerState+0x34>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d102      	bne.n	8009e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	607b      	str	r3, [r7, #4]
 8009e3e:	e008      	b.n	8009e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e40:	4b08      	ldr	r3, [pc, #32]	@ (8009e64 <xTaskGetSchedulerState+0x38>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e48:	2302      	movs	r3, #2
 8009e4a:	607b      	str	r3, [r7, #4]
 8009e4c:	e001      	b.n	8009e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e52:	687b      	ldr	r3, [r7, #4]
	}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr
 8009e60:	20008670 	.word	0x20008670
 8009e64:	2000868c 	.word	0x2000868c

08009e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d058      	beq.n	8009f30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8009f3c <xTaskPriorityDisinherit+0xd4>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d00b      	beq.n	8009ea0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	60fb      	str	r3, [r7, #12]
}
 8009e9a:	bf00      	nop
 8009e9c:	bf00      	nop
 8009e9e:	e7fd      	b.n	8009e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10b      	bne.n	8009ec0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	60bb      	str	r3, [r7, #8]
}
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
 8009ebe:	e7fd      	b.n	8009ebc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ec4:	1e5a      	subs	r2, r3, #1
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d02c      	beq.n	8009f30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d128      	bne.n	8009f30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fc2c 	bl	8008740 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f00:	4b0f      	ldr	r3, [pc, #60]	@ (8009f40 <xTaskPriorityDisinherit+0xd8>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d903      	bls.n	8009f10 <xTaskPriorityDisinherit+0xa8>
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f40 <xTaskPriorityDisinherit+0xd8>)
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4a09      	ldr	r2, [pc, #36]	@ (8009f44 <xTaskPriorityDisinherit+0xdc>)
 8009f1e:	441a      	add	r2, r3
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f7fe fbad 	bl	8008686 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f30:	697b      	ldr	r3, [r7, #20]
	}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	20008190 	.word	0x20008190
 8009f40:	2000866c 	.word	0x2000866c
 8009f44:	20008194 	.word	0x20008194

08009f48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f52:	4b21      	ldr	r3, [pc, #132]	@ (8009fd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f58:	4b20      	ldr	r3, [pc, #128]	@ (8009fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fbee 	bl	8008740 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f6a:	d10a      	bne.n	8009f82 <prvAddCurrentTaskToDelayedList+0x3a>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d007      	beq.n	8009f82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f72:	4b1a      	ldr	r3, [pc, #104]	@ (8009fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3304      	adds	r3, #4
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4819      	ldr	r0, [pc, #100]	@ (8009fe0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009f7c:	f7fe fb83 	bl	8008686 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f80:	e026      	b.n	8009fd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4413      	add	r3, r2
 8009f88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f8a:	4b14      	ldr	r3, [pc, #80]	@ (8009fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d209      	bcs.n	8009fae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f9a:	4b12      	ldr	r3, [pc, #72]	@ (8009fe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8009fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7fe fb91 	bl	80086ce <vListInsert>
}
 8009fac:	e010      	b.n	8009fd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fae:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8009fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f7fe fb87 	bl	80086ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8009fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d202      	bcs.n	8009fd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009fca:	4a08      	ldr	r2, [pc, #32]	@ (8009fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	6013      	str	r3, [r2, #0]
}
 8009fd0:	bf00      	nop
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20008668 	.word	0x20008668
 8009fdc:	20008190 	.word	0x20008190
 8009fe0:	20008650 	.word	0x20008650
 8009fe4:	20008620 	.word	0x20008620
 8009fe8:	2000861c 	.word	0x2000861c
 8009fec:	20008684 	.word	0x20008684

08009ff0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	@ 0x28
 8009ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009ffa:	f000 fb13 	bl	800a624 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ffe:	4b1d      	ldr	r3, [pc, #116]	@ (800a074 <xTimerCreateTimerTask+0x84>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d021      	beq.n	800a04a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a00e:	1d3a      	adds	r2, r7, #4
 800a010:	f107 0108 	add.w	r1, r7, #8
 800a014:	f107 030c 	add.w	r3, r7, #12
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe faed 	bl	80085f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	9202      	str	r2, [sp, #8]
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	2302      	movs	r3, #2
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	2300      	movs	r3, #0
 800a02e:	460a      	mov	r2, r1
 800a030:	4911      	ldr	r1, [pc, #68]	@ (800a078 <xTimerCreateTimerTask+0x88>)
 800a032:	4812      	ldr	r0, [pc, #72]	@ (800a07c <xTimerCreateTimerTask+0x8c>)
 800a034:	f7ff f8a8 	bl	8009188 <xTaskCreateStatic>
 800a038:	4603      	mov	r3, r0
 800a03a:	4a11      	ldr	r2, [pc, #68]	@ (800a080 <xTimerCreateTimerTask+0x90>)
 800a03c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a03e:	4b10      	ldr	r3, [pc, #64]	@ (800a080 <xTimerCreateTimerTask+0x90>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a046:	2301      	movs	r3, #1
 800a048:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d10b      	bne.n	800a068 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	613b      	str	r3, [r7, #16]
}
 800a062:	bf00      	nop
 800a064:	bf00      	nop
 800a066:	e7fd      	b.n	800a064 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a068:	697b      	ldr	r3, [r7, #20]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	200086c0 	.word	0x200086c0
 800a078:	08015b44 	.word	0x08015b44
 800a07c:	0800a1bd 	.word	0x0800a1bd
 800a080:	200086c4 	.word	0x200086c4

0800a084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08a      	sub	sp, #40	@ 0x28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a092:	2300      	movs	r3, #0
 800a094:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10b      	bne.n	800a0b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a0:	f383 8811 	msr	BASEPRI, r3
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	623b      	str	r3, [r7, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	bf00      	nop
 800a0b2:	e7fd      	b.n	800a0b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0b4:	4b19      	ldr	r3, [pc, #100]	@ (800a11c <xTimerGenericCommand+0x98>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d02a      	beq.n	800a112 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	dc18      	bgt.n	800a100 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0ce:	f7ff fead 	bl	8009e2c <xTaskGetSchedulerState>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d109      	bne.n	800a0ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0d8:	4b10      	ldr	r3, [pc, #64]	@ (800a11c <xTimerGenericCommand+0x98>)
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	f107 0110 	add.w	r1, r7, #16
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e4:	f7fe fc60 	bl	80089a8 <xQueueGenericSend>
 800a0e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0ea:	e012      	b.n	800a112 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0ec:	4b0b      	ldr	r3, [pc, #44]	@ (800a11c <xTimerGenericCommand+0x98>)
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	f107 0110 	add.w	r1, r7, #16
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f7fe fc56 	bl	80089a8 <xQueueGenericSend>
 800a0fc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a0fe:	e008      	b.n	800a112 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a100:	4b06      	ldr	r3, [pc, #24]	@ (800a11c <xTimerGenericCommand+0x98>)
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	f107 0110 	add.w	r1, r7, #16
 800a108:	2300      	movs	r3, #0
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	f7fe fd4e 	bl	8008bac <xQueueGenericSendFromISR>
 800a110:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a114:	4618      	mov	r0, r3
 800a116:	3728      	adds	r7, #40	@ 0x28
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	200086c0 	.word	0x200086c0

0800a120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af02      	add	r7, sp, #8
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a12a:	4b23      	ldr	r3, [pc, #140]	@ (800a1b8 <prvProcessExpiredTimer+0x98>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	3304      	adds	r3, #4
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fb01 	bl	8008740 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a144:	f003 0304 	and.w	r3, r3, #4
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d023      	beq.n	800a194 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	699a      	ldr	r2, [r3, #24]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	18d1      	adds	r1, r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	6978      	ldr	r0, [r7, #20]
 800a15a:	f000 f8d5 	bl	800a308 <prvInsertTimerInActiveList>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d020      	beq.n	800a1a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a164:	2300      	movs	r3, #0
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	2300      	movs	r3, #0
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	2100      	movs	r1, #0
 800a16e:	6978      	ldr	r0, [r7, #20]
 800a170:	f7ff ff88 	bl	800a084 <xTimerGenericCommand>
 800a174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d114      	bne.n	800a1a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	60fb      	str	r3, [r7, #12]
}
 800a18e:	bf00      	nop
 800a190:	bf00      	nop
 800a192:	e7fd      	b.n	800a190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a19a:	f023 0301 	bic.w	r3, r3, #1
 800a19e:	b2da      	uxtb	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	6978      	ldr	r0, [r7, #20]
 800a1ac:	4798      	blx	r3
}
 800a1ae:	bf00      	nop
 800a1b0:	3718      	adds	r7, #24
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	200086b8 	.word	0x200086b8

0800a1bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1c4:	f107 0308 	add.w	r3, r7, #8
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f859 	bl	800a280 <prvGetNextExpireTime>
 800a1ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 f805 	bl	800a1e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1da:	f000 f8d7 	bl	800a38c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1de:	bf00      	nop
 800a1e0:	e7f0      	b.n	800a1c4 <prvTimerTask+0x8>
	...

0800a1e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ee:	f7ff fa0f 	bl	8009610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f866 	bl	800a2c8 <prvSampleTimeNow>
 800a1fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d130      	bne.n	800a266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <prvProcessTimerOrBlockTask+0x3c>
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d806      	bhi.n	800a220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a212:	f7ff fa0b 	bl	800962c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff ff81 	bl	800a120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a21e:	e024      	b.n	800a26a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a226:	4b13      	ldr	r3, [pc, #76]	@ (800a274 <prvProcessTimerOrBlockTask+0x90>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <prvProcessTimerOrBlockTask+0x50>
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <prvProcessTimerOrBlockTask+0x52>
 800a234:	2300      	movs	r3, #0
 800a236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a238:	4b0f      	ldr	r3, [pc, #60]	@ (800a278 <prvProcessTimerOrBlockTask+0x94>)
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4619      	mov	r1, r3
 800a246:	f7fe ff6b 	bl	8009120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a24a:	f7ff f9ef 	bl	800962c <xTaskResumeAll>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a254:	4b09      	ldr	r3, [pc, #36]	@ (800a27c <prvProcessTimerOrBlockTask+0x98>)
 800a256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	f3bf 8f6f 	isb	sy
}
 800a264:	e001      	b.n	800a26a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a266:	f7ff f9e1 	bl	800962c <xTaskResumeAll>
}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200086bc 	.word	0x200086bc
 800a278:	200086c0 	.word	0x200086c0
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a288:	4b0e      	ldr	r3, [pc, #56]	@ (800a2c4 <prvGetNextExpireTime+0x44>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <prvGetNextExpireTime+0x16>
 800a292:	2201      	movs	r2, #1
 800a294:	e000      	b.n	800a298 <prvGetNextExpireTime+0x18>
 800a296:	2200      	movs	r2, #0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2a4:	4b07      	ldr	r3, [pc, #28]	@ (800a2c4 <prvGetNextExpireTime+0x44>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e001      	b.n	800a2b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	200086b8 	.word	0x200086b8

0800a2c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2d0:	f7ff fa4a 	bl	8009768 <xTaskGetTickCount>
 800a2d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800a304 <prvSampleTimeNow+0x3c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d205      	bcs.n	800a2ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2e0:	f000 f93a 	bl	800a558 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	e002      	b.n	800a2f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2f2:	4a04      	ldr	r2, [pc, #16]	@ (800a304 <prvSampleTimeNow+0x3c>)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200086c8 	.word	0x200086c8

0800a308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d812      	bhi.n	800a354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	1ad2      	subs	r2, r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d302      	bcc.n	800a342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e01b      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a342:	4b10      	ldr	r3, [pc, #64]	@ (800a384 <prvInsertTimerInActiveList+0x7c>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3304      	adds	r3, #4
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7fe f9be 	bl	80086ce <vListInsert>
 800a352:	e012      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d206      	bcs.n	800a36a <prvInsertTimerInActiveList+0x62>
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d302      	bcc.n	800a36a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e007      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a36a:	4b07      	ldr	r3, [pc, #28]	@ (800a388 <prvInsertTimerInActiveList+0x80>)
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3304      	adds	r3, #4
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7fe f9aa 	bl	80086ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a37a:	697b      	ldr	r3, [r7, #20]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	200086bc 	.word	0x200086bc
 800a388:	200086b8 	.word	0x200086b8

0800a38c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	@ 0x38
 800a390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a392:	e0ce      	b.n	800a532 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da19      	bge.n	800a3ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a39a:	1d3b      	adds	r3, r7, #4
 800a39c:	3304      	adds	r3, #4
 800a39e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	61fb      	str	r3, [r7, #28]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3c4:	6850      	ldr	r0, [r2, #4]
 800a3c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3c8:	6892      	ldr	r2, [r2, #8]
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f2c0 80ae 	blt.w	800a532 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f7fe f9aa 	bl	8008740 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ec:	463b      	mov	r3, r7
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7ff ff6a 	bl	800a2c8 <prvSampleTimeNow>
 800a3f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b09      	cmp	r3, #9
 800a3fa:	f200 8097 	bhi.w	800a52c <prvProcessReceivedCommands+0x1a0>
 800a3fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a404 <prvProcessReceivedCommands+0x78>)
 800a400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a404:	0800a42d 	.word	0x0800a42d
 800a408:	0800a42d 	.word	0x0800a42d
 800a40c:	0800a42d 	.word	0x0800a42d
 800a410:	0800a4a3 	.word	0x0800a4a3
 800a414:	0800a4b7 	.word	0x0800a4b7
 800a418:	0800a503 	.word	0x0800a503
 800a41c:	0800a42d 	.word	0x0800a42d
 800a420:	0800a42d 	.word	0x0800a42d
 800a424:	0800a4a3 	.word	0x0800a4a3
 800a428:	0800a4b7 	.word	0x0800a4b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a42e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	b2da      	uxtb	r2, r3
 800a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	18d1      	adds	r1, r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a44c:	f7ff ff5c 	bl	800a308 <prvInsertTimerInActiveList>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d06c      	beq.n	800a530 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a45c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d061      	beq.n	800a530 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	441a      	add	r2, r3
 800a474:	2300      	movs	r3, #0
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2300      	movs	r3, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a47e:	f7ff fe01 	bl	800a084 <xTimerGenericCommand>
 800a482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d152      	bne.n	800a530 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61bb      	str	r3, [r7, #24]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4a8:	f023 0301 	bic.w	r3, r3, #1
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a4b4:	e03d      	b.n	800a532 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4bc:	f043 0301 	orr.w	r3, r3, #1
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10b      	bne.n	800a4ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	617b      	str	r3, [r7, #20]
}
 800a4e8:	bf00      	nop
 800a4ea:	bf00      	nop
 800a4ec:	e7fd      	b.n	800a4ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f4:	18d1      	adds	r1, r2, r3
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4fc:	f7ff ff04 	bl	800a308 <prvInsertTimerInActiveList>
					break;
 800a500:	e017      	b.n	800a532 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d103      	bne.n	800a518 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a512:	f000 fbe9 	bl	800ace8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a516:	e00c      	b.n	800a532 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a52a:	e002      	b.n	800a532 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a52c:	bf00      	nop
 800a52e:	e000      	b.n	800a532 <prvProcessReceivedCommands+0x1a6>
					break;
 800a530:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a532:	4b08      	ldr	r3, [pc, #32]	@ (800a554 <prvProcessReceivedCommands+0x1c8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	1d39      	adds	r1, r7, #4
 800a538:	2200      	movs	r2, #0
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe fbd4 	bl	8008ce8 <xQueueReceive>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	f47f af26 	bne.w	800a394 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	3730      	adds	r7, #48	@ 0x30
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200086c0 	.word	0x200086c0

0800a558 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b088      	sub	sp, #32
 800a55c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a55e:	e049      	b.n	800a5f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a560:	4b2e      	ldr	r3, [pc, #184]	@ (800a61c <prvSwitchTimerLists+0xc4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a56a:	4b2c      	ldr	r3, [pc, #176]	@ (800a61c <prvSwitchTimerLists+0xc4>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	68db      	ldr	r3, [r3, #12]
 800a572:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	3304      	adds	r3, #4
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe f8e1 	bl	8008740 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a58c:	f003 0304 	and.w	r3, r3, #4
 800a590:	2b00      	cmp	r3, #0
 800a592:	d02f      	beq.n	800a5f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	4413      	add	r3, r2
 800a59c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d90e      	bls.n	800a5c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	68ba      	ldr	r2, [r7, #8]
 800a5aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a61c <prvSwitchTimerLists+0xc4>)
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f7fe f886 	bl	80086ce <vListInsert>
 800a5c2:	e017      	b.n	800a5f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fd58 	bl	800a084 <xTimerGenericCommand>
 800a5d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10b      	bne.n	800a5f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	603b      	str	r3, [r7, #0]
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5f4:	4b09      	ldr	r3, [pc, #36]	@ (800a61c <prvSwitchTimerLists+0xc4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1b0      	bne.n	800a560 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5fe:	4b07      	ldr	r3, [pc, #28]	@ (800a61c <prvSwitchTimerLists+0xc4>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a604:	4b06      	ldr	r3, [pc, #24]	@ (800a620 <prvSwitchTimerLists+0xc8>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a04      	ldr	r2, [pc, #16]	@ (800a61c <prvSwitchTimerLists+0xc4>)
 800a60a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a60c:	4a04      	ldr	r2, [pc, #16]	@ (800a620 <prvSwitchTimerLists+0xc8>)
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	6013      	str	r3, [r2, #0]
}
 800a612:	bf00      	nop
 800a614:	3718      	adds	r7, #24
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	200086b8 	.word	0x200086b8
 800a620:	200086bc 	.word	0x200086bc

0800a624 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a62a:	f000 f96d 	bl	800a908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a62e:	4b15      	ldr	r3, [pc, #84]	@ (800a684 <prvCheckForValidListAndQueue+0x60>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d120      	bne.n	800a678 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a636:	4814      	ldr	r0, [pc, #80]	@ (800a688 <prvCheckForValidListAndQueue+0x64>)
 800a638:	f7fd fff8 	bl	800862c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a63c:	4813      	ldr	r0, [pc, #76]	@ (800a68c <prvCheckForValidListAndQueue+0x68>)
 800a63e:	f7fd fff5 	bl	800862c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a642:	4b13      	ldr	r3, [pc, #76]	@ (800a690 <prvCheckForValidListAndQueue+0x6c>)
 800a644:	4a10      	ldr	r2, [pc, #64]	@ (800a688 <prvCheckForValidListAndQueue+0x64>)
 800a646:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a648:	4b12      	ldr	r3, [pc, #72]	@ (800a694 <prvCheckForValidListAndQueue+0x70>)
 800a64a:	4a10      	ldr	r2, [pc, #64]	@ (800a68c <prvCheckForValidListAndQueue+0x68>)
 800a64c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a64e:	2300      	movs	r3, #0
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	4b11      	ldr	r3, [pc, #68]	@ (800a698 <prvCheckForValidListAndQueue+0x74>)
 800a654:	4a11      	ldr	r2, [pc, #68]	@ (800a69c <prvCheckForValidListAndQueue+0x78>)
 800a656:	2110      	movs	r1, #16
 800a658:	200a      	movs	r0, #10
 800a65a:	f7fe f905 	bl	8008868 <xQueueGenericCreateStatic>
 800a65e:	4603      	mov	r3, r0
 800a660:	4a08      	ldr	r2, [pc, #32]	@ (800a684 <prvCheckForValidListAndQueue+0x60>)
 800a662:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a664:	4b07      	ldr	r3, [pc, #28]	@ (800a684 <prvCheckForValidListAndQueue+0x60>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a66c:	4b05      	ldr	r3, [pc, #20]	@ (800a684 <prvCheckForValidListAndQueue+0x60>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	490b      	ldr	r1, [pc, #44]	@ (800a6a0 <prvCheckForValidListAndQueue+0x7c>)
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fd2a 	bl	80090cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a678:	f000 f978 	bl	800a96c <vPortExitCritical>
}
 800a67c:	bf00      	nop
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200086c0 	.word	0x200086c0
 800a688:	20008690 	.word	0x20008690
 800a68c:	200086a4 	.word	0x200086a4
 800a690:	200086b8 	.word	0x200086b8
 800a694:	200086bc 	.word	0x200086bc
 800a698:	2000876c 	.word	0x2000876c
 800a69c:	200086cc 	.word	0x200086cc
 800a6a0:	08015b4c 	.word	0x08015b4c

0800a6a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3b04      	subs	r3, #4
 800a6b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f023 0201 	bic.w	r2, r3, #1
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3b04      	subs	r3, #4
 800a6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6d4:	4a0c      	ldr	r2, [pc, #48]	@ (800a708 <pxPortInitialiseStack+0x64>)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b14      	subs	r3, #20
 800a6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3b04      	subs	r3, #4
 800a6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f06f 0202 	mvn.w	r2, #2
 800a6f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	3b20      	subs	r3, #32
 800a6f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	0800a70d 	.word	0x0800a70d

0800a70c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a716:	4b13      	ldr	r3, [pc, #76]	@ (800a764 <prvTaskExitError+0x58>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d00b      	beq.n	800a738 <prvTaskExitError+0x2c>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	bf00      	nop
 800a736:	e7fd      	b.n	800a734 <prvTaskExitError+0x28>
	__asm volatile
 800a738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a73c:	f383 8811 	msr	BASEPRI, r3
 800a740:	f3bf 8f6f 	isb	sy
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	60bb      	str	r3, [r7, #8]
}
 800a74a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a74c:	bf00      	nop
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d0fc      	beq.n	800a74e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a754:	bf00      	nop
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	200000d0 	.word	0x200000d0
	...

0800a770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a770:	4b07      	ldr	r3, [pc, #28]	@ (800a790 <pxCurrentTCBConst2>)
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	6808      	ldr	r0, [r1, #0]
 800a776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	f380 8809 	msr	PSP, r0
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f04f 0000 	mov.w	r0, #0
 800a786:	f380 8811 	msr	BASEPRI, r0
 800a78a:	4770      	bx	lr
 800a78c:	f3af 8000 	nop.w

0800a790 <pxCurrentTCBConst2>:
 800a790:	20008190 	.word	0x20008190
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a798:	4808      	ldr	r0, [pc, #32]	@ (800a7bc <prvPortStartFirstTask+0x24>)
 800a79a:	6800      	ldr	r0, [r0, #0]
 800a79c:	6800      	ldr	r0, [r0, #0]
 800a79e:	f380 8808 	msr	MSP, r0
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8814 	msr	CONTROL, r0
 800a7aa:	b662      	cpsie	i
 800a7ac:	b661      	cpsie	f
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	df00      	svc	0
 800a7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ba:	bf00      	nop
 800a7bc:	e000ed08 	.word	0xe000ed08

0800a7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7c6:	4b47      	ldr	r3, [pc, #284]	@ (800a8e4 <xPortStartScheduler+0x124>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a47      	ldr	r2, [pc, #284]	@ (800a8e8 <xPortStartScheduler+0x128>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d10b      	bne.n	800a7e8 <xPortStartScheduler+0x28>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
}
 800a7e2:	bf00      	nop
 800a7e4:	bf00      	nop
 800a7e6:	e7fd      	b.n	800a7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7e8:	4b3e      	ldr	r3, [pc, #248]	@ (800a8e4 <xPortStartScheduler+0x124>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a3f      	ldr	r2, [pc, #252]	@ (800a8ec <xPortStartScheduler+0x12c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d10b      	bne.n	800a80a <xPortStartScheduler+0x4a>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	60fb      	str	r3, [r7, #12]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a80a:	4b39      	ldr	r3, [pc, #228]	@ (800a8f0 <xPortStartScheduler+0x130>)
 800a80c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	22ff      	movs	r2, #255	@ 0xff
 800a81a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a82c:	b2da      	uxtb	r2, r3
 800a82e:	4b31      	ldr	r3, [pc, #196]	@ (800a8f4 <xPortStartScheduler+0x134>)
 800a830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a832:	4b31      	ldr	r3, [pc, #196]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a834:	2207      	movs	r2, #7
 800a836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a838:	e009      	b.n	800a84e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a83a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3b01      	subs	r3, #1
 800a840:	4a2d      	ldr	r2, [pc, #180]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a844:	78fb      	ldrb	r3, [r7, #3]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	005b      	lsls	r3, r3, #1
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a856:	2b80      	cmp	r3, #128	@ 0x80
 800a858:	d0ef      	beq.n	800a83a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a85a:	4b27      	ldr	r3, [pc, #156]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f1c3 0307 	rsb	r3, r3, #7
 800a862:	2b04      	cmp	r3, #4
 800a864:	d00b      	beq.n	800a87e <xPortStartScheduler+0xbe>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	60bb      	str	r3, [r7, #8]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a87e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	4a1c      	ldr	r2, [pc, #112]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a888:	4b1b      	ldr	r3, [pc, #108]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a890:	4a19      	ldr	r2, [pc, #100]	@ (800a8f8 <xPortStartScheduler+0x138>)
 800a892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	b2da      	uxtb	r2, r3
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a89c:	4b17      	ldr	r3, [pc, #92]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a16      	ldr	r2, [pc, #88]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a8a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a8a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8a8:	4b14      	ldr	r3, [pc, #80]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a13      	ldr	r2, [pc, #76]	@ (800a8fc <xPortStartScheduler+0x13c>)
 800a8ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a8b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8b4:	f000 f8da 	bl	800aa6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8b8:	4b11      	ldr	r3, [pc, #68]	@ (800a900 <xPortStartScheduler+0x140>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8be:	f000 f8f9 	bl	800aab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8c2:	4b10      	ldr	r3, [pc, #64]	@ (800a904 <xPortStartScheduler+0x144>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a0f      	ldr	r2, [pc, #60]	@ (800a904 <xPortStartScheduler+0x144>)
 800a8c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a8cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8ce:	f7ff ff63 	bl	800a798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8d2:	f7ff f813 	bl	80098fc <vTaskSwitchContext>
	prvTaskExitError();
 800a8d6:	f7ff ff19 	bl	800a70c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed00 	.word	0xe000ed00
 800a8e8:	410fc271 	.word	0x410fc271
 800a8ec:	410fc270 	.word	0x410fc270
 800a8f0:	e000e400 	.word	0xe000e400
 800a8f4:	200087bc 	.word	0x200087bc
 800a8f8:	200087c0 	.word	0x200087c0
 800a8fc:	e000ed20 	.word	0xe000ed20
 800a900:	200000d0 	.word	0x200000d0
 800a904:	e000ef34 	.word	0xe000ef34

0800a908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
}
 800a920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a922:	4b10      	ldr	r3, [pc, #64]	@ (800a964 <vPortEnterCritical+0x5c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	4a0e      	ldr	r2, [pc, #56]	@ (800a964 <vPortEnterCritical+0x5c>)
 800a92a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a92c:	4b0d      	ldr	r3, [pc, #52]	@ (800a964 <vPortEnterCritical+0x5c>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d110      	bne.n	800a956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a934:	4b0c      	ldr	r3, [pc, #48]	@ (800a968 <vPortEnterCritical+0x60>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00b      	beq.n	800a956 <vPortEnterCritical+0x4e>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	603b      	str	r3, [r7, #0]
}
 800a950:	bf00      	nop
 800a952:	bf00      	nop
 800a954:	e7fd      	b.n	800a952 <vPortEnterCritical+0x4a>
	}
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	200000d0 	.word	0x200000d0
 800a968:	e000ed04 	.word	0xe000ed04

0800a96c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a972:	4b12      	ldr	r3, [pc, #72]	@ (800a9bc <vPortExitCritical+0x50>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10b      	bne.n	800a992 <vPortExitCritical+0x26>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	607b      	str	r3, [r7, #4]
}
 800a98c:	bf00      	nop
 800a98e:	bf00      	nop
 800a990:	e7fd      	b.n	800a98e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a992:	4b0a      	ldr	r3, [pc, #40]	@ (800a9bc <vPortExitCritical+0x50>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3b01      	subs	r3, #1
 800a998:	4a08      	ldr	r2, [pc, #32]	@ (800a9bc <vPortExitCritical+0x50>)
 800a99a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a99c:	4b07      	ldr	r3, [pc, #28]	@ (800a9bc <vPortExitCritical+0x50>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d105      	bne.n	800a9b0 <vPortExitCritical+0x44>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f383 8811 	msr	BASEPRI, r3
}
 800a9ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	200000d0 	.word	0x200000d0

0800a9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9c0:	f3ef 8009 	mrs	r0, PSP
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	4b15      	ldr	r3, [pc, #84]	@ (800aa20 <pxCurrentTCBConst>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f01e 0f10 	tst.w	lr, #16
 800a9d0:	bf08      	it	eq
 800a9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	6010      	str	r0, [r2, #0]
 800a9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a9e4:	f380 8811 	msr	BASEPRI, r0
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f7fe ff84 	bl	80098fc <vTaskSwitchContext>
 800a9f4:	f04f 0000 	mov.w	r0, #0
 800a9f8:	f380 8811 	msr	BASEPRI, r0
 800a9fc:	bc09      	pop	{r0, r3}
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	6808      	ldr	r0, [r1, #0]
 800aa02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa06:	f01e 0f10 	tst.w	lr, #16
 800aa0a:	bf08      	it	eq
 800aa0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa10:	f380 8809 	msr	PSP, r0
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst>:
 800aa20:	20008190 	.word	0x20008190
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa42:	f7fe fea1 	bl	8009788 <xTaskIncrementTick>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa4c:	4b06      	ldr	r3, [pc, #24]	@ (800aa68 <xPortSysTickHandler+0x40>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f383 8811 	msr	BASEPRI, r3
}
 800aa5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa70:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa76:	4b0b      	ldr	r3, [pc, #44]	@ (800aaa4 <vPortSetupTimerInterrupt+0x38>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa8 <vPortSetupTimerInterrupt+0x3c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a0a      	ldr	r2, [pc, #40]	@ (800aaac <vPortSetupTimerInterrupt+0x40>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	099b      	lsrs	r3, r3, #6
 800aa88:	4a09      	ldr	r2, [pc, #36]	@ (800aab0 <vPortSetupTimerInterrupt+0x44>)
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa8e:	4b04      	ldr	r3, [pc, #16]	@ (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa90:	2207      	movs	r2, #7
 800aa92:	601a      	str	r2, [r3, #0]
}
 800aa94:	bf00      	nop
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	e000e010 	.word	0xe000e010
 800aaa4:	e000e018 	.word	0xe000e018
 800aaa8:	200000c4 	.word	0x200000c4
 800aaac:	10624dd3 	.word	0x10624dd3
 800aab0:	e000e014 	.word	0xe000e014

0800aab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800aac4 <vPortEnableVFP+0x10>
 800aab8:	6801      	ldr	r1, [r0, #0]
 800aaba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800aabe:	6001      	str	r1, [r0, #0]
 800aac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aac2:	bf00      	nop
 800aac4:	e000ed88 	.word	0xe000ed88

0800aac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aace:	f3ef 8305 	mrs	r3, IPSR
 800aad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d915      	bls.n	800ab06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aada:	4a18      	ldr	r2, [pc, #96]	@ (800ab3c <vPortValidateInterruptPriority+0x74>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aae4:	4b16      	ldr	r3, [pc, #88]	@ (800ab40 <vPortValidateInterruptPriority+0x78>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	7afa      	ldrb	r2, [r7, #11]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d20b      	bcs.n	800ab06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	e7fd      	b.n	800ab02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <vPortValidateInterruptPriority+0x7c>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ab0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ab48 <vPortValidateInterruptPriority+0x80>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d90b      	bls.n	800ab2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	603b      	str	r3, [r7, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <vPortValidateInterruptPriority+0x62>
	}
 800ab2e:	bf00      	nop
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	e000e3f0 	.word	0xe000e3f0
 800ab40:	200087bc 	.word	0x200087bc
 800ab44:	e000ed0c 	.word	0xe000ed0c
 800ab48:	200087c0 	.word	0x200087c0

0800ab4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08a      	sub	sp, #40	@ 0x28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab54:	2300      	movs	r3, #0
 800ab56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab58:	f7fe fd5a 	bl	8009610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab5c:	4b5c      	ldr	r3, [pc, #368]	@ (800acd0 <pvPortMalloc+0x184>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab64:	f000 f924 	bl	800adb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab68:	4b5a      	ldr	r3, [pc, #360]	@ (800acd4 <pvPortMalloc+0x188>)
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f040 8095 	bne.w	800aca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d01e      	beq.n	800abba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ab7c:	2208      	movs	r2, #8
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4413      	add	r3, r2
 800ab82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d015      	beq.n	800abba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f023 0307 	bic.w	r3, r3, #7
 800ab94:	3308      	adds	r3, #8
 800ab96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00b      	beq.n	800abba <pvPortMalloc+0x6e>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	617b      	str	r3, [r7, #20]
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	e7fd      	b.n	800abb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d06f      	beq.n	800aca0 <pvPortMalloc+0x154>
 800abc0:	4b45      	ldr	r3, [pc, #276]	@ (800acd8 <pvPortMalloc+0x18c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d86a      	bhi.n	800aca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abca:	4b44      	ldr	r3, [pc, #272]	@ (800acdc <pvPortMalloc+0x190>)
 800abcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abce:	4b43      	ldr	r3, [pc, #268]	@ (800acdc <pvPortMalloc+0x190>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abd4:	e004      	b.n	800abe0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d903      	bls.n	800abf2 <pvPortMalloc+0xa6>
 800abea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f1      	bne.n	800abd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abf2:	4b37      	ldr	r3, [pc, #220]	@ (800acd0 <pvPortMalloc+0x184>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d051      	beq.n	800aca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2208      	movs	r2, #8
 800ac02:	4413      	add	r3, r2
 800ac04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	1ad2      	subs	r2, r2, r3
 800ac16:	2308      	movs	r3, #8
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d920      	bls.n	800ac60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <pvPortMalloc+0xfc>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	613b      	str	r3, [r7, #16]
}
 800ac42:	bf00      	nop
 800ac44:	bf00      	nop
 800ac46:	e7fd      	b.n	800ac44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac5a:	69b8      	ldr	r0, [r7, #24]
 800ac5c:	f000 f90a 	bl	800ae74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac60:	4b1d      	ldr	r3, [pc, #116]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	4a1b      	ldr	r2, [pc, #108]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	4b1b      	ldr	r3, [pc, #108]	@ (800ace0 <pvPortMalloc+0x194>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d203      	bcs.n	800ac82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac7a:	4b17      	ldr	r3, [pc, #92]	@ (800acd8 <pvPortMalloc+0x18c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4a18      	ldr	r2, [pc, #96]	@ (800ace0 <pvPortMalloc+0x194>)
 800ac80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac84:	685a      	ldr	r2, [r3, #4]
 800ac86:	4b13      	ldr	r3, [pc, #76]	@ (800acd4 <pvPortMalloc+0x188>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	2200      	movs	r2, #0
 800ac94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac96:	4b13      	ldr	r3, [pc, #76]	@ (800ace4 <pvPortMalloc+0x198>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	4a11      	ldr	r2, [pc, #68]	@ (800ace4 <pvPortMalloc+0x198>)
 800ac9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aca0:	f7fe fcc4 	bl	800962c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00b      	beq.n	800acc6 <pvPortMalloc+0x17a>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	60fb      	str	r3, [r7, #12]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <pvPortMalloc+0x176>
	return pvReturn;
 800acc6:	69fb      	ldr	r3, [r7, #28]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3728      	adds	r7, #40	@ 0x28
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	2000c3cc 	.word	0x2000c3cc
 800acd4:	2000c3e0 	.word	0x2000c3e0
 800acd8:	2000c3d0 	.word	0x2000c3d0
 800acdc:	2000c3c4 	.word	0x2000c3c4
 800ace0:	2000c3d4 	.word	0x2000c3d4
 800ace4:	2000c3d8 	.word	0x2000c3d8

0800ace8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d04f      	beq.n	800ad9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acfa:	2308      	movs	r3, #8
 800acfc:	425b      	negs	r3, r3
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	4413      	add	r3, r2
 800ad02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	4b25      	ldr	r3, [pc, #148]	@ (800ada4 <vPortFree+0xbc>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4013      	ands	r3, r2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10b      	bne.n	800ad2e <vPortFree+0x46>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60fb      	str	r3, [r7, #12]
}
 800ad28:	bf00      	nop
 800ad2a:	bf00      	nop
 800ad2c:	e7fd      	b.n	800ad2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00b      	beq.n	800ad4e <vPortFree+0x66>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60bb      	str	r3, [r7, #8]
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	4b14      	ldr	r3, [pc, #80]	@ (800ada4 <vPortFree+0xbc>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4013      	ands	r3, r2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01e      	beq.n	800ad9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d11a      	bne.n	800ad9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	685a      	ldr	r2, [r3, #4]
 800ad68:	4b0e      	ldr	r3, [pc, #56]	@ (800ada4 <vPortFree+0xbc>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	43db      	mvns	r3, r3
 800ad6e:	401a      	ands	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad74:	f7fe fc4c 	bl	8009610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	@ (800ada8 <vPortFree+0xc0>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4413      	add	r3, r2
 800ad82:	4a09      	ldr	r2, [pc, #36]	@ (800ada8 <vPortFree+0xc0>)
 800ad84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad86:	6938      	ldr	r0, [r7, #16]
 800ad88:	f000 f874 	bl	800ae74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad8c:	4b07      	ldr	r3, [pc, #28]	@ (800adac <vPortFree+0xc4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	3301      	adds	r3, #1
 800ad92:	4a06      	ldr	r2, [pc, #24]	@ (800adac <vPortFree+0xc4>)
 800ad94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad96:	f7fe fc49 	bl	800962c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad9a:	bf00      	nop
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	2000c3e0 	.word	0x2000c3e0
 800ada8:	2000c3d0 	.word	0x2000c3d0
 800adac:	2000c3dc 	.word	0x2000c3dc

0800adb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800adba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adbc:	4b27      	ldr	r3, [pc, #156]	@ (800ae5c <prvHeapInit+0xac>)
 800adbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f003 0307 	and.w	r3, r3, #7
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3307      	adds	r3, #7
 800adce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f023 0307 	bic.w	r3, r3, #7
 800add6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	4a1f      	ldr	r2, [pc, #124]	@ (800ae5c <prvHeapInit+0xac>)
 800ade0:	4413      	add	r3, r2
 800ade2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ade8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae60 <prvHeapInit+0xb0>)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800adee:	4b1c      	ldr	r3, [pc, #112]	@ (800ae60 <prvHeapInit+0xb0>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	4413      	add	r3, r2
 800adfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adfc:	2208      	movs	r2, #8
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1a9b      	subs	r3, r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f023 0307 	bic.w	r3, r3, #7
 800ae0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	4a15      	ldr	r2, [pc, #84]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae12:	4b14      	ldr	r3, [pc, #80]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2200      	movs	r2, #0
 800ae18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae1a:	4b12      	ldr	r3, [pc, #72]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae30:	4b0c      	ldr	r3, [pc, #48]	@ (800ae64 <prvHeapInit+0xb4>)
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	4a0a      	ldr	r2, [pc, #40]	@ (800ae68 <prvHeapInit+0xb8>)
 800ae3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4a09      	ldr	r2, [pc, #36]	@ (800ae6c <prvHeapInit+0xbc>)
 800ae46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae48:	4b09      	ldr	r3, [pc, #36]	@ (800ae70 <prvHeapInit+0xc0>)
 800ae4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ae4e:	601a      	str	r2, [r3, #0]
}
 800ae50:	bf00      	nop
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	200087c4 	.word	0x200087c4
 800ae60:	2000c3c4 	.word	0x2000c3c4
 800ae64:	2000c3cc 	.word	0x2000c3cc
 800ae68:	2000c3d4 	.word	0x2000c3d4
 800ae6c:	2000c3d0 	.word	0x2000c3d0
 800ae70:	2000c3e0 	.word	0x2000c3e0

0800ae74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae7c:	4b28      	ldr	r3, [pc, #160]	@ (800af20 <prvInsertBlockIntoFreeList+0xac>)
 800ae7e:	60fb      	str	r3, [r7, #12]
 800ae80:	e002      	b.n	800ae88 <prvInsertBlockIntoFreeList+0x14>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d8f7      	bhi.n	800ae82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d108      	bne.n	800aeb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	441a      	add	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	68ba      	ldr	r2, [r7, #8]
 800aec0:	441a      	add	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d118      	bne.n	800aefc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	4b15      	ldr	r3, [pc, #84]	@ (800af24 <prvInsertBlockIntoFreeList+0xb0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d00d      	beq.n	800aef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	441a      	add	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	e008      	b.n	800af04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aef2:	4b0c      	ldr	r3, [pc, #48]	@ (800af24 <prvInsertBlockIntoFreeList+0xb0>)
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
 800aefa:	e003      	b.n	800af04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d002      	beq.n	800af12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af12:	bf00      	nop
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	2000c3c4 	.word	0x2000c3c4
 800af24:	2000c3cc 	.word	0x2000c3cc

0800af28 <rcl_get_zero_initialized_publisher>:
 800af28:	4b01      	ldr	r3, [pc, #4]	@ (800af30 <rcl_get_zero_initialized_publisher+0x8>)
 800af2a:	6818      	ldr	r0, [r3, #0]
 800af2c:	4770      	bx	lr
 800af2e:	bf00      	nop
 800af30:	08015ba4 	.word	0x08015ba4

0800af34 <rcl_publisher_init>:
 800af34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af38:	b088      	sub	sp, #32
 800af3a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800af3c:	2d00      	cmp	r5, #0
 800af3e:	d069      	beq.n	800b014 <rcl_publisher_init+0xe0>
 800af40:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800af44:	4604      	mov	r4, r0
 800af46:	4648      	mov	r0, r9
 800af48:	460e      	mov	r6, r1
 800af4a:	4690      	mov	r8, r2
 800af4c:	461f      	mov	r7, r3
 800af4e:	f000 f9d5 	bl	800b2fc <rcutils_allocator_is_valid>
 800af52:	2800      	cmp	r0, #0
 800af54:	d05e      	beq.n	800b014 <rcl_publisher_init+0xe0>
 800af56:	2c00      	cmp	r4, #0
 800af58:	d05c      	beq.n	800b014 <rcl_publisher_init+0xe0>
 800af5a:	f8d4 a000 	ldr.w	sl, [r4]
 800af5e:	f1ba 0f00 	cmp.w	sl, #0
 800af62:	d004      	beq.n	800af6e <rcl_publisher_init+0x3a>
 800af64:	2764      	movs	r7, #100	@ 0x64
 800af66:	4638      	mov	r0, r7
 800af68:	b008      	add	sp, #32
 800af6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6e:	4630      	mov	r0, r6
 800af70:	f004 ffa4 	bl	800febc <rcl_node_is_valid>
 800af74:	2800      	cmp	r0, #0
 800af76:	d052      	beq.n	800b01e <rcl_publisher_init+0xea>
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	d04a      	beq.n	800b014 <rcl_publisher_init+0xe0>
 800af7e:	2f00      	cmp	r7, #0
 800af80:	d048      	beq.n	800b014 <rcl_publisher_init+0xe0>
 800af82:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800af86:	aa07      	add	r2, sp, #28
 800af88:	9205      	str	r2, [sp, #20]
 800af8a:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800af8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af92:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800af96:	f8cd a01c 	str.w	sl, [sp, #28]
 800af9a:	4639      	mov	r1, r7
 800af9c:	e899 000c 	ldmia.w	r9, {r2, r3}
 800afa0:	4630      	mov	r0, r6
 800afa2:	f004 ffdf 	bl	800ff64 <rcl_node_resolve_name>
 800afa6:	4607      	mov	r7, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d14f      	bne.n	800b04c <rcl_publisher_init+0x118>
 800afac:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800afae:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800afb0:	20c8      	movs	r0, #200	@ 0xc8
 800afb2:	4798      	blx	r3
 800afb4:	6020      	str	r0, [r4, #0]
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d04e      	beq.n	800b058 <rcl_publisher_init+0x124>
 800afba:	4630      	mov	r0, r6
 800afbc:	f004 ffa0 	bl	800ff00 <rcl_node_get_rmw_handle>
 800afc0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	9a07      	ldr	r2, [sp, #28]
 800afc8:	6827      	ldr	r7, [r4, #0]
 800afca:	462b      	mov	r3, r5
 800afcc:	4641      	mov	r1, r8
 800afce:	f000 fa55 	bl	800b47c <rmw_create_publisher>
 800afd2:	6823      	ldr	r3, [r4, #0]
 800afd4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800afd8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800afdc:	b370      	cbz	r0, 800b03c <rcl_publisher_init+0x108>
 800afde:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800afe2:	f000 fb29 	bl	800b638 <rmw_publisher_get_actual_qos>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	4607      	mov	r7, r0
 800afea:	b9d0      	cbnz	r0, 800b022 <rcl_publisher_init+0xee>
 800afec:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800aff0:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800aff4:	4629      	mov	r1, r5
 800aff6:	2270      	movs	r2, #112	@ 0x70
 800aff8:	4618      	mov	r0, r3
 800affa:	f009 fe68 	bl	8014cce <memcpy>
 800affe:	6832      	ldr	r2, [r6, #0]
 800b000:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800b004:	9807      	ldr	r0, [sp, #28]
 800b006:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b008:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b00a:	4798      	blx	r3
 800b00c:	4638      	mov	r0, r7
 800b00e:	b008      	add	sp, #32
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	270b      	movs	r7, #11
 800b016:	4638      	mov	r0, r7
 800b018:	b008      	add	sp, #32
 800b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01e:	27c8      	movs	r7, #200	@ 0xc8
 800b020:	e7a1      	b.n	800af66 <rcl_publisher_init+0x32>
 800b022:	b18b      	cbz	r3, 800b048 <rcl_publisher_init+0x114>
 800b024:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b028:	b142      	cbz	r2, 800b03c <rcl_publisher_init+0x108>
 800b02a:	4630      	mov	r0, r6
 800b02c:	f004 ff68 	bl	800ff00 <rcl_node_get_rmw_handle>
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800b036:	f000 fb0f 	bl	800b658 <rmw_destroy_publisher>
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800b03e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800b040:	4618      	mov	r0, r3
 800b042:	4790      	blx	r2
 800b044:	2300      	movs	r3, #0
 800b046:	6023      	str	r3, [r4, #0]
 800b048:	2701      	movs	r7, #1
 800b04a:	e7db      	b.n	800b004 <rcl_publisher_init+0xd0>
 800b04c:	2867      	cmp	r0, #103	@ 0x67
 800b04e:	d0d9      	beq.n	800b004 <rcl_publisher_init+0xd0>
 800b050:	2869      	cmp	r0, #105	@ 0x69
 800b052:	d003      	beq.n	800b05c <rcl_publisher_init+0x128>
 800b054:	280a      	cmp	r0, #10
 800b056:	d1f7      	bne.n	800b048 <rcl_publisher_init+0x114>
 800b058:	270a      	movs	r7, #10
 800b05a:	e7d3      	b.n	800b004 <rcl_publisher_init+0xd0>
 800b05c:	2767      	movs	r7, #103	@ 0x67
 800b05e:	e7d1      	b.n	800b004 <rcl_publisher_init+0xd0>

0800b060 <rcl_publisher_get_default_options>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	4d14      	ldr	r5, [pc, #80]	@ (800b0b4 <rcl_publisher_get_default_options+0x54>)
 800b064:	4914      	ldr	r1, [pc, #80]	@ (800b0b8 <rcl_publisher_get_default_options+0x58>)
 800b066:	b088      	sub	sp, #32
 800b068:	4604      	mov	r4, r0
 800b06a:	2250      	movs	r2, #80	@ 0x50
 800b06c:	4628      	mov	r0, r5
 800b06e:	f009 fe2e 	bl	8014cce <memcpy>
 800b072:	a802      	add	r0, sp, #8
 800b074:	f000 f934 	bl	800b2e0 <rcutils_get_default_allocator>
 800b078:	f10d 0c08 	add.w	ip, sp, #8
 800b07c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b080:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800b084:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b088:	466e      	mov	r6, sp
 800b08a:	f8dc 3000 	ldr.w	r3, [ip]
 800b08e:	f8ce 3000 	str.w	r3, [lr]
 800b092:	4630      	mov	r0, r6
 800b094:	f000 f974 	bl	800b380 <rmw_get_default_publisher_options>
 800b098:	e896 0003 	ldmia.w	r6, {r0, r1}
 800b09c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800b0a0:	e883 0003 	stmia.w	r3, {r0, r1}
 800b0a4:	2270      	movs	r2, #112	@ 0x70
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f009 fe10 	bl	8014cce <memcpy>
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	b008      	add	sp, #32
 800b0b2:	bd70      	pop	{r4, r5, r6, pc}
 800b0b4:	2000c3e8 	.word	0x2000c3e8
 800b0b8:	08015ba8 	.word	0x08015ba8

0800b0bc <rcl_publish>:
 800b0bc:	b1f8      	cbz	r0, 800b0fe <rcl_publish+0x42>
 800b0be:	6803      	ldr	r3, [r0, #0]
 800b0c0:	b570      	push	{r4, r5, r6, lr}
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	b1b3      	cbz	r3, 800b0f4 <rcl_publish+0x38>
 800b0c6:	4616      	mov	r6, r2
 800b0c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800b0cc:	b192      	cbz	r2, 800b0f4 <rcl_publish+0x38>
 800b0ce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800b0d2:	460d      	mov	r5, r1
 800b0d4:	f004 fb2e 	bl	800f734 <rcl_context_is_valid>
 800b0d8:	b160      	cbz	r0, 800b0f4 <rcl_publish+0x38>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800b0e0:	b140      	cbz	r0, 800b0f4 <rcl_publish+0x38>
 800b0e2:	b155      	cbz	r5, 800b0fa <rcl_publish+0x3e>
 800b0e4:	4632      	mov	r2, r6
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f000 f968 	bl	800b3bc <rmw_publish>
 800b0ec:	3800      	subs	r0, #0
 800b0ee:	bf18      	it	ne
 800b0f0:	2001      	movne	r0, #1
 800b0f2:	bd70      	pop	{r4, r5, r6, pc}
 800b0f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b0f8:	bd70      	pop	{r4, r5, r6, pc}
 800b0fa:	200b      	movs	r0, #11
 800b0fc:	bd70      	pop	{r4, r5, r6, pc}
 800b0fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800b102:	4770      	bx	lr

0800b104 <rclc_support_init>:
 800b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	b3b8      	cbz	r0, 800b17c <rclc_support_init+0x78>
 800b10c:	461c      	mov	r4, r3
 800b10e:	b3ab      	cbz	r3, 800b17c <rclc_support_init+0x78>
 800b110:	460f      	mov	r7, r1
 800b112:	4690      	mov	r8, r2
 800b114:	4606      	mov	r6, r0
 800b116:	f004 fc61 	bl	800f9dc <rcl_get_zero_initialized_init_options>
 800b11a:	f104 030c 	add.w	r3, r4, #12
 800b11e:	9005      	str	r0, [sp, #20]
 800b120:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b124:	e88d 0003 	stmia.w	sp, {r0, r1}
 800b128:	a805      	add	r0, sp, #20
 800b12a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800b12e:	f004 fc57 	bl	800f9e0 <rcl_init_options_init>
 800b132:	4605      	mov	r5, r0
 800b134:	b9e0      	cbnz	r0, 800b170 <rclc_support_init+0x6c>
 800b136:	ad02      	add	r5, sp, #8
 800b138:	4628      	mov	r0, r5
 800b13a:	f004 faf1 	bl	800f720 <rcl_get_zero_initialized_context>
 800b13e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b142:	4633      	mov	r3, r6
 800b144:	e886 0003 	stmia.w	r6, {r0, r1}
 800b148:	aa05      	add	r2, sp, #20
 800b14a:	4641      	mov	r1, r8
 800b14c:	4638      	mov	r0, r7
 800b14e:	f004 fb57 	bl	800f800 <rcl_init>
 800b152:	4605      	mov	r5, r0
 800b154:	b9b8      	cbnz	r0, 800b186 <rclc_support_init+0x82>
 800b156:	60b4      	str	r4, [r6, #8]
 800b158:	4622      	mov	r2, r4
 800b15a:	f106 010c 	add.w	r1, r6, #12
 800b15e:	2003      	movs	r0, #3
 800b160:	f004 ffc0 	bl	80100e4 <rcl_clock_init>
 800b164:	4605      	mov	r5, r0
 800b166:	b970      	cbnz	r0, 800b186 <rclc_support_init+0x82>
 800b168:	a805      	add	r0, sp, #20
 800b16a:	f004 fc9f 	bl	800faac <rcl_init_options_fini>
 800b16e:	b108      	cbz	r0, 800b174 <rclc_support_init+0x70>
 800b170:	f000 f8ea 	bl	800b348 <rcutils_reset_error>
 800b174:	4628      	mov	r0, r5
 800b176:	b006      	add	sp, #24
 800b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17c:	250b      	movs	r5, #11
 800b17e:	4628      	mov	r0, r5
 800b180:	b006      	add	sp, #24
 800b182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b186:	f000 f8df 	bl	800b348 <rcutils_reset_error>
 800b18a:	a805      	add	r0, sp, #20
 800b18c:	f004 fc8e 	bl	800faac <rcl_init_options_fini>
 800b190:	2800      	cmp	r0, #0
 800b192:	d0ef      	beq.n	800b174 <rclc_support_init+0x70>
 800b194:	e7ec      	b.n	800b170 <rclc_support_init+0x6c>
 800b196:	bf00      	nop

0800b198 <rclc_node_init_default>:
 800b198:	b3b8      	cbz	r0, 800b20a <rclc_node_init_default+0x72>
 800b19a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b19e:	460d      	mov	r5, r1
 800b1a0:	b0a1      	sub	sp, #132	@ 0x84
 800b1a2:	b329      	cbz	r1, 800b1f0 <rclc_node_init_default+0x58>
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	b31a      	cbz	r2, 800b1f0 <rclc_node_init_default+0x58>
 800b1a8:	461f      	mov	r7, r3
 800b1aa:	b30b      	cbz	r3, 800b1f0 <rclc_node_init_default+0x58>
 800b1ac:	f10d 0810 	add.w	r8, sp, #16
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	f004 fd32 	bl	800fc1c <rcl_get_zero_initialized_node>
 800b1b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b1bc:	f10d 0918 	add.w	r9, sp, #24
 800b1c0:	e884 0003 	stmia.w	r4, {r0, r1}
 800b1c4:	4648      	mov	r0, r9
 800b1c6:	f004 fea1 	bl	800ff0c <rcl_node_get_default_options>
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	f004 fd26 	bl	800fc1c <rcl_get_zero_initialized_node>
 800b1d0:	f8cd 9000 	str.w	r9, [sp]
 800b1d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b1d8:	463b      	mov	r3, r7
 800b1da:	e884 0003 	stmia.w	r4, {r0, r1}
 800b1de:	4632      	mov	r2, r6
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f004 fd24 	bl	800fc30 <rcl_node_init>
 800b1e8:	b930      	cbnz	r0, 800b1f8 <rclc_node_init_default+0x60>
 800b1ea:	b021      	add	sp, #132	@ 0x84
 800b1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f0:	200b      	movs	r0, #11
 800b1f2:	b021      	add	sp, #132	@ 0x84
 800b1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1f8:	9003      	str	r0, [sp, #12]
 800b1fa:	f000 f8a5 	bl	800b348 <rcutils_reset_error>
 800b1fe:	f000 f8a3 	bl	800b348 <rcutils_reset_error>
 800b202:	9803      	ldr	r0, [sp, #12]
 800b204:	b021      	add	sp, #132	@ 0x84
 800b206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b20a:	200b      	movs	r0, #11
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop

0800b210 <rclc_publisher_init_default>:
 800b210:	b368      	cbz	r0, 800b26e <rclc_publisher_init_default+0x5e>
 800b212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b216:	460d      	mov	r5, r1
 800b218:	b0a0      	sub	sp, #128	@ 0x80
 800b21a:	b321      	cbz	r1, 800b266 <rclc_publisher_init_default+0x56>
 800b21c:	4616      	mov	r6, r2
 800b21e:	b312      	cbz	r2, 800b266 <rclc_publisher_init_default+0x56>
 800b220:	461f      	mov	r7, r3
 800b222:	b303      	cbz	r3, 800b266 <rclc_publisher_init_default+0x56>
 800b224:	4604      	mov	r4, r0
 800b226:	f7ff fe7f 	bl	800af28 <rcl_get_zero_initialized_publisher>
 800b22a:	f10d 0810 	add.w	r8, sp, #16
 800b22e:	6020      	str	r0, [r4, #0]
 800b230:	4640      	mov	r0, r8
 800b232:	f7ff ff15 	bl	800b060 <rcl_publisher_get_default_options>
 800b236:	490f      	ldr	r1, [pc, #60]	@ (800b274 <rclc_publisher_init_default+0x64>)
 800b238:	2250      	movs	r2, #80	@ 0x50
 800b23a:	4640      	mov	r0, r8
 800b23c:	f009 fd47 	bl	8014cce <memcpy>
 800b240:	f8cd 8000 	str.w	r8, [sp]
 800b244:	463b      	mov	r3, r7
 800b246:	4632      	mov	r2, r6
 800b248:	4629      	mov	r1, r5
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff fe72 	bl	800af34 <rcl_publisher_init>
 800b250:	b910      	cbnz	r0, 800b258 <rclc_publisher_init_default+0x48>
 800b252:	b020      	add	sp, #128	@ 0x80
 800b254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b258:	9003      	str	r0, [sp, #12]
 800b25a:	f000 f875 	bl	800b348 <rcutils_reset_error>
 800b25e:	9803      	ldr	r0, [sp, #12]
 800b260:	b020      	add	sp, #128	@ 0x80
 800b262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b266:	200b      	movs	r0, #11
 800b268:	b020      	add	sp, #128	@ 0x80
 800b26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b26e:	200b      	movs	r0, #11
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	08015bf8 	.word	0x08015bf8

0800b278 <__default_zero_allocate>:
 800b278:	f009 b8a0 	b.w	80143bc <calloc>

0800b27c <__default_reallocate>:
 800b27c:	f009 ba2c 	b.w	80146d8 <realloc>

0800b280 <__default_deallocate>:
 800b280:	f009 b908 	b.w	8014494 <free>

0800b284 <__default_allocate>:
 800b284:	f009 b8fe 	b.w	8014484 <malloc>

0800b288 <rcutils_get_zero_initialized_allocator>:
 800b288:	b510      	push	{r4, lr}
 800b28a:	4c05      	ldr	r4, [pc, #20]	@ (800b2a0 <rcutils_get_zero_initialized_allocator+0x18>)
 800b28c:	4686      	mov	lr, r0
 800b28e:	4684      	mov	ip, r0
 800b290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b292:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	f8cc 3000 	str.w	r3, [ip]
 800b29c:	4670      	mov	r0, lr
 800b29e:	bd10      	pop	{r4, pc}
 800b2a0:	08015c48 	.word	0x08015c48

0800b2a4 <rcutils_set_default_allocator>:
 800b2a4:	b1a8      	cbz	r0, 800b2d2 <rcutils_set_default_allocator+0x2e>
 800b2a6:	6802      	ldr	r2, [r0, #0]
 800b2a8:	b1a2      	cbz	r2, 800b2d4 <rcutils_set_default_allocator+0x30>
 800b2aa:	6841      	ldr	r1, [r0, #4]
 800b2ac:	b1a1      	cbz	r1, 800b2d8 <rcutils_set_default_allocator+0x34>
 800b2ae:	b410      	push	{r4}
 800b2b0:	68c4      	ldr	r4, [r0, #12]
 800b2b2:	b164      	cbz	r4, 800b2ce <rcutils_set_default_allocator+0x2a>
 800b2b4:	6880      	ldr	r0, [r0, #8]
 800b2b6:	b138      	cbz	r0, 800b2c8 <rcutils_set_default_allocator+0x24>
 800b2b8:	4b08      	ldr	r3, [pc, #32]	@ (800b2dc <rcutils_set_default_allocator+0x38>)
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b2c2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b2c6:	2001      	movs	r0, #1
 800b2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2cc:	4770      	bx	lr
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	e7fa      	b.n	800b2c8 <rcutils_set_default_allocator+0x24>
 800b2d2:	4770      	bx	lr
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4770      	bx	lr
 800b2d8:	4608      	mov	r0, r1
 800b2da:	4770      	bx	lr
 800b2dc:	200000d4 	.word	0x200000d4

0800b2e0 <rcutils_get_default_allocator>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	4c05      	ldr	r4, [pc, #20]	@ (800b2f8 <rcutils_get_default_allocator+0x18>)
 800b2e4:	4686      	mov	lr, r0
 800b2e6:	4684      	mov	ip, r0
 800b2e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	f8cc 3000 	str.w	r3, [ip]
 800b2f4:	4670      	mov	r0, lr
 800b2f6:	bd10      	pop	{r4, pc}
 800b2f8:	200000d4 	.word	0x200000d4

0800b2fc <rcutils_allocator_is_valid>:
 800b2fc:	b158      	cbz	r0, 800b316 <rcutils_allocator_is_valid+0x1a>
 800b2fe:	6803      	ldr	r3, [r0, #0]
 800b300:	b143      	cbz	r3, 800b314 <rcutils_allocator_is_valid+0x18>
 800b302:	6843      	ldr	r3, [r0, #4]
 800b304:	b133      	cbz	r3, 800b314 <rcutils_allocator_is_valid+0x18>
 800b306:	68c3      	ldr	r3, [r0, #12]
 800b308:	b123      	cbz	r3, 800b314 <rcutils_allocator_is_valid+0x18>
 800b30a:	6880      	ldr	r0, [r0, #8]
 800b30c:	3800      	subs	r0, #0
 800b30e:	bf18      	it	ne
 800b310:	2001      	movne	r0, #1
 800b312:	4770      	bx	lr
 800b314:	4618      	mov	r0, r3
 800b316:	4770      	bx	lr

0800b318 <rcutils_get_error_string>:
 800b318:	4b06      	ldr	r3, [pc, #24]	@ (800b334 <rcutils_get_error_string+0x1c>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	b13b      	cbz	r3, 800b32e <rcutils_get_error_string+0x16>
 800b31e:	4b06      	ldr	r3, [pc, #24]	@ (800b338 <rcutils_get_error_string+0x20>)
 800b320:	781a      	ldrb	r2, [r3, #0]
 800b322:	b90a      	cbnz	r2, 800b328 <rcutils_get_error_string+0x10>
 800b324:	2201      	movs	r2, #1
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	4b04      	ldr	r3, [pc, #16]	@ (800b33c <rcutils_get_error_string+0x24>)
 800b32a:	7818      	ldrb	r0, [r3, #0]
 800b32c:	4770      	bx	lr
 800b32e:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <rcutils_get_error_string+0x28>)
 800b330:	7818      	ldrb	r0, [r3, #0]
 800b332:	4770      	bx	lr
 800b334:	2000c458 	.word	0x2000c458
 800b338:	2000c471 	.word	0x2000c471
 800b33c:	2000c470 	.word	0x2000c470
 800b340:	08015c5c 	.word	0x08015c5c
 800b344:	00000000 	.word	0x00000000

0800b348 <rcutils_reset_error>:
 800b348:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b368 <rcutils_reset_error+0x20>
 800b34c:	4a08      	ldr	r2, [pc, #32]	@ (800b370 <rcutils_reset_error+0x28>)
 800b34e:	4809      	ldr	r0, [pc, #36]	@ (800b374 <rcutils_reset_error+0x2c>)
 800b350:	4909      	ldr	r1, [pc, #36]	@ (800b378 <rcutils_reset_error+0x30>)
 800b352:	2300      	movs	r3, #0
 800b354:	8013      	strh	r3, [r2, #0]
 800b356:	ed82 7b02 	vstr	d7, [r2, #8]
 800b35a:	4a08      	ldr	r2, [pc, #32]	@ (800b37c <rcutils_reset_error+0x34>)
 800b35c:	7003      	strb	r3, [r0, #0]
 800b35e:	700b      	strb	r3, [r1, #0]
 800b360:	7013      	strb	r3, [r2, #0]
 800b362:	4770      	bx	lr
 800b364:	f3af 8000 	nop.w
	...
 800b370:	2000c460 	.word	0x2000c460
 800b374:	2000c471 	.word	0x2000c471
 800b378:	2000c470 	.word	0x2000c470
 800b37c:	2000c458 	.word	0x2000c458

0800b380 <rmw_get_default_publisher_options>:
 800b380:	2200      	movs	r2, #0
 800b382:	6002      	str	r2, [r0, #0]
 800b384:	7102      	strb	r2, [r0, #4]
 800b386:	4770      	bx	lr

0800b388 <rmw_uros_set_custom_transport>:
 800b388:	b470      	push	{r4, r5, r6}
 800b38a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b38e:	b162      	cbz	r2, 800b3aa <rmw_uros_set_custom_transport+0x22>
 800b390:	b15b      	cbz	r3, 800b3aa <rmw_uros_set_custom_transport+0x22>
 800b392:	b155      	cbz	r5, 800b3aa <rmw_uros_set_custom_transport+0x22>
 800b394:	b14e      	cbz	r6, 800b3aa <rmw_uros_set_custom_transport+0x22>
 800b396:	4c06      	ldr	r4, [pc, #24]	@ (800b3b0 <rmw_uros_set_custom_transport+0x28>)
 800b398:	7020      	strb	r0, [r4, #0]
 800b39a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b39e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b3a2:	6166      	str	r6, [r4, #20]
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	bc70      	pop	{r4, r5, r6}
 800b3a8:	4770      	bx	lr
 800b3aa:	200b      	movs	r0, #11
 800b3ac:	bc70      	pop	{r4, r5, r6}
 800b3ae:	4770      	bx	lr
 800b3b0:	2000c474 	.word	0x2000c474

0800b3b4 <flush_session>:
 800b3b4:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800b3b6:	f002 bb3d 	b.w	800da34 <uxr_run_session_until_confirm_delivery>
 800b3ba:	bf00      	nop

0800b3bc <rmw_publish>:
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	d053      	beq.n	800b468 <rmw_publish+0xac>
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	b08e      	sub	sp, #56	@ 0x38
 800b3c6:	2900      	cmp	r1, #0
 800b3c8:	d04b      	beq.n	800b462 <rmw_publish+0xa6>
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f000 fc47 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d045      	beq.n	800b462 <rmw_publish+0xa6>
 800b3d6:	6866      	ldr	r6, [r4, #4]
 800b3d8:	2e00      	cmp	r6, #0
 800b3da:	d042      	beq.n	800b462 <rmw_publish+0xa6>
 800b3dc:	69b4      	ldr	r4, [r6, #24]
 800b3de:	4628      	mov	r0, r5
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	4798      	blx	r3
 800b3e4:	69f3      	ldr	r3, [r6, #28]
 800b3e6:	9005      	str	r0, [sp, #20]
 800b3e8:	b113      	cbz	r3, 800b3f0 <rmw_publish+0x34>
 800b3ea:	a805      	add	r0, sp, #20
 800b3ec:	4798      	blx	r3
 800b3ee:	9805      	ldr	r0, [sp, #20]
 800b3f0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	9000      	str	r0, [sp, #0]
 800b3f8:	6972      	ldr	r2, [r6, #20]
 800b3fa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b3fc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b400:	ab06      	add	r3, sp, #24
 800b402:	f003 f903 	bl	800e60c <uxr_prepare_output_stream>
 800b406:	b1d8      	cbz	r0, 800b440 <rmw_publish+0x84>
 800b408:	68a3      	ldr	r3, [r4, #8]
 800b40a:	a906      	add	r1, sp, #24
 800b40c:	4628      	mov	r0, r5
 800b40e:	4798      	blx	r3
 800b410:	6a33      	ldr	r3, [r6, #32]
 800b412:	4604      	mov	r4, r0
 800b414:	b10b      	cbz	r3, 800b41a <rmw_publish+0x5e>
 800b416:	a806      	add	r0, sp, #24
 800b418:	4798      	blx	r3
 800b41a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800b41e:	2b01      	cmp	r3, #1
 800b420:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b424:	d022      	beq.n	800b46c <rmw_publish+0xb0>
 800b426:	6918      	ldr	r0, [r3, #16]
 800b428:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800b42a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b42e:	f002 fb01 	bl	800da34 <uxr_run_session_until_confirm_delivery>
 800b432:	4020      	ands	r0, r4
 800b434:	b2c4      	uxtb	r4, r0
 800b436:	f084 0001 	eor.w	r0, r4, #1
 800b43a:	b2c0      	uxtb	r0, r0
 800b43c:	b00e      	add	sp, #56	@ 0x38
 800b43e:	bd70      	pop	{r4, r5, r6, pc}
 800b440:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800b444:	6918      	ldr	r0, [r3, #16]
 800b446:	9b05      	ldr	r3, [sp, #20]
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	4b0b      	ldr	r3, [pc, #44]	@ (800b478 <rmw_publish+0xbc>)
 800b44c:	9301      	str	r3, [sp, #4]
 800b44e:	9602      	str	r6, [sp, #8]
 800b450:	6972      	ldr	r2, [r6, #20]
 800b452:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800b454:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b458:	ab06      	add	r3, sp, #24
 800b45a:	f003 f907 	bl	800e66c <uxr_prepare_output_stream_fragmented>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d1d2      	bne.n	800b408 <rmw_publish+0x4c>
 800b462:	2001      	movs	r0, #1
 800b464:	b00e      	add	sp, #56	@ 0x38
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	2001      	movs	r0, #1
 800b46a:	4770      	bx	lr
 800b46c:	6918      	ldr	r0, [r3, #16]
 800b46e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b472:	f001 ff59 	bl	800d328 <uxr_flash_output_streams>
 800b476:	e7de      	b.n	800b436 <rmw_publish+0x7a>
 800b478:	0800b3b5 	.word	0x0800b3b5

0800b47c <rmw_create_publisher>:
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	b087      	sub	sp, #28
 800b482:	2800      	cmp	r0, #0
 800b484:	f000 80cc 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b488:	460e      	mov	r6, r1
 800b48a:	2900      	cmp	r1, #0
 800b48c:	f000 80c8 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b490:	4604      	mov	r4, r0
 800b492:	6800      	ldr	r0, [r0, #0]
 800b494:	4615      	mov	r5, r2
 800b496:	4698      	mov	r8, r3
 800b498:	f000 fbe2 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f000 80bf 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b4a2:	2d00      	cmp	r5, #0
 800b4a4:	f000 80bc 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b4a8:	782b      	ldrb	r3, [r5, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 80b8 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b4b0:	f1b8 0f00 	cmp.w	r8, #0
 800b4b4:	f000 80b4 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b4b8:	485c      	ldr	r0, [pc, #368]	@ (800b62c <rmw_create_publisher+0x1b0>)
 800b4ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800b4be:	f005 fb0f 	bl	8010ae0 <get_memory>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f000 80ac 	beq.w	800b620 <rmw_create_publisher+0x1a4>
 800b4c8:	6884      	ldr	r4, [r0, #8]
 800b4ca:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800b4ce:	f005 fb2b 	bl	8010b28 <rmw_get_implementation_identifier>
 800b4d2:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800b4d6:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800b4da:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f7f4 fea0 	bl	8000224 <strlen>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	283c      	cmp	r0, #60	@ 0x3c
 800b4e8:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800b4ec:	f200 8091 	bhi.w	800b612 <rmw_create_publisher+0x196>
 800b4f0:	4a4f      	ldr	r2, [pc, #316]	@ (800b630 <rmw_create_publisher+0x1b4>)
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	213c      	movs	r1, #60	@ 0x3c
 800b4f6:	4650      	mov	r0, sl
 800b4f8:	f009 fa70 	bl	80149dc <sniprintf>
 800b4fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b500:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800b502:	4641      	mov	r1, r8
 800b504:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800b508:	2250      	movs	r2, #80	@ 0x50
 800b50a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800b50e:	f009 fbde 	bl	8014cce <memcpy>
 800b512:	f898 3008 	ldrb.w	r3, [r8, #8]
 800b516:	4947      	ldr	r1, [pc, #284]	@ (800b634 <rmw_create_publisher+0x1b8>)
 800b518:	2b02      	cmp	r3, #2
 800b51a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b51e:	bf0c      	ite	eq
 800b520:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800b524:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800b528:	67a3      	str	r3, [r4, #120]	@ 0x78
 800b52a:	2300      	movs	r3, #0
 800b52c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800b530:	4630      	mov	r0, r6
 800b532:	f000 fba3 	bl	800bc7c <get_message_typesupport_handle>
 800b536:	2800      	cmp	r0, #0
 800b538:	d06b      	beq.n	800b612 <rmw_create_publisher+0x196>
 800b53a:	6842      	ldr	r2, [r0, #4]
 800b53c:	61a2      	str	r2, [r4, #24]
 800b53e:	2a00      	cmp	r2, #0
 800b540:	d067      	beq.n	800b612 <rmw_create_publisher+0x196>
 800b542:	4629      	mov	r1, r5
 800b544:	4643      	mov	r3, r8
 800b546:	4648      	mov	r0, r9
 800b548:	f005 fd7e 	bl	8011048 <create_topic>
 800b54c:	6260      	str	r0, [r4, #36]	@ 0x24
 800b54e:	2800      	cmp	r0, #0
 800b550:	d063      	beq.n	800b61a <rmw_create_publisher+0x19e>
 800b552:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b55a:	2103      	movs	r1, #3
 800b55c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800b560:	1c42      	adds	r2, r0, #1
 800b562:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800b566:	f001 fd91 	bl	800d08c <uxr_object_id>
 800b56a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800b56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b572:	6120      	str	r0, [r4, #16]
 800b574:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800b578:	6910      	ldr	r0, [r2, #16]
 800b57a:	2506      	movs	r5, #6
 800b57c:	9500      	str	r5, [sp, #0]
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b586:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b58a:	f001 fcd9 	bl	800cf40 <uxr_buffer_create_publisher_bin>
 800b58e:	4602      	mov	r2, r0
 800b590:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b594:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b598:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b59c:	f000 fae0 	bl	800bb60 <run_xrce_session>
 800b5a0:	b3b8      	cbz	r0, 800b612 <rmw_create_publisher+0x196>
 800b5a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5aa:	2105      	movs	r1, #5
 800b5ac:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800b5b0:	1c42      	adds	r2, r0, #1
 800b5b2:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800b5b6:	f001 fd69 	bl	800d08c <uxr_object_id>
 800b5ba:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b5be:	6160      	str	r0, [r4, #20]
 800b5c0:	691e      	ldr	r6, [r3, #16]
 800b5c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5c6:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800b5ca:	f10d 0a10 	add.w	sl, sp, #16
 800b5ce:	4641      	mov	r1, r8
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800b5d6:	f000 fadf 	bl	800bb98 <convert_qos_profile>
 800b5da:	9503      	str	r5, [sp, #12]
 800b5dc:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800b5e0:	9001      	str	r0, [sp, #4]
 800b5e2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800b5e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800b5f0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800b5f4:	f8d8 1000 	ldr.w	r1, [r8]
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f001 fcd1 	bl	800cfa0 <uxr_buffer_create_datawriter_bin>
 800b5fe:	4602      	mov	r2, r0
 800b600:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800b604:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800b608:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800b60c:	f000 faa8 	bl	800bb60 <run_xrce_session>
 800b610:	b938      	cbnz	r0, 800b622 <rmw_create_publisher+0x1a6>
 800b612:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b614:	b108      	cbz	r0, 800b61a <rmw_create_publisher+0x19e>
 800b616:	f000 fa47 	bl	800baa8 <rmw_uxrce_fini_topic_memory>
 800b61a:	4638      	mov	r0, r7
 800b61c:	f000 f9ec 	bl	800b9f8 <rmw_uxrce_fini_publisher_memory>
 800b620:	2700      	movs	r7, #0
 800b622:	4638      	mov	r0, r7
 800b624:	b007      	add	sp, #28
 800b626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62a:	bf00      	nop
 800b62c:	20010d6c 	.word	0x20010d6c
 800b630:	08015c94 	.word	0x08015c94
 800b634:	08015c60 	.word	0x08015c60

0800b638 <rmw_publisher_get_actual_qos>:
 800b638:	b150      	cbz	r0, 800b650 <rmw_publisher_get_actual_qos+0x18>
 800b63a:	b508      	push	{r3, lr}
 800b63c:	460b      	mov	r3, r1
 800b63e:	b149      	cbz	r1, 800b654 <rmw_publisher_get_actual_qos+0x1c>
 800b640:	6841      	ldr	r1, [r0, #4]
 800b642:	2250      	movs	r2, #80	@ 0x50
 800b644:	3128      	adds	r1, #40	@ 0x28
 800b646:	4618      	mov	r0, r3
 800b648:	f009 fb41 	bl	8014cce <memcpy>
 800b64c:	2000      	movs	r0, #0
 800b64e:	bd08      	pop	{r3, pc}
 800b650:	200b      	movs	r0, #11
 800b652:	4770      	bx	lr
 800b654:	200b      	movs	r0, #11
 800b656:	bd08      	pop	{r3, pc}

0800b658 <rmw_destroy_publisher>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	b128      	cbz	r0, 800b668 <rmw_destroy_publisher+0x10>
 800b65c:	4604      	mov	r4, r0
 800b65e:	6800      	ldr	r0, [r0, #0]
 800b660:	460d      	mov	r5, r1
 800b662:	f000 fafd 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 800b666:	b910      	cbnz	r0, 800b66e <rmw_destroy_publisher+0x16>
 800b668:	2401      	movs	r4, #1
 800b66a:	4620      	mov	r0, r4
 800b66c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b66e:	6863      	ldr	r3, [r4, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d0f9      	beq.n	800b668 <rmw_destroy_publisher+0x10>
 800b674:	2d00      	cmp	r5, #0
 800b676:	d0f7      	beq.n	800b668 <rmw_destroy_publisher+0x10>
 800b678:	6828      	ldr	r0, [r5, #0]
 800b67a:	f000 faf1 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 800b67e:	2800      	cmp	r0, #0
 800b680:	d0f2      	beq.n	800b668 <rmw_destroy_publisher+0x10>
 800b682:	686c      	ldr	r4, [r5, #4]
 800b684:	2c00      	cmp	r4, #0
 800b686:	d0ef      	beq.n	800b668 <rmw_destroy_publisher+0x10>
 800b688:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b68a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800b68e:	f005 fd2b 	bl	80110e8 <destroy_topic>
 800b692:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b696:	6962      	ldr	r2, [r4, #20]
 800b698:	6918      	ldr	r0, [r3, #16]
 800b69a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800b69e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800b6a2:	6819      	ldr	r1, [r3, #0]
 800b6a4:	f001 fb98 	bl	800cdd8 <uxr_buffer_delete_entity>
 800b6a8:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b6ac:	6922      	ldr	r2, [r4, #16]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	6809      	ldr	r1, [r1, #0]
 800b6b8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800b6bc:	f001 fb8c 	bl	800cdd8 <uxr_buffer_delete_entity>
 800b6c0:	693e      	ldr	r6, [r7, #16]
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b6c8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 fa46 	bl	800bb60 <run_xrce_session>
 800b6d4:	693e      	ldr	r6, [r7, #16]
 800b6d6:	4622      	mov	r2, r4
 800b6d8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800b6dc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f000 fa3c 	bl	800bb60 <run_xrce_session>
 800b6e8:	b12c      	cbz	r4, 800b6f6 <rmw_destroy_publisher+0x9e>
 800b6ea:	b120      	cbz	r0, 800b6f6 <rmw_destroy_publisher+0x9e>
 800b6ec:	2400      	movs	r4, #0
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f000 f982 	bl	800b9f8 <rmw_uxrce_fini_publisher_memory>
 800b6f4:	e7b9      	b.n	800b66a <rmw_destroy_publisher+0x12>
 800b6f6:	2402      	movs	r4, #2
 800b6f8:	e7f9      	b.n	800b6ee <rmw_destroy_publisher+0x96>
 800b6fa:	bf00      	nop

0800b6fc <rmw_uxrce_init_service_memory>:
 800b6fc:	b1e2      	cbz	r2, 800b738 <rmw_uxrce_init_service_memory+0x3c>
 800b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	7b05      	ldrb	r5, [r0, #12]
 800b704:	4606      	mov	r6, r0
 800b706:	b9ad      	cbnz	r5, 800b734 <rmw_uxrce_init_service_memory+0x38>
 800b708:	23c8      	movs	r3, #200	@ 0xc8
 800b70a:	e9c0 5500 	strd	r5, r5, [r0]
 800b70e:	6083      	str	r3, [r0, #8]
 800b710:	f240 1301 	movw	r3, #257	@ 0x101
 800b714:	4617      	mov	r7, r2
 800b716:	8183      	strh	r3, [r0, #12]
 800b718:	460c      	mov	r4, r1
 800b71a:	46a8      	mov	r8, r5
 800b71c:	4621      	mov	r1, r4
 800b71e:	4630      	mov	r0, r6
 800b720:	3501      	adds	r5, #1
 800b722:	f005 f9ed 	bl	8010b00 <put_memory>
 800b726:	42af      	cmp	r7, r5
 800b728:	60a4      	str	r4, [r4, #8]
 800b72a:	f884 800c 	strb.w	r8, [r4, #12]
 800b72e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b732:	d1f3      	bne.n	800b71c <rmw_uxrce_init_service_memory+0x20>
 800b734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop

0800b73c <rmw_uxrce_init_client_memory>:
 800b73c:	b1e2      	cbz	r2, 800b778 <rmw_uxrce_init_client_memory+0x3c>
 800b73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b742:	7b05      	ldrb	r5, [r0, #12]
 800b744:	4606      	mov	r6, r0
 800b746:	b9ad      	cbnz	r5, 800b774 <rmw_uxrce_init_client_memory+0x38>
 800b748:	23c8      	movs	r3, #200	@ 0xc8
 800b74a:	e9c0 5500 	strd	r5, r5, [r0]
 800b74e:	6083      	str	r3, [r0, #8]
 800b750:	f240 1301 	movw	r3, #257	@ 0x101
 800b754:	4617      	mov	r7, r2
 800b756:	8183      	strh	r3, [r0, #12]
 800b758:	460c      	mov	r4, r1
 800b75a:	46a8      	mov	r8, r5
 800b75c:	4621      	mov	r1, r4
 800b75e:	4630      	mov	r0, r6
 800b760:	3501      	adds	r5, #1
 800b762:	f005 f9cd 	bl	8010b00 <put_memory>
 800b766:	42af      	cmp	r7, r5
 800b768:	60a4      	str	r4, [r4, #8]
 800b76a:	f884 800c 	strb.w	r8, [r4, #12]
 800b76e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800b772:	d1f3      	bne.n	800b75c <rmw_uxrce_init_client_memory+0x20>
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop

0800b77c <rmw_uxrce_init_publisher_memory>:
 800b77c:	b1e2      	cbz	r2, 800b7b8 <rmw_uxrce_init_publisher_memory+0x3c>
 800b77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b782:	7b05      	ldrb	r5, [r0, #12]
 800b784:	4606      	mov	r6, r0
 800b786:	b9ad      	cbnz	r5, 800b7b4 <rmw_uxrce_init_publisher_memory+0x38>
 800b788:	23d8      	movs	r3, #216	@ 0xd8
 800b78a:	e9c0 5500 	strd	r5, r5, [r0]
 800b78e:	6083      	str	r3, [r0, #8]
 800b790:	f240 1301 	movw	r3, #257	@ 0x101
 800b794:	4617      	mov	r7, r2
 800b796:	8183      	strh	r3, [r0, #12]
 800b798:	460c      	mov	r4, r1
 800b79a:	46a8      	mov	r8, r5
 800b79c:	4621      	mov	r1, r4
 800b79e:	4630      	mov	r0, r6
 800b7a0:	3501      	adds	r5, #1
 800b7a2:	f005 f9ad 	bl	8010b00 <put_memory>
 800b7a6:	42af      	cmp	r7, r5
 800b7a8:	60a4      	str	r4, [r4, #8]
 800b7aa:	f884 800c 	strb.w	r8, [r4, #12]
 800b7ae:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b7b2:	d1f3      	bne.n	800b79c <rmw_uxrce_init_publisher_memory+0x20>
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop

0800b7bc <rmw_uxrce_init_subscription_memory>:
 800b7bc:	b1e2      	cbz	r2, 800b7f8 <rmw_uxrce_init_subscription_memory+0x3c>
 800b7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c2:	7b05      	ldrb	r5, [r0, #12]
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	b9ad      	cbnz	r5, 800b7f4 <rmw_uxrce_init_subscription_memory+0x38>
 800b7c8:	23d8      	movs	r3, #216	@ 0xd8
 800b7ca:	e9c0 5500 	strd	r5, r5, [r0]
 800b7ce:	6083      	str	r3, [r0, #8]
 800b7d0:	f240 1301 	movw	r3, #257	@ 0x101
 800b7d4:	4617      	mov	r7, r2
 800b7d6:	8183      	strh	r3, [r0, #12]
 800b7d8:	460c      	mov	r4, r1
 800b7da:	46a8      	mov	r8, r5
 800b7dc:	4621      	mov	r1, r4
 800b7de:	4630      	mov	r0, r6
 800b7e0:	3501      	adds	r5, #1
 800b7e2:	f005 f98d 	bl	8010b00 <put_memory>
 800b7e6:	42af      	cmp	r7, r5
 800b7e8:	60a4      	str	r4, [r4, #8]
 800b7ea:	f884 800c 	strb.w	r8, [r4, #12]
 800b7ee:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800b7f2:	d1f3      	bne.n	800b7dc <rmw_uxrce_init_subscription_memory+0x20>
 800b7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop

0800b7fc <rmw_uxrce_init_node_memory>:
 800b7fc:	b1e2      	cbz	r2, 800b838 <rmw_uxrce_init_node_memory+0x3c>
 800b7fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b802:	7b05      	ldrb	r5, [r0, #12]
 800b804:	4606      	mov	r6, r0
 800b806:	b9ad      	cbnz	r5, 800b834 <rmw_uxrce_init_node_memory+0x38>
 800b808:	23a4      	movs	r3, #164	@ 0xa4
 800b80a:	e9c0 5500 	strd	r5, r5, [r0]
 800b80e:	6083      	str	r3, [r0, #8]
 800b810:	f240 1301 	movw	r3, #257	@ 0x101
 800b814:	4617      	mov	r7, r2
 800b816:	8183      	strh	r3, [r0, #12]
 800b818:	460c      	mov	r4, r1
 800b81a:	46a8      	mov	r8, r5
 800b81c:	4621      	mov	r1, r4
 800b81e:	4630      	mov	r0, r6
 800b820:	3501      	adds	r5, #1
 800b822:	f005 f96d 	bl	8010b00 <put_memory>
 800b826:	42af      	cmp	r7, r5
 800b828:	60a4      	str	r4, [r4, #8]
 800b82a:	f884 800c 	strb.w	r8, [r4, #12]
 800b82e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800b832:	d1f3      	bne.n	800b81c <rmw_uxrce_init_node_memory+0x20>
 800b834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop

0800b83c <rmw_uxrce_init_session_memory>:
 800b83c:	b1ea      	cbz	r2, 800b87a <rmw_uxrce_init_session_memory+0x3e>
 800b83e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b842:	7b05      	ldrb	r5, [r0, #12]
 800b844:	4606      	mov	r6, r0
 800b846:	b9b5      	cbnz	r5, 800b876 <rmw_uxrce_init_session_memory+0x3a>
 800b848:	e9c0 5500 	strd	r5, r5, [r0]
 800b84c:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800b850:	f240 1301 	movw	r3, #257	@ 0x101
 800b854:	4617      	mov	r7, r2
 800b856:	f8c0 8008 	str.w	r8, [r0, #8]
 800b85a:	460c      	mov	r4, r1
 800b85c:	8183      	strh	r3, [r0, #12]
 800b85e:	46a9      	mov	r9, r5
 800b860:	4621      	mov	r1, r4
 800b862:	4630      	mov	r0, r6
 800b864:	3501      	adds	r5, #1
 800b866:	f005 f94b 	bl	8010b00 <put_memory>
 800b86a:	42af      	cmp	r7, r5
 800b86c:	60a4      	str	r4, [r4, #8]
 800b86e:	f884 900c 	strb.w	r9, [r4, #12]
 800b872:	4444      	add	r4, r8
 800b874:	d1f4      	bne.n	800b860 <rmw_uxrce_init_session_memory+0x24>
 800b876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87a:	4770      	bx	lr

0800b87c <rmw_uxrce_init_topic_memory>:
 800b87c:	b1e2      	cbz	r2, 800b8b8 <rmw_uxrce_init_topic_memory+0x3c>
 800b87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b882:	7b05      	ldrb	r5, [r0, #12]
 800b884:	4606      	mov	r6, r0
 800b886:	b9ad      	cbnz	r5, 800b8b4 <rmw_uxrce_init_topic_memory+0x38>
 800b888:	231c      	movs	r3, #28
 800b88a:	e9c0 5500 	strd	r5, r5, [r0]
 800b88e:	6083      	str	r3, [r0, #8]
 800b890:	f240 1301 	movw	r3, #257	@ 0x101
 800b894:	4617      	mov	r7, r2
 800b896:	8183      	strh	r3, [r0, #12]
 800b898:	460c      	mov	r4, r1
 800b89a:	46a8      	mov	r8, r5
 800b89c:	4621      	mov	r1, r4
 800b89e:	4630      	mov	r0, r6
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	f005 f92d 	bl	8010b00 <put_memory>
 800b8a6:	42af      	cmp	r7, r5
 800b8a8:	60a4      	str	r4, [r4, #8]
 800b8aa:	f884 800c 	strb.w	r8, [r4, #12]
 800b8ae:	f104 041c 	add.w	r4, r4, #28
 800b8b2:	d1f3      	bne.n	800b89c <rmw_uxrce_init_topic_memory+0x20>
 800b8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop

0800b8bc <rmw_uxrce_init_static_input_buffer_memory>:
 800b8bc:	b1ea      	cbz	r2, 800b8fa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800b8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c2:	7b05      	ldrb	r5, [r0, #12]
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	b9b5      	cbnz	r5, 800b8f6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800b8c8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800b8cc:	e9c0 5500 	strd	r5, r5, [r0]
 800b8d0:	6083      	str	r3, [r0, #8]
 800b8d2:	f240 1301 	movw	r3, #257	@ 0x101
 800b8d6:	4617      	mov	r7, r2
 800b8d8:	8183      	strh	r3, [r0, #12]
 800b8da:	460c      	mov	r4, r1
 800b8dc:	46a8      	mov	r8, r5
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	3501      	adds	r5, #1
 800b8e4:	f005 f90c 	bl	8010b00 <put_memory>
 800b8e8:	42af      	cmp	r7, r5
 800b8ea:	60a4      	str	r4, [r4, #8]
 800b8ec:	f884 800c 	strb.w	r8, [r4, #12]
 800b8f0:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800b8f4:	d1f3      	bne.n	800b8de <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800b8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8fa:	4770      	bx	lr

0800b8fc <rmw_uxrce_init_init_options_impl_memory>:
 800b8fc:	b1e2      	cbz	r2, 800b938 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800b8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	7b05      	ldrb	r5, [r0, #12]
 800b904:	4606      	mov	r6, r0
 800b906:	b9ad      	cbnz	r5, 800b934 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800b908:	232c      	movs	r3, #44	@ 0x2c
 800b90a:	e9c0 5500 	strd	r5, r5, [r0]
 800b90e:	6083      	str	r3, [r0, #8]
 800b910:	f240 1301 	movw	r3, #257	@ 0x101
 800b914:	4617      	mov	r7, r2
 800b916:	8183      	strh	r3, [r0, #12]
 800b918:	460c      	mov	r4, r1
 800b91a:	46a8      	mov	r8, r5
 800b91c:	4621      	mov	r1, r4
 800b91e:	4630      	mov	r0, r6
 800b920:	3501      	adds	r5, #1
 800b922:	f005 f8ed 	bl	8010b00 <put_memory>
 800b926:	42af      	cmp	r7, r5
 800b928:	60a4      	str	r4, [r4, #8]
 800b92a:	f884 800c 	strb.w	r8, [r4, #12]
 800b92e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800b932:	d1f3      	bne.n	800b91c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800b934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop

0800b93c <rmw_uxrce_init_wait_set_memory>:
 800b93c:	b1e2      	cbz	r2, 800b978 <rmw_uxrce_init_wait_set_memory+0x3c>
 800b93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b942:	7b05      	ldrb	r5, [r0, #12]
 800b944:	4606      	mov	r6, r0
 800b946:	b9ad      	cbnz	r5, 800b974 <rmw_uxrce_init_wait_set_memory+0x38>
 800b948:	231c      	movs	r3, #28
 800b94a:	e9c0 5500 	strd	r5, r5, [r0]
 800b94e:	6083      	str	r3, [r0, #8]
 800b950:	f240 1301 	movw	r3, #257	@ 0x101
 800b954:	4617      	mov	r7, r2
 800b956:	8183      	strh	r3, [r0, #12]
 800b958:	460c      	mov	r4, r1
 800b95a:	46a8      	mov	r8, r5
 800b95c:	4621      	mov	r1, r4
 800b95e:	4630      	mov	r0, r6
 800b960:	3501      	adds	r5, #1
 800b962:	f005 f8cd 	bl	8010b00 <put_memory>
 800b966:	42af      	cmp	r7, r5
 800b968:	60a4      	str	r4, [r4, #8]
 800b96a:	f884 800c 	strb.w	r8, [r4, #12]
 800b96e:	f104 041c 	add.w	r4, r4, #28
 800b972:	d1f3      	bne.n	800b95c <rmw_uxrce_init_wait_set_memory+0x20>
 800b974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop

0800b97c <rmw_uxrce_init_guard_condition_memory>:
 800b97c:	b1e2      	cbz	r2, 800b9b8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800b97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	7b05      	ldrb	r5, [r0, #12]
 800b984:	4606      	mov	r6, r0
 800b986:	b9ad      	cbnz	r5, 800b9b4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800b988:	2320      	movs	r3, #32
 800b98a:	e9c0 5500 	strd	r5, r5, [r0]
 800b98e:	6083      	str	r3, [r0, #8]
 800b990:	f240 1301 	movw	r3, #257	@ 0x101
 800b994:	4617      	mov	r7, r2
 800b996:	8183      	strh	r3, [r0, #12]
 800b998:	460c      	mov	r4, r1
 800b99a:	46a8      	mov	r8, r5
 800b99c:	4621      	mov	r1, r4
 800b99e:	4630      	mov	r0, r6
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	f005 f8ad 	bl	8010b00 <put_memory>
 800b9a6:	42af      	cmp	r7, r5
 800b9a8:	60a4      	str	r4, [r4, #8]
 800b9aa:	f884 800c 	strb.w	r8, [r4, #12]
 800b9ae:	f104 0420 	add.w	r4, r4, #32
 800b9b2:	d1f3      	bne.n	800b99c <rmw_uxrce_init_guard_condition_memory+0x20>
 800b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop

0800b9bc <rmw_uxrce_fini_session_memory>:
 800b9bc:	4601      	mov	r1, r0
 800b9be:	4801      	ldr	r0, [pc, #4]	@ (800b9c4 <rmw_uxrce_fini_session_memory+0x8>)
 800b9c0:	f005 b89e 	b.w	8010b00 <put_memory>
 800b9c4:	20010d8c 	.word	0x20010d8c

0800b9c8 <rmw_uxrce_fini_node_memory>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	6800      	ldr	r0, [r0, #0]
 800b9ce:	b128      	cbz	r0, 800b9dc <rmw_uxrce_fini_node_memory+0x14>
 800b9d0:	4b07      	ldr	r3, [pc, #28]	@ (800b9f0 <rmw_uxrce_fini_node_memory+0x28>)
 800b9d2:	6819      	ldr	r1, [r3, #0]
 800b9d4:	f7f4 fc1c 	bl	8000210 <strcmp>
 800b9d8:	b940      	cbnz	r0, 800b9ec <rmw_uxrce_fini_node_memory+0x24>
 800b9da:	6020      	str	r0, [r4, #0]
 800b9dc:	6861      	ldr	r1, [r4, #4]
 800b9de:	b129      	cbz	r1, 800b9ec <rmw_uxrce_fini_node_memory+0x24>
 800b9e0:	2500      	movs	r5, #0
 800b9e2:	4804      	ldr	r0, [pc, #16]	@ (800b9f4 <rmw_uxrce_fini_node_memory+0x2c>)
 800b9e4:	610d      	str	r5, [r1, #16]
 800b9e6:	f005 f88b 	bl	8010b00 <put_memory>
 800b9ea:	6065      	str	r5, [r4, #4]
 800b9ec:	bd38      	pop	{r3, r4, r5, pc}
 800b9ee:	bf00      	nop
 800b9f0:	0801619c 	.word	0x0801619c
 800b9f4:	20010d5c 	.word	0x20010d5c

0800b9f8 <rmw_uxrce_fini_publisher_memory>:
 800b9f8:	b510      	push	{r4, lr}
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	6800      	ldr	r0, [r0, #0]
 800b9fe:	b128      	cbz	r0, 800ba0c <rmw_uxrce_fini_publisher_memory+0x14>
 800ba00:	4b06      	ldr	r3, [pc, #24]	@ (800ba1c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ba02:	6819      	ldr	r1, [r3, #0]
 800ba04:	f7f4 fc04 	bl	8000210 <strcmp>
 800ba08:	b938      	cbnz	r0, 800ba1a <rmw_uxrce_fini_publisher_memory+0x22>
 800ba0a:	6020      	str	r0, [r4, #0]
 800ba0c:	6861      	ldr	r1, [r4, #4]
 800ba0e:	b121      	cbz	r1, 800ba1a <rmw_uxrce_fini_publisher_memory+0x22>
 800ba10:	4803      	ldr	r0, [pc, #12]	@ (800ba20 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ba12:	f005 f875 	bl	8010b00 <put_memory>
 800ba16:	2300      	movs	r3, #0
 800ba18:	6063      	str	r3, [r4, #4]
 800ba1a:	bd10      	pop	{r4, pc}
 800ba1c:	0801619c 	.word	0x0801619c
 800ba20:	20010d6c 	.word	0x20010d6c

0800ba24 <rmw_uxrce_fini_subscription_memory>:
 800ba24:	b510      	push	{r4, lr}
 800ba26:	4604      	mov	r4, r0
 800ba28:	6800      	ldr	r0, [r0, #0]
 800ba2a:	b128      	cbz	r0, 800ba38 <rmw_uxrce_fini_subscription_memory+0x14>
 800ba2c:	4b06      	ldr	r3, [pc, #24]	@ (800ba48 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ba2e:	6819      	ldr	r1, [r3, #0]
 800ba30:	f7f4 fbee 	bl	8000210 <strcmp>
 800ba34:	b938      	cbnz	r0, 800ba46 <rmw_uxrce_fini_subscription_memory+0x22>
 800ba36:	6020      	str	r0, [r4, #0]
 800ba38:	6861      	ldr	r1, [r4, #4]
 800ba3a:	b121      	cbz	r1, 800ba46 <rmw_uxrce_fini_subscription_memory+0x22>
 800ba3c:	4803      	ldr	r0, [pc, #12]	@ (800ba4c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ba3e:	f005 f85f 	bl	8010b00 <put_memory>
 800ba42:	2300      	movs	r3, #0
 800ba44:	6063      	str	r3, [r4, #4]
 800ba46:	bd10      	pop	{r4, pc}
 800ba48:	0801619c 	.word	0x0801619c
 800ba4c:	20010dac 	.word	0x20010dac

0800ba50 <rmw_uxrce_fini_service_memory>:
 800ba50:	b510      	push	{r4, lr}
 800ba52:	4604      	mov	r4, r0
 800ba54:	6800      	ldr	r0, [r0, #0]
 800ba56:	b128      	cbz	r0, 800ba64 <rmw_uxrce_fini_service_memory+0x14>
 800ba58:	4b06      	ldr	r3, [pc, #24]	@ (800ba74 <rmw_uxrce_fini_service_memory+0x24>)
 800ba5a:	6819      	ldr	r1, [r3, #0]
 800ba5c:	f7f4 fbd8 	bl	8000210 <strcmp>
 800ba60:	b938      	cbnz	r0, 800ba72 <rmw_uxrce_fini_service_memory+0x22>
 800ba62:	6020      	str	r0, [r4, #0]
 800ba64:	6861      	ldr	r1, [r4, #4]
 800ba66:	b121      	cbz	r1, 800ba72 <rmw_uxrce_fini_service_memory+0x22>
 800ba68:	4803      	ldr	r0, [pc, #12]	@ (800ba78 <rmw_uxrce_fini_service_memory+0x28>)
 800ba6a:	f005 f849 	bl	8010b00 <put_memory>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	6063      	str	r3, [r4, #4]
 800ba72:	bd10      	pop	{r4, pc}
 800ba74:	0801619c 	.word	0x0801619c
 800ba78:	20010d7c 	.word	0x20010d7c

0800ba7c <rmw_uxrce_fini_client_memory>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	4604      	mov	r4, r0
 800ba80:	6800      	ldr	r0, [r0, #0]
 800ba82:	b128      	cbz	r0, 800ba90 <rmw_uxrce_fini_client_memory+0x14>
 800ba84:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <rmw_uxrce_fini_client_memory+0x24>)
 800ba86:	6819      	ldr	r1, [r3, #0]
 800ba88:	f7f4 fbc2 	bl	8000210 <strcmp>
 800ba8c:	b938      	cbnz	r0, 800ba9e <rmw_uxrce_fini_client_memory+0x22>
 800ba8e:	6020      	str	r0, [r4, #0]
 800ba90:	6861      	ldr	r1, [r4, #4]
 800ba92:	b121      	cbz	r1, 800ba9e <rmw_uxrce_fini_client_memory+0x22>
 800ba94:	4803      	ldr	r0, [pc, #12]	@ (800baa4 <rmw_uxrce_fini_client_memory+0x28>)
 800ba96:	f005 f833 	bl	8010b00 <put_memory>
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	6063      	str	r3, [r4, #4]
 800ba9e:	bd10      	pop	{r4, pc}
 800baa0:	0801619c 	.word	0x0801619c
 800baa4:	2000c490 	.word	0x2000c490

0800baa8 <rmw_uxrce_fini_topic_memory>:
 800baa8:	b510      	push	{r4, lr}
 800baaa:	4604      	mov	r4, r0
 800baac:	4621      	mov	r1, r4
 800baae:	4803      	ldr	r0, [pc, #12]	@ (800babc <rmw_uxrce_fini_topic_memory+0x14>)
 800bab0:	f005 f826 	bl	8010b00 <put_memory>
 800bab4:	2300      	movs	r3, #0
 800bab6:	61a3      	str	r3, [r4, #24]
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	bf00      	nop
 800babc:	20010dbc 	.word	0x20010dbc

0800bac0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800bac0:	b082      	sub	sp, #8
 800bac2:	b530      	push	{r4, r5, lr}
 800bac4:	4925      	ldr	r1, [pc, #148]	@ (800bb5c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bac6:	680d      	ldr	r5, [r1, #0]
 800bac8:	ac03      	add	r4, sp, #12
 800baca:	e884 000c 	stmia.w	r4, {r2, r3}
 800bace:	461c      	mov	r4, r3
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	d041      	beq.n	800bb58 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800bad4:	462b      	mov	r3, r5
 800bad6:	2100      	movs	r1, #0
 800bad8:	689a      	ldr	r2, [r3, #8]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800bae0:	4290      	cmp	r0, r2
 800bae2:	bf08      	it	eq
 800bae4:	3101      	addeq	r1, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1f6      	bne.n	800bad8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800baea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d029      	beq.n	800bb46 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800baf2:	d907      	bls.n	800bb04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d005      	beq.n	800bb04 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800baf8:	2100      	movs	r1, #0
 800bafa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bafe:	4608      	mov	r0, r1
 800bb00:	b002      	add	sp, #8
 800bb02:	4770      	bx	lr
 800bb04:	b314      	cbz	r4, 800bb4c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bb06:	428c      	cmp	r4, r1
 800bb08:	d820      	bhi.n	800bb4c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bb0a:	2d00      	cmp	r5, #0
 800bb0c:	d0f4      	beq.n	800baf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bb0e:	2100      	movs	r1, #0
 800bb10:	f04f 3cff 	mov.w	ip, #4294967295
 800bb14:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800bb18:	e002      	b.n	800bb20 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800bb1a:	686d      	ldr	r5, [r5, #4]
 800bb1c:	2d00      	cmp	r5, #0
 800bb1e:	d0ec      	beq.n	800bafa <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800bb20:	68ab      	ldr	r3, [r5, #8]
 800bb22:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800bb26:	4290      	cmp	r0, r2
 800bb28:	d1f7      	bne.n	800bb1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bb2a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800bb2e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800bb32:	4562      	cmp	r2, ip
 800bb34:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bb38:	eb73 0e04 	sbcs.w	lr, r3, r4
 800bb3c:	daed      	bge.n	800bb1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bb3e:	4694      	mov	ip, r2
 800bb40:	461c      	mov	r4, r3
 800bb42:	4629      	mov	r1, r5
 800bb44:	e7e9      	b.n	800bb1a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800bb46:	b10c      	cbz	r4, 800bb4c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800bb48:	428c      	cmp	r4, r1
 800bb4a:	d9d5      	bls.n	800baf8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800bb4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb50:	4802      	ldr	r0, [pc, #8]	@ (800bb5c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800bb52:	b002      	add	sp, #8
 800bb54:	f004 bfc4 	b.w	8010ae0 <get_memory>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	e7c6      	b.n	800baea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800bb5c:	20010d9c 	.word	0x20010d9c

0800bb60 <run_xrce_session>:
 800bb60:	b510      	push	{r4, lr}
 800bb62:	788c      	ldrb	r4, [r1, #2]
 800bb64:	b086      	sub	sp, #24
 800bb66:	2c01      	cmp	r4, #1
 800bb68:	f8ad 200e 	strh.w	r2, [sp, #14]
 800bb6c:	d00c      	beq.n	800bb88 <run_xrce_session+0x28>
 800bb6e:	4619      	mov	r1, r3
 800bb70:	2301      	movs	r3, #1
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	f10d 020e 	add.w	r2, sp, #14
 800bb78:	f10d 0317 	add.w	r3, sp, #23
 800bb7c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb80:	f001 ff7e 	bl	800da80 <uxr_run_session_until_all_status>
 800bb84:	b006      	add	sp, #24
 800bb86:	bd10      	pop	{r4, pc}
 800bb88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bb8c:	f001 fbcc 	bl	800d328 <uxr_flash_output_streams>
 800bb90:	4620      	mov	r0, r4
 800bb92:	b006      	add	sp, #24
 800bb94:	bd10      	pop	{r4, pc}
 800bb96:	bf00      	nop

0800bb98 <convert_qos_profile>:
 800bb98:	7a4a      	ldrb	r2, [r1, #9]
 800bb9a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800bb9e:	2a02      	cmp	r2, #2
 800bba0:	bf18      	it	ne
 800bba2:	2200      	movne	r2, #0
 800bba4:	7002      	strb	r2, [r0, #0]
 800bba6:	780a      	ldrb	r2, [r1, #0]
 800bba8:	8889      	ldrh	r1, [r1, #4]
 800bbaa:	8081      	strh	r1, [r0, #4]
 800bbac:	f1ac 0c02 	sub.w	ip, ip, #2
 800bbb0:	f1a2 0202 	sub.w	r2, r2, #2
 800bbb4:	fabc fc8c 	clz	ip, ip
 800bbb8:	fab2 f282 	clz	r2, r2
 800bbbc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800bbc0:	0952      	lsrs	r2, r2, #5
 800bbc2:	f880 c001 	strb.w	ip, [r0, #1]
 800bbc6:	7082      	strb	r2, [r0, #2]
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop

0800bbcc <generate_type_name>:
 800bbcc:	b530      	push	{r4, r5, lr}
 800bbce:	2300      	movs	r3, #0
 800bbd0:	700b      	strb	r3, [r1, #0]
 800bbd2:	6803      	ldr	r3, [r0, #0]
 800bbd4:	b087      	sub	sp, #28
 800bbd6:	4614      	mov	r4, r2
 800bbd8:	b1d3      	cbz	r3, 800bc10 <generate_type_name+0x44>
 800bbda:	4a0f      	ldr	r2, [pc, #60]	@ (800bc18 <generate_type_name+0x4c>)
 800bbdc:	4615      	mov	r5, r2
 800bbde:	9203      	str	r2, [sp, #12]
 800bbe0:	9500      	str	r5, [sp, #0]
 800bbe2:	6842      	ldr	r2, [r0, #4]
 800bbe4:	480d      	ldr	r0, [pc, #52]	@ (800bc1c <generate_type_name+0x50>)
 800bbe6:	9001      	str	r0, [sp, #4]
 800bbe8:	4608      	mov	r0, r1
 800bbea:	490d      	ldr	r1, [pc, #52]	@ (800bc20 <generate_type_name+0x54>)
 800bbec:	9204      	str	r2, [sp, #16]
 800bbee:	9105      	str	r1, [sp, #20]
 800bbf0:	9102      	str	r1, [sp, #8]
 800bbf2:	4a0c      	ldr	r2, [pc, #48]	@ (800bc24 <generate_type_name+0x58>)
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	f008 fef1 	bl	80149dc <sniprintf>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	db05      	blt.n	800bc0a <generate_type_name+0x3e>
 800bbfe:	4284      	cmp	r4, r0
 800bc00:	bfd4      	ite	le
 800bc02:	2000      	movle	r0, #0
 800bc04:	2001      	movgt	r0, #1
 800bc06:	b007      	add	sp, #28
 800bc08:	bd30      	pop	{r4, r5, pc}
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	b007      	add	sp, #28
 800bc0e:	bd30      	pop	{r4, r5, pc}
 800bc10:	4b05      	ldr	r3, [pc, #20]	@ (800bc28 <generate_type_name+0x5c>)
 800bc12:	4a01      	ldr	r2, [pc, #4]	@ (800bc18 <generate_type_name+0x4c>)
 800bc14:	461d      	mov	r5, r3
 800bc16:	e7e2      	b.n	800bbde <generate_type_name+0x12>
 800bc18:	08015c84 	.word	0x08015c84
 800bc1c:	08015c9c 	.word	0x08015c9c
 800bc20:	08015c98 	.word	0x08015c98
 800bc24:	08015c88 	.word	0x08015c88
 800bc28:	08015f74 	.word	0x08015f74

0800bc2c <generate_topic_name>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	4614      	mov	r4, r2
 800bc32:	9000      	str	r0, [sp, #0]
 800bc34:	4b08      	ldr	r3, [pc, #32]	@ (800bc58 <generate_topic_name+0x2c>)
 800bc36:	4a09      	ldr	r2, [pc, #36]	@ (800bc5c <generate_topic_name+0x30>)
 800bc38:	4608      	mov	r0, r1
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	f008 fece 	bl	80149dc <sniprintf>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	db05      	blt.n	800bc50 <generate_topic_name+0x24>
 800bc44:	4284      	cmp	r4, r0
 800bc46:	bfd4      	ite	le
 800bc48:	2000      	movle	r0, #0
 800bc4a:	2001      	movgt	r0, #1
 800bc4c:	b002      	add	sp, #8
 800bc4e:	bd10      	pop	{r4, pc}
 800bc50:	2000      	movs	r0, #0
 800bc52:	b002      	add	sp, #8
 800bc54:	bd10      	pop	{r4, pc}
 800bc56:	bf00      	nop
 800bc58:	08015ca8 	.word	0x08015ca8
 800bc5c:	08015ca0 	.word	0x08015ca0

0800bc60 <is_uxrce_rmw_identifier_valid>:
 800bc60:	b510      	push	{r4, lr}
 800bc62:	4604      	mov	r4, r0
 800bc64:	b140      	cbz	r0, 800bc78 <is_uxrce_rmw_identifier_valid+0x18>
 800bc66:	f004 ff5f 	bl	8010b28 <rmw_get_implementation_identifier>
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	f7f4 facf 	bl	8000210 <strcmp>
 800bc72:	fab0 f080 	clz	r0, r0
 800bc76:	0940      	lsrs	r0, r0, #5
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	bf00      	nop

0800bc7c <get_message_typesupport_handle>:
 800bc7c:	6883      	ldr	r3, [r0, #8]
 800bc7e:	4718      	bx	r3

0800bc80 <get_message_typesupport_handle_function>:
 800bc80:	b510      	push	{r4, lr}
 800bc82:	4604      	mov	r4, r0
 800bc84:	6800      	ldr	r0, [r0, #0]
 800bc86:	f7f4 fac3 	bl	8000210 <strcmp>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	bf0c      	ite	eq
 800bc8e:	4620      	moveq	r0, r4
 800bc90:	2000      	movne	r0, #0
 800bc92:	bd10      	pop	{r4, pc}

0800bc94 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bc94:	4b04      	ldr	r3, [pc, #16]	@ (800bca8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	b10a      	cbz	r2, 800bc9e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800bc9a:	4803      	ldr	r0, [pc, #12]	@ (800bca8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bc9c:	4770      	bx	lr
 800bc9e:	4a03      	ldr	r2, [pc, #12]	@ (800bcac <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800bca0:	4801      	ldr	r0, [pc, #4]	@ (800bca8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bca2:	6812      	ldr	r2, [r2, #0]
 800bca4:	601a      	str	r2, [r3, #0]
 800bca6:	4770      	bx	lr
 800bca8:	200000f0 	.word	0x200000f0
 800bcac:	2000016c 	.word	0x2000016c

0800bcb0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bcb0:	4a02      	ldr	r2, [pc, #8]	@ (800bcbc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800bcb2:	4b03      	ldr	r3, [pc, #12]	@ (800bcc0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800bcb4:	6812      	ldr	r2, [r2, #0]
 800bcb6:	601a      	str	r2, [r3, #0]
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	2000016c 	.word	0x2000016c
 800bcc0:	200000f0 	.word	0x200000f0

0800bcc4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800bcc4:	f005 bc3e 	b.w	8011544 <std_msgs__msg__Int32__init>

0800bcc8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800bcc8:	f005 bc40 	b.w	801154c <std_msgs__msg__Int32__fini>

0800bccc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bccc:	4b04      	ldr	r3, [pc, #16]	@ (800bce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	b10a      	cbz	r2, 800bcd6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800bcd2:	4803      	ldr	r0, [pc, #12]	@ (800bce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bcd4:	4770      	bx	lr
 800bcd6:	4a03      	ldr	r2, [pc, #12]	@ (800bce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800bcd8:	4801      	ldr	r0, [pc, #4]	@ (800bce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	4770      	bx	lr
 800bce0:	20000138 	.word	0x20000138
 800bce4:	20000170 	.word	0x20000170

0800bce8 <_Int32__max_serialized_size>:
 800bce8:	b508      	push	{r3, lr}
 800bcea:	2104      	movs	r1, #4
 800bcec:	2000      	movs	r0, #0
 800bcee:	f001 f807 	bl	800cd00 <ucdr_alignment>
 800bcf2:	3004      	adds	r0, #4
 800bcf4:	bd08      	pop	{r3, pc}
 800bcf6:	bf00      	nop

0800bcf8 <_Int32__cdr_deserialize>:
 800bcf8:	b109      	cbz	r1, 800bcfe <_Int32__cdr_deserialize+0x6>
 800bcfa:	f000 bf19 	b.w	800cb30 <ucdr_deserialize_int32_t>
 800bcfe:	4608      	mov	r0, r1
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop

0800bd04 <get_serialized_size_std_msgs__msg__Int32>:
 800bd04:	b138      	cbz	r0, 800bd16 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800bd06:	b508      	push	{r3, lr}
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	f000 fff7 	bl	800cd00 <ucdr_alignment>
 800bd12:	3004      	adds	r0, #4
 800bd14:	bd08      	pop	{r3, pc}
 800bd16:	4770      	bx	lr

0800bd18 <_Int32__cdr_serialize>:
 800bd18:	460a      	mov	r2, r1
 800bd1a:	b118      	cbz	r0, 800bd24 <_Int32__cdr_serialize+0xc>
 800bd1c:	6801      	ldr	r1, [r0, #0]
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f000 be6e 	b.w	800ca00 <ucdr_serialize_int32_t>
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop

0800bd28 <_Int32__get_serialized_size>:
 800bd28:	b130      	cbz	r0, 800bd38 <_Int32__get_serialized_size+0x10>
 800bd2a:	b508      	push	{r3, lr}
 800bd2c:	2104      	movs	r1, #4
 800bd2e:	2000      	movs	r0, #0
 800bd30:	f000 ffe6 	bl	800cd00 <ucdr_alignment>
 800bd34:	3004      	adds	r0, #4
 800bd36:	bd08      	pop	{r3, pc}
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop

0800bd3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800bd3c:	4800      	ldr	r0, [pc, #0]	@ (800bd40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800bd3e:	4770      	bx	lr
 800bd40:	20000144 	.word	0x20000144

0800bd44 <ucdr_serialize_bool>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	460d      	mov	r5, r1
 800bd48:	2101      	movs	r1, #1
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	f000 ff8c 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800bd50:	b148      	cbz	r0, 800bd66 <ucdr_serialize_bool+0x22>
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	701d      	strb	r5, [r3, #0]
 800bd56:	68a2      	ldr	r2, [r4, #8]
 800bd58:	6923      	ldr	r3, [r4, #16]
 800bd5a:	2101      	movs	r1, #1
 800bd5c:	440a      	add	r2, r1
 800bd5e:	440b      	add	r3, r1
 800bd60:	60a2      	str	r2, [r4, #8]
 800bd62:	6123      	str	r3, [r4, #16]
 800bd64:	7561      	strb	r1, [r4, #21]
 800bd66:	7da0      	ldrb	r0, [r4, #22]
 800bd68:	f080 0001 	eor.w	r0, r0, #1
 800bd6c:	bd38      	pop	{r3, r4, r5, pc}
 800bd6e:	bf00      	nop

0800bd70 <ucdr_deserialize_bool>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	460d      	mov	r5, r1
 800bd74:	2101      	movs	r1, #1
 800bd76:	4604      	mov	r4, r0
 800bd78:	f000 ff76 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800bd7c:	b160      	cbz	r0, 800bd98 <ucdr_deserialize_bool+0x28>
 800bd7e:	68a2      	ldr	r2, [r4, #8]
 800bd80:	6923      	ldr	r3, [r4, #16]
 800bd82:	f812 1b01 	ldrb.w	r1, [r2], #1
 800bd86:	3900      	subs	r1, #0
 800bd88:	bf18      	it	ne
 800bd8a:	2101      	movne	r1, #1
 800bd8c:	7029      	strb	r1, [r5, #0]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	2101      	movs	r1, #1
 800bd92:	60a2      	str	r2, [r4, #8]
 800bd94:	6123      	str	r3, [r4, #16]
 800bd96:	7561      	strb	r1, [r4, #21]
 800bd98:	7da0      	ldrb	r0, [r4, #22]
 800bd9a:	f080 0001 	eor.w	r0, r0, #1
 800bd9e:	bd38      	pop	{r3, r4, r5, pc}

0800bda0 <ucdr_serialize_uint8_t>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	460d      	mov	r5, r1
 800bda4:	2101      	movs	r1, #1
 800bda6:	4604      	mov	r4, r0
 800bda8:	f000 ff5e 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800bdac:	b148      	cbz	r0, 800bdc2 <ucdr_serialize_uint8_t+0x22>
 800bdae:	68a3      	ldr	r3, [r4, #8]
 800bdb0:	701d      	strb	r5, [r3, #0]
 800bdb2:	68a2      	ldr	r2, [r4, #8]
 800bdb4:	6923      	ldr	r3, [r4, #16]
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	440a      	add	r2, r1
 800bdba:	440b      	add	r3, r1
 800bdbc:	60a2      	str	r2, [r4, #8]
 800bdbe:	6123      	str	r3, [r4, #16]
 800bdc0:	7561      	strb	r1, [r4, #21]
 800bdc2:	7da0      	ldrb	r0, [r4, #22]
 800bdc4:	f080 0001 	eor.w	r0, r0, #1
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	bf00      	nop

0800bdcc <ucdr_deserialize_uint8_t>:
 800bdcc:	b538      	push	{r3, r4, r5, lr}
 800bdce:	460d      	mov	r5, r1
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	f000 ff48 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800bdd8:	b150      	cbz	r0, 800bdf0 <ucdr_deserialize_uint8_t+0x24>
 800bdda:	68a3      	ldr	r3, [r4, #8]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	702b      	strb	r3, [r5, #0]
 800bde0:	68a2      	ldr	r2, [r4, #8]
 800bde2:	6923      	ldr	r3, [r4, #16]
 800bde4:	2101      	movs	r1, #1
 800bde6:	440a      	add	r2, r1
 800bde8:	440b      	add	r3, r1
 800bdea:	60a2      	str	r2, [r4, #8]
 800bdec:	6123      	str	r3, [r4, #16]
 800bdee:	7561      	strb	r1, [r4, #21]
 800bdf0:	7da0      	ldrb	r0, [r4, #22]
 800bdf2:	f080 0001 	eor.w	r0, r0, #1
 800bdf6:	bd38      	pop	{r3, r4, r5, pc}

0800bdf8 <ucdr_serialize_uint16_t>:
 800bdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	460b      	mov	r3, r1
 800be00:	2102      	movs	r1, #2
 800be02:	4604      	mov	r4, r0
 800be04:	f8ad 3006 	strh.w	r3, [sp, #6]
 800be08:	f000 ff82 	bl	800cd10 <ucdr_buffer_alignment>
 800be0c:	4601      	mov	r1, r0
 800be0e:	4620      	mov	r0, r4
 800be10:	7d67      	ldrb	r7, [r4, #21]
 800be12:	f000 ffc1 	bl	800cd98 <ucdr_advance_buffer>
 800be16:	2102      	movs	r1, #2
 800be18:	4620      	mov	r0, r4
 800be1a:	f000 ff19 	bl	800cc50 <ucdr_check_buffer_available_for>
 800be1e:	bb78      	cbnz	r0, 800be80 <ucdr_serialize_uint16_t+0x88>
 800be20:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800be24:	42ab      	cmp	r3, r5
 800be26:	d926      	bls.n	800be76 <ucdr_serialize_uint16_t+0x7e>
 800be28:	1b5e      	subs	r6, r3, r5
 800be2a:	60a3      	str	r3, [r4, #8]
 800be2c:	6923      	ldr	r3, [r4, #16]
 800be2e:	f1c6 0802 	rsb	r8, r6, #2
 800be32:	4433      	add	r3, r6
 800be34:	6123      	str	r3, [r4, #16]
 800be36:	4641      	mov	r1, r8
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 ff15 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800be3e:	2800      	cmp	r0, #0
 800be40:	d03b      	beq.n	800beba <ucdr_serialize_uint16_t+0xc2>
 800be42:	7d23      	ldrb	r3, [r4, #20]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d04a      	beq.n	800bede <ucdr_serialize_uint16_t+0xe6>
 800be48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800be4c:	702b      	strb	r3, [r5, #0]
 800be4e:	2e00      	cmp	r6, #0
 800be50:	d040      	beq.n	800bed4 <ucdr_serialize_uint16_t+0xdc>
 800be52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800be56:	706b      	strb	r3, [r5, #1]
 800be58:	6923      	ldr	r3, [r4, #16]
 800be5a:	68a2      	ldr	r2, [r4, #8]
 800be5c:	7da0      	ldrb	r0, [r4, #22]
 800be5e:	3302      	adds	r3, #2
 800be60:	1b9e      	subs	r6, r3, r6
 800be62:	4442      	add	r2, r8
 800be64:	2302      	movs	r3, #2
 800be66:	f080 0001 	eor.w	r0, r0, #1
 800be6a:	60a2      	str	r2, [r4, #8]
 800be6c:	6126      	str	r6, [r4, #16]
 800be6e:	7563      	strb	r3, [r4, #21]
 800be70:	b002      	add	sp, #8
 800be72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be76:	2102      	movs	r1, #2
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fef5 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800be7e:	b190      	cbz	r0, 800bea6 <ucdr_serialize_uint16_t+0xae>
 800be80:	7d23      	ldrb	r3, [r4, #20]
 800be82:	2b01      	cmp	r3, #1
 800be84:	68a3      	ldr	r3, [r4, #8]
 800be86:	d014      	beq.n	800beb2 <ucdr_serialize_uint16_t+0xba>
 800be88:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	68a3      	ldr	r3, [r4, #8]
 800be90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800be94:	705a      	strb	r2, [r3, #1]
 800be96:	68a2      	ldr	r2, [r4, #8]
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	3202      	adds	r2, #2
 800be9c:	3302      	adds	r3, #2
 800be9e:	2102      	movs	r1, #2
 800bea0:	60a2      	str	r2, [r4, #8]
 800bea2:	6123      	str	r3, [r4, #16]
 800bea4:	7561      	strb	r1, [r4, #21]
 800bea6:	7da0      	ldrb	r0, [r4, #22]
 800bea8:	f080 0001 	eor.w	r0, r0, #1
 800beac:	b002      	add	sp, #8
 800beae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800beb6:	801a      	strh	r2, [r3, #0]
 800beb8:	e7ed      	b.n	800be96 <ucdr_serialize_uint16_t+0x9e>
 800beba:	68a2      	ldr	r2, [r4, #8]
 800bebc:	6923      	ldr	r3, [r4, #16]
 800bebe:	7da0      	ldrb	r0, [r4, #22]
 800bec0:	7567      	strb	r7, [r4, #21]
 800bec2:	1b92      	subs	r2, r2, r6
 800bec4:	1b9b      	subs	r3, r3, r6
 800bec6:	f080 0001 	eor.w	r0, r0, #1
 800beca:	60a2      	str	r2, [r4, #8]
 800becc:	6123      	str	r3, [r4, #16]
 800bece:	b002      	add	sp, #8
 800bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed4:	68a3      	ldr	r3, [r4, #8]
 800bed6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800beda:	701a      	strb	r2, [r3, #0]
 800bedc:	e7bc      	b.n	800be58 <ucdr_serialize_uint16_t+0x60>
 800bede:	4628      	mov	r0, r5
 800bee0:	f10d 0506 	add.w	r5, sp, #6
 800bee4:	4629      	mov	r1, r5
 800bee6:	4632      	mov	r2, r6
 800bee8:	f008 fef1 	bl	8014cce <memcpy>
 800beec:	68a0      	ldr	r0, [r4, #8]
 800beee:	4642      	mov	r2, r8
 800bef0:	19a9      	adds	r1, r5, r6
 800bef2:	f008 feec 	bl	8014cce <memcpy>
 800bef6:	e7af      	b.n	800be58 <ucdr_serialize_uint16_t+0x60>

0800bef8 <ucdr_serialize_endian_uint16_t>:
 800bef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800befc:	b083      	sub	sp, #12
 800befe:	460d      	mov	r5, r1
 800bf00:	2102      	movs	r1, #2
 800bf02:	4604      	mov	r4, r0
 800bf04:	f8ad 2006 	strh.w	r2, [sp, #6]
 800bf08:	f000 ff02 	bl	800cd10 <ucdr_buffer_alignment>
 800bf0c:	4601      	mov	r1, r0
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bf14:	f000 ff40 	bl	800cd98 <ucdr_advance_buffer>
 800bf18:	2102      	movs	r1, #2
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 fe98 	bl	800cc50 <ucdr_check_buffer_available_for>
 800bf20:	bb70      	cbnz	r0, 800bf80 <ucdr_serialize_endian_uint16_t+0x88>
 800bf22:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bf26:	42be      	cmp	r6, r7
 800bf28:	d925      	bls.n	800bf76 <ucdr_serialize_endian_uint16_t+0x7e>
 800bf2a:	6923      	ldr	r3, [r4, #16]
 800bf2c:	60a6      	str	r6, [r4, #8]
 800bf2e:	1bf6      	subs	r6, r6, r7
 800bf30:	4433      	add	r3, r6
 800bf32:	f1c6 0902 	rsb	r9, r6, #2
 800bf36:	6123      	str	r3, [r4, #16]
 800bf38:	4649      	mov	r1, r9
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	f000 fe94 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	d039      	beq.n	800bfb8 <ucdr_serialize_endian_uint16_t+0xc0>
 800bf44:	2d01      	cmp	r5, #1
 800bf46:	d04a      	beq.n	800bfde <ucdr_serialize_endian_uint16_t+0xe6>
 800bf48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf4c:	703b      	strb	r3, [r7, #0]
 800bf4e:	2e00      	cmp	r6, #0
 800bf50:	d040      	beq.n	800bfd4 <ucdr_serialize_endian_uint16_t+0xdc>
 800bf52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bf56:	707b      	strb	r3, [r7, #1]
 800bf58:	6923      	ldr	r3, [r4, #16]
 800bf5a:	68a2      	ldr	r2, [r4, #8]
 800bf5c:	7da0      	ldrb	r0, [r4, #22]
 800bf5e:	3302      	adds	r3, #2
 800bf60:	444a      	add	r2, r9
 800bf62:	1b9b      	subs	r3, r3, r6
 800bf64:	2102      	movs	r1, #2
 800bf66:	f080 0001 	eor.w	r0, r0, #1
 800bf6a:	60a2      	str	r2, [r4, #8]
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	7561      	strb	r1, [r4, #21]
 800bf70:	b003      	add	sp, #12
 800bf72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf76:	2102      	movs	r1, #2
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fe75 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800bf7e:	b188      	cbz	r0, 800bfa4 <ucdr_serialize_endian_uint16_t+0xac>
 800bf80:	2d01      	cmp	r5, #1
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	d014      	beq.n	800bfb0 <ucdr_serialize_endian_uint16_t+0xb8>
 800bf86:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	68a3      	ldr	r3, [r4, #8]
 800bf8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bf92:	705a      	strb	r2, [r3, #1]
 800bf94:	68a2      	ldr	r2, [r4, #8]
 800bf96:	6923      	ldr	r3, [r4, #16]
 800bf98:	3202      	adds	r2, #2
 800bf9a:	3302      	adds	r3, #2
 800bf9c:	2102      	movs	r1, #2
 800bf9e:	60a2      	str	r2, [r4, #8]
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	7561      	strb	r1, [r4, #21]
 800bfa4:	7da0      	ldrb	r0, [r4, #22]
 800bfa6:	f080 0001 	eor.w	r0, r0, #1
 800bfaa:	b003      	add	sp, #12
 800bfac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfb0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800bfb4:	801a      	strh	r2, [r3, #0]
 800bfb6:	e7ed      	b.n	800bf94 <ucdr_serialize_endian_uint16_t+0x9c>
 800bfb8:	68a2      	ldr	r2, [r4, #8]
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	7da0      	ldrb	r0, [r4, #22]
 800bfbe:	f884 8015 	strb.w	r8, [r4, #21]
 800bfc2:	1b92      	subs	r2, r2, r6
 800bfc4:	1b9b      	subs	r3, r3, r6
 800bfc6:	f080 0001 	eor.w	r0, r0, #1
 800bfca:	60a2      	str	r2, [r4, #8]
 800bfcc:	6123      	str	r3, [r4, #16]
 800bfce:	b003      	add	sp, #12
 800bfd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfd4:	68a3      	ldr	r3, [r4, #8]
 800bfd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bfda:	701a      	strb	r2, [r3, #0]
 800bfdc:	e7bc      	b.n	800bf58 <ucdr_serialize_endian_uint16_t+0x60>
 800bfde:	f10d 0506 	add.w	r5, sp, #6
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	4632      	mov	r2, r6
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	f008 fe71 	bl	8014cce <memcpy>
 800bfec:	68a0      	ldr	r0, [r4, #8]
 800bfee:	464a      	mov	r2, r9
 800bff0:	19a9      	adds	r1, r5, r6
 800bff2:	f008 fe6c 	bl	8014cce <memcpy>
 800bff6:	e7af      	b.n	800bf58 <ucdr_serialize_endian_uint16_t+0x60>

0800bff8 <ucdr_deserialize_uint16_t>:
 800bff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bffc:	460d      	mov	r5, r1
 800bffe:	2102      	movs	r1, #2
 800c000:	4604      	mov	r4, r0
 800c002:	f000 fe85 	bl	800cd10 <ucdr_buffer_alignment>
 800c006:	4601      	mov	r1, r0
 800c008:	4620      	mov	r0, r4
 800c00a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c00e:	f000 fec3 	bl	800cd98 <ucdr_advance_buffer>
 800c012:	2102      	movs	r1, #2
 800c014:	4620      	mov	r0, r4
 800c016:	f000 fe1b 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c01a:	bb60      	cbnz	r0, 800c076 <ucdr_deserialize_uint16_t+0x7e>
 800c01c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c020:	42be      	cmp	r6, r7
 800c022:	d923      	bls.n	800c06c <ucdr_deserialize_uint16_t+0x74>
 800c024:	6923      	ldr	r3, [r4, #16]
 800c026:	60a6      	str	r6, [r4, #8]
 800c028:	1bf6      	subs	r6, r6, r7
 800c02a:	4433      	add	r3, r6
 800c02c:	f1c6 0902 	rsb	r9, r6, #2
 800c030:	6123      	str	r3, [r4, #16]
 800c032:	4649      	mov	r1, r9
 800c034:	4620      	mov	r0, r4
 800c036:	f000 fe17 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d034      	beq.n	800c0a8 <ucdr_deserialize_uint16_t+0xb0>
 800c03e:	7d23      	ldrb	r3, [r4, #20]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d042      	beq.n	800c0ca <ucdr_deserialize_uint16_t+0xd2>
 800c044:	787b      	ldrb	r3, [r7, #1]
 800c046:	702b      	strb	r3, [r5, #0]
 800c048:	2e00      	cmp	r6, #0
 800c04a:	d03a      	beq.n	800c0c2 <ucdr_deserialize_uint16_t+0xca>
 800c04c:	783b      	ldrb	r3, [r7, #0]
 800c04e:	706b      	strb	r3, [r5, #1]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	68a2      	ldr	r2, [r4, #8]
 800c054:	7da0      	ldrb	r0, [r4, #22]
 800c056:	2102      	movs	r1, #2
 800c058:	3302      	adds	r3, #2
 800c05a:	444a      	add	r2, r9
 800c05c:	1b9b      	subs	r3, r3, r6
 800c05e:	7561      	strb	r1, [r4, #21]
 800c060:	60a2      	str	r2, [r4, #8]
 800c062:	6123      	str	r3, [r4, #16]
 800c064:	f080 0001 	eor.w	r0, r0, #1
 800c068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06c:	2102      	movs	r1, #2
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fdfa 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c074:	b180      	cbz	r0, 800c098 <ucdr_deserialize_uint16_t+0xa0>
 800c076:	7d23      	ldrb	r3, [r4, #20]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	d011      	beq.n	800c0a2 <ucdr_deserialize_uint16_t+0xaa>
 800c07e:	785b      	ldrb	r3, [r3, #1]
 800c080:	702b      	strb	r3, [r5, #0]
 800c082:	68a3      	ldr	r3, [r4, #8]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	706b      	strb	r3, [r5, #1]
 800c088:	68a2      	ldr	r2, [r4, #8]
 800c08a:	6923      	ldr	r3, [r4, #16]
 800c08c:	3202      	adds	r2, #2
 800c08e:	3302      	adds	r3, #2
 800c090:	2102      	movs	r1, #2
 800c092:	60a2      	str	r2, [r4, #8]
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	7561      	strb	r1, [r4, #21]
 800c098:	7da0      	ldrb	r0, [r4, #22]
 800c09a:	f080 0001 	eor.w	r0, r0, #1
 800c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	802b      	strh	r3, [r5, #0]
 800c0a6:	e7ef      	b.n	800c088 <ucdr_deserialize_uint16_t+0x90>
 800c0a8:	68a2      	ldr	r2, [r4, #8]
 800c0aa:	6923      	ldr	r3, [r4, #16]
 800c0ac:	7da0      	ldrb	r0, [r4, #22]
 800c0ae:	f884 8015 	strb.w	r8, [r4, #21]
 800c0b2:	1b92      	subs	r2, r2, r6
 800c0b4:	1b9b      	subs	r3, r3, r6
 800c0b6:	60a2      	str	r2, [r4, #8]
 800c0b8:	6123      	str	r3, [r4, #16]
 800c0ba:	f080 0001 	eor.w	r0, r0, #1
 800c0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	706b      	strb	r3, [r5, #1]
 800c0c8:	e7c2      	b.n	800c050 <ucdr_deserialize_uint16_t+0x58>
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	4632      	mov	r2, r6
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	f008 fdfd 	bl	8014cce <memcpy>
 800c0d4:	68a1      	ldr	r1, [r4, #8]
 800c0d6:	464a      	mov	r2, r9
 800c0d8:	19a8      	adds	r0, r5, r6
 800c0da:	f008 fdf8 	bl	8014cce <memcpy>
 800c0de:	e7b7      	b.n	800c050 <ucdr_deserialize_uint16_t+0x58>

0800c0e0 <ucdr_deserialize_endian_uint16_t>:
 800c0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e4:	460e      	mov	r6, r1
 800c0e6:	2102      	movs	r1, #2
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	4615      	mov	r5, r2
 800c0ec:	f000 fe10 	bl	800cd10 <ucdr_buffer_alignment>
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c0f8:	f000 fe4e 	bl	800cd98 <ucdr_advance_buffer>
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4620      	mov	r0, r4
 800c100:	f000 fda6 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c104:	bb70      	cbnz	r0, 800c164 <ucdr_deserialize_endian_uint16_t+0x84>
 800c106:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800c10a:	4547      	cmp	r7, r8
 800c10c:	d925      	bls.n	800c15a <ucdr_deserialize_endian_uint16_t+0x7a>
 800c10e:	6923      	ldr	r3, [r4, #16]
 800c110:	60a7      	str	r7, [r4, #8]
 800c112:	eba7 0708 	sub.w	r7, r7, r8
 800c116:	443b      	add	r3, r7
 800c118:	f1c7 0a02 	rsb	sl, r7, #2
 800c11c:	6123      	str	r3, [r4, #16]
 800c11e:	4651      	mov	r1, sl
 800c120:	4620      	mov	r0, r4
 800c122:	f000 fda1 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c126:	2800      	cmp	r0, #0
 800c128:	d034      	beq.n	800c194 <ucdr_deserialize_endian_uint16_t+0xb4>
 800c12a:	2e01      	cmp	r6, #1
 800c12c:	d043      	beq.n	800c1b6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800c12e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c132:	702b      	strb	r3, [r5, #0]
 800c134:	2f00      	cmp	r7, #0
 800c136:	d03a      	beq.n	800c1ae <ucdr_deserialize_endian_uint16_t+0xce>
 800c138:	f898 3000 	ldrb.w	r3, [r8]
 800c13c:	706b      	strb	r3, [r5, #1]
 800c13e:	6923      	ldr	r3, [r4, #16]
 800c140:	68a2      	ldr	r2, [r4, #8]
 800c142:	7da0      	ldrb	r0, [r4, #22]
 800c144:	2102      	movs	r1, #2
 800c146:	3302      	adds	r3, #2
 800c148:	4452      	add	r2, sl
 800c14a:	1bdb      	subs	r3, r3, r7
 800c14c:	7561      	strb	r1, [r4, #21]
 800c14e:	60a2      	str	r2, [r4, #8]
 800c150:	6123      	str	r3, [r4, #16]
 800c152:	f080 0001 	eor.w	r0, r0, #1
 800c156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15a:	2102      	movs	r1, #2
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fd83 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c162:	b178      	cbz	r0, 800c184 <ucdr_deserialize_endian_uint16_t+0xa4>
 800c164:	2e01      	cmp	r6, #1
 800c166:	68a3      	ldr	r3, [r4, #8]
 800c168:	d011      	beq.n	800c18e <ucdr_deserialize_endian_uint16_t+0xae>
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	702b      	strb	r3, [r5, #0]
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	706b      	strb	r3, [r5, #1]
 800c174:	68a2      	ldr	r2, [r4, #8]
 800c176:	6923      	ldr	r3, [r4, #16]
 800c178:	3202      	adds	r2, #2
 800c17a:	3302      	adds	r3, #2
 800c17c:	2102      	movs	r1, #2
 800c17e:	60a2      	str	r2, [r4, #8]
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	7561      	strb	r1, [r4, #21]
 800c184:	7da0      	ldrb	r0, [r4, #22]
 800c186:	f080 0001 	eor.w	r0, r0, #1
 800c18a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18e:	881b      	ldrh	r3, [r3, #0]
 800c190:	802b      	strh	r3, [r5, #0]
 800c192:	e7ef      	b.n	800c174 <ucdr_deserialize_endian_uint16_t+0x94>
 800c194:	68a2      	ldr	r2, [r4, #8]
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	7da0      	ldrb	r0, [r4, #22]
 800c19a:	f884 9015 	strb.w	r9, [r4, #21]
 800c19e:	1bd2      	subs	r2, r2, r7
 800c1a0:	1bdb      	subs	r3, r3, r7
 800c1a2:	60a2      	str	r2, [r4, #8]
 800c1a4:	6123      	str	r3, [r4, #16]
 800c1a6:	f080 0001 	eor.w	r0, r0, #1
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	706b      	strb	r3, [r5, #1]
 800c1b4:	e7c3      	b.n	800c13e <ucdr_deserialize_endian_uint16_t+0x5e>
 800c1b6:	4641      	mov	r1, r8
 800c1b8:	463a      	mov	r2, r7
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f008 fd87 	bl	8014cce <memcpy>
 800c1c0:	68a1      	ldr	r1, [r4, #8]
 800c1c2:	4652      	mov	r2, sl
 800c1c4:	19e8      	adds	r0, r5, r7
 800c1c6:	f008 fd82 	bl	8014cce <memcpy>
 800c1ca:	e7b8      	b.n	800c13e <ucdr_deserialize_endian_uint16_t+0x5e>

0800c1cc <ucdr_serialize_uint32_t>:
 800c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1d0:	b082      	sub	sp, #8
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	9101      	str	r1, [sp, #4]
 800c1d6:	2104      	movs	r1, #4
 800c1d8:	f000 fd9a 	bl	800cd10 <ucdr_buffer_alignment>
 800c1dc:	4601      	mov	r1, r0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	7d67      	ldrb	r7, [r4, #21]
 800c1e2:	f000 fdd9 	bl	800cd98 <ucdr_advance_buffer>
 800c1e6:	2104      	movs	r1, #4
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	f000 fd31 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c1ee:	2800      	cmp	r0, #0
 800c1f0:	d139      	bne.n	800c266 <ucdr_serialize_uint32_t+0x9a>
 800c1f2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c1f6:	42ab      	cmp	r3, r5
 800c1f8:	d930      	bls.n	800c25c <ucdr_serialize_uint32_t+0x90>
 800c1fa:	1b5e      	subs	r6, r3, r5
 800c1fc:	60a3      	str	r3, [r4, #8]
 800c1fe:	6923      	ldr	r3, [r4, #16]
 800c200:	f1c6 0804 	rsb	r8, r6, #4
 800c204:	4433      	add	r3, r6
 800c206:	6123      	str	r3, [r4, #16]
 800c208:	4641      	mov	r1, r8
 800c20a:	4620      	mov	r0, r4
 800c20c:	f000 fd2c 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c210:	2800      	cmp	r0, #0
 800c212:	d04c      	beq.n	800c2ae <ucdr_serialize_uint32_t+0xe2>
 800c214:	7d23      	ldrb	r3, [r4, #20]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d063      	beq.n	800c2e2 <ucdr_serialize_uint32_t+0x116>
 800c21a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c21e:	702b      	strb	r3, [r5, #0]
 800c220:	2e00      	cmp	r6, #0
 800c222:	d051      	beq.n	800c2c8 <ucdr_serialize_uint32_t+0xfc>
 800c224:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c228:	706b      	strb	r3, [r5, #1]
 800c22a:	2e01      	cmp	r6, #1
 800c22c:	d050      	beq.n	800c2d0 <ucdr_serialize_uint32_t+0x104>
 800c22e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c232:	70ab      	strb	r3, [r5, #2]
 800c234:	2e02      	cmp	r6, #2
 800c236:	d04f      	beq.n	800c2d8 <ucdr_serialize_uint32_t+0x10c>
 800c238:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c23c:	70eb      	strb	r3, [r5, #3]
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	68a2      	ldr	r2, [r4, #8]
 800c242:	7da0      	ldrb	r0, [r4, #22]
 800c244:	3304      	adds	r3, #4
 800c246:	1b9e      	subs	r6, r3, r6
 800c248:	4442      	add	r2, r8
 800c24a:	2304      	movs	r3, #4
 800c24c:	f080 0001 	eor.w	r0, r0, #1
 800c250:	60a2      	str	r2, [r4, #8]
 800c252:	6126      	str	r6, [r4, #16]
 800c254:	7563      	strb	r3, [r4, #21]
 800c256:	b002      	add	sp, #8
 800c258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c25c:	2104      	movs	r1, #4
 800c25e:	4620      	mov	r0, r4
 800c260:	f000 fd02 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c264:	b1d0      	cbz	r0, 800c29c <ucdr_serialize_uint32_t+0xd0>
 800c266:	7d23      	ldrb	r3, [r4, #20]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	d01c      	beq.n	800c2a8 <ucdr_serialize_uint32_t+0xdc>
 800c26e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	68a3      	ldr	r3, [r4, #8]
 800c276:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c27a:	705a      	strb	r2, [r3, #1]
 800c27c:	68a3      	ldr	r3, [r4, #8]
 800c27e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c282:	709a      	strb	r2, [r3, #2]
 800c284:	68a3      	ldr	r3, [r4, #8]
 800c286:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c28a:	70da      	strb	r2, [r3, #3]
 800c28c:	68a2      	ldr	r2, [r4, #8]
 800c28e:	6923      	ldr	r3, [r4, #16]
 800c290:	3204      	adds	r2, #4
 800c292:	3304      	adds	r3, #4
 800c294:	2104      	movs	r1, #4
 800c296:	60a2      	str	r2, [r4, #8]
 800c298:	6123      	str	r3, [r4, #16]
 800c29a:	7561      	strb	r1, [r4, #21]
 800c29c:	7da0      	ldrb	r0, [r4, #22]
 800c29e:	f080 0001 	eor.w	r0, r0, #1
 800c2a2:	b002      	add	sp, #8
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	9a01      	ldr	r2, [sp, #4]
 800c2aa:	601a      	str	r2, [r3, #0]
 800c2ac:	e7ee      	b.n	800c28c <ucdr_serialize_uint32_t+0xc0>
 800c2ae:	68a2      	ldr	r2, [r4, #8]
 800c2b0:	6923      	ldr	r3, [r4, #16]
 800c2b2:	7da0      	ldrb	r0, [r4, #22]
 800c2b4:	7567      	strb	r7, [r4, #21]
 800c2b6:	1b92      	subs	r2, r2, r6
 800c2b8:	1b9b      	subs	r3, r3, r6
 800c2ba:	f080 0001 	eor.w	r0, r0, #1
 800c2be:	60a2      	str	r2, [r4, #8]
 800c2c0:	6123      	str	r3, [r4, #16]
 800c2c2:	b002      	add	sp, #8
 800c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c8:	68a3      	ldr	r3, [r4, #8]
 800c2ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	68a3      	ldr	r3, [r4, #8]
 800c2d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c2d6:	701a      	strb	r2, [r3, #0]
 800c2d8:	68a3      	ldr	r3, [r4, #8]
 800c2da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c2de:	701a      	strb	r2, [r3, #0]
 800c2e0:	e7ad      	b.n	800c23e <ucdr_serialize_uint32_t+0x72>
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	ad01      	add	r5, sp, #4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4632      	mov	r2, r6
 800c2ea:	f008 fcf0 	bl	8014cce <memcpy>
 800c2ee:	68a0      	ldr	r0, [r4, #8]
 800c2f0:	4642      	mov	r2, r8
 800c2f2:	19a9      	adds	r1, r5, r6
 800c2f4:	f008 fceb 	bl	8014cce <memcpy>
 800c2f8:	e7a1      	b.n	800c23e <ucdr_serialize_uint32_t+0x72>
 800c2fa:	bf00      	nop

0800c2fc <ucdr_serialize_endian_uint32_t>:
 800c2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c300:	b083      	sub	sp, #12
 800c302:	460d      	mov	r5, r1
 800c304:	2104      	movs	r1, #4
 800c306:	4604      	mov	r4, r0
 800c308:	9201      	str	r2, [sp, #4]
 800c30a:	f000 fd01 	bl	800cd10 <ucdr_buffer_alignment>
 800c30e:	4601      	mov	r1, r0
 800c310:	4620      	mov	r0, r4
 800c312:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c316:	f000 fd3f 	bl	800cd98 <ucdr_advance_buffer>
 800c31a:	2104      	movs	r1, #4
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 fc97 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c322:	2800      	cmp	r0, #0
 800c324:	d138      	bne.n	800c398 <ucdr_serialize_endian_uint32_t+0x9c>
 800c326:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c32a:	42b7      	cmp	r7, r6
 800c32c:	d92f      	bls.n	800c38e <ucdr_serialize_endian_uint32_t+0x92>
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	60a7      	str	r7, [r4, #8]
 800c332:	1bbf      	subs	r7, r7, r6
 800c334:	443b      	add	r3, r7
 800c336:	f1c7 0904 	rsb	r9, r7, #4
 800c33a:	6123      	str	r3, [r4, #16]
 800c33c:	4649      	mov	r1, r9
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fc92 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c344:	2800      	cmp	r0, #0
 800c346:	d04a      	beq.n	800c3de <ucdr_serialize_endian_uint32_t+0xe2>
 800c348:	2d01      	cmp	r5, #1
 800c34a:	d063      	beq.n	800c414 <ucdr_serialize_endian_uint32_t+0x118>
 800c34c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c350:	7033      	strb	r3, [r6, #0]
 800c352:	2f00      	cmp	r7, #0
 800c354:	d051      	beq.n	800c3fa <ucdr_serialize_endian_uint32_t+0xfe>
 800c356:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c35a:	7073      	strb	r3, [r6, #1]
 800c35c:	2f01      	cmp	r7, #1
 800c35e:	d050      	beq.n	800c402 <ucdr_serialize_endian_uint32_t+0x106>
 800c360:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c364:	70b3      	strb	r3, [r6, #2]
 800c366:	2f02      	cmp	r7, #2
 800c368:	d04f      	beq.n	800c40a <ucdr_serialize_endian_uint32_t+0x10e>
 800c36a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c36e:	70f3      	strb	r3, [r6, #3]
 800c370:	6923      	ldr	r3, [r4, #16]
 800c372:	68a2      	ldr	r2, [r4, #8]
 800c374:	7da0      	ldrb	r0, [r4, #22]
 800c376:	3304      	adds	r3, #4
 800c378:	444a      	add	r2, r9
 800c37a:	1bdb      	subs	r3, r3, r7
 800c37c:	2104      	movs	r1, #4
 800c37e:	f080 0001 	eor.w	r0, r0, #1
 800c382:	60a2      	str	r2, [r4, #8]
 800c384:	6123      	str	r3, [r4, #16]
 800c386:	7561      	strb	r1, [r4, #21]
 800c388:	b003      	add	sp, #12
 800c38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c38e:	2104      	movs	r1, #4
 800c390:	4620      	mov	r0, r4
 800c392:	f000 fc69 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c396:	b1c8      	cbz	r0, 800c3cc <ucdr_serialize_endian_uint32_t+0xd0>
 800c398:	2d01      	cmp	r5, #1
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	d01c      	beq.n	800c3d8 <ucdr_serialize_endian_uint32_t+0xdc>
 800c39e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c3a2:	701a      	strb	r2, [r3, #0]
 800c3a4:	68a3      	ldr	r3, [r4, #8]
 800c3a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c3aa:	705a      	strb	r2, [r3, #1]
 800c3ac:	68a3      	ldr	r3, [r4, #8]
 800c3ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c3b2:	709a      	strb	r2, [r3, #2]
 800c3b4:	68a3      	ldr	r3, [r4, #8]
 800c3b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c3ba:	70da      	strb	r2, [r3, #3]
 800c3bc:	68a2      	ldr	r2, [r4, #8]
 800c3be:	6923      	ldr	r3, [r4, #16]
 800c3c0:	3204      	adds	r2, #4
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	2104      	movs	r1, #4
 800c3c6:	60a2      	str	r2, [r4, #8]
 800c3c8:	6123      	str	r3, [r4, #16]
 800c3ca:	7561      	strb	r1, [r4, #21]
 800c3cc:	7da0      	ldrb	r0, [r4, #22]
 800c3ce:	f080 0001 	eor.w	r0, r0, #1
 800c3d2:	b003      	add	sp, #12
 800c3d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3d8:	9a01      	ldr	r2, [sp, #4]
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	e7ee      	b.n	800c3bc <ucdr_serialize_endian_uint32_t+0xc0>
 800c3de:	68a2      	ldr	r2, [r4, #8]
 800c3e0:	6923      	ldr	r3, [r4, #16]
 800c3e2:	7da0      	ldrb	r0, [r4, #22]
 800c3e4:	f884 8015 	strb.w	r8, [r4, #21]
 800c3e8:	1bd2      	subs	r2, r2, r7
 800c3ea:	1bdb      	subs	r3, r3, r7
 800c3ec:	f080 0001 	eor.w	r0, r0, #1
 800c3f0:	60a2      	str	r2, [r4, #8]
 800c3f2:	6123      	str	r3, [r4, #16]
 800c3f4:	b003      	add	sp, #12
 800c3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3fa:	68a3      	ldr	r3, [r4, #8]
 800c3fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c400:	701a      	strb	r2, [r3, #0]
 800c402:	68a3      	ldr	r3, [r4, #8]
 800c404:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	68a3      	ldr	r3, [r4, #8]
 800c40c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c410:	701a      	strb	r2, [r3, #0]
 800c412:	e7ad      	b.n	800c370 <ucdr_serialize_endian_uint32_t+0x74>
 800c414:	ad01      	add	r5, sp, #4
 800c416:	4629      	mov	r1, r5
 800c418:	463a      	mov	r2, r7
 800c41a:	4630      	mov	r0, r6
 800c41c:	f008 fc57 	bl	8014cce <memcpy>
 800c420:	68a0      	ldr	r0, [r4, #8]
 800c422:	464a      	mov	r2, r9
 800c424:	19e9      	adds	r1, r5, r7
 800c426:	f008 fc52 	bl	8014cce <memcpy>
 800c42a:	e7a1      	b.n	800c370 <ucdr_serialize_endian_uint32_t+0x74>

0800c42c <ucdr_deserialize_uint32_t>:
 800c42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c430:	460d      	mov	r5, r1
 800c432:	2104      	movs	r1, #4
 800c434:	4604      	mov	r4, r0
 800c436:	f000 fc6b 	bl	800cd10 <ucdr_buffer_alignment>
 800c43a:	4601      	mov	r1, r0
 800c43c:	4620      	mov	r0, r4
 800c43e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c442:	f000 fca9 	bl	800cd98 <ucdr_advance_buffer>
 800c446:	2104      	movs	r1, #4
 800c448:	4620      	mov	r0, r4
 800c44a:	f000 fc01 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d138      	bne.n	800c4c4 <ucdr_deserialize_uint32_t+0x98>
 800c452:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800c456:	42b7      	cmp	r7, r6
 800c458:	d92f      	bls.n	800c4ba <ucdr_deserialize_uint32_t+0x8e>
 800c45a:	6923      	ldr	r3, [r4, #16]
 800c45c:	60a7      	str	r7, [r4, #8]
 800c45e:	1bbf      	subs	r7, r7, r6
 800c460:	443b      	add	r3, r7
 800c462:	f1c7 0904 	rsb	r9, r7, #4
 800c466:	6123      	str	r3, [r4, #16]
 800c468:	4649      	mov	r1, r9
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 fbfc 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c470:	2800      	cmp	r0, #0
 800c472:	d046      	beq.n	800c502 <ucdr_deserialize_uint32_t+0xd6>
 800c474:	7d23      	ldrb	r3, [r4, #20]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d05c      	beq.n	800c534 <ucdr_deserialize_uint32_t+0x108>
 800c47a:	78f3      	ldrb	r3, [r6, #3]
 800c47c:	702b      	strb	r3, [r5, #0]
 800c47e:	2f00      	cmp	r7, #0
 800c480:	d04c      	beq.n	800c51c <ucdr_deserialize_uint32_t+0xf0>
 800c482:	78b3      	ldrb	r3, [r6, #2]
 800c484:	706b      	strb	r3, [r5, #1]
 800c486:	2f01      	cmp	r7, #1
 800c488:	f105 0302 	add.w	r3, r5, #2
 800c48c:	d04a      	beq.n	800c524 <ucdr_deserialize_uint32_t+0xf8>
 800c48e:	7873      	ldrb	r3, [r6, #1]
 800c490:	70ab      	strb	r3, [r5, #2]
 800c492:	2f02      	cmp	r7, #2
 800c494:	f105 0303 	add.w	r3, r5, #3
 800c498:	d048      	beq.n	800c52c <ucdr_deserialize_uint32_t+0x100>
 800c49a:	7833      	ldrb	r3, [r6, #0]
 800c49c:	70eb      	strb	r3, [r5, #3]
 800c49e:	6923      	ldr	r3, [r4, #16]
 800c4a0:	68a2      	ldr	r2, [r4, #8]
 800c4a2:	7da0      	ldrb	r0, [r4, #22]
 800c4a4:	2104      	movs	r1, #4
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	444a      	add	r2, r9
 800c4aa:	1bdb      	subs	r3, r3, r7
 800c4ac:	7561      	strb	r1, [r4, #21]
 800c4ae:	60a2      	str	r2, [r4, #8]
 800c4b0:	6123      	str	r3, [r4, #16]
 800c4b2:	f080 0001 	eor.w	r0, r0, #1
 800c4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 fbd3 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c4c2:	b1b0      	cbz	r0, 800c4f2 <ucdr_deserialize_uint32_t+0xc6>
 800c4c4:	7d23      	ldrb	r3, [r4, #20]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	d017      	beq.n	800c4fc <ucdr_deserialize_uint32_t+0xd0>
 800c4cc:	78db      	ldrb	r3, [r3, #3]
 800c4ce:	702b      	strb	r3, [r5, #0]
 800c4d0:	68a3      	ldr	r3, [r4, #8]
 800c4d2:	789b      	ldrb	r3, [r3, #2]
 800c4d4:	706b      	strb	r3, [r5, #1]
 800c4d6:	68a3      	ldr	r3, [r4, #8]
 800c4d8:	785b      	ldrb	r3, [r3, #1]
 800c4da:	70ab      	strb	r3, [r5, #2]
 800c4dc:	68a3      	ldr	r3, [r4, #8]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	70eb      	strb	r3, [r5, #3]
 800c4e2:	68a2      	ldr	r2, [r4, #8]
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	3204      	adds	r2, #4
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	2104      	movs	r1, #4
 800c4ec:	60a2      	str	r2, [r4, #8]
 800c4ee:	6123      	str	r3, [r4, #16]
 800c4f0:	7561      	strb	r1, [r4, #21]
 800c4f2:	7da0      	ldrb	r0, [r4, #22]
 800c4f4:	f080 0001 	eor.w	r0, r0, #1
 800c4f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	602b      	str	r3, [r5, #0]
 800c500:	e7ef      	b.n	800c4e2 <ucdr_deserialize_uint32_t+0xb6>
 800c502:	68a2      	ldr	r2, [r4, #8]
 800c504:	6923      	ldr	r3, [r4, #16]
 800c506:	7da0      	ldrb	r0, [r4, #22]
 800c508:	f884 8015 	strb.w	r8, [r4, #21]
 800c50c:	1bd2      	subs	r2, r2, r7
 800c50e:	1bdb      	subs	r3, r3, r7
 800c510:	60a2      	str	r2, [r4, #8]
 800c512:	6123      	str	r3, [r4, #16]
 800c514:	f080 0001 	eor.w	r0, r0, #1
 800c518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c51c:	68a3      	ldr	r3, [r4, #8]
 800c51e:	789b      	ldrb	r3, [r3, #2]
 800c520:	706b      	strb	r3, [r5, #1]
 800c522:	1cab      	adds	r3, r5, #2
 800c524:	68a2      	ldr	r2, [r4, #8]
 800c526:	7852      	ldrb	r2, [r2, #1]
 800c528:	f803 2b01 	strb.w	r2, [r3], #1
 800c52c:	68a2      	ldr	r2, [r4, #8]
 800c52e:	7812      	ldrb	r2, [r2, #0]
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	e7b4      	b.n	800c49e <ucdr_deserialize_uint32_t+0x72>
 800c534:	4631      	mov	r1, r6
 800c536:	463a      	mov	r2, r7
 800c538:	4628      	mov	r0, r5
 800c53a:	f008 fbc8 	bl	8014cce <memcpy>
 800c53e:	68a1      	ldr	r1, [r4, #8]
 800c540:	464a      	mov	r2, r9
 800c542:	19e8      	adds	r0, r5, r7
 800c544:	f008 fbc3 	bl	8014cce <memcpy>
 800c548:	e7a9      	b.n	800c49e <ucdr_deserialize_uint32_t+0x72>
 800c54a:	bf00      	nop

0800c54c <ucdr_deserialize_endian_uint32_t>:
 800c54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c550:	460e      	mov	r6, r1
 800c552:	2104      	movs	r1, #4
 800c554:	4604      	mov	r4, r0
 800c556:	4615      	mov	r5, r2
 800c558:	f000 fbda 	bl	800cd10 <ucdr_buffer_alignment>
 800c55c:	4601      	mov	r1, r0
 800c55e:	4620      	mov	r0, r4
 800c560:	f894 9015 	ldrb.w	r9, [r4, #21]
 800c564:	f000 fc18 	bl	800cd98 <ucdr_advance_buffer>
 800c568:	2104      	movs	r1, #4
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fb70 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c570:	2800      	cmp	r0, #0
 800c572:	d13c      	bne.n	800c5ee <ucdr_deserialize_endian_uint32_t+0xa2>
 800c574:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800c578:	42bb      	cmp	r3, r7
 800c57a:	d933      	bls.n	800c5e4 <ucdr_deserialize_endian_uint32_t+0x98>
 800c57c:	eba3 0807 	sub.w	r8, r3, r7
 800c580:	60a3      	str	r3, [r4, #8]
 800c582:	6923      	ldr	r3, [r4, #16]
 800c584:	f1c8 0a04 	rsb	sl, r8, #4
 800c588:	4443      	add	r3, r8
 800c58a:	6123      	str	r3, [r4, #16]
 800c58c:	4651      	mov	r1, sl
 800c58e:	4620      	mov	r0, r4
 800c590:	f000 fb6a 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c594:	2800      	cmp	r0, #0
 800c596:	d048      	beq.n	800c62a <ucdr_deserialize_endian_uint32_t+0xde>
 800c598:	2e01      	cmp	r6, #1
 800c59a:	d061      	beq.n	800c660 <ucdr_deserialize_endian_uint32_t+0x114>
 800c59c:	78fb      	ldrb	r3, [r7, #3]
 800c59e:	702b      	strb	r3, [r5, #0]
 800c5a0:	f1b8 0f00 	cmp.w	r8, #0
 800c5a4:	d050      	beq.n	800c648 <ucdr_deserialize_endian_uint32_t+0xfc>
 800c5a6:	78bb      	ldrb	r3, [r7, #2]
 800c5a8:	706b      	strb	r3, [r5, #1]
 800c5aa:	f1b8 0f01 	cmp.w	r8, #1
 800c5ae:	f105 0302 	add.w	r3, r5, #2
 800c5b2:	d04d      	beq.n	800c650 <ucdr_deserialize_endian_uint32_t+0x104>
 800c5b4:	787b      	ldrb	r3, [r7, #1]
 800c5b6:	70ab      	strb	r3, [r5, #2]
 800c5b8:	f1b8 0f02 	cmp.w	r8, #2
 800c5bc:	f105 0303 	add.w	r3, r5, #3
 800c5c0:	d04a      	beq.n	800c658 <ucdr_deserialize_endian_uint32_t+0x10c>
 800c5c2:	783b      	ldrb	r3, [r7, #0]
 800c5c4:	70eb      	strb	r3, [r5, #3]
 800c5c6:	6923      	ldr	r3, [r4, #16]
 800c5c8:	68a2      	ldr	r2, [r4, #8]
 800c5ca:	7da0      	ldrb	r0, [r4, #22]
 800c5cc:	2104      	movs	r1, #4
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4452      	add	r2, sl
 800c5d2:	eba3 0308 	sub.w	r3, r3, r8
 800c5d6:	7561      	strb	r1, [r4, #21]
 800c5d8:	60a2      	str	r2, [r4, #8]
 800c5da:	6123      	str	r3, [r4, #16]
 800c5dc:	f080 0001 	eor.w	r0, r0, #1
 800c5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e4:	2104      	movs	r1, #4
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 fb3e 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c5ec:	b1a8      	cbz	r0, 800c61a <ucdr_deserialize_endian_uint32_t+0xce>
 800c5ee:	2e01      	cmp	r6, #1
 800c5f0:	68a3      	ldr	r3, [r4, #8]
 800c5f2:	d017      	beq.n	800c624 <ucdr_deserialize_endian_uint32_t+0xd8>
 800c5f4:	78db      	ldrb	r3, [r3, #3]
 800c5f6:	702b      	strb	r3, [r5, #0]
 800c5f8:	68a3      	ldr	r3, [r4, #8]
 800c5fa:	789b      	ldrb	r3, [r3, #2]
 800c5fc:	706b      	strb	r3, [r5, #1]
 800c5fe:	68a3      	ldr	r3, [r4, #8]
 800c600:	785b      	ldrb	r3, [r3, #1]
 800c602:	70ab      	strb	r3, [r5, #2]
 800c604:	68a3      	ldr	r3, [r4, #8]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	70eb      	strb	r3, [r5, #3]
 800c60a:	68a2      	ldr	r2, [r4, #8]
 800c60c:	6923      	ldr	r3, [r4, #16]
 800c60e:	3204      	adds	r2, #4
 800c610:	3304      	adds	r3, #4
 800c612:	2104      	movs	r1, #4
 800c614:	60a2      	str	r2, [r4, #8]
 800c616:	6123      	str	r3, [r4, #16]
 800c618:	7561      	strb	r1, [r4, #21]
 800c61a:	7da0      	ldrb	r0, [r4, #22]
 800c61c:	f080 0001 	eor.w	r0, r0, #1
 800c620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	602b      	str	r3, [r5, #0]
 800c628:	e7ef      	b.n	800c60a <ucdr_deserialize_endian_uint32_t+0xbe>
 800c62a:	68a2      	ldr	r2, [r4, #8]
 800c62c:	6923      	ldr	r3, [r4, #16]
 800c62e:	7da0      	ldrb	r0, [r4, #22]
 800c630:	f884 9015 	strb.w	r9, [r4, #21]
 800c634:	eba2 0208 	sub.w	r2, r2, r8
 800c638:	eba3 0308 	sub.w	r3, r3, r8
 800c63c:	60a2      	str	r2, [r4, #8]
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	f080 0001 	eor.w	r0, r0, #1
 800c644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c648:	68a3      	ldr	r3, [r4, #8]
 800c64a:	789b      	ldrb	r3, [r3, #2]
 800c64c:	706b      	strb	r3, [r5, #1]
 800c64e:	1cab      	adds	r3, r5, #2
 800c650:	68a2      	ldr	r2, [r4, #8]
 800c652:	7852      	ldrb	r2, [r2, #1]
 800c654:	f803 2b01 	strb.w	r2, [r3], #1
 800c658:	68a2      	ldr	r2, [r4, #8]
 800c65a:	7812      	ldrb	r2, [r2, #0]
 800c65c:	701a      	strb	r2, [r3, #0]
 800c65e:	e7b2      	b.n	800c5c6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800c660:	4639      	mov	r1, r7
 800c662:	4642      	mov	r2, r8
 800c664:	4628      	mov	r0, r5
 800c666:	f008 fb32 	bl	8014cce <memcpy>
 800c66a:	68a1      	ldr	r1, [r4, #8]
 800c66c:	4652      	mov	r2, sl
 800c66e:	eb05 0008 	add.w	r0, r5, r8
 800c672:	f008 fb2c 	bl	8014cce <memcpy>
 800c676:	e7a6      	b.n	800c5c6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800c678 <ucdr_serialize_uint64_t>:
 800c678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c67c:	2108      	movs	r1, #8
 800c67e:	b082      	sub	sp, #8
 800c680:	4604      	mov	r4, r0
 800c682:	e9cd 2300 	strd	r2, r3, [sp]
 800c686:	f000 fb43 	bl	800cd10 <ucdr_buffer_alignment>
 800c68a:	4601      	mov	r1, r0
 800c68c:	4620      	mov	r0, r4
 800c68e:	7d67      	ldrb	r7, [r4, #21]
 800c690:	f000 fb82 	bl	800cd98 <ucdr_advance_buffer>
 800c694:	2108      	movs	r1, #8
 800c696:	4620      	mov	r0, r4
 800c698:	f000 fada 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d14e      	bne.n	800c73e <ucdr_serialize_uint64_t+0xc6>
 800c6a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c6a4:	42ab      	cmp	r3, r5
 800c6a6:	d945      	bls.n	800c734 <ucdr_serialize_uint64_t+0xbc>
 800c6a8:	1b5e      	subs	r6, r3, r5
 800c6aa:	60a3      	str	r3, [r4, #8]
 800c6ac:	6923      	ldr	r3, [r4, #16]
 800c6ae:	f1c6 0808 	rsb	r8, r6, #8
 800c6b2:	4433      	add	r3, r6
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	4641      	mov	r1, r8
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 fad5 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d074      	beq.n	800c7ac <ucdr_serialize_uint64_t+0x134>
 800c6c2:	7d23      	ldrb	r3, [r4, #20]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	f000 809b 	beq.w	800c800 <ucdr_serialize_uint64_t+0x188>
 800c6ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c6ce:	702b      	strb	r3, [r5, #0]
 800c6d0:	2e00      	cmp	r6, #0
 800c6d2:	d078      	beq.n	800c7c6 <ucdr_serialize_uint64_t+0x14e>
 800c6d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c6d8:	706b      	strb	r3, [r5, #1]
 800c6da:	2e01      	cmp	r6, #1
 800c6dc:	d077      	beq.n	800c7ce <ucdr_serialize_uint64_t+0x156>
 800c6de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c6e2:	70ab      	strb	r3, [r5, #2]
 800c6e4:	2e02      	cmp	r6, #2
 800c6e6:	d076      	beq.n	800c7d6 <ucdr_serialize_uint64_t+0x15e>
 800c6e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c6ec:	70eb      	strb	r3, [r5, #3]
 800c6ee:	2e03      	cmp	r6, #3
 800c6f0:	d075      	beq.n	800c7de <ucdr_serialize_uint64_t+0x166>
 800c6f2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800c6f6:	712b      	strb	r3, [r5, #4]
 800c6f8:	2e04      	cmp	r6, #4
 800c6fa:	d074      	beq.n	800c7e6 <ucdr_serialize_uint64_t+0x16e>
 800c6fc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800c700:	716b      	strb	r3, [r5, #5]
 800c702:	2e05      	cmp	r6, #5
 800c704:	d073      	beq.n	800c7ee <ucdr_serialize_uint64_t+0x176>
 800c706:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800c70a:	71ab      	strb	r3, [r5, #6]
 800c70c:	2e06      	cmp	r6, #6
 800c70e:	d072      	beq.n	800c7f6 <ucdr_serialize_uint64_t+0x17e>
 800c710:	f89d 3000 	ldrb.w	r3, [sp]
 800c714:	71eb      	strb	r3, [r5, #7]
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	68a2      	ldr	r2, [r4, #8]
 800c71a:	7da0      	ldrb	r0, [r4, #22]
 800c71c:	3308      	adds	r3, #8
 800c71e:	1b9e      	subs	r6, r3, r6
 800c720:	4442      	add	r2, r8
 800c722:	2308      	movs	r3, #8
 800c724:	f080 0001 	eor.w	r0, r0, #1
 800c728:	60a2      	str	r2, [r4, #8]
 800c72a:	6126      	str	r6, [r4, #16]
 800c72c:	7563      	strb	r3, [r4, #21]
 800c72e:	b002      	add	sp, #8
 800c730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c734:	2108      	movs	r1, #8
 800c736:	4620      	mov	r0, r4
 800c738:	f000 fa96 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c73c:	b350      	cbz	r0, 800c794 <ucdr_serialize_uint64_t+0x11c>
 800c73e:	7d23      	ldrb	r3, [r4, #20]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d02d      	beq.n	800c7a0 <ucdr_serialize_uint64_t+0x128>
 800c744:	68a3      	ldr	r3, [r4, #8]
 800c746:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c74a:	701a      	strb	r2, [r3, #0]
 800c74c:	68a3      	ldr	r3, [r4, #8]
 800c74e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c752:	705a      	strb	r2, [r3, #1]
 800c754:	68a3      	ldr	r3, [r4, #8]
 800c756:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c75a:	709a      	strb	r2, [r3, #2]
 800c75c:	68a3      	ldr	r3, [r4, #8]
 800c75e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c762:	70da      	strb	r2, [r3, #3]
 800c764:	68a3      	ldr	r3, [r4, #8]
 800c766:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c76a:	711a      	strb	r2, [r3, #4]
 800c76c:	68a3      	ldr	r3, [r4, #8]
 800c76e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c772:	715a      	strb	r2, [r3, #5]
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c77a:	719a      	strb	r2, [r3, #6]
 800c77c:	68a3      	ldr	r3, [r4, #8]
 800c77e:	f89d 2000 	ldrb.w	r2, [sp]
 800c782:	71da      	strb	r2, [r3, #7]
 800c784:	68a2      	ldr	r2, [r4, #8]
 800c786:	6923      	ldr	r3, [r4, #16]
 800c788:	3208      	adds	r2, #8
 800c78a:	3308      	adds	r3, #8
 800c78c:	2108      	movs	r1, #8
 800c78e:	60a2      	str	r2, [r4, #8]
 800c790:	6123      	str	r3, [r4, #16]
 800c792:	7561      	strb	r1, [r4, #21]
 800c794:	7da0      	ldrb	r0, [r4, #22]
 800c796:	f080 0001 	eor.w	r0, r0, #1
 800c79a:	b002      	add	sp, #8
 800c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7a0:	466b      	mov	r3, sp
 800c7a2:	cb03      	ldmia	r3!, {r0, r1}
 800c7a4:	68a3      	ldr	r3, [r4, #8]
 800c7a6:	6018      	str	r0, [r3, #0]
 800c7a8:	6059      	str	r1, [r3, #4]
 800c7aa:	e7eb      	b.n	800c784 <ucdr_serialize_uint64_t+0x10c>
 800c7ac:	68a2      	ldr	r2, [r4, #8]
 800c7ae:	6923      	ldr	r3, [r4, #16]
 800c7b0:	7da0      	ldrb	r0, [r4, #22]
 800c7b2:	7567      	strb	r7, [r4, #21]
 800c7b4:	1b92      	subs	r2, r2, r6
 800c7b6:	1b9b      	subs	r3, r3, r6
 800c7b8:	f080 0001 	eor.w	r0, r0, #1
 800c7bc:	60a2      	str	r2, [r4, #8]
 800c7be:	6123      	str	r3, [r4, #16]
 800c7c0:	b002      	add	sp, #8
 800c7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7c6:	68a3      	ldr	r3, [r4, #8]
 800c7c8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c7cc:	701a      	strb	r2, [r3, #0]
 800c7ce:	68a3      	ldr	r3, [r4, #8]
 800c7d0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800c7d4:	701a      	strb	r2, [r3, #0]
 800c7d6:	68a3      	ldr	r3, [r4, #8]
 800c7d8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	68a3      	ldr	r3, [r4, #8]
 800c7e0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	68a3      	ldr	r3, [r4, #8]
 800c7e8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800c7ec:	701a      	strb	r2, [r3, #0]
 800c7ee:	68a3      	ldr	r3, [r4, #8]
 800c7f0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800c7f4:	701a      	strb	r2, [r3, #0]
 800c7f6:	68a3      	ldr	r3, [r4, #8]
 800c7f8:	f89d 2000 	ldrb.w	r2, [sp]
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e78a      	b.n	800c716 <ucdr_serialize_uint64_t+0x9e>
 800c800:	4628      	mov	r0, r5
 800c802:	466d      	mov	r5, sp
 800c804:	4629      	mov	r1, r5
 800c806:	4632      	mov	r2, r6
 800c808:	f008 fa61 	bl	8014cce <memcpy>
 800c80c:	68a0      	ldr	r0, [r4, #8]
 800c80e:	4642      	mov	r2, r8
 800c810:	19a9      	adds	r1, r5, r6
 800c812:	f008 fa5c 	bl	8014cce <memcpy>
 800c816:	e77e      	b.n	800c716 <ucdr_serialize_uint64_t+0x9e>

0800c818 <ucdr_serialize_int16_t>:
 800c818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	460b      	mov	r3, r1
 800c820:	2102      	movs	r1, #2
 800c822:	4604      	mov	r4, r0
 800c824:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c828:	f000 fa72 	bl	800cd10 <ucdr_buffer_alignment>
 800c82c:	4601      	mov	r1, r0
 800c82e:	4620      	mov	r0, r4
 800c830:	7d67      	ldrb	r7, [r4, #21]
 800c832:	f000 fab1 	bl	800cd98 <ucdr_advance_buffer>
 800c836:	2102      	movs	r1, #2
 800c838:	4620      	mov	r0, r4
 800c83a:	f000 fa09 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c83e:	bb78      	cbnz	r0, 800c8a0 <ucdr_serialize_int16_t+0x88>
 800c840:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800c844:	42ab      	cmp	r3, r5
 800c846:	d926      	bls.n	800c896 <ucdr_serialize_int16_t+0x7e>
 800c848:	1b5e      	subs	r6, r3, r5
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	f1c6 0802 	rsb	r8, r6, #2
 800c852:	4433      	add	r3, r6
 800c854:	6123      	str	r3, [r4, #16]
 800c856:	4641      	mov	r1, r8
 800c858:	4620      	mov	r0, r4
 800c85a:	f000 fa05 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d03b      	beq.n	800c8da <ucdr_serialize_int16_t+0xc2>
 800c862:	7d23      	ldrb	r3, [r4, #20]
 800c864:	2b01      	cmp	r3, #1
 800c866:	d04a      	beq.n	800c8fe <ucdr_serialize_int16_t+0xe6>
 800c868:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c86c:	702b      	strb	r3, [r5, #0]
 800c86e:	2e00      	cmp	r6, #0
 800c870:	d040      	beq.n	800c8f4 <ucdr_serialize_int16_t+0xdc>
 800c872:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c876:	706b      	strb	r3, [r5, #1]
 800c878:	6923      	ldr	r3, [r4, #16]
 800c87a:	68a2      	ldr	r2, [r4, #8]
 800c87c:	7da0      	ldrb	r0, [r4, #22]
 800c87e:	3302      	adds	r3, #2
 800c880:	1b9e      	subs	r6, r3, r6
 800c882:	4442      	add	r2, r8
 800c884:	2302      	movs	r3, #2
 800c886:	f080 0001 	eor.w	r0, r0, #1
 800c88a:	60a2      	str	r2, [r4, #8]
 800c88c:	6126      	str	r6, [r4, #16]
 800c88e:	7563      	strb	r3, [r4, #21]
 800c890:	b002      	add	sp, #8
 800c892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c896:	2102      	movs	r1, #2
 800c898:	4620      	mov	r0, r4
 800c89a:	f000 f9e5 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c89e:	b190      	cbz	r0, 800c8c6 <ucdr_serialize_int16_t+0xae>
 800c8a0:	7d23      	ldrb	r3, [r4, #20]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	68a3      	ldr	r3, [r4, #8]
 800c8a6:	d014      	beq.n	800c8d2 <ucdr_serialize_int16_t+0xba>
 800c8a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800c8ac:	701a      	strb	r2, [r3, #0]
 800c8ae:	68a3      	ldr	r3, [r4, #8]
 800c8b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8b4:	705a      	strb	r2, [r3, #1]
 800c8b6:	68a2      	ldr	r2, [r4, #8]
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	3202      	adds	r2, #2
 800c8bc:	3302      	adds	r3, #2
 800c8be:	2102      	movs	r1, #2
 800c8c0:	60a2      	str	r2, [r4, #8]
 800c8c2:	6123      	str	r3, [r4, #16]
 800c8c4:	7561      	strb	r1, [r4, #21]
 800c8c6:	7da0      	ldrb	r0, [r4, #22]
 800c8c8:	f080 0001 	eor.w	r0, r0, #1
 800c8cc:	b002      	add	sp, #8
 800c8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c8d6:	801a      	strh	r2, [r3, #0]
 800c8d8:	e7ed      	b.n	800c8b6 <ucdr_serialize_int16_t+0x9e>
 800c8da:	68a2      	ldr	r2, [r4, #8]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	7da0      	ldrb	r0, [r4, #22]
 800c8e0:	7567      	strb	r7, [r4, #21]
 800c8e2:	1b92      	subs	r2, r2, r6
 800c8e4:	1b9b      	subs	r3, r3, r6
 800c8e6:	f080 0001 	eor.w	r0, r0, #1
 800c8ea:	60a2      	str	r2, [r4, #8]
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	b002      	add	sp, #8
 800c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f4:	68a3      	ldr	r3, [r4, #8]
 800c8f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	e7bc      	b.n	800c878 <ucdr_serialize_int16_t+0x60>
 800c8fe:	4628      	mov	r0, r5
 800c900:	f10d 0506 	add.w	r5, sp, #6
 800c904:	4629      	mov	r1, r5
 800c906:	4632      	mov	r2, r6
 800c908:	f008 f9e1 	bl	8014cce <memcpy>
 800c90c:	68a0      	ldr	r0, [r4, #8]
 800c90e:	4642      	mov	r2, r8
 800c910:	19a9      	adds	r1, r5, r6
 800c912:	f008 f9dc 	bl	8014cce <memcpy>
 800c916:	e7af      	b.n	800c878 <ucdr_serialize_int16_t+0x60>

0800c918 <ucdr_deserialize_int16_t>:
 800c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	460d      	mov	r5, r1
 800c91e:	2102      	movs	r1, #2
 800c920:	4604      	mov	r4, r0
 800c922:	f000 f9f5 	bl	800cd10 <ucdr_buffer_alignment>
 800c926:	4601      	mov	r1, r0
 800c928:	4620      	mov	r0, r4
 800c92a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800c92e:	f000 fa33 	bl	800cd98 <ucdr_advance_buffer>
 800c932:	2102      	movs	r1, #2
 800c934:	4620      	mov	r0, r4
 800c936:	f000 f98b 	bl	800cc50 <ucdr_check_buffer_available_for>
 800c93a:	bb60      	cbnz	r0, 800c996 <ucdr_deserialize_int16_t+0x7e>
 800c93c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800c940:	42be      	cmp	r6, r7
 800c942:	d923      	bls.n	800c98c <ucdr_deserialize_int16_t+0x74>
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	60a6      	str	r6, [r4, #8]
 800c948:	1bf6      	subs	r6, r6, r7
 800c94a:	4433      	add	r3, r6
 800c94c:	f1c6 0902 	rsb	r9, r6, #2
 800c950:	6123      	str	r3, [r4, #16]
 800c952:	4649      	mov	r1, r9
 800c954:	4620      	mov	r0, r4
 800c956:	f000 f987 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d034      	beq.n	800c9c8 <ucdr_deserialize_int16_t+0xb0>
 800c95e:	7d23      	ldrb	r3, [r4, #20]
 800c960:	2b01      	cmp	r3, #1
 800c962:	d042      	beq.n	800c9ea <ucdr_deserialize_int16_t+0xd2>
 800c964:	787b      	ldrb	r3, [r7, #1]
 800c966:	702b      	strb	r3, [r5, #0]
 800c968:	2e00      	cmp	r6, #0
 800c96a:	d03a      	beq.n	800c9e2 <ucdr_deserialize_int16_t+0xca>
 800c96c:	783b      	ldrb	r3, [r7, #0]
 800c96e:	706b      	strb	r3, [r5, #1]
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	68a2      	ldr	r2, [r4, #8]
 800c974:	7da0      	ldrb	r0, [r4, #22]
 800c976:	2102      	movs	r1, #2
 800c978:	3302      	adds	r3, #2
 800c97a:	444a      	add	r2, r9
 800c97c:	1b9b      	subs	r3, r3, r6
 800c97e:	7561      	strb	r1, [r4, #21]
 800c980:	60a2      	str	r2, [r4, #8]
 800c982:	6123      	str	r3, [r4, #16]
 800c984:	f080 0001 	eor.w	r0, r0, #1
 800c988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c98c:	2102      	movs	r1, #2
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 f96a 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800c994:	b180      	cbz	r0, 800c9b8 <ucdr_deserialize_int16_t+0xa0>
 800c996:	7d23      	ldrb	r3, [r4, #20]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	68a3      	ldr	r3, [r4, #8]
 800c99c:	d011      	beq.n	800c9c2 <ucdr_deserialize_int16_t+0xaa>
 800c99e:	785b      	ldrb	r3, [r3, #1]
 800c9a0:	702b      	strb	r3, [r5, #0]
 800c9a2:	68a3      	ldr	r3, [r4, #8]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	706b      	strb	r3, [r5, #1]
 800c9a8:	68a2      	ldr	r2, [r4, #8]
 800c9aa:	6923      	ldr	r3, [r4, #16]
 800c9ac:	3202      	adds	r2, #2
 800c9ae:	3302      	adds	r3, #2
 800c9b0:	2102      	movs	r1, #2
 800c9b2:	60a2      	str	r2, [r4, #8]
 800c9b4:	6123      	str	r3, [r4, #16]
 800c9b6:	7561      	strb	r1, [r4, #21]
 800c9b8:	7da0      	ldrb	r0, [r4, #22]
 800c9ba:	f080 0001 	eor.w	r0, r0, #1
 800c9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	802b      	strh	r3, [r5, #0]
 800c9c6:	e7ef      	b.n	800c9a8 <ucdr_deserialize_int16_t+0x90>
 800c9c8:	68a2      	ldr	r2, [r4, #8]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	7da0      	ldrb	r0, [r4, #22]
 800c9ce:	f884 8015 	strb.w	r8, [r4, #21]
 800c9d2:	1b92      	subs	r2, r2, r6
 800c9d4:	1b9b      	subs	r3, r3, r6
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	f080 0001 	eor.w	r0, r0, #1
 800c9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e2:	68a3      	ldr	r3, [r4, #8]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	706b      	strb	r3, [r5, #1]
 800c9e8:	e7c2      	b.n	800c970 <ucdr_deserialize_int16_t+0x58>
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	f008 f96d 	bl	8014cce <memcpy>
 800c9f4:	68a1      	ldr	r1, [r4, #8]
 800c9f6:	464a      	mov	r2, r9
 800c9f8:	19a8      	adds	r0, r5, r6
 800c9fa:	f008 f968 	bl	8014cce <memcpy>
 800c9fe:	e7b7      	b.n	800c970 <ucdr_deserialize_int16_t+0x58>

0800ca00 <ucdr_serialize_int32_t>:
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	b082      	sub	sp, #8
 800ca06:	4604      	mov	r4, r0
 800ca08:	9101      	str	r1, [sp, #4]
 800ca0a:	2104      	movs	r1, #4
 800ca0c:	f000 f980 	bl	800cd10 <ucdr_buffer_alignment>
 800ca10:	4601      	mov	r1, r0
 800ca12:	4620      	mov	r0, r4
 800ca14:	7d67      	ldrb	r7, [r4, #21]
 800ca16:	f000 f9bf 	bl	800cd98 <ucdr_advance_buffer>
 800ca1a:	2104      	movs	r1, #4
 800ca1c:	4620      	mov	r0, r4
 800ca1e:	f000 f917 	bl	800cc50 <ucdr_check_buffer_available_for>
 800ca22:	2800      	cmp	r0, #0
 800ca24:	d139      	bne.n	800ca9a <ucdr_serialize_int32_t+0x9a>
 800ca26:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ca2a:	42ab      	cmp	r3, r5
 800ca2c:	d930      	bls.n	800ca90 <ucdr_serialize_int32_t+0x90>
 800ca2e:	1b5e      	subs	r6, r3, r5
 800ca30:	60a3      	str	r3, [r4, #8]
 800ca32:	6923      	ldr	r3, [r4, #16]
 800ca34:	f1c6 0804 	rsb	r8, r6, #4
 800ca38:	4433      	add	r3, r6
 800ca3a:	6123      	str	r3, [r4, #16]
 800ca3c:	4641      	mov	r1, r8
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f000 f912 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d04c      	beq.n	800cae2 <ucdr_serialize_int32_t+0xe2>
 800ca48:	7d23      	ldrb	r3, [r4, #20]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d063      	beq.n	800cb16 <ucdr_serialize_int32_t+0x116>
 800ca4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca52:	702b      	strb	r3, [r5, #0]
 800ca54:	2e00      	cmp	r6, #0
 800ca56:	d051      	beq.n	800cafc <ucdr_serialize_int32_t+0xfc>
 800ca58:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ca5c:	706b      	strb	r3, [r5, #1]
 800ca5e:	2e01      	cmp	r6, #1
 800ca60:	d050      	beq.n	800cb04 <ucdr_serialize_int32_t+0x104>
 800ca62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ca66:	70ab      	strb	r3, [r5, #2]
 800ca68:	2e02      	cmp	r6, #2
 800ca6a:	d04f      	beq.n	800cb0c <ucdr_serialize_int32_t+0x10c>
 800ca6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ca70:	70eb      	strb	r3, [r5, #3]
 800ca72:	6923      	ldr	r3, [r4, #16]
 800ca74:	68a2      	ldr	r2, [r4, #8]
 800ca76:	7da0      	ldrb	r0, [r4, #22]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	1b9e      	subs	r6, r3, r6
 800ca7c:	4442      	add	r2, r8
 800ca7e:	2304      	movs	r3, #4
 800ca80:	f080 0001 	eor.w	r0, r0, #1
 800ca84:	60a2      	str	r2, [r4, #8]
 800ca86:	6126      	str	r6, [r4, #16]
 800ca88:	7563      	strb	r3, [r4, #21]
 800ca8a:	b002      	add	sp, #8
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca90:	2104      	movs	r1, #4
 800ca92:	4620      	mov	r0, r4
 800ca94:	f000 f8e8 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800ca98:	b1d0      	cbz	r0, 800cad0 <ucdr_serialize_int32_t+0xd0>
 800ca9a:	7d23      	ldrb	r3, [r4, #20]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	68a3      	ldr	r3, [r4, #8]
 800caa0:	d01c      	beq.n	800cadc <ucdr_serialize_int32_t+0xdc>
 800caa2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800caa6:	701a      	strb	r2, [r3, #0]
 800caa8:	68a3      	ldr	r3, [r4, #8]
 800caaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800caae:	705a      	strb	r2, [r3, #1]
 800cab0:	68a3      	ldr	r3, [r4, #8]
 800cab2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cab6:	709a      	strb	r2, [r3, #2]
 800cab8:	68a3      	ldr	r3, [r4, #8]
 800caba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cabe:	70da      	strb	r2, [r3, #3]
 800cac0:	68a2      	ldr	r2, [r4, #8]
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	3204      	adds	r2, #4
 800cac6:	3304      	adds	r3, #4
 800cac8:	2104      	movs	r1, #4
 800caca:	60a2      	str	r2, [r4, #8]
 800cacc:	6123      	str	r3, [r4, #16]
 800cace:	7561      	strb	r1, [r4, #21]
 800cad0:	7da0      	ldrb	r0, [r4, #22]
 800cad2:	f080 0001 	eor.w	r0, r0, #1
 800cad6:	b002      	add	sp, #8
 800cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cadc:	9a01      	ldr	r2, [sp, #4]
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	e7ee      	b.n	800cac0 <ucdr_serialize_int32_t+0xc0>
 800cae2:	68a2      	ldr	r2, [r4, #8]
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	7da0      	ldrb	r0, [r4, #22]
 800cae8:	7567      	strb	r7, [r4, #21]
 800caea:	1b92      	subs	r2, r2, r6
 800caec:	1b9b      	subs	r3, r3, r6
 800caee:	f080 0001 	eor.w	r0, r0, #1
 800caf2:	60a2      	str	r2, [r4, #8]
 800caf4:	6123      	str	r3, [r4, #16]
 800caf6:	b002      	add	sp, #8
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	68a3      	ldr	r3, [r4, #8]
 800cafe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cb02:	701a      	strb	r2, [r3, #0]
 800cb04:	68a3      	ldr	r3, [r4, #8]
 800cb06:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800cb0a:	701a      	strb	r2, [r3, #0]
 800cb0c:	68a3      	ldr	r3, [r4, #8]
 800cb0e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cb12:	701a      	strb	r2, [r3, #0]
 800cb14:	e7ad      	b.n	800ca72 <ucdr_serialize_int32_t+0x72>
 800cb16:	4628      	mov	r0, r5
 800cb18:	ad01      	add	r5, sp, #4
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	f008 f8d6 	bl	8014cce <memcpy>
 800cb22:	68a0      	ldr	r0, [r4, #8]
 800cb24:	4642      	mov	r2, r8
 800cb26:	19a9      	adds	r1, r5, r6
 800cb28:	f008 f8d1 	bl	8014cce <memcpy>
 800cb2c:	e7a1      	b.n	800ca72 <ucdr_serialize_int32_t+0x72>
 800cb2e:	bf00      	nop

0800cb30 <ucdr_deserialize_int32_t>:
 800cb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb34:	460d      	mov	r5, r1
 800cb36:	2104      	movs	r1, #4
 800cb38:	4604      	mov	r4, r0
 800cb3a:	f000 f8e9 	bl	800cd10 <ucdr_buffer_alignment>
 800cb3e:	4601      	mov	r1, r0
 800cb40:	4620      	mov	r0, r4
 800cb42:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cb46:	f000 f927 	bl	800cd98 <ucdr_advance_buffer>
 800cb4a:	2104      	movs	r1, #4
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 f87f 	bl	800cc50 <ucdr_check_buffer_available_for>
 800cb52:	2800      	cmp	r0, #0
 800cb54:	d138      	bne.n	800cbc8 <ucdr_deserialize_int32_t+0x98>
 800cb56:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800cb5a:	42b7      	cmp	r7, r6
 800cb5c:	d92f      	bls.n	800cbbe <ucdr_deserialize_int32_t+0x8e>
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	60a7      	str	r7, [r4, #8]
 800cb62:	1bbf      	subs	r7, r7, r6
 800cb64:	443b      	add	r3, r7
 800cb66:	f1c7 0904 	rsb	r9, r7, #4
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	4649      	mov	r1, r9
 800cb6e:	4620      	mov	r0, r4
 800cb70:	f000 f87a 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d046      	beq.n	800cc06 <ucdr_deserialize_int32_t+0xd6>
 800cb78:	7d23      	ldrb	r3, [r4, #20]
 800cb7a:	2b01      	cmp	r3, #1
 800cb7c:	d05c      	beq.n	800cc38 <ucdr_deserialize_int32_t+0x108>
 800cb7e:	78f3      	ldrb	r3, [r6, #3]
 800cb80:	702b      	strb	r3, [r5, #0]
 800cb82:	2f00      	cmp	r7, #0
 800cb84:	d04c      	beq.n	800cc20 <ucdr_deserialize_int32_t+0xf0>
 800cb86:	78b3      	ldrb	r3, [r6, #2]
 800cb88:	706b      	strb	r3, [r5, #1]
 800cb8a:	2f01      	cmp	r7, #1
 800cb8c:	f105 0302 	add.w	r3, r5, #2
 800cb90:	d04a      	beq.n	800cc28 <ucdr_deserialize_int32_t+0xf8>
 800cb92:	7873      	ldrb	r3, [r6, #1]
 800cb94:	70ab      	strb	r3, [r5, #2]
 800cb96:	2f02      	cmp	r7, #2
 800cb98:	f105 0303 	add.w	r3, r5, #3
 800cb9c:	d048      	beq.n	800cc30 <ucdr_deserialize_int32_t+0x100>
 800cb9e:	7833      	ldrb	r3, [r6, #0]
 800cba0:	70eb      	strb	r3, [r5, #3]
 800cba2:	6923      	ldr	r3, [r4, #16]
 800cba4:	68a2      	ldr	r2, [r4, #8]
 800cba6:	7da0      	ldrb	r0, [r4, #22]
 800cba8:	2104      	movs	r1, #4
 800cbaa:	3304      	adds	r3, #4
 800cbac:	444a      	add	r2, r9
 800cbae:	1bdb      	subs	r3, r3, r7
 800cbb0:	7561      	strb	r1, [r4, #21]
 800cbb2:	60a2      	str	r2, [r4, #8]
 800cbb4:	6123      	str	r3, [r4, #16]
 800cbb6:	f080 0001 	eor.w	r0, r0, #1
 800cbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbbe:	2104      	movs	r1, #4
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f000 f851 	bl	800cc68 <ucdr_check_final_buffer_behavior>
 800cbc6:	b1b0      	cbz	r0, 800cbf6 <ucdr_deserialize_int32_t+0xc6>
 800cbc8:	7d23      	ldrb	r3, [r4, #20]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	68a3      	ldr	r3, [r4, #8]
 800cbce:	d017      	beq.n	800cc00 <ucdr_deserialize_int32_t+0xd0>
 800cbd0:	78db      	ldrb	r3, [r3, #3]
 800cbd2:	702b      	strb	r3, [r5, #0]
 800cbd4:	68a3      	ldr	r3, [r4, #8]
 800cbd6:	789b      	ldrb	r3, [r3, #2]
 800cbd8:	706b      	strb	r3, [r5, #1]
 800cbda:	68a3      	ldr	r3, [r4, #8]
 800cbdc:	785b      	ldrb	r3, [r3, #1]
 800cbde:	70ab      	strb	r3, [r5, #2]
 800cbe0:	68a3      	ldr	r3, [r4, #8]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	70eb      	strb	r3, [r5, #3]
 800cbe6:	68a2      	ldr	r2, [r4, #8]
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	3204      	adds	r2, #4
 800cbec:	3304      	adds	r3, #4
 800cbee:	2104      	movs	r1, #4
 800cbf0:	60a2      	str	r2, [r4, #8]
 800cbf2:	6123      	str	r3, [r4, #16]
 800cbf4:	7561      	strb	r1, [r4, #21]
 800cbf6:	7da0      	ldrb	r0, [r4, #22]
 800cbf8:	f080 0001 	eor.w	r0, r0, #1
 800cbfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	e7ef      	b.n	800cbe6 <ucdr_deserialize_int32_t+0xb6>
 800cc06:	68a2      	ldr	r2, [r4, #8]
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	7da0      	ldrb	r0, [r4, #22]
 800cc0c:	f884 8015 	strb.w	r8, [r4, #21]
 800cc10:	1bd2      	subs	r2, r2, r7
 800cc12:	1bdb      	subs	r3, r3, r7
 800cc14:	60a2      	str	r2, [r4, #8]
 800cc16:	6123      	str	r3, [r4, #16]
 800cc18:	f080 0001 	eor.w	r0, r0, #1
 800cc1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc20:	68a3      	ldr	r3, [r4, #8]
 800cc22:	789b      	ldrb	r3, [r3, #2]
 800cc24:	706b      	strb	r3, [r5, #1]
 800cc26:	1cab      	adds	r3, r5, #2
 800cc28:	68a2      	ldr	r2, [r4, #8]
 800cc2a:	7852      	ldrb	r2, [r2, #1]
 800cc2c:	f803 2b01 	strb.w	r2, [r3], #1
 800cc30:	68a2      	ldr	r2, [r4, #8]
 800cc32:	7812      	ldrb	r2, [r2, #0]
 800cc34:	701a      	strb	r2, [r3, #0]
 800cc36:	e7b4      	b.n	800cba2 <ucdr_deserialize_int32_t+0x72>
 800cc38:	4631      	mov	r1, r6
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f008 f846 	bl	8014cce <memcpy>
 800cc42:	68a1      	ldr	r1, [r4, #8]
 800cc44:	464a      	mov	r2, r9
 800cc46:	19e8      	adds	r0, r5, r7
 800cc48:	f008 f841 	bl	8014cce <memcpy>
 800cc4c:	e7a9      	b.n	800cba2 <ucdr_deserialize_int32_t+0x72>
 800cc4e:	bf00      	nop

0800cc50 <ucdr_check_buffer_available_for>:
 800cc50:	7d83      	ldrb	r3, [r0, #22]
 800cc52:	b93b      	cbnz	r3, 800cc64 <ucdr_check_buffer_available_for+0x14>
 800cc54:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800cc58:	4419      	add	r1, r3
 800cc5a:	4288      	cmp	r0, r1
 800cc5c:	bf34      	ite	cc
 800cc5e:	2000      	movcc	r0, #0
 800cc60:	2001      	movcs	r0, #1
 800cc62:	4770      	bx	lr
 800cc64:	2000      	movs	r0, #0
 800cc66:	4770      	bx	lr

0800cc68 <ucdr_check_final_buffer_behavior>:
 800cc68:	7d83      	ldrb	r3, [r0, #22]
 800cc6a:	b943      	cbnz	r3, 800cc7e <ucdr_check_final_buffer_behavior+0x16>
 800cc6c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800cc70:	4291      	cmp	r1, r2
 800cc72:	b510      	push	{r4, lr}
 800cc74:	4604      	mov	r4, r0
 800cc76:	d205      	bcs.n	800cc84 <ucdr_check_final_buffer_behavior+0x1c>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	bd10      	pop	{r4, pc}
 800cc7e:	2300      	movs	r3, #0
 800cc80:	4618      	mov	r0, r3
 800cc82:	4770      	bx	lr
 800cc84:	6982      	ldr	r2, [r0, #24]
 800cc86:	b13a      	cbz	r2, 800cc98 <ucdr_check_final_buffer_behavior+0x30>
 800cc88:	69c1      	ldr	r1, [r0, #28]
 800cc8a:	4790      	blx	r2
 800cc8c:	f080 0301 	eor.w	r3, r0, #1
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	75a0      	strb	r0, [r4, #22]
 800cc94:	4618      	mov	r0, r3
 800cc96:	bd10      	pop	{r4, pc}
 800cc98:	2001      	movs	r0, #1
 800cc9a:	75a0      	strb	r0, [r4, #22]
 800cc9c:	e7fa      	b.n	800cc94 <ucdr_check_final_buffer_behavior+0x2c>
 800cc9e:	bf00      	nop

0800cca0 <ucdr_set_on_full_buffer_callback>:
 800cca0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop

0800cca8 <ucdr_init_buffer_origin_offset_endian>:
 800cca8:	b410      	push	{r4}
 800ccaa:	9c01      	ldr	r4, [sp, #4]
 800ccac:	6001      	str	r1, [r0, #0]
 800ccae:	440a      	add	r2, r1
 800ccb0:	6042      	str	r2, [r0, #4]
 800ccb2:	190a      	adds	r2, r1, r4
 800ccb4:	441c      	add	r4, r3
 800ccb6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ccba:	6082      	str	r2, [r0, #8]
 800ccbc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ccc0:	7503      	strb	r3, [r0, #20]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800ccc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cccc:	7542      	strb	r2, [r0, #21]
 800ccce:	7582      	strb	r2, [r0, #22]
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop

0800ccd4 <ucdr_init_buffer_origin_offset>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	9c04      	ldr	r4, [sp, #16]
 800ccda:	9400      	str	r4, [sp, #0]
 800ccdc:	2401      	movs	r4, #1
 800ccde:	9401      	str	r4, [sp, #4]
 800cce0:	f7ff ffe2 	bl	800cca8 <ucdr_init_buffer_origin_offset_endian>
 800cce4:	b002      	add	sp, #8
 800cce6:	bd10      	pop	{r4, pc}

0800cce8 <ucdr_init_buffer_origin>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	b082      	sub	sp, #8
 800ccec:	2400      	movs	r4, #0
 800ccee:	9400      	str	r4, [sp, #0]
 800ccf0:	f7ff fff0 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800ccf4:	b002      	add	sp, #8
 800ccf6:	bd10      	pop	{r4, pc}

0800ccf8 <ucdr_init_buffer>:
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f7ff bff5 	b.w	800cce8 <ucdr_init_buffer_origin>
 800ccfe:	bf00      	nop

0800cd00 <ucdr_alignment>:
 800cd00:	fbb0 f3f1 	udiv	r3, r0, r1
 800cd04:	fb03 0011 	mls	r0, r3, r1, r0
 800cd08:	1a08      	subs	r0, r1, r0
 800cd0a:	3901      	subs	r1, #1
 800cd0c:	4008      	ands	r0, r1
 800cd0e:	4770      	bx	lr

0800cd10 <ucdr_buffer_alignment>:
 800cd10:	7d43      	ldrb	r3, [r0, #21]
 800cd12:	428b      	cmp	r3, r1
 800cd14:	d208      	bcs.n	800cd28 <ucdr_buffer_alignment+0x18>
 800cd16:	6900      	ldr	r0, [r0, #16]
 800cd18:	fbb0 f3f1 	udiv	r3, r0, r1
 800cd1c:	fb01 0013 	mls	r0, r1, r3, r0
 800cd20:	1a08      	subs	r0, r1, r0
 800cd22:	3901      	subs	r1, #1
 800cd24:	4008      	ands	r0, r1
 800cd26:	4770      	bx	lr
 800cd28:	2000      	movs	r0, #0
 800cd2a:	4770      	bx	lr

0800cd2c <ucdr_align_to>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	f7ff ffed 	bl	800cd10 <ucdr_buffer_alignment>
 800cd36:	68a3      	ldr	r3, [r4, #8]
 800cd38:	6921      	ldr	r1, [r4, #16]
 800cd3a:	7565      	strb	r5, [r4, #21]
 800cd3c:	181a      	adds	r2, r3, r0
 800cd3e:	6863      	ldr	r3, [r4, #4]
 800cd40:	4293      	cmp	r3, r2
 800cd42:	4408      	add	r0, r1
 800cd44:	bf28      	it	cs
 800cd46:	4613      	movcs	r3, r2
 800cd48:	6120      	str	r0, [r4, #16]
 800cd4a:	60a3      	str	r3, [r4, #8]
 800cd4c:	bd38      	pop	{r3, r4, r5, pc}
 800cd4e:	bf00      	nop

0800cd50 <ucdr_buffer_length>:
 800cd50:	6882      	ldr	r2, [r0, #8]
 800cd52:	6800      	ldr	r0, [r0, #0]
 800cd54:	1a10      	subs	r0, r2, r0
 800cd56:	4770      	bx	lr

0800cd58 <ucdr_buffer_remaining>:
 800cd58:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800cd5c:	1a10      	subs	r0, r2, r0
 800cd5e:	4770      	bx	lr

0800cd60 <ucdr_check_final_buffer_behavior_array>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	7d83      	ldrb	r3, [r0, #22]
 800cd64:	b963      	cbnz	r3, 800cd80 <ucdr_check_final_buffer_behavior_array+0x20>
 800cd66:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	4604      	mov	r4, r0
 800cd6e:	460d      	mov	r5, r1
 800cd70:	d308      	bcc.n	800cd84 <ucdr_check_final_buffer_behavior_array+0x24>
 800cd72:	b139      	cbz	r1, 800cd84 <ucdr_check_final_buffer_behavior_array+0x24>
 800cd74:	6983      	ldr	r3, [r0, #24]
 800cd76:	b163      	cbz	r3, 800cd92 <ucdr_check_final_buffer_behavior_array+0x32>
 800cd78:	69c1      	ldr	r1, [r0, #28]
 800cd7a:	4798      	blx	r3
 800cd7c:	75a0      	strb	r0, [r4, #22]
 800cd7e:	b108      	cbz	r0, 800cd84 <ucdr_check_final_buffer_behavior_array+0x24>
 800cd80:	2000      	movs	r0, #0
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	4620      	mov	r0, r4
 800cd86:	f7ff ffe7 	bl	800cd58 <ucdr_buffer_remaining>
 800cd8a:	42a8      	cmp	r0, r5
 800cd8c:	bf28      	it	cs
 800cd8e:	4628      	movcs	r0, r5
 800cd90:	bd38      	pop	{r3, r4, r5, pc}
 800cd92:	2301      	movs	r3, #1
 800cd94:	7583      	strb	r3, [r0, #22]
 800cd96:	e7f3      	b.n	800cd80 <ucdr_check_final_buffer_behavior_array+0x20>

0800cd98 <ucdr_advance_buffer>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4604      	mov	r4, r0
 800cd9c:	460d      	mov	r5, r1
 800cd9e:	f7ff ff57 	bl	800cc50 <ucdr_check_buffer_available_for>
 800cda2:	b178      	cbz	r0, 800cdc4 <ucdr_advance_buffer+0x2c>
 800cda4:	6923      	ldr	r3, [r4, #16]
 800cda6:	68a2      	ldr	r2, [r4, #8]
 800cda8:	442b      	add	r3, r5
 800cdaa:	6123      	str	r3, [r4, #16]
 800cdac:	2301      	movs	r3, #1
 800cdae:	442a      	add	r2, r5
 800cdb0:	7563      	strb	r3, [r4, #21]
 800cdb2:	60a2      	str	r2, [r4, #8]
 800cdb4:	bd38      	pop	{r3, r4, r5, pc}
 800cdb6:	68a2      	ldr	r2, [r4, #8]
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	4402      	add	r2, r0
 800cdbc:	4403      	add	r3, r0
 800cdbe:	1a2d      	subs	r5, r5, r0
 800cdc0:	60a2      	str	r2, [r4, #8]
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f7ff ffc9 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d1f1      	bne.n	800cdb6 <ucdr_advance_buffer+0x1e>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	7563      	strb	r3, [r4, #21]
 800cdd6:	bd38      	pop	{r3, r4, r5, pc}

0800cdd8 <uxr_buffer_delete_entity>:
 800cdd8:	b510      	push	{r4, lr}
 800cdda:	2300      	movs	r3, #0
 800cddc:	b08e      	sub	sp, #56	@ 0x38
 800cdde:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cde2:	2303      	movs	r3, #3
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	2204      	movs	r2, #4
 800cde8:	ab06      	add	r3, sp, #24
 800cdea:	4604      	mov	r4, r0
 800cdec:	9103      	str	r1, [sp, #12]
 800cdee:	f001 f86f 	bl	800ded0 <uxr_prepare_stream_to_write_submessage>
 800cdf2:	b918      	cbnz	r0, 800cdfc <uxr_buffer_delete_entity+0x24>
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	b00e      	add	sp, #56	@ 0x38
 800cdfa:	bd10      	pop	{r4, pc}
 800cdfc:	9902      	ldr	r1, [sp, #8]
 800cdfe:	aa05      	add	r2, sp, #20
 800ce00:	4620      	mov	r0, r4
 800ce02:	f001 f99b 	bl	800e13c <uxr_init_base_object_request>
 800ce06:	a905      	add	r1, sp, #20
 800ce08:	4604      	mov	r4, r0
 800ce0a:	a806      	add	r0, sp, #24
 800ce0c:	f002 fb00 	bl	800f410 <uxr_serialize_DELETE_Payload>
 800ce10:	4620      	mov	r0, r4
 800ce12:	b00e      	add	sp, #56	@ 0x38
 800ce14:	bd10      	pop	{r4, pc}
 800ce16:	bf00      	nop

0800ce18 <uxr_common_create_entity>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800ce1e:	b08c      	sub	sp, #48	@ 0x30
 800ce20:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ce24:	f1bc 0f01 	cmp.w	ip, #1
 800ce28:	bf0c      	ite	eq
 800ce2a:	f003 0201 	andeq.w	r2, r3, #1
 800ce2e:	2200      	movne	r2, #0
 800ce30:	330e      	adds	r3, #14
 800ce32:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800ce36:	9101      	str	r1, [sp, #4]
 800ce38:	441a      	add	r2, r3
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	9903      	ldr	r1, [sp, #12]
 800ce40:	ab04      	add	r3, sp, #16
 800ce42:	b292      	uxth	r2, r2
 800ce44:	4604      	mov	r4, r0
 800ce46:	f001 f843 	bl	800ded0 <uxr_prepare_stream_to_write_submessage>
 800ce4a:	b918      	cbnz	r0, 800ce54 <uxr_common_create_entity+0x3c>
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	4620      	mov	r0, r4
 800ce50:	b00c      	add	sp, #48	@ 0x30
 800ce52:	bd10      	pop	{r4, pc}
 800ce54:	9902      	ldr	r1, [sp, #8]
 800ce56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f001 f96f 	bl	800e13c <uxr_init_base_object_request>
 800ce5e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ce60:	4604      	mov	r4, r0
 800ce62:	a804      	add	r0, sp, #16
 800ce64:	f002 fa30 	bl	800f2c8 <uxr_serialize_CREATE_Payload>
 800ce68:	4620      	mov	r0, r4
 800ce6a:	b00c      	add	sp, #48	@ 0x30
 800ce6c:	bd10      	pop	{r4, pc}
 800ce6e:	bf00      	nop

0800ce70 <uxr_buffer_create_participant_bin>:
 800ce70:	b570      	push	{r4, r5, r6, lr}
 800ce72:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800ce76:	ac11      	add	r4, sp, #68	@ 0x44
 800ce78:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800ce82:	7223      	strb	r3, [r4, #8]
 800ce84:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800ce86:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	4605      	mov	r5, r0
 800ce90:	7122      	strb	r2, [r4, #4]
 800ce92:	f88d 1014 	strb.w	r1, [sp, #20]
 800ce96:	b1cb      	cbz	r3, 800cecc <uxr_buffer_create_participant_bin+0x5c>
 800ce98:	f88d 201c 	strb.w	r2, [sp, #28]
 800ce9c:	9308      	str	r3, [sp, #32]
 800ce9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cea2:	a915      	add	r1, sp, #84	@ 0x54
 800cea4:	a809      	add	r0, sp, #36	@ 0x24
 800cea6:	f7ff ff27 	bl	800ccf8 <ucdr_init_buffer>
 800ceaa:	a905      	add	r1, sp, #20
 800ceac:	a809      	add	r0, sp, #36	@ 0x24
 800ceae:	f001 fed9 	bl	800ec64 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800ceb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ceb4:	9600      	str	r6, [sp, #0]
 800ceb6:	9401      	str	r4, [sp, #4]
 800ceb8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cebc:	60e3      	str	r3, [r4, #12]
 800cebe:	4628      	mov	r0, r5
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	f7ff ffa9 	bl	800ce18 <uxr_common_create_entity>
 800cec6:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800ceca:	bd70      	pop	{r4, r5, r6, pc}
 800cecc:	f88d 301c 	strb.w	r3, [sp, #28]
 800ced0:	e7e5      	b.n	800ce9e <uxr_buffer_create_participant_bin+0x2e>
 800ced2:	bf00      	nop

0800ced4 <uxr_buffer_create_topic_bin>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800ceda:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cede:	9105      	str	r1, [sp, #20]
 800cee0:	4605      	mov	r5, r0
 800cee2:	a997      	add	r1, sp, #604	@ 0x25c
 800cee4:	4618      	mov	r0, r3
 800cee6:	2302      	movs	r3, #2
 800cee8:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800ceec:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800cef0:	f000 f8ee 	bl	800d0d0 <uxr_object_id_to_raw>
 800cef4:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800cef6:	9306      	str	r3, [sp, #24]
 800cef8:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800cefa:	930a      	str	r3, [sp, #40]	@ 0x28
 800cefc:	2303      	movs	r3, #3
 800cefe:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cf02:	2301      	movs	r3, #1
 800cf04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf08:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800cf0c:	a917      	add	r1, sp, #92	@ 0x5c
 800cf0e:	2300      	movs	r3, #0
 800cf10:	a80b      	add	r0, sp, #44	@ 0x2c
 800cf12:	f88d 301c 	strb.w	r3, [sp, #28]
 800cf16:	f7ff feef 	bl	800ccf8 <ucdr_init_buffer>
 800cf1a:	a906      	add	r1, sp, #24
 800cf1c:	a80b      	add	r0, sp, #44	@ 0x2c
 800cf1e:	f001 fec3 	bl	800eca8 <uxr_serialize_OBJK_Topic_Binary>
 800cf22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf24:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf26:	ac13      	add	r4, sp, #76	@ 0x4c
 800cf28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cf2c:	9600      	str	r6, [sp, #0]
 800cf2e:	9401      	str	r4, [sp, #4]
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4628      	mov	r0, r5
 800cf34:	f7ff ff70 	bl	800ce18 <uxr_common_create_entity>
 800cf38:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800cf3c:	bd70      	pop	{r4, r5, r6, pc}
 800cf3e:	bf00      	nop

0800cf40 <uxr_buffer_create_publisher_bin>:
 800cf40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf42:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800cf46:	4605      	mov	r5, r0
 800cf48:	9105      	str	r1, [sp, #20]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	2603      	movs	r6, #3
 800cf4e:	a992      	add	r1, sp, #584	@ 0x248
 800cf50:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cf54:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800cf58:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800cf5c:	f000 f8b8 	bl	800d0d0 <uxr_object_id_to_raw>
 800cf60:	2300      	movs	r3, #0
 800cf62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf66:	a912      	add	r1, sp, #72	@ 0x48
 800cf68:	a806      	add	r0, sp, #24
 800cf6a:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800cf6e:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800cf72:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800cf76:	f7ff febf 	bl	800ccf8 <ucdr_init_buffer>
 800cf7a:	a993      	add	r1, sp, #588	@ 0x24c
 800cf7c:	a806      	add	r0, sp, #24
 800cf7e:	f001 ff47 	bl	800ee10 <uxr_serialize_OBJK_Publisher_Binary>
 800cf82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf84:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf86:	ac0e      	add	r4, sp, #56	@ 0x38
 800cf88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800cf8c:	9700      	str	r7, [sp, #0]
 800cf8e:	9401      	str	r4, [sp, #4]
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	4628      	mov	r0, r5
 800cf94:	f7ff ff40 	bl	800ce18 <uxr_common_create_entity>
 800cf98:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800cf9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf9e:	bf00      	nop

0800cfa0 <uxr_buffer_create_datawriter_bin>:
 800cfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800cfa8:	ac1d      	add	r4, sp, #116	@ 0x74
 800cfaa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800cfae:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800cfb2:	9105      	str	r1, [sp, #20]
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	a9a1      	add	r1, sp, #644	@ 0x284
 800cfb8:	4618      	mov	r0, r3
 800cfba:	2305      	movs	r3, #5
 800cfbc:	7123      	strb	r3, [r4, #4]
 800cfbe:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800cfc2:	2703      	movs	r7, #3
 800cfc4:	f000 f884 	bl	800d0d0 <uxr_object_id_to_raw>
 800cfc8:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800cfca:	7227      	strb	r7, [r4, #8]
 800cfcc:	a90e      	add	r1, sp, #56	@ 0x38
 800cfce:	f000 f87f 	bl	800d0d0 <uxr_object_id_to_raw>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800cfd8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800cfdc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800cfe0:	3d00      	subs	r5, #0
 800cfe2:	bf18      	it	ne
 800cfe4:	2501      	movne	r5, #1
 800cfe6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800cfea:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800cfee:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800cff2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800cff6:	2301      	movs	r3, #1
 800cff8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800cffc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800d000:	bb8a      	cbnz	r2, 800d066 <uxr_buffer_create_datawriter_bin+0xc6>
 800d002:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d006:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800d00a:	f04f 0c13 	mov.w	ip, #19
 800d00e:	250b      	movs	r5, #11
 800d010:	2221      	movs	r2, #33	@ 0x21
 800d012:	2111      	movs	r1, #17
 800d014:	2009      	movs	r0, #9
 800d016:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800d01a:	b923      	cbnz	r3, 800d026 <uxr_buffer_create_datawriter_bin+0x86>
 800d01c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800d020:	4672      	mov	r2, lr
 800d022:	4661      	mov	r1, ip
 800d024:	4628      	mov	r0, r5
 800d026:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d025      	beq.n	800d07a <uxr_buffer_create_datawriter_bin+0xda>
 800d02e:	2b03      	cmp	r3, #3
 800d030:	d029      	beq.n	800d086 <uxr_buffer_create_datawriter_bin+0xe6>
 800d032:	b32b      	cbz	r3, 800d080 <uxr_buffer_create_datawriter_bin+0xe0>
 800d034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d038:	a921      	add	r1, sp, #132	@ 0x84
 800d03a:	a806      	add	r0, sp, #24
 800d03c:	f7ff fe5c 	bl	800ccf8 <ucdr_init_buffer>
 800d040:	a90e      	add	r1, sp, #56	@ 0x38
 800d042:	a806      	add	r0, sp, #24
 800d044:	f001 ff5a 	bl	800eefc <uxr_serialize_OBJK_DataWriter_Binary>
 800d048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d04a:	f8cd 8000 	str.w	r8, [sp]
 800d04e:	9401      	str	r4, [sp, #4]
 800d050:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d054:	60e3      	str	r3, [r4, #12]
 800d056:	4630      	mov	r0, r6
 800d058:	b29b      	uxth	r3, r3
 800d05a:	f7ff fedd 	bl	800ce18 <uxr_common_create_entity>
 800d05e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800d062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d066:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800d06a:	f04f 0c12 	mov.w	ip, #18
 800d06e:	250a      	movs	r5, #10
 800d070:	2220      	movs	r2, #32
 800d072:	2110      	movs	r1, #16
 800d074:	2008      	movs	r0, #8
 800d076:	2702      	movs	r7, #2
 800d078:	e7cd      	b.n	800d016 <uxr_buffer_create_datawriter_bin+0x76>
 800d07a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800d07e:	e7d9      	b.n	800d034 <uxr_buffer_create_datawriter_bin+0x94>
 800d080:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800d084:	e7d6      	b.n	800d034 <uxr_buffer_create_datawriter_bin+0x94>
 800d086:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800d08a:	e7d3      	b.n	800d034 <uxr_buffer_create_datawriter_bin+0x94>

0800d08c <uxr_object_id>:
 800d08c:	b082      	sub	sp, #8
 800d08e:	2300      	movs	r3, #0
 800d090:	f88d 1006 	strb.w	r1, [sp, #6]
 800d094:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d098:	f360 030f 	bfi	r3, r0, #0, #16
 800d09c:	f362 431f 	bfi	r3, r2, #16, #16
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	b002      	add	sp, #8
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop

0800d0a8 <uxr_object_id_from_raw>:
 800d0a8:	7843      	ldrb	r3, [r0, #1]
 800d0aa:	7801      	ldrb	r1, [r0, #0]
 800d0ac:	b082      	sub	sp, #8
 800d0ae:	f003 020f 	and.w	r2, r3, #15
 800d0b2:	f88d 2006 	strb.w	r2, [sp, #6]
 800d0b6:	091b      	lsrs	r3, r3, #4
 800d0b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d0bc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	f363 000f 	bfi	r0, r3, #0, #16
 800d0c6:	f362 401f 	bfi	r0, r2, #16, #16
 800d0ca:	b002      	add	sp, #8
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop

0800d0d0 <uxr_object_id_to_raw>:
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800d0dc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800d0e0:	f881 c000 	strb.w	ip, [r1]
 800d0e4:	7048      	strb	r0, [r1, #1]
 800d0e6:	b002      	add	sp, #8
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop

0800d0ec <on_get_fragmentation_info>:
 800d0ec:	b500      	push	{lr}
 800d0ee:	b08b      	sub	sp, #44	@ 0x2c
 800d0f0:	4601      	mov	r1, r0
 800d0f2:	2204      	movs	r2, #4
 800d0f4:	a802      	add	r0, sp, #8
 800d0f6:	f7ff fdff 	bl	800ccf8 <ucdr_init_buffer>
 800d0fa:	f10d 0305 	add.w	r3, sp, #5
 800d0fe:	f10d 0206 	add.w	r2, sp, #6
 800d102:	a901      	add	r1, sp, #4
 800d104:	a802      	add	r0, sp, #8
 800d106:	f001 f99b 	bl	800e440 <uxr_read_submessage_header>
 800d10a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d10e:	2b0d      	cmp	r3, #13
 800d110:	d003      	beq.n	800d11a <on_get_fragmentation_info+0x2e>
 800d112:	2000      	movs	r0, #0
 800d114:	b00b      	add	sp, #44	@ 0x2c
 800d116:	f85d fb04 	ldr.w	pc, [sp], #4
 800d11a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d11e:	f013 0f02 	tst.w	r3, #2
 800d122:	bf14      	ite	ne
 800d124:	2002      	movne	r0, #2
 800d126:	2001      	moveq	r0, #1
 800d128:	b00b      	add	sp, #44	@ 0x2c
 800d12a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d12e:	bf00      	nop

0800d130 <read_submessage_get_info>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	2500      	movs	r5, #0
 800d134:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800d138:	4604      	mov	r4, r0
 800d13a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800d13e:	460e      	mov	r6, r1
 800d140:	a810      	add	r0, sp, #64	@ 0x40
 800d142:	4629      	mov	r1, r5
 800d144:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800d148:	f007 fcf8 	bl	8014b3c <memset>
 800d14c:	a903      	add	r1, sp, #12
 800d14e:	4630      	mov	r0, r6
 800d150:	f002 f94a 	bl	800f3e8 <uxr_deserialize_GET_INFO_Payload>
 800d154:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d158:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800d15c:	4620      	mov	r0, r4
 800d15e:	f000 ffe5 	bl	800e12c <uxr_session_header_offset>
 800d162:	462b      	mov	r3, r5
 800d164:	9000      	str	r0, [sp, #0]
 800d166:	220c      	movs	r2, #12
 800d168:	a905      	add	r1, sp, #20
 800d16a:	a808      	add	r0, sp, #32
 800d16c:	f7ff fdb2 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800d170:	a910      	add	r1, sp, #64	@ 0x40
 800d172:	a808      	add	r0, sp, #32
 800d174:	f002 f9aa 	bl	800f4cc <uxr_serialize_INFO_Payload>
 800d178:	9b08      	ldr	r3, [sp, #32]
 800d17a:	462a      	mov	r2, r5
 800d17c:	4629      	mov	r1, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	f000 ff7e 	bl	800e080 <uxr_stamp_session_header>
 800d184:	a808      	add	r0, sp, #32
 800d186:	f7ff fde3 	bl	800cd50 <ucdr_buffer_length>
 800d18a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d18c:	4602      	mov	r2, r0
 800d18e:	a905      	add	r1, sp, #20
 800d190:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d194:	47a0      	blx	r4
 800d196:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800d19a:	bd70      	pop	{r4, r5, r6, pc}

0800d19c <write_submessage_acknack.isra.0>:
 800d19c:	b570      	push	{r4, r5, r6, lr}
 800d19e:	b092      	sub	sp, #72	@ 0x48
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	460e      	mov	r6, r1
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	f000 ffc1 	bl	800e12c <uxr_session_header_offset>
 800d1aa:	a905      	add	r1, sp, #20
 800d1ac:	9000      	str	r0, [sp, #0]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	a80a      	add	r0, sp, #40	@ 0x28
 800d1b2:	2211      	movs	r2, #17
 800d1b4:	f7ff fd8e 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800d1b8:	2218      	movs	r2, #24
 800d1ba:	fb02 5404 	mla	r4, r2, r4, r5
 800d1be:	2300      	movs	r3, #0
 800d1c0:	2205      	movs	r2, #5
 800d1c2:	3450      	adds	r4, #80	@ 0x50
 800d1c4:	210a      	movs	r1, #10
 800d1c6:	a80a      	add	r0, sp, #40	@ 0x28
 800d1c8:	f001 f920 	bl	800e40c <uxr_buffer_submessage_header>
 800d1cc:	a903      	add	r1, sp, #12
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f004 fdbe 	bl	8011d50 <uxr_compute_acknack>
 800d1d4:	ba40      	rev16	r0, r0
 800d1d6:	f8ad 000e 	strh.w	r0, [sp, #14]
 800d1da:	a903      	add	r1, sp, #12
 800d1dc:	a80a      	add	r0, sp, #40	@ 0x28
 800d1de:	f88d 6010 	strb.w	r6, [sp, #16]
 800d1e2:	f002 f9e3 	bl	800f5ac <uxr_serialize_ACKNACK_Payload>
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	f000 ff47 	bl	800e080 <uxr_stamp_session_header>
 800d1f2:	a80a      	add	r0, sp, #40	@ 0x28
 800d1f4:	f7ff fdac 	bl	800cd50 <ucdr_buffer_length>
 800d1f8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	a905      	add	r1, sp, #20
 800d1fe:	e9d3 0400 	ldrd	r0, r4, [r3]
 800d202:	47a0      	blx	r4
 800d204:	b012      	add	sp, #72	@ 0x48
 800d206:	bd70      	pop	{r4, r5, r6, pc}

0800d208 <uxr_init_session>:
 800d208:	b510      	push	{r4, lr}
 800d20a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800d240 <uxr_init_session+0x38>
 800d20e:	2300      	movs	r3, #0
 800d210:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800d214:	4604      	mov	r4, r0
 800d216:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800d21a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800d21e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800d222:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800d226:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800d22a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800d22e:	2181      	movs	r1, #129	@ 0x81
 800d230:	f000 fe92 	bl	800df58 <uxr_init_session_info>
 800d234:	f104 0008 	add.w	r0, r4, #8
 800d238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d23c:	f001 b802 	b.w	800e244 <uxr_init_stream_storage>
	...

0800d248 <uxr_set_status_callback>:
 800d248:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop

0800d250 <uxr_set_topic_callback>:
 800d250:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop

0800d258 <uxr_set_request_callback>:
 800d258:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop

0800d260 <uxr_set_reply_callback>:
 800d260:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800d264:	4770      	bx	lr
 800d266:	bf00      	nop

0800d268 <uxr_create_output_best_effort_stream>:
 800d268:	b510      	push	{r4, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	e9cd 2100 	strd	r2, r1, [sp]
 800d270:	4604      	mov	r4, r0
 800d272:	f000 ff5b 	bl	800e12c <uxr_session_header_offset>
 800d276:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d27a:	4603      	mov	r3, r0
 800d27c:	f104 0008 	add.w	r0, r4, #8
 800d280:	b004      	add	sp, #16
 800d282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d286:	f001 b827 	b.w	800e2d8 <uxr_add_output_best_effort_buffer>
 800d28a:	bf00      	nop

0800d28c <uxr_create_output_reliable_stream>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800d294:	4604      	mov	r4, r0
 800d296:	9303      	str	r3, [sp, #12]
 800d298:	f000 ff48 	bl	800e12c <uxr_session_header_offset>
 800d29c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d2a0:	9000      	str	r0, [sp, #0]
 800d2a2:	9905      	ldr	r1, [sp, #20]
 800d2a4:	f104 0008 	add.w	r0, r4, #8
 800d2a8:	f001 f82a 	bl	800e300 <uxr_add_output_reliable_buffer>
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	b2c3      	uxtb	r3, r0
 800d2b0:	f363 0207 	bfi	r2, r3, #0, #8
 800d2b4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d2b8:	f363 220f 	bfi	r2, r3, #8, #8
 800d2bc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d2c0:	f363 4217 	bfi	r2, r3, #16, #8
 800d2c4:	0e03      	lsrs	r3, r0, #24
 800d2c6:	f363 621f 	bfi	r2, r3, #24, #8
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	b008      	add	sp, #32
 800d2ce:	bd10      	pop	{r4, pc}

0800d2d0 <uxr_create_input_best_effort_stream>:
 800d2d0:	b082      	sub	sp, #8
 800d2d2:	3008      	adds	r0, #8
 800d2d4:	b002      	add	sp, #8
 800d2d6:	f001 b82d 	b.w	800e334 <uxr_add_input_best_effort_buffer>
 800d2da:	bf00      	nop

0800d2dc <uxr_create_input_reliable_stream>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	4c0b      	ldr	r4, [pc, #44]	@ (800d310 <uxr_create_input_reliable_stream+0x34>)
 800d2e2:	9400      	str	r4, [sp, #0]
 800d2e4:	3008      	adds	r0, #8
 800d2e6:	f001 f83b 	bl	800e360 <uxr_add_input_reliable_buffer>
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	b2c3      	uxtb	r3, r0
 800d2ee:	f363 0207 	bfi	r2, r3, #0, #8
 800d2f2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800d2f6:	f363 220f 	bfi	r2, r3, #8, #8
 800d2fa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800d2fe:	f363 4217 	bfi	r2, r3, #16, #8
 800d302:	0e03      	lsrs	r3, r0, #24
 800d304:	f363 621f 	bfi	r2, r3, #24, #8
 800d308:	4610      	mov	r0, r2
 800d30a:	b004      	add	sp, #16
 800d30c:	bd10      	pop	{r4, pc}
 800d30e:	bf00      	nop
 800d310:	0800d0ed 	.word	0x0800d0ed

0800d314 <uxr_epoch_nanos>:
 800d314:	b510      	push	{r4, lr}
 800d316:	4604      	mov	r4, r0
 800d318:	f001 f8d8 	bl	800e4cc <uxr_nanos>
 800d31c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800d320:	1ac0      	subs	r0, r0, r3
 800d322:	eb61 0102 	sbc.w	r1, r1, r2
 800d326:	bd10      	pop	{r4, pc}

0800d328 <uxr_flash_output_streams>:
 800d328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	7e03      	ldrb	r3, [r0, #24]
 800d32e:	b084      	sub	sp, #16
 800d330:	4604      	mov	r4, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d035      	beq.n	800d3a2 <uxr_flash_output_streams+0x7a>
 800d336:	f04f 0900 	mov.w	r9, #0
 800d33a:	4648      	mov	r0, r9
 800d33c:	f10d 0802 	add.w	r8, sp, #2
 800d340:	af03      	add	r7, sp, #12
 800d342:	ae02      	add	r6, sp, #8
 800d344:	e006      	b.n	800d354 <uxr_flash_output_streams+0x2c>
 800d346:	7e23      	ldrb	r3, [r4, #24]
 800d348:	f109 0901 	add.w	r9, r9, #1
 800d34c:	fa5f f089 	uxtb.w	r0, r9
 800d350:	4283      	cmp	r3, r0
 800d352:	d926      	bls.n	800d3a2 <uxr_flash_output_streams+0x7a>
 800d354:	2201      	movs	r2, #1
 800d356:	4611      	mov	r1, r2
 800d358:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800d35c:	f000 ff1e 	bl	800e19c <uxr_stream_id>
 800d360:	3508      	adds	r5, #8
 800d362:	4684      	mov	ip, r0
 800d364:	4643      	mov	r3, r8
 800d366:	463a      	mov	r2, r7
 800d368:	4631      	mov	r1, r6
 800d36a:	4628      	mov	r0, r5
 800d36c:	f8cd c004 	str.w	ip, [sp, #4]
 800d370:	f004 fd74 	bl	8011e5c <uxr_prepare_best_effort_buffer_to_send>
 800d374:	2800      	cmp	r0, #0
 800d376:	d0e6      	beq.n	800d346 <uxr_flash_output_streams+0x1e>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d37e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d382:	4620      	mov	r0, r4
 800d384:	f000 fe7c 	bl	800e080 <uxr_stamp_session_header>
 800d388:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d38a:	9a03      	ldr	r2, [sp, #12]
 800d38c:	685d      	ldr	r5, [r3, #4]
 800d38e:	6818      	ldr	r0, [r3, #0]
 800d390:	9902      	ldr	r1, [sp, #8]
 800d392:	47a8      	blx	r5
 800d394:	f109 0901 	add.w	r9, r9, #1
 800d398:	7e23      	ldrb	r3, [r4, #24]
 800d39a:	fa5f f089 	uxtb.w	r0, r9
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	d8d8      	bhi.n	800d354 <uxr_flash_output_streams+0x2c>
 800d3a2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d3a6:	b38b      	cbz	r3, 800d40c <uxr_flash_output_streams+0xe4>
 800d3a8:	f04f 0900 	mov.w	r9, #0
 800d3ac:	f10d 0802 	add.w	r8, sp, #2
 800d3b0:	af03      	add	r7, sp, #12
 800d3b2:	ae02      	add	r6, sp, #8
 800d3b4:	4648      	mov	r0, r9
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	2102      	movs	r1, #2
 800d3ba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800d3be:	f000 feed 	bl	800e19c <uxr_stream_id>
 800d3c2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800d3c6:	3520      	adds	r5, #32
 800d3c8:	9001      	str	r0, [sp, #4]
 800d3ca:	e00d      	b.n	800d3e8 <uxr_flash_output_streams+0xc0>
 800d3cc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800d3d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800d3d4:	9b02      	ldr	r3, [sp, #8]
 800d3d6:	f000 fe53 	bl	800e080 <uxr_stamp_session_header>
 800d3da:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d3dc:	9a03      	ldr	r2, [sp, #12]
 800d3de:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d3e2:	9902      	ldr	r1, [sp, #8]
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	47d0      	blx	sl
 800d3e8:	4643      	mov	r3, r8
 800d3ea:	463a      	mov	r2, r7
 800d3ec:	4631      	mov	r1, r6
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f004 ff52 	bl	8012298 <uxr_prepare_next_reliable_buffer_to_send>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d1e7      	bne.n	800d3cc <uxr_flash_output_streams+0xa4>
 800d3fc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800d400:	f109 0901 	add.w	r9, r9, #1
 800d404:	fa5f f089 	uxtb.w	r0, r9
 800d408:	4283      	cmp	r3, r0
 800d40a:	d8d4      	bhi.n	800d3b6 <uxr_flash_output_streams+0x8e>
 800d40c:	b004      	add	sp, #16
 800d40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d412:	bf00      	nop

0800d414 <read_submessage_info>:
 800d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d418:	460d      	mov	r5, r1
 800d41a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800d41e:	4669      	mov	r1, sp
 800d420:	4607      	mov	r7, r0
 800d422:	4628      	mov	r0, r5
 800d424:	f001 feee 	bl	800f204 <uxr_deserialize_BaseObjectReply>
 800d428:	a902      	add	r1, sp, #8
 800d42a:	4604      	mov	r4, r0
 800d42c:	4628      	mov	r0, r5
 800d42e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800d432:	f7fe fc9d 	bl	800bd70 <ucdr_deserialize_bool>
 800d436:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800d43a:	4004      	ands	r4, r0
 800d43c:	b2e4      	uxtb	r4, r4
 800d43e:	b95b      	cbnz	r3, 800d458 <read_submessage_info+0x44>
 800d440:	a987      	add	r1, sp, #540	@ 0x21c
 800d442:	4628      	mov	r0, r5
 800d444:	f7fe fc94 	bl	800bd70 <ucdr_deserialize_bool>
 800d448:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800d44c:	4606      	mov	r6, r0
 800d44e:	b94b      	cbnz	r3, 800d464 <read_submessage_info+0x50>
 800d450:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800d454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d458:	a903      	add	r1, sp, #12
 800d45a:	4628      	mov	r0, r5
 800d45c:	f001 fd7a 	bl	800ef54 <uxr_deserialize_ObjectVariant>
 800d460:	4004      	ands	r4, r0
 800d462:	e7ed      	b.n	800d440 <read_submessage_info+0x2c>
 800d464:	a988      	add	r1, sp, #544	@ 0x220
 800d466:	4628      	mov	r0, r5
 800d468:	f7fe fcb0 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800d46c:	4234      	tst	r4, r6
 800d46e:	d0ef      	beq.n	800d450 <read_submessage_info+0x3c>
 800d470:	2800      	cmp	r0, #0
 800d472:	d0ed      	beq.n	800d450 <read_submessage_info+0x3c>
 800d474:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800d478:	2b0d      	cmp	r3, #13
 800d47a:	d1e9      	bne.n	800d450 <read_submessage_info+0x3c>
 800d47c:	a98a      	add	r1, sp, #552	@ 0x228
 800d47e:	4628      	mov	r0, r5
 800d480:	f7ff fa4a 	bl	800c918 <ucdr_deserialize_int16_t>
 800d484:	b140      	cbz	r0, 800d498 <read_submessage_info+0x84>
 800d486:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	dd07      	ble.n	800d49e <read_submessage_info+0x8a>
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	bf14      	ite	ne
 800d494:	2001      	movne	r0, #1
 800d496:	2002      	moveq	r0, #2
 800d498:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800d49c:	e7d8      	b.n	800d450 <read_submessage_info+0x3c>
 800d49e:	2000      	movs	r0, #0
 800d4a0:	e7fa      	b.n	800d498 <read_submessage_info+0x84>
 800d4a2:	bf00      	nop

0800d4a4 <read_submessage_list>:
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	b097      	sub	sp, #92	@ 0x5c
 800d4aa:	4ec1      	ldr	r6, [pc, #772]	@ (800d7b0 <read_submessage_list+0x30c>)
 800d4ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	460d      	mov	r5, r1
 800d4b2:	f04f 0801 	mov.w	r8, #1
 800d4b6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800d4ba:	aa0c      	add	r2, sp, #48	@ 0x30
 800d4bc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	f000 ffbd 	bl	800e440 <uxr_read_submessage_header>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f000 813e 	beq.w	800d748 <read_submessage_list+0x2a4>
 800d4cc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800d4d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800d4d4:	3b02      	subs	r3, #2
 800d4d6:	2b0d      	cmp	r3, #13
 800d4d8:	d8ed      	bhi.n	800d4b6 <read_submessage_list+0x12>
 800d4da:	a101      	add	r1, pc, #4	@ (adr r1, 800d4e0 <read_submessage_list+0x3c>)
 800d4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4e0:	0800d73f 	.word	0x0800d73f
 800d4e4:	0800d4b7 	.word	0x0800d4b7
 800d4e8:	0800d72f 	.word	0x0800d72f
 800d4ec:	0800d6cd 	.word	0x0800d6cd
 800d4f0:	0800d6c3 	.word	0x0800d6c3
 800d4f4:	0800d4b7 	.word	0x0800d4b7
 800d4f8:	0800d4b7 	.word	0x0800d4b7
 800d4fc:	0800d623 	.word	0x0800d623
 800d500:	0800d5b3 	.word	0x0800d5b3
 800d504:	0800d573 	.word	0x0800d573
 800d508:	0800d4b7 	.word	0x0800d4b7
 800d50c:	0800d4b7 	.word	0x0800d4b7
 800d510:	0800d4b7 	.word	0x0800d4b7
 800d514:	0800d519 	.word	0x0800d519
 800d518:	a910      	add	r1, sp, #64	@ 0x40
 800d51a:	4628      	mov	r0, r5
 800d51c:	f002 f896 	bl	800f64c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800d520:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800d524:	f1b9 0f00 	cmp.w	r9, #0
 800d528:	f000 8116 	beq.w	800d758 <read_submessage_list+0x2b4>
 800d52c:	f000 ffce 	bl	800e4cc <uxr_nanos>
 800d530:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800d538:	2100      	movs	r1, #0
 800d53a:	468c      	mov	ip, r1
 800d53c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d540:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800d544:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800d546:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800d548:	468c      	mov	ip, r1
 800d54a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800d54e:	46e2      	mov	sl, ip
 800d550:	46bc      	mov	ip, r7
 800d552:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800d556:	fbc0 7106 	smlal	r7, r1, r0, r6
 800d55a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800d55e:	e9cd 7100 	strd	r7, r1, [sp]
 800d562:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800d566:	9106      	str	r1, [sp, #24]
 800d568:	4620      	mov	r0, r4
 800d56a:	47c8      	blx	r9
 800d56c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800d570:	e7a1      	b.n	800d4b6 <read_submessage_list+0x12>
 800d572:	a910      	add	r1, sp, #64	@ 0x40
 800d574:	4628      	mov	r0, r5
 800d576:	f002 f857 	bl	800f628 <uxr_deserialize_HEARTBEAT_Payload>
 800d57a:	2100      	movs	r1, #0
 800d57c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d580:	f000 fe36 	bl	800e1f0 <uxr_stream_id_from_raw>
 800d584:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800d588:	900f      	str	r0, [sp, #60]	@ 0x3c
 800d58a:	4639      	mov	r1, r7
 800d58c:	f104 0008 	add.w	r0, r4, #8
 800d590:	f000 ff1c 	bl	800e3cc <uxr_get_input_reliable_stream>
 800d594:	2800      	cmp	r0, #0
 800d596:	d08e      	beq.n	800d4b6 <read_submessage_list+0x12>
 800d598:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800d59c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800d5a0:	f004 fbca 	bl	8011d38 <uxr_process_heartbeat>
 800d5a4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800d5a8:	463a      	mov	r2, r7
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f7ff fdf6 	bl	800d19c <write_submessage_acknack.isra.0>
 800d5b0:	e781      	b.n	800d4b6 <read_submessage_list+0x12>
 800d5b2:	a910      	add	r1, sp, #64	@ 0x40
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	f002 f80f 	bl	800f5d8 <uxr_deserialize_ACKNACK_Payload>
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800d5c0:	f000 fe16 	bl	800e1f0 <uxr_stream_id_from_raw>
 800d5c4:	900d      	str	r0, [sp, #52]	@ 0x34
 800d5c6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800d5ca:	f104 0008 	add.w	r0, r4, #8
 800d5ce:	f000 fee9 	bl	800e3a4 <uxr_get_output_reliable_stream>
 800d5d2:	4607      	mov	r7, r0
 800d5d4:	2800      	cmp	r0, #0
 800d5d6:	f43f af6e 	beq.w	800d4b6 <read_submessage_list+0x12>
 800d5da:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800d5de:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800d5e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800d5e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800d5ea:	b289      	uxth	r1, r1
 800d5ec:	f004 fefe 	bl	80123ec <uxr_process_acknack>
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f004 febb 	bl	801236c <uxr_begin_output_nack_buffer_it>
 800d5f6:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d5fa:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800d5fe:	e006      	b.n	800d60e <read_submessage_list+0x16a>
 800d600:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800d602:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d604:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800d608:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d60a:	6818      	ldr	r0, [r3, #0]
 800d60c:	47c8      	blx	r9
 800d60e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800d612:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d614:	4651      	mov	r1, sl
 800d616:	4638      	mov	r0, r7
 800d618:	f004 feaa 	bl	8012370 <uxr_next_reliable_nack_buffer_to_send>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d1ef      	bne.n	800d600 <read_submessage_list+0x15c>
 800d620:	e749      	b.n	800d4b6 <read_submessage_list+0x12>
 800d622:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800d626:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800d62a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800d62e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800d632:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800d636:	4651      	mov	r1, sl
 800d638:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d63c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800d640:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800d644:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800d648:	4628      	mov	r0, r5
 800d64a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800d64e:	f001 fd23 	bl	800f098 <uxr_deserialize_BaseObjectRequest>
 800d652:	4650      	mov	r0, sl
 800d654:	a90f      	add	r1, sp, #60	@ 0x3c
 800d656:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800d65a:	f000 fd8d 	bl	800e178 <uxr_parse_base_object_request>
 800d65e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800d662:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d664:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800d668:	9110      	str	r1, [sp, #64]	@ 0x40
 800d66a:	3f04      	subs	r7, #4
 800d66c:	f009 090e 	and.w	r9, r9, #14
 800d670:	b2bf      	uxth	r7, r7
 800d672:	f1bb 0f00 	cmp.w	fp, #0
 800d676:	d006      	beq.n	800d686 <read_submessage_list+0x1e2>
 800d678:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	4652      	mov	r2, sl
 800d680:	2300      	movs	r3, #0
 800d682:	4620      	mov	r0, r4
 800d684:	47d8      	blx	fp
 800d686:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d688:	b16a      	cbz	r2, 800d6a6 <read_submessage_list+0x202>
 800d68a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d68c:	2100      	movs	r1, #0
 800d68e:	3802      	subs	r0, #2
 800d690:	e002      	b.n	800d698 <read_submessage_list+0x1f4>
 800d692:	3101      	adds	r1, #1
 800d694:	4291      	cmp	r1, r2
 800d696:	d006      	beq.n	800d6a6 <read_submessage_list+0x202>
 800d698:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d69c:	4553      	cmp	r3, sl
 800d69e:	d1f8      	bne.n	800d692 <read_submessage_list+0x1ee>
 800d6a0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	545a      	strb	r2, [r3, r1]
 800d6a6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800d6aa:	9102      	str	r1, [sp, #8]
 800d6ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d6ae:	9101      	str	r1, [sp, #4]
 800d6b0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d6b2:	9100      	str	r1, [sp, #0]
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	463a      	mov	r2, r7
 800d6b8:	4629      	mov	r1, r5
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	f004 ff1a 	bl	80124f4 <read_submessage_format>
 800d6c0:	e6f9      	b.n	800d4b6 <read_submessage_list+0x12>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4620      	mov	r0, r4
 800d6c6:	f7ff fea5 	bl	800d414 <read_submessage_info>
 800d6ca:	e6f4      	b.n	800d4b6 <read_submessage_list+0x12>
 800d6cc:	2a00      	cmp	r2, #0
 800d6ce:	d03e      	beq.n	800d74e <read_submessage_list+0x2aa>
 800d6d0:	a910      	add	r1, sp, #64	@ 0x40
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f001 fedc 	bl	800f490 <uxr_deserialize_STATUS_Payload>
 800d6d8:	a90e      	add	r1, sp, #56	@ 0x38
 800d6da:	aa0d      	add	r2, sp, #52	@ 0x34
 800d6dc:	a810      	add	r0, sp, #64	@ 0x40
 800d6de:	f000 fd4b 	bl	800e178 <uxr_parse_base_object_request>
 800d6e2:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800d6e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d6e8:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800d6ec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800d6f0:	910f      	str	r1, [sp, #60]	@ 0x3c
 800d6f2:	f1ba 0f00 	cmp.w	sl, #0
 800d6f6:	d006      	beq.n	800d706 <read_submessage_list+0x262>
 800d6f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800d6fc:	9300      	str	r3, [sp, #0]
 800d6fe:	463a      	mov	r2, r7
 800d700:	464b      	mov	r3, r9
 800d702:	4620      	mov	r0, r4
 800d704:	47d0      	blx	sl
 800d706:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800d708:	2a00      	cmp	r2, #0
 800d70a:	f43f aed4 	beq.w	800d4b6 <read_submessage_list+0x12>
 800d70e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800d710:	2100      	movs	r1, #0
 800d712:	3802      	subs	r0, #2
 800d714:	e003      	b.n	800d71e <read_submessage_list+0x27a>
 800d716:	3101      	adds	r1, #1
 800d718:	4291      	cmp	r1, r2
 800d71a:	f43f aecc 	beq.w	800d4b6 <read_submessage_list+0x12>
 800d71e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800d722:	42bb      	cmp	r3, r7
 800d724:	d1f7      	bne.n	800d716 <read_submessage_list+0x272>
 800d726:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800d728:	f803 9001 	strb.w	r9, [r3, r1]
 800d72c:	e6c3      	b.n	800d4b6 <read_submessage_list+0x12>
 800d72e:	2a00      	cmp	r2, #0
 800d730:	f47f aec1 	bne.w	800d4b6 <read_submessage_list+0x12>
 800d734:	4629      	mov	r1, r5
 800d736:	4620      	mov	r0, r4
 800d738:	f000 fc64 	bl	800e004 <uxr_read_create_session_status>
 800d73c:	e6bb      	b.n	800d4b6 <read_submessage_list+0x12>
 800d73e:	4629      	mov	r1, r5
 800d740:	4620      	mov	r0, r4
 800d742:	f7ff fcf5 	bl	800d130 <read_submessage_get_info>
 800d746:	e6b6      	b.n	800d4b6 <read_submessage_list+0x12>
 800d748:	b017      	add	sp, #92	@ 0x5c
 800d74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74e:	4629      	mov	r1, r5
 800d750:	4620      	mov	r0, r4
 800d752:	f000 fc63 	bl	800e01c <uxr_read_delete_session_status>
 800d756:	e6ae      	b.n	800d4b6 <read_submessage_list+0x12>
 800d758:	f000 feb8 	bl	800e4cc <uxr_nanos>
 800d75c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d75e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d760:	464f      	mov	r7, r9
 800d762:	fbc3 2706 	smlal	r2, r7, r3, r6
 800d766:	1812      	adds	r2, r2, r0
 800d768:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d76a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d76c:	eb47 0101 	adc.w	r1, r7, r1
 800d770:	464f      	mov	r7, r9
 800d772:	fbc3 0706 	smlal	r0, r7, r3, r6
 800d776:	463b      	mov	r3, r7
 800d778:	4684      	mov	ip, r0
 800d77a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800d77e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800d782:	eb1c 0c00 	adds.w	ip, ip, r0
 800d786:	464f      	mov	r7, r9
 800d788:	eb43 0307 	adc.w	r3, r3, r7
 800d78c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800d790:	eb61 0303 	sbc.w	r3, r1, r3
 800d794:	0fda      	lsrs	r2, r3, #31
 800d796:	eb12 020c 	adds.w	r2, r2, ip
 800d79a:	f143 0300 	adc.w	r3, r3, #0
 800d79e:	0852      	lsrs	r2, r2, #1
 800d7a0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800d7a4:	105b      	asrs	r3, r3, #1
 800d7a6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800d7aa:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800d7ae:	e6dd      	b.n	800d56c <read_submessage_list+0xc8>
 800d7b0:	3b9aca00 	.word	0x3b9aca00

0800d7b4 <listen_message_reliably>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	1e0b      	subs	r3, r1, #0
 800d7ba:	b09d      	sub	sp, #116	@ 0x74
 800d7bc:	bfb8      	it	lt
 800d7be:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	9305      	str	r3, [sp, #20]
 800d7c6:	f000 fe67 	bl	800e498 <uxr_millis>
 800d7ca:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800d7ce:	4681      	mov	r9, r0
 800d7d0:	2a00      	cmp	r2, #0
 800d7d2:	f000 80a1 	beq.w	800d918 <listen_message_reliably+0x164>
 800d7d6:	2600      	movs	r6, #0
 800d7d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d7dc:	f04f 3bff 	mov.w	fp, #4294967295
 800d7e0:	9303      	str	r3, [sp, #12]
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	460f      	mov	r7, r1
 800d7e6:	e00f      	b.n	800d808 <listen_message_reliably+0x54>
 800d7e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800d7ec:	9903      	ldr	r1, [sp, #12]
 800d7ee:	455a      	cmp	r2, fp
 800d7f0:	f106 0601 	add.w	r6, r6, #1
 800d7f4:	eb73 0101 	sbcs.w	r1, r3, r1
 800d7f8:	b2f0      	uxtb	r0, r6
 800d7fa:	da01      	bge.n	800d800 <listen_message_reliably+0x4c>
 800d7fc:	4693      	mov	fp, r2
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d804:	4283      	cmp	r3, r0
 800d806:	d960      	bls.n	800d8ca <listen_message_reliably+0x116>
 800d808:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800d80c:	2102      	movs	r1, #2
 800d80e:	2201      	movs	r2, #1
 800d810:	f000 fcc4 	bl	800e19c <uxr_stream_id>
 800d814:	00e4      	lsls	r4, r4, #3
 800d816:	f104 0520 	add.w	r5, r4, #32
 800d81a:	4445      	add	r5, r8
 800d81c:	4601      	mov	r1, r0
 800d81e:	463b      	mov	r3, r7
 800d820:	464a      	mov	r2, r9
 800d822:	4628      	mov	r0, r5
 800d824:	9109      	str	r1, [sp, #36]	@ 0x24
 800d826:	f004 fd77 	bl	8012318 <uxr_update_output_stream_heartbeat_timestamp>
 800d82a:	eb08 0304 	add.w	r3, r8, r4
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0da      	beq.n	800d7e8 <listen_message_reliably+0x34>
 800d832:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800d836:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800d83a:	9304      	str	r3, [sp, #16]
 800d83c:	4640      	mov	r0, r8
 800d83e:	f000 fc75 	bl	800e12c <uxr_session_header_offset>
 800d842:	3501      	adds	r5, #1
 800d844:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800d848:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800d84c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800d850:	2300      	movs	r3, #0
 800d852:	2211      	movs	r2, #17
 800d854:	9000      	str	r0, [sp, #0]
 800d856:	a90c      	add	r1, sp, #48	@ 0x30
 800d858:	4650      	mov	r0, sl
 800d85a:	f7ff fa3b 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800d85e:	2300      	movs	r3, #0
 800d860:	2205      	movs	r2, #5
 800d862:	210b      	movs	r1, #11
 800d864:	4650      	mov	r0, sl
 800d866:	f000 fdd1 	bl	800e40c <uxr_buffer_submessage_header>
 800d86a:	8968      	ldrh	r0, [r5, #10]
 800d86c:	2101      	movs	r1, #1
 800d86e:	f004 ff0b 	bl	8012688 <uxr_seq_num_add>
 800d872:	892b      	ldrh	r3, [r5, #8]
 800d874:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d878:	4602      	mov	r2, r0
 800d87a:	9b04      	ldr	r3, [sp, #16]
 800d87c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d880:	a90a      	add	r1, sp, #40	@ 0x28
 800d882:	4650      	mov	r0, sl
 800d884:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800d888:	f001 feba 	bl	800f600 <uxr_serialize_HEARTBEAT_Payload>
 800d88c:	2200      	movs	r2, #0
 800d88e:	4611      	mov	r1, r2
 800d890:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d892:	4640      	mov	r0, r8
 800d894:	f000 fbf4 	bl	800e080 <uxr_stamp_session_header>
 800d898:	4650      	mov	r0, sl
 800d89a:	f7ff fa59 	bl	800cd50 <ucdr_buffer_length>
 800d89e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	a90c      	add	r1, sp, #48	@ 0x30
 800d8a6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800d8aa:	4444      	add	r4, r8
 800d8ac:	47a8      	blx	r5
 800d8ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800d8b2:	9903      	ldr	r1, [sp, #12]
 800d8b4:	455a      	cmp	r2, fp
 800d8b6:	f106 0601 	add.w	r6, r6, #1
 800d8ba:	eb73 0101 	sbcs.w	r1, r3, r1
 800d8be:	b2f0      	uxtb	r0, r6
 800d8c0:	db9c      	blt.n	800d7fc <listen_message_reliably+0x48>
 800d8c2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800d8c6:	4283      	cmp	r3, r0
 800d8c8:	d89e      	bhi.n	800d808 <listen_message_reliably+0x54>
 800d8ca:	9a03      	ldr	r2, [sp, #12]
 800d8cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	bf08      	it	eq
 800d8d4:	f1bb 3fff 	cmpeq.w	fp, #4294967295
 800d8d8:	d01e      	beq.n	800d918 <listen_message_reliably+0x164>
 800d8da:	ebab 0309 	sub.w	r3, fp, r9
 800d8de:	9905      	ldr	r1, [sp, #20]
 800d8e0:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bf08      	it	eq
 800d8e8:	2301      	moveq	r3, #1
 800d8ea:	4299      	cmp	r1, r3
 800d8ec:	bfa8      	it	ge
 800d8ee:	4619      	movge	r1, r3
 800d8f0:	6894      	ldr	r4, [r2, #8]
 800d8f2:	6810      	ldr	r0, [r2, #0]
 800d8f4:	4689      	mov	r9, r1
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	aa08      	add	r2, sp, #32
 800d8fa:	a907      	add	r1, sp, #28
 800d8fc:	47a0      	blx	r4
 800d8fe:	b968      	cbnz	r0, 800d91c <listen_message_reliably+0x168>
 800d900:	9b05      	ldr	r3, [sp, #20]
 800d902:	eba3 0309 	sub.w	r3, r3, r9
 800d906:	2b00      	cmp	r3, #0
 800d908:	9305      	str	r3, [sp, #20]
 800d90a:	f73f af5c 	bgt.w	800d7c6 <listen_message_reliably+0x12>
 800d90e:	4604      	mov	r4, r0
 800d910:	4620      	mov	r0, r4
 800d912:	b01d      	add	sp, #116	@ 0x74
 800d914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d918:	9b05      	ldr	r3, [sp, #20]
 800d91a:	e7e0      	b.n	800d8de <listen_message_reliably+0x12a>
 800d91c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800d920:	4604      	mov	r4, r0
 800d922:	a80c      	add	r0, sp, #48	@ 0x30
 800d924:	f7ff f9e8 	bl	800ccf8 <ucdr_init_buffer>
 800d928:	2500      	movs	r5, #0
 800d92a:	f10d 031a 	add.w	r3, sp, #26
 800d92e:	aa06      	add	r2, sp, #24
 800d930:	a90c      	add	r1, sp, #48	@ 0x30
 800d932:	4640      	mov	r0, r8
 800d934:	f88d 5018 	strb.w	r5, [sp, #24]
 800d938:	f000 fbb6 	bl	800e0a8 <uxr_read_session_header>
 800d93c:	b918      	cbnz	r0, 800d946 <listen_message_reliably+0x192>
 800d93e:	4620      	mov	r0, r4
 800d940:	b01d      	add	sp, #116	@ 0x74
 800d942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d946:	4629      	mov	r1, r5
 800d948:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d94c:	f000 fc50 	bl	800e1f0 <uxr_stream_id_from_raw>
 800d950:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800d954:	2d01      	cmp	r5, #1
 800d956:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800d95a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800d95e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800d962:	d04b      	beq.n	800d9fc <listen_message_reliably+0x248>
 800d964:	2d02      	cmp	r5, #2
 800d966:	d00f      	beq.n	800d988 <listen_message_reliably+0x1d4>
 800d968:	2d00      	cmp	r5, #0
 800d96a:	d1e8      	bne.n	800d93e <listen_message_reliably+0x18a>
 800d96c:	4629      	mov	r1, r5
 800d96e:	4628      	mov	r0, r5
 800d970:	f000 fc3e 	bl	800e1f0 <uxr_stream_id_from_raw>
 800d974:	a90c      	add	r1, sp, #48	@ 0x30
 800d976:	4602      	mov	r2, r0
 800d978:	4640      	mov	r0, r8
 800d97a:	920a      	str	r2, [sp, #40]	@ 0x28
 800d97c:	f7ff fd92 	bl	800d4a4 <read_submessage_list>
 800d980:	4620      	mov	r0, r4
 800d982:	b01d      	add	sp, #116	@ 0x74
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	4631      	mov	r1, r6
 800d98a:	f108 0008 	add.w	r0, r8, #8
 800d98e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800d992:	f000 fd1b 	bl	800e3cc <uxr_get_input_reliable_stream>
 800d996:	4607      	mov	r7, r0
 800d998:	b338      	cbz	r0, 800d9ea <listen_message_reliably+0x236>
 800d99a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d99c:	9203      	str	r2, [sp, #12]
 800d99e:	a80c      	add	r0, sp, #48	@ 0x30
 800d9a0:	f7ff f9da 	bl	800cd58 <ucdr_buffer_remaining>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f10d 0019 	add.w	r0, sp, #25
 800d9aa:	9000      	str	r0, [sp, #0]
 800d9ac:	9a03      	ldr	r2, [sp, #12]
 800d9ae:	4651      	mov	r1, sl
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f004 f8c7 	bl	8011b44 <uxr_receive_reliable_message>
 800d9b6:	b1c0      	cbz	r0, 800d9ea <listen_message_reliably+0x236>
 800d9b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800d9bc:	b393      	cbz	r3, 800da24 <listen_message_reliably+0x270>
 800d9be:	ad14      	add	r5, sp, #80	@ 0x50
 800d9c0:	f04f 0a02 	mov.w	sl, #2
 800d9c4:	e00a      	b.n	800d9dc <listen_message_reliably+0x228>
 800d9c6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800d9ca:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800d9ce:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800d9d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	f7ff fd64 	bl	800d4a4 <read_submessage_list>
 800d9dc:	2204      	movs	r2, #4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4638      	mov	r0, r7
 800d9e2:	f004 f92f 	bl	8011c44 <uxr_next_input_reliable_buffer_available>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1ed      	bne.n	800d9c6 <listen_message_reliably+0x212>
 800d9ea:	4640      	mov	r0, r8
 800d9ec:	4632      	mov	r2, r6
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	f7ff fbd4 	bl	800d19c <write_submessage_acknack.isra.0>
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	b01d      	add	sp, #116	@ 0x74
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	4631      	mov	r1, r6
 800d9fe:	f108 0008 	add.w	r0, r8, #8
 800da02:	f000 fcd9 	bl	800e3b8 <uxr_get_input_best_effort_stream>
 800da06:	2800      	cmp	r0, #0
 800da08:	d099      	beq.n	800d93e <listen_message_reliably+0x18a>
 800da0a:	4651      	mov	r1, sl
 800da0c:	f004 f806 	bl	8011a1c <uxr_receive_best_effort_message>
 800da10:	2800      	cmp	r0, #0
 800da12:	d094      	beq.n	800d93e <listen_message_reliably+0x18a>
 800da14:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800da18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da1a:	a90c      	add	r1, sp, #48	@ 0x30
 800da1c:	4640      	mov	r0, r8
 800da1e:	f7ff fd41 	bl	800d4a4 <read_submessage_list>
 800da22:	e78c      	b.n	800d93e <listen_message_reliably+0x18a>
 800da24:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800da28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da2a:	a90c      	add	r1, sp, #48	@ 0x30
 800da2c:	4640      	mov	r0, r8
 800da2e:	f7ff fd39 	bl	800d4a4 <read_submessage_list>
 800da32:	e7c4      	b.n	800d9be <listen_message_reliably+0x20a>

0800da34 <uxr_run_session_until_confirm_delivery>:
 800da34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da38:	4606      	mov	r6, r0
 800da3a:	460d      	mov	r5, r1
 800da3c:	f000 fd2c 	bl	800e498 <uxr_millis>
 800da40:	4607      	mov	r7, r0
 800da42:	4630      	mov	r0, r6
 800da44:	f7ff fc70 	bl	800d328 <uxr_flash_output_streams>
 800da48:	2d00      	cmp	r5, #0
 800da4a:	f106 0808 	add.w	r8, r6, #8
 800da4e:	bfa8      	it	ge
 800da50:	462c      	movge	r4, r5
 800da52:	da07      	bge.n	800da64 <uxr_run_session_until_confirm_delivery+0x30>
 800da54:	e00e      	b.n	800da74 <uxr_run_session_until_confirm_delivery+0x40>
 800da56:	f7ff fead 	bl	800d7b4 <listen_message_reliably>
 800da5a:	f000 fd1d 	bl	800e498 <uxr_millis>
 800da5e:	1bc3      	subs	r3, r0, r7
 800da60:	1aec      	subs	r4, r5, r3
 800da62:	d407      	bmi.n	800da74 <uxr_run_session_until_confirm_delivery+0x40>
 800da64:	4640      	mov	r0, r8
 800da66:	f000 fcbb 	bl	800e3e0 <uxr_output_streams_confirmed>
 800da6a:	4603      	mov	r3, r0
 800da6c:	4621      	mov	r1, r4
 800da6e:	4630      	mov	r0, r6
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0f0      	beq.n	800da56 <uxr_run_session_until_confirm_delivery+0x22>
 800da74:	4640      	mov	r0, r8
 800da76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da7a:	f000 bcb1 	b.w	800e3e0 <uxr_output_streams_confirmed>
 800da7e:	bf00      	nop

0800da80 <uxr_run_session_until_all_status>:
 800da80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da84:	9c08      	ldr	r4, [sp, #32]
 800da86:	4606      	mov	r6, r0
 800da88:	460f      	mov	r7, r1
 800da8a:	4691      	mov	r9, r2
 800da8c:	461d      	mov	r5, r3
 800da8e:	f7ff fc4b 	bl	800d328 <uxr_flash_output_streams>
 800da92:	b124      	cbz	r4, 800da9e <uxr_run_session_until_all_status+0x1e>
 800da94:	4622      	mov	r2, r4
 800da96:	21ff      	movs	r1, #255	@ 0xff
 800da98:	4628      	mov	r0, r5
 800da9a:	f007 f84f 	bl	8014b3c <memset>
 800da9e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800daa2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800daa4:	f000 fcf8 	bl	800e498 <uxr_millis>
 800daa8:	3d01      	subs	r5, #1
 800daaa:	f1a9 0902 	sub.w	r9, r9, #2
 800daae:	4680      	mov	r8, r0
 800dab0:	4639      	mov	r1, r7
 800dab2:	4630      	mov	r0, r6
 800dab4:	f7ff fe7e 	bl	800d7b4 <listen_message_reliably>
 800dab8:	f000 fcee 	bl	800e498 <uxr_millis>
 800dabc:	eba0 0008 	sub.w	r0, r0, r8
 800dac0:	1a39      	subs	r1, r7, r0
 800dac2:	b344      	cbz	r4, 800db16 <uxr_run_session_until_all_status+0x96>
 800dac4:	4628      	mov	r0, r5
 800dac6:	46ac      	mov	ip, r5
 800dac8:	2301      	movs	r3, #1
 800daca:	e002      	b.n	800dad2 <uxr_run_session_until_all_status+0x52>
 800dacc:	42a3      	cmp	r3, r4
 800dace:	d20d      	bcs.n	800daec <uxr_run_session_until_all_status+0x6c>
 800dad0:	3301      	adds	r3, #1
 800dad2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800dad6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800dada:	d1f7      	bne.n	800dacc <uxr_run_session_until_all_status+0x4c>
 800dadc:	42a3      	cmp	r3, r4
 800dade:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800dae2:	d213      	bcs.n	800db0c <uxr_run_session_until_all_status+0x8c>
 800dae4:	2a00      	cmp	r2, #0
 800dae6:	d0f3      	beq.n	800dad0 <uxr_run_session_until_all_status+0x50>
 800dae8:	2900      	cmp	r1, #0
 800daea:	dce2      	bgt.n	800dab2 <uxr_run_session_until_all_status+0x32>
 800daec:	2300      	movs	r3, #0
 800daee:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800daf0:	442c      	add	r4, r5
 800daf2:	e001      	b.n	800daf8 <uxr_run_session_until_all_status+0x78>
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d812      	bhi.n	800db1e <uxr_run_session_until_all_status+0x9e>
 800daf8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800dafc:	4284      	cmp	r4, r0
 800dafe:	d1f9      	bne.n	800daf4 <uxr_run_session_until_all_status+0x74>
 800db00:	2b01      	cmp	r3, #1
 800db02:	bf8c      	ite	hi
 800db04:	2000      	movhi	r0, #0
 800db06:	2001      	movls	r0, #1
 800db08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0c:	2900      	cmp	r1, #0
 800db0e:	dded      	ble.n	800daec <uxr_run_session_until_all_status+0x6c>
 800db10:	2a00      	cmp	r2, #0
 800db12:	d1ce      	bne.n	800dab2 <uxr_run_session_until_all_status+0x32>
 800db14:	e7ea      	b.n	800daec <uxr_run_session_until_all_status+0x6c>
 800db16:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800db18:	2001      	movs	r0, #1
 800db1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db1e:	2000      	movs	r0, #0
 800db20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800db24 <wait_session_status>:
 800db24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db28:	4604      	mov	r4, r0
 800db2a:	b09d      	sub	sp, #116	@ 0x74
 800db2c:	20ff      	movs	r0, #255	@ 0xff
 800db2e:	7160      	strb	r0, [r4, #5]
 800db30:	9303      	str	r3, [sp, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 80b6 	beq.w	800dca4 <wait_session_status+0x180>
 800db38:	468a      	mov	sl, r1
 800db3a:	4691      	mov	r9, r2
 800db3c:	f04f 0b00 	mov.w	fp, #0
 800db40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800db42:	464a      	mov	r2, r9
 800db44:	e9d3 0500 	ldrd	r0, r5, [r3]
 800db48:	4651      	mov	r1, sl
 800db4a:	47a8      	blx	r5
 800db4c:	f000 fca4 	bl	800e498 <uxr_millis>
 800db50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800db54:	4605      	mov	r5, r0
 800db56:	e009      	b.n	800db6c <wait_session_status+0x48>
 800db58:	f000 fc9e 	bl	800e498 <uxr_millis>
 800db5c:	1b40      	subs	r0, r0, r5
 800db5e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800db62:	2b00      	cmp	r3, #0
 800db64:	dd40      	ble.n	800dbe8 <wait_session_status+0xc4>
 800db66:	7960      	ldrb	r0, [r4, #5]
 800db68:	28ff      	cmp	r0, #255	@ 0xff
 800db6a:	d145      	bne.n	800dbf8 <wait_session_status+0xd4>
 800db6c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800db6e:	a908      	add	r1, sp, #32
 800db70:	6896      	ldr	r6, [r2, #8]
 800db72:	6810      	ldr	r0, [r2, #0]
 800db74:	aa09      	add	r2, sp, #36	@ 0x24
 800db76:	47b0      	blx	r6
 800db78:	2800      	cmp	r0, #0
 800db7a:	d0ed      	beq.n	800db58 <wait_session_status+0x34>
 800db7c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800db80:	a80c      	add	r0, sp, #48	@ 0x30
 800db82:	f7ff f8b9 	bl	800ccf8 <ucdr_init_buffer>
 800db86:	2600      	movs	r6, #0
 800db88:	f10d 031e 	add.w	r3, sp, #30
 800db8c:	aa07      	add	r2, sp, #28
 800db8e:	a90c      	add	r1, sp, #48	@ 0x30
 800db90:	4620      	mov	r0, r4
 800db92:	f88d 601c 	strb.w	r6, [sp, #28]
 800db96:	f000 fa87 	bl	800e0a8 <uxr_read_session_header>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	d0dc      	beq.n	800db58 <wait_session_status+0x34>
 800db9e:	4631      	mov	r1, r6
 800dba0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800dba4:	f000 fb24 	bl	800e1f0 <uxr_stream_id_from_raw>
 800dba8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800dbac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800dbb0:	9302      	str	r3, [sp, #8]
 800dbb2:	2f01      	cmp	r7, #1
 800dbb4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800dbb8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800dbbc:	d05c      	beq.n	800dc78 <wait_session_status+0x154>
 800dbbe:	2f02      	cmp	r7, #2
 800dbc0:	d020      	beq.n	800dc04 <wait_session_status+0xe0>
 800dbc2:	2f00      	cmp	r7, #0
 800dbc4:	d1c8      	bne.n	800db58 <wait_session_status+0x34>
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f000 fb11 	bl	800e1f0 <uxr_stream_id_from_raw>
 800dbce:	a90c      	add	r1, sp, #48	@ 0x30
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f7ff fc65 	bl	800d4a4 <read_submessage_list>
 800dbda:	f000 fc5d 	bl	800e498 <uxr_millis>
 800dbde:	1b40      	subs	r0, r0, r5
 800dbe0:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	dcbe      	bgt.n	800db66 <wait_session_status+0x42>
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	7960      	ldrb	r0, [r4, #5]
 800dbec:	f10b 0b01 	add.w	fp, fp, #1
 800dbf0:	455b      	cmp	r3, fp
 800dbf2:	d001      	beq.n	800dbf8 <wait_session_status+0xd4>
 800dbf4:	28ff      	cmp	r0, #255	@ 0xff
 800dbf6:	d0a3      	beq.n	800db40 <wait_session_status+0x1c>
 800dbf8:	38ff      	subs	r0, #255	@ 0xff
 800dbfa:	bf18      	it	ne
 800dbfc:	2001      	movne	r0, #1
 800dbfe:	b01d      	add	sp, #116	@ 0x74
 800dc00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc04:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800dc08:	9304      	str	r3, [sp, #16]
 800dc0a:	4631      	mov	r1, r6
 800dc0c:	f104 0008 	add.w	r0, r4, #8
 800dc10:	f000 fbdc 	bl	800e3cc <uxr_get_input_reliable_stream>
 800dc14:	4680      	mov	r8, r0
 800dc16:	b348      	cbz	r0, 800dc6c <wait_session_status+0x148>
 800dc18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dc1a:	9205      	str	r2, [sp, #20]
 800dc1c:	a80c      	add	r0, sp, #48	@ 0x30
 800dc1e:	f7ff f89b 	bl	800cd58 <ucdr_buffer_remaining>
 800dc22:	4603      	mov	r3, r0
 800dc24:	f10d 001d 	add.w	r0, sp, #29
 800dc28:	9000      	str	r0, [sp, #0]
 800dc2a:	9a05      	ldr	r2, [sp, #20]
 800dc2c:	9902      	ldr	r1, [sp, #8]
 800dc2e:	4640      	mov	r0, r8
 800dc30:	f003 ff88 	bl	8011b44 <uxr_receive_reliable_message>
 800dc34:	b1d0      	cbz	r0, 800dc6c <wait_session_status+0x148>
 800dc36:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d03a      	beq.n	800dcb4 <wait_session_status+0x190>
 800dc3e:	9f04      	ldr	r7, [sp, #16]
 800dc40:	e00a      	b.n	800dc58 <wait_session_status+0x134>
 800dc42:	f04f 0302 	mov.w	r3, #2
 800dc46:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800dc4a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800dc4e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800dc52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc54:	f7ff fc26 	bl	800d4a4 <read_submessage_list>
 800dc58:	a914      	add	r1, sp, #80	@ 0x50
 800dc5a:	2204      	movs	r2, #4
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	f003 fff1 	bl	8011c44 <uxr_next_input_reliable_buffer_available>
 800dc62:	4603      	mov	r3, r0
 800dc64:	a914      	add	r1, sp, #80	@ 0x50
 800dc66:	4620      	mov	r0, r4
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d1ea      	bne.n	800dc42 <wait_session_status+0x11e>
 800dc6c:	9904      	ldr	r1, [sp, #16]
 800dc6e:	4632      	mov	r2, r6
 800dc70:	4620      	mov	r0, r4
 800dc72:	f7ff fa93 	bl	800d19c <write_submessage_acknack.isra.0>
 800dc76:	e76f      	b.n	800db58 <wait_session_status+0x34>
 800dc78:	4631      	mov	r1, r6
 800dc7a:	f104 0008 	add.w	r0, r4, #8
 800dc7e:	f000 fb9b 	bl	800e3b8 <uxr_get_input_best_effort_stream>
 800dc82:	2800      	cmp	r0, #0
 800dc84:	f43f af68 	beq.w	800db58 <wait_session_status+0x34>
 800dc88:	9902      	ldr	r1, [sp, #8]
 800dc8a:	f003 fec7 	bl	8011a1c <uxr_receive_best_effort_message>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	f43f af62 	beq.w	800db58 <wait_session_status+0x34>
 800dc94:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dc98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dc9a:	a90c      	add	r1, sp, #48	@ 0x30
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f7ff fc01 	bl	800d4a4 <read_submessage_list>
 800dca2:	e759      	b.n	800db58 <wait_session_status+0x34>
 800dca4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dca6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800dcaa:	47a0      	blx	r4
 800dcac:	2001      	movs	r0, #1
 800dcae:	b01d      	add	sp, #116	@ 0x74
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800dcb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dcba:	a90c      	add	r1, sp, #48	@ 0x30
 800dcbc:	4620      	mov	r0, r4
 800dcbe:	f7ff fbf1 	bl	800d4a4 <read_submessage_list>
 800dcc2:	e7bc      	b.n	800dc3e <wait_session_status+0x11a>

0800dcc4 <uxr_delete_session_retries>:
 800dcc4:	b530      	push	{r4, r5, lr}
 800dcc6:	b08f      	sub	sp, #60	@ 0x3c
 800dcc8:	4604      	mov	r4, r0
 800dcca:	460d      	mov	r5, r1
 800dccc:	f000 fa2e 	bl	800e12c <uxr_session_header_offset>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	2210      	movs	r2, #16
 800dcd4:	9000      	str	r0, [sp, #0]
 800dcd6:	a902      	add	r1, sp, #8
 800dcd8:	a806      	add	r0, sp, #24
 800dcda:	f7fe fffb 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800dcde:	a906      	add	r1, sp, #24
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 f973 	bl	800dfcc <uxr_buffer_delete_session>
 800dce6:	2200      	movs	r2, #0
 800dce8:	4611      	mov	r1, r2
 800dcea:	9b06      	ldr	r3, [sp, #24]
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 f9c7 	bl	800e080 <uxr_stamp_session_header>
 800dcf2:	a806      	add	r0, sp, #24
 800dcf4:	f7ff f82c 	bl	800cd50 <ucdr_buffer_length>
 800dcf8:	462b      	mov	r3, r5
 800dcfa:	4602      	mov	r2, r0
 800dcfc:	a902      	add	r1, sp, #8
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f7ff ff10 	bl	800db24 <wait_session_status>
 800dd04:	b118      	cbz	r0, 800dd0e <uxr_delete_session_retries+0x4a>
 800dd06:	7960      	ldrb	r0, [r4, #5]
 800dd08:	fab0 f080 	clz	r0, r0
 800dd0c:	0940      	lsrs	r0, r0, #5
 800dd0e:	b00f      	add	sp, #60	@ 0x3c
 800dd10:	bd30      	pop	{r4, r5, pc}
 800dd12:	bf00      	nop

0800dd14 <uxr_create_session>:
 800dd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd18:	f100 0b08 	add.w	fp, r0, #8
 800dd1c:	b0ab      	sub	sp, #172	@ 0xac
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4658      	mov	r0, fp
 800dd22:	f000 fa99 	bl	800e258 <uxr_reset_stream_storage>
 800dd26:	4620      	mov	r0, r4
 800dd28:	f000 fa00 	bl	800e12c <uxr_session_header_offset>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9000      	str	r0, [sp, #0]
 800dd30:	221c      	movs	r2, #28
 800dd32:	a90b      	add	r1, sp, #44	@ 0x2c
 800dd34:	a812      	add	r0, sp, #72	@ 0x48
 800dd36:	f7fe ffcd 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800dd3a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd3c:	8a1a      	ldrh	r2, [r3, #16]
 800dd3e:	3a04      	subs	r2, #4
 800dd40:	b292      	uxth	r2, r2
 800dd42:	a912      	add	r1, sp, #72	@ 0x48
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 f917 	bl	800df78 <uxr_buffer_create_session>
 800dd4a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	f000 f983 	bl	800e058 <uxr_stamp_create_session_header>
 800dd52:	a812      	add	r0, sp, #72	@ 0x48
 800dd54:	f7fe fffc 	bl	800cd50 <ucdr_buffer_length>
 800dd58:	23ff      	movs	r3, #255	@ 0xff
 800dd5a:	7163      	strb	r3, [r4, #5]
 800dd5c:	230a      	movs	r3, #10
 800dd5e:	46da      	mov	sl, fp
 800dd60:	9303      	str	r3, [sp, #12]
 800dd62:	4683      	mov	fp, r0
 800dd64:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800dd66:	465a      	mov	r2, fp
 800dd68:	e9d3 0500 	ldrd	r0, r5, [r3]
 800dd6c:	a90b      	add	r1, sp, #44	@ 0x2c
 800dd6e:	47a8      	blx	r5
 800dd70:	f000 fb92 	bl	800e498 <uxr_millis>
 800dd74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dd78:	4605      	mov	r5, r0
 800dd7a:	e009      	b.n	800dd90 <uxr_create_session+0x7c>
 800dd7c:	f000 fb8c 	bl	800e498 <uxr_millis>
 800dd80:	1b40      	subs	r0, r0, r5
 800dd82:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	7962      	ldrb	r2, [r4, #5]
 800dd8a:	dd38      	ble.n	800ddfe <uxr_create_session+0xea>
 800dd8c:	2aff      	cmp	r2, #255	@ 0xff
 800dd8e:	d13c      	bne.n	800de0a <uxr_create_session+0xf6>
 800dd90:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800dd92:	a907      	add	r1, sp, #28
 800dd94:	6896      	ldr	r6, [r2, #8]
 800dd96:	6810      	ldr	r0, [r2, #0]
 800dd98:	aa08      	add	r2, sp, #32
 800dd9a:	47b0      	blx	r6
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d0ed      	beq.n	800dd7c <uxr_create_session+0x68>
 800dda0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800dda4:	a81a      	add	r0, sp, #104	@ 0x68
 800dda6:	f7fe ffa7 	bl	800ccf8 <ucdr_init_buffer>
 800ddaa:	2600      	movs	r6, #0
 800ddac:	f10d 031a 	add.w	r3, sp, #26
 800ddb0:	aa06      	add	r2, sp, #24
 800ddb2:	a91a      	add	r1, sp, #104	@ 0x68
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f88d 6018 	strb.w	r6, [sp, #24]
 800ddba:	f000 f975 	bl	800e0a8 <uxr_read_session_header>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0dc      	beq.n	800dd7c <uxr_create_session+0x68>
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ddc8:	f000 fa12 	bl	800e1f0 <uxr_stream_id_from_raw>
 800ddcc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800ddd0:	2e01      	cmp	r6, #1
 800ddd2:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800ddd6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800ddda:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ddde:	d053      	beq.n	800de88 <uxr_create_session+0x174>
 800dde0:	2e02      	cmp	r6, #2
 800dde2:	d018      	beq.n	800de16 <uxr_create_session+0x102>
 800dde4:	2e00      	cmp	r6, #0
 800dde6:	d1c9      	bne.n	800dd7c <uxr_create_session+0x68>
 800dde8:	4631      	mov	r1, r6
 800ddea:	4630      	mov	r0, r6
 800ddec:	f000 fa00 	bl	800e1f0 <uxr_stream_id_from_raw>
 800ddf0:	a91a      	add	r1, sp, #104	@ 0x68
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7ff fb54 	bl	800d4a4 <read_submessage_list>
 800ddfc:	e7be      	b.n	800dd7c <uxr_create_session+0x68>
 800ddfe:	9b03      	ldr	r3, [sp, #12]
 800de00:	3b01      	subs	r3, #1
 800de02:	9303      	str	r3, [sp, #12]
 800de04:	d001      	beq.n	800de0a <uxr_create_session+0xf6>
 800de06:	2aff      	cmp	r2, #255	@ 0xff
 800de08:	d0ac      	beq.n	800dd64 <uxr_create_session+0x50>
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	d051      	beq.n	800deb2 <uxr_create_session+0x19e>
 800de0e:	2000      	movs	r0, #0
 800de10:	b02b      	add	sp, #172	@ 0xac
 800de12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de16:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	4639      	mov	r1, r7
 800de1e:	4650      	mov	r0, sl
 800de20:	f000 fad4 	bl	800e3cc <uxr_get_input_reliable_stream>
 800de24:	4680      	mov	r8, r0
 800de26:	b348      	cbz	r0, 800de7c <uxr_create_session+0x168>
 800de28:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800de2a:	9205      	str	r2, [sp, #20]
 800de2c:	a81a      	add	r0, sp, #104	@ 0x68
 800de2e:	f7fe ff93 	bl	800cd58 <ucdr_buffer_remaining>
 800de32:	4603      	mov	r3, r0
 800de34:	f10d 0019 	add.w	r0, sp, #25
 800de38:	9000      	str	r0, [sp, #0]
 800de3a:	9a05      	ldr	r2, [sp, #20]
 800de3c:	4649      	mov	r1, r9
 800de3e:	4640      	mov	r0, r8
 800de40:	f003 fe80 	bl	8011b44 <uxr_receive_reliable_message>
 800de44:	b1d0      	cbz	r0, 800de7c <uxr_create_session+0x168>
 800de46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d038      	beq.n	800dec0 <uxr_create_session+0x1ac>
 800de4e:	9e04      	ldr	r6, [sp, #16]
 800de50:	e00a      	b.n	800de68 <uxr_create_session+0x154>
 800de52:	f04f 0302 	mov.w	r3, #2
 800de56:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800de5a:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800de5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800de64:	f7ff fb1e 	bl	800d4a4 <read_submessage_list>
 800de68:	a922      	add	r1, sp, #136	@ 0x88
 800de6a:	2204      	movs	r2, #4
 800de6c:	4640      	mov	r0, r8
 800de6e:	f003 fee9 	bl	8011c44 <uxr_next_input_reliable_buffer_available>
 800de72:	4603      	mov	r3, r0
 800de74:	a922      	add	r1, sp, #136	@ 0x88
 800de76:	4620      	mov	r0, r4
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d1ea      	bne.n	800de52 <uxr_create_session+0x13e>
 800de7c:	9904      	ldr	r1, [sp, #16]
 800de7e:	463a      	mov	r2, r7
 800de80:	4620      	mov	r0, r4
 800de82:	f7ff f98b 	bl	800d19c <write_submessage_acknack.isra.0>
 800de86:	e779      	b.n	800dd7c <uxr_create_session+0x68>
 800de88:	4639      	mov	r1, r7
 800de8a:	4650      	mov	r0, sl
 800de8c:	f000 fa94 	bl	800e3b8 <uxr_get_input_best_effort_stream>
 800de90:	2800      	cmp	r0, #0
 800de92:	f43f af73 	beq.w	800dd7c <uxr_create_session+0x68>
 800de96:	4649      	mov	r1, r9
 800de98:	f003 fdc0 	bl	8011a1c <uxr_receive_best_effort_message>
 800de9c:	2800      	cmp	r0, #0
 800de9e:	f43f af6d 	beq.w	800dd7c <uxr_create_session+0x68>
 800dea2:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800dea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dea8:	a91a      	add	r1, sp, #104	@ 0x68
 800deaa:	4620      	mov	r0, r4
 800deac:	f7ff fafa 	bl	800d4a4 <read_submessage_list>
 800deb0:	e764      	b.n	800dd7c <uxr_create_session+0x68>
 800deb2:	4650      	mov	r0, sl
 800deb4:	f000 f9d0 	bl	800e258 <uxr_reset_stream_storage>
 800deb8:	2001      	movs	r0, #1
 800deba:	b02b      	add	sp, #172	@ 0xac
 800debc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec0:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800dec4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dec6:	a91a      	add	r1, sp, #104	@ 0x68
 800dec8:	4620      	mov	r0, r4
 800deca:	f7ff faeb 	bl	800d4a4 <read_submessage_list>
 800dece:	e7be      	b.n	800de4e <uxr_create_session+0x13a>

0800ded0 <uxr_prepare_stream_to_write_submessage>:
 800ded0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ded4:	b082      	sub	sp, #8
 800ded6:	4682      	mov	sl, r0
 800ded8:	4610      	mov	r0, r2
 800deda:	4615      	mov	r5, r2
 800dedc:	461e      	mov	r6, r3
 800dede:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800dee2:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800dee6:	9101      	str	r1, [sp, #4]
 800dee8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800deec:	f000 face 	bl	800e48c <uxr_submessage_padding>
 800def0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800def4:	f105 0904 	add.w	r9, r5, #4
 800def8:	2b01      	cmp	r3, #1
 800defa:	4481      	add	r9, r0
 800defc:	d01d      	beq.n	800df3a <uxr_prepare_stream_to_write_submessage+0x6a>
 800defe:	2b02      	cmp	r3, #2
 800df00:	d116      	bne.n	800df30 <uxr_prepare_stream_to_write_submessage+0x60>
 800df02:	4621      	mov	r1, r4
 800df04:	f10a 0008 	add.w	r0, sl, #8
 800df08:	f000 fa4c 	bl	800e3a4 <uxr_get_output_reliable_stream>
 800df0c:	4604      	mov	r4, r0
 800df0e:	b158      	cbz	r0, 800df28 <uxr_prepare_stream_to_write_submessage+0x58>
 800df10:	4649      	mov	r1, r9
 800df12:	4632      	mov	r2, r6
 800df14:	f004 f852 	bl	8011fbc <uxr_prepare_reliable_buffer_to_write>
 800df18:	4604      	mov	r4, r0
 800df1a:	b12c      	cbz	r4, 800df28 <uxr_prepare_stream_to_write_submessage+0x58>
 800df1c:	4643      	mov	r3, r8
 800df1e:	b2aa      	uxth	r2, r5
 800df20:	4639      	mov	r1, r7
 800df22:	4630      	mov	r0, r6
 800df24:	f000 fa72 	bl	800e40c <uxr_buffer_submessage_header>
 800df28:	4620      	mov	r0, r4
 800df2a:	b002      	add	sp, #8
 800df2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df30:	2400      	movs	r4, #0
 800df32:	4620      	mov	r0, r4
 800df34:	b002      	add	sp, #8
 800df36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df3a:	4621      	mov	r1, r4
 800df3c:	f10a 0008 	add.w	r0, sl, #8
 800df40:	f000 fa28 	bl	800e394 <uxr_get_output_best_effort_stream>
 800df44:	4604      	mov	r4, r0
 800df46:	2800      	cmp	r0, #0
 800df48:	d0ee      	beq.n	800df28 <uxr_prepare_stream_to_write_submessage+0x58>
 800df4a:	4649      	mov	r1, r9
 800df4c:	4632      	mov	r2, r6
 800df4e:	f003 ff65 	bl	8011e1c <uxr_prepare_best_effort_buffer_to_write>
 800df52:	4604      	mov	r4, r0
 800df54:	e7e1      	b.n	800df1a <uxr_prepare_stream_to_write_submessage+0x4a>
 800df56:	bf00      	nop

0800df58 <uxr_init_session_info>:
 800df58:	0e13      	lsrs	r3, r2, #24
 800df5a:	7043      	strb	r3, [r0, #1]
 800df5c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800df60:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800df64:	7001      	strb	r1, [r0, #0]
 800df66:	70c3      	strb	r3, [r0, #3]
 800df68:	2109      	movs	r1, #9
 800df6a:	23ff      	movs	r3, #255	@ 0xff
 800df6c:	f880 c002 	strb.w	ip, [r0, #2]
 800df70:	7102      	strb	r2, [r0, #4]
 800df72:	80c1      	strh	r1, [r0, #6]
 800df74:	7143      	strb	r3, [r0, #5]
 800df76:	4770      	bx	lr

0800df78 <uxr_buffer_create_session>:
 800df78:	b530      	push	{r4, r5, lr}
 800df7a:	b089      	sub	sp, #36	@ 0x24
 800df7c:	2300      	movs	r3, #0
 800df7e:	4d12      	ldr	r5, [pc, #72]	@ (800dfc8 <uxr_buffer_create_session+0x50>)
 800df80:	9307      	str	r3, [sp, #28]
 800df82:	f8ad 201c 	strh.w	r2, [sp, #28]
 800df86:	2201      	movs	r2, #1
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	80c2      	strh	r2, [r0, #6]
 800df8c:	f88d 2004 	strb.w	r2, [sp, #4]
 800df90:	682a      	ldr	r2, [r5, #0]
 800df92:	9200      	str	r2, [sp, #0]
 800df94:	88aa      	ldrh	r2, [r5, #4]
 800df96:	f8ad 2006 	strh.w	r2, [sp, #6]
 800df9a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800df9e:	9202      	str	r2, [sp, #8]
 800dfa0:	460c      	mov	r4, r1
 800dfa2:	7802      	ldrb	r2, [r0, #0]
 800dfa4:	9303      	str	r3, [sp, #12]
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	f88d 200c 	strb.w	r2, [sp, #12]
 800dfac:	4620      	mov	r0, r4
 800dfae:	2210      	movs	r2, #16
 800dfb0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800dfb4:	9306      	str	r3, [sp, #24]
 800dfb6:	f000 fa29 	bl	800e40c <uxr_buffer_submessage_header>
 800dfba:	4669      	mov	r1, sp
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f001 f981 	bl	800f2c4 <uxr_serialize_CREATE_CLIENT_Payload>
 800dfc2:	b009      	add	sp, #36	@ 0x24
 800dfc4:	bd30      	pop	{r4, r5, pc}
 800dfc6:	bf00      	nop
 800dfc8:	08015b54 	.word	0x08015b54

0800dfcc <uxr_buffer_delete_session>:
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	4b0c      	ldr	r3, [pc, #48]	@ (800e000 <uxr_buffer_delete_session+0x34>)
 800dfd0:	b082      	sub	sp, #8
 800dfd2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800dfd6:	f8ad c006 	strh.w	ip, [sp, #6]
 800dfda:	460c      	mov	r4, r1
 800dfdc:	2202      	movs	r2, #2
 800dfde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfe2:	80c2      	strh	r2, [r0, #6]
 800dfe4:	f8ad 3004 	strh.w	r3, [sp, #4]
 800dfe8:	2204      	movs	r2, #4
 800dfea:	2300      	movs	r3, #0
 800dfec:	2103      	movs	r1, #3
 800dfee:	4620      	mov	r0, r4
 800dff0:	f000 fa0c 	bl	800e40c <uxr_buffer_submessage_header>
 800dff4:	a901      	add	r1, sp, #4
 800dff6:	4620      	mov	r0, r4
 800dff8:	f001 fa0a 	bl	800f410 <uxr_serialize_DELETE_Payload>
 800dffc:	b002      	add	sp, #8
 800dffe:	bd10      	pop	{r4, pc}
 800e000:	08015b54 	.word	0x08015b54

0800e004 <uxr_read_create_session_status>:
 800e004:	b510      	push	{r4, lr}
 800e006:	b088      	sub	sp, #32
 800e008:	4604      	mov	r4, r0
 800e00a:	4608      	mov	r0, r1
 800e00c:	a901      	add	r1, sp, #4
 800e00e:	f001 fa0f 	bl	800f430 <uxr_deserialize_STATUS_AGENT_Payload>
 800e012:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e016:	7163      	strb	r3, [r4, #5]
 800e018:	b008      	add	sp, #32
 800e01a:	bd10      	pop	{r4, pc}

0800e01c <uxr_read_delete_session_status>:
 800e01c:	b510      	push	{r4, lr}
 800e01e:	4604      	mov	r4, r0
 800e020:	b084      	sub	sp, #16
 800e022:	4608      	mov	r0, r1
 800e024:	a902      	add	r1, sp, #8
 800e026:	f001 fa33 	bl	800f490 <uxr_deserialize_STATUS_Payload>
 800e02a:	88e3      	ldrh	r3, [r4, #6]
 800e02c:	2b02      	cmp	r3, #2
 800e02e:	d001      	beq.n	800e034 <uxr_read_delete_session_status+0x18>
 800e030:	b004      	add	sp, #16
 800e032:	bd10      	pop	{r4, pc}
 800e034:	f10d 000a 	add.w	r0, sp, #10
 800e038:	f7ff f836 	bl	800d0a8 <uxr_object_id_from_raw>
 800e03c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800e040:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800e044:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e048:	b29b      	uxth	r3, r3
 800e04a:	2b02      	cmp	r3, #2
 800e04c:	bf04      	itt	eq
 800e04e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800e052:	7163      	strbeq	r3, [r4, #5]
 800e054:	b004      	add	sp, #16
 800e056:	bd10      	pop	{r4, pc}

0800e058 <uxr_stamp_create_session_header>:
 800e058:	b510      	push	{r4, lr}
 800e05a:	2208      	movs	r2, #8
 800e05c:	b08a      	sub	sp, #40	@ 0x28
 800e05e:	4604      	mov	r4, r0
 800e060:	eb0d 0002 	add.w	r0, sp, r2
 800e064:	f7fe fe48 	bl	800ccf8 <ucdr_init_buffer>
 800e068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06c:	9400      	str	r4, [sp, #0]
 800e06e:	2300      	movs	r3, #0
 800e070:	461a      	mov	r2, r3
 800e072:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800e076:	a802      	add	r0, sp, #8
 800e078:	f000 fbc2 	bl	800e800 <uxr_serialize_message_header>
 800e07c:	b00a      	add	sp, #40	@ 0x28
 800e07e:	bd10      	pop	{r4, pc}

0800e080 <uxr_stamp_session_header>:
 800e080:	b530      	push	{r4, r5, lr}
 800e082:	b08d      	sub	sp, #52	@ 0x34
 800e084:	4604      	mov	r4, r0
 800e086:	460d      	mov	r5, r1
 800e088:	9203      	str	r2, [sp, #12]
 800e08a:	4619      	mov	r1, r3
 800e08c:	a804      	add	r0, sp, #16
 800e08e:	2208      	movs	r2, #8
 800e090:	f7fe fe32 	bl	800ccf8 <ucdr_init_buffer>
 800e094:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e098:	9b03      	ldr	r3, [sp, #12]
 800e09a:	9400      	str	r4, [sp, #0]
 800e09c:	462a      	mov	r2, r5
 800e09e:	a804      	add	r0, sp, #16
 800e0a0:	f000 fbae 	bl	800e800 <uxr_serialize_message_header>
 800e0a4:	b00d      	add	sp, #52	@ 0x34
 800e0a6:	bd30      	pop	{r4, r5, pc}

0800e0a8 <uxr_read_session_header>:
 800e0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	b084      	sub	sp, #16
 800e0b0:	4608      	mov	r0, r1
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	4615      	mov	r5, r2
 800e0b6:	461e      	mov	r6, r3
 800e0b8:	f7fe fe4e 	bl	800cd58 <ucdr_buffer_remaining>
 800e0bc:	2808      	cmp	r0, #8
 800e0be:	d803      	bhi.n	800e0c8 <uxr_read_session_header+0x20>
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	b004      	add	sp, #16
 800e0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c8:	f10d 080c 	add.w	r8, sp, #12
 800e0cc:	4633      	mov	r3, r6
 800e0ce:	462a      	mov	r2, r5
 800e0d0:	f8cd 8000 	str.w	r8, [sp]
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f10d 010b 	add.w	r1, sp, #11
 800e0da:	f000 fbaf 	bl	800e83c <uxr_deserialize_message_header>
 800e0de:	783a      	ldrb	r2, [r7, #0]
 800e0e0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	d1eb      	bne.n	800e0c0 <uxr_read_session_header+0x18>
 800e0e8:	061b      	lsls	r3, r3, #24
 800e0ea:	d41c      	bmi.n	800e126 <uxr_read_session_header+0x7e>
 800e0ec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e0f0:	787b      	ldrb	r3, [r7, #1]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d003      	beq.n	800e0fe <uxr_read_session_header+0x56>
 800e0f6:	2001      	movs	r0, #1
 800e0f8:	f080 0001 	eor.w	r0, r0, #1
 800e0fc:	e7e1      	b.n	800e0c2 <uxr_read_session_header+0x1a>
 800e0fe:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800e102:	78bb      	ldrb	r3, [r7, #2]
 800e104:	429a      	cmp	r2, r3
 800e106:	f107 0102 	add.w	r1, r7, #2
 800e10a:	d1f4      	bne.n	800e0f6 <uxr_read_session_header+0x4e>
 800e10c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800e110:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e114:	429a      	cmp	r2, r3
 800e116:	d1ee      	bne.n	800e0f6 <uxr_read_session_header+0x4e>
 800e118:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800e11c:	784b      	ldrb	r3, [r1, #1]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d1e9      	bne.n	800e0f6 <uxr_read_session_header+0x4e>
 800e122:	2000      	movs	r0, #0
 800e124:	e7e8      	b.n	800e0f8 <uxr_read_session_header+0x50>
 800e126:	2001      	movs	r0, #1
 800e128:	e7cb      	b.n	800e0c2 <uxr_read_session_header+0x1a>
 800e12a:	bf00      	nop

0800e12c <uxr_session_header_offset>:
 800e12c:	f990 3000 	ldrsb.w	r3, [r0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	bfac      	ite	ge
 800e134:	2008      	movge	r0, #8
 800e136:	2004      	movlt	r0, #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop

0800e13c <uxr_init_base_object_request>:
 800e13c:	b510      	push	{r4, lr}
 800e13e:	88c3      	ldrh	r3, [r0, #6]
 800e140:	b082      	sub	sp, #8
 800e142:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800e146:	9101      	str	r1, [sp, #4]
 800e148:	f1a3 010a 	sub.w	r1, r3, #10
 800e14c:	b289      	uxth	r1, r1
 800e14e:	42a1      	cmp	r1, r4
 800e150:	d80e      	bhi.n	800e170 <uxr_init_base_object_request+0x34>
 800e152:	3301      	adds	r3, #1
 800e154:	b29c      	uxth	r4, r3
 800e156:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	80c4      	strh	r4, [r0, #6]
 800e15e:	9801      	ldr	r0, [sp, #4]
 800e160:	7011      	strb	r1, [r2, #0]
 800e162:	7053      	strb	r3, [r2, #1]
 800e164:	1c91      	adds	r1, r2, #2
 800e166:	f7fe ffb3 	bl	800d0d0 <uxr_object_id_to_raw>
 800e16a:	4620      	mov	r0, r4
 800e16c:	b002      	add	sp, #8
 800e16e:	bd10      	pop	{r4, pc}
 800e170:	230a      	movs	r3, #10
 800e172:	2100      	movs	r1, #0
 800e174:	461c      	mov	r4, r3
 800e176:	e7f1      	b.n	800e15c <uxr_init_base_object_request+0x20>

0800e178 <uxr_parse_base_object_request>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4604      	mov	r4, r0
 800e17c:	3002      	adds	r0, #2
 800e17e:	460d      	mov	r5, r1
 800e180:	4616      	mov	r6, r2
 800e182:	f7fe ff91 	bl	800d0a8 <uxr_object_id_from_raw>
 800e186:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800e18a:	8028      	strh	r0, [r5, #0]
 800e18c:	806b      	strh	r3, [r5, #2]
 800e18e:	7822      	ldrb	r2, [r4, #0]
 800e190:	7863      	ldrb	r3, [r4, #1]
 800e192:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800e196:	8033      	strh	r3, [r6, #0]
 800e198:	bd70      	pop	{r4, r5, r6, pc}
 800e19a:	bf00      	nop

0800e19c <uxr_stream_id>:
 800e19c:	2901      	cmp	r1, #1
 800e19e:	b082      	sub	sp, #8
 800e1a0:	d01d      	beq.n	800e1de <uxr_stream_id+0x42>
 800e1a2:	2902      	cmp	r1, #2
 800e1a4:	f04f 0c00 	mov.w	ip, #0
 800e1a8:	d01e      	beq.n	800e1e8 <uxr_stream_id+0x4c>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	f36c 0307 	bfi	r3, ip, #0, #8
 800e1b0:	f360 230f 	bfi	r3, r0, #8, #8
 800e1b4:	f361 4317 	bfi	r3, r1, #16, #8
 800e1b8:	f362 631f 	bfi	r3, r2, #24, #8
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	2000      	movs	r0, #0
 800e1c0:	f362 0007 	bfi	r0, r2, #0, #8
 800e1c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e1c8:	f362 200f 	bfi	r0, r2, #8, #8
 800e1cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e1d0:	f362 4017 	bfi	r0, r2, #16, #8
 800e1d4:	0e1b      	lsrs	r3, r3, #24
 800e1d6:	f363 601f 	bfi	r0, r3, #24, #8
 800e1da:	b002      	add	sp, #8
 800e1dc:	4770      	bx	lr
 800e1de:	f100 0c01 	add.w	ip, r0, #1
 800e1e2:	fa5f fc8c 	uxtb.w	ip, ip
 800e1e6:	e7e0      	b.n	800e1aa <uxr_stream_id+0xe>
 800e1e8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800e1ec:	e7dd      	b.n	800e1aa <uxr_stream_id+0xe>
 800e1ee:	bf00      	nop

0800e1f0 <uxr_stream_id_from_raw>:
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	b130      	cbz	r0, 800e202 <uxr_stream_id_from_raw+0x12>
 800e1f4:	0603      	lsls	r3, r0, #24
 800e1f6:	d420      	bmi.n	800e23a <uxr_stream_id_from_raw+0x4a>
 800e1f8:	1e42      	subs	r2, r0, #1
 800e1fa:	b2d2      	uxtb	r2, r2
 800e1fc:	f04f 0c01 	mov.w	ip, #1
 800e200:	e001      	b.n	800e206 <uxr_stream_id_from_raw+0x16>
 800e202:	4684      	mov	ip, r0
 800e204:	4602      	mov	r2, r0
 800e206:	2300      	movs	r3, #0
 800e208:	f360 0307 	bfi	r3, r0, #0, #8
 800e20c:	f362 230f 	bfi	r3, r2, #8, #8
 800e210:	f36c 4317 	bfi	r3, ip, #16, #8
 800e214:	f361 631f 	bfi	r3, r1, #24, #8
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	2000      	movs	r0, #0
 800e21c:	f362 0007 	bfi	r0, r2, #0, #8
 800e220:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e224:	f362 200f 	bfi	r0, r2, #8, #8
 800e228:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800e22c:	f362 4017 	bfi	r0, r2, #16, #8
 800e230:	0e1b      	lsrs	r3, r3, #24
 800e232:	f363 601f 	bfi	r0, r3, #24, #8
 800e236:	b002      	add	sp, #8
 800e238:	4770      	bx	lr
 800e23a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800e23e:	f04f 0c02 	mov.w	ip, #2
 800e242:	e7e0      	b.n	800e206 <uxr_stream_id_from_raw+0x16>

0800e244 <uxr_init_stream_storage>:
 800e244:	2300      	movs	r3, #0
 800e246:	7403      	strb	r3, [r0, #16]
 800e248:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800e24c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800e250:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop

0800e258 <uxr_reset_stream_storage>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	7c03      	ldrb	r3, [r0, #16]
 800e25c:	4604      	mov	r4, r0
 800e25e:	b153      	cbz	r3, 800e276 <uxr_reset_stream_storage+0x1e>
 800e260:	4606      	mov	r6, r0
 800e262:	2500      	movs	r5, #0
 800e264:	4630      	mov	r0, r6
 800e266:	f003 fdd3 	bl	8011e10 <uxr_reset_output_best_effort_stream>
 800e26a:	7c23      	ldrb	r3, [r4, #16]
 800e26c:	3501      	adds	r5, #1
 800e26e:	42ab      	cmp	r3, r5
 800e270:	f106 0610 	add.w	r6, r6, #16
 800e274:	d8f6      	bhi.n	800e264 <uxr_reset_stream_storage+0xc>
 800e276:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e27a:	b163      	cbz	r3, 800e296 <uxr_reset_stream_storage+0x3e>
 800e27c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e280:	2500      	movs	r5, #0
 800e282:	4630      	mov	r0, r6
 800e284:	f003 fbc6 	bl	8011a14 <uxr_reset_input_best_effort_stream>
 800e288:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e28c:	3501      	adds	r5, #1
 800e28e:	42ab      	cmp	r3, r5
 800e290:	f106 0602 	add.w	r6, r6, #2
 800e294:	d8f5      	bhi.n	800e282 <uxr_reset_stream_storage+0x2a>
 800e296:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e29a:	b163      	cbz	r3, 800e2b6 <uxr_reset_stream_storage+0x5e>
 800e29c:	f104 0618 	add.w	r6, r4, #24
 800e2a0:	2500      	movs	r5, #0
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	f003 fe60 	bl	8011f68 <uxr_reset_output_reliable_stream>
 800e2a8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800e2ac:	3501      	adds	r5, #1
 800e2ae:	42ab      	cmp	r3, r5
 800e2b0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800e2b4:	d8f5      	bhi.n	800e2a2 <uxr_reset_stream_storage+0x4a>
 800e2b6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e2ba:	b163      	cbz	r3, 800e2d6 <uxr_reset_stream_storage+0x7e>
 800e2bc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800e2c0:	2500      	movs	r5, #0
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f003 fc1a 	bl	8011afc <uxr_reset_input_reliable_stream>
 800e2c8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800e2cc:	3501      	adds	r5, #1
 800e2ce:	42ab      	cmp	r3, r5
 800e2d0:	f106 0618 	add.w	r6, r6, #24
 800e2d4:	d8f5      	bhi.n	800e2c2 <uxr_reset_stream_storage+0x6a>
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}

0800e2d8 <uxr_add_output_best_effort_buffer>:
 800e2d8:	b510      	push	{r4, lr}
 800e2da:	7c04      	ldrb	r4, [r0, #16]
 800e2dc:	f104 0c01 	add.w	ip, r4, #1
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	f880 c010 	strb.w	ip, [r0, #16]
 800e2e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800e2ea:	f003 fd87 	bl	8011dfc <uxr_init_output_best_effort_stream>
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	4620      	mov	r0, r4
 800e2f4:	b002      	add	sp, #8
 800e2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2fa:	f7ff bf4f 	b.w	800e19c <uxr_stream_id>
 800e2fe:	bf00      	nop

0800e300 <uxr_add_output_reliable_buffer>:
 800e300:	b510      	push	{r4, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	4684      	mov	ip, r0
 800e306:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800e30a:	9000      	str	r0, [sp, #0]
 800e30c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800e310:	2028      	movs	r0, #40	@ 0x28
 800e312:	fb00 c004 	mla	r0, r0, r4, ip
 800e316:	f104 0e01 	add.w	lr, r4, #1
 800e31a:	3018      	adds	r0, #24
 800e31c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800e320:	f003 fdea 	bl	8011ef8 <uxr_init_output_reliable_stream>
 800e324:	2201      	movs	r2, #1
 800e326:	2102      	movs	r1, #2
 800e328:	4620      	mov	r0, r4
 800e32a:	b004      	add	sp, #16
 800e32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e330:	f7ff bf34 	b.w	800e19c <uxr_stream_id>

0800e334 <uxr_add_input_best_effort_buffer>:
 800e334:	b510      	push	{r4, lr}
 800e336:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800e33a:	4603      	mov	r3, r0
 800e33c:	1c62      	adds	r2, r4, #1
 800e33e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800e342:	b082      	sub	sp, #8
 800e344:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800e348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e34c:	f003 fb5e 	bl	8011a0c <uxr_init_input_best_effort_stream>
 800e350:	2200      	movs	r2, #0
 800e352:	2101      	movs	r1, #1
 800e354:	4620      	mov	r0, r4
 800e356:	b002      	add	sp, #8
 800e358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e35c:	f7ff bf1e 	b.w	800e19c <uxr_stream_id>

0800e360 <uxr_add_input_reliable_buffer>:
 800e360:	b510      	push	{r4, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	4684      	mov	ip, r0
 800e366:	9806      	ldr	r0, [sp, #24]
 800e368:	9000      	str	r0, [sp, #0]
 800e36a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800e36e:	2018      	movs	r0, #24
 800e370:	fb00 c004 	mla	r0, r0, r4, ip
 800e374:	f104 0e01 	add.w	lr, r4, #1
 800e378:	3048      	adds	r0, #72	@ 0x48
 800e37a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800e37e:	f003 fb91 	bl	8011aa4 <uxr_init_input_reliable_stream>
 800e382:	2200      	movs	r2, #0
 800e384:	2102      	movs	r1, #2
 800e386:	4620      	mov	r0, r4
 800e388:	b004      	add	sp, #16
 800e38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e38e:	f7ff bf05 	b.w	800e19c <uxr_stream_id>
 800e392:	bf00      	nop

0800e394 <uxr_get_output_best_effort_stream>:
 800e394:	7c03      	ldrb	r3, [r0, #16]
 800e396:	428b      	cmp	r3, r1
 800e398:	bf8c      	ite	hi
 800e39a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800e39e:	2000      	movls	r0, #0
 800e3a0:	4770      	bx	lr
 800e3a2:	bf00      	nop

0800e3a4 <uxr_get_output_reliable_stream>:
 800e3a4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e3a8:	428b      	cmp	r3, r1
 800e3aa:	bf83      	ittte	hi
 800e3ac:	2328      	movhi	r3, #40	@ 0x28
 800e3ae:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e3b2:	3018      	addhi	r0, #24
 800e3b4:	2000      	movls	r0, #0
 800e3b6:	4770      	bx	lr

0800e3b8 <uxr_get_input_best_effort_stream>:
 800e3b8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e3bc:	428b      	cmp	r3, r1
 800e3be:	bf86      	itte	hi
 800e3c0:	3121      	addhi	r1, #33	@ 0x21
 800e3c2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800e3c6:	2000      	movls	r0, #0
 800e3c8:	4770      	bx	lr
 800e3ca:	bf00      	nop

0800e3cc <uxr_get_input_reliable_stream>:
 800e3cc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800e3d0:	428b      	cmp	r3, r1
 800e3d2:	bf83      	ittte	hi
 800e3d4:	2318      	movhi	r3, #24
 800e3d6:	fb03 0001 	mlahi	r0, r3, r1, r0
 800e3da:	3048      	addhi	r0, #72	@ 0x48
 800e3dc:	2000      	movls	r0, #0
 800e3de:	4770      	bx	lr

0800e3e0 <uxr_output_streams_confirmed>:
 800e3e0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e3e4:	b183      	cbz	r3, 800e408 <uxr_output_streams_confirmed+0x28>
 800e3e6:	b570      	push	{r4, r5, r6, lr}
 800e3e8:	4606      	mov	r6, r0
 800e3ea:	f100 0518 	add.w	r5, r0, #24
 800e3ee:	2400      	movs	r4, #0
 800e3f0:	e001      	b.n	800e3f6 <uxr_output_streams_confirmed+0x16>
 800e3f2:	3528      	adds	r5, #40	@ 0x28
 800e3f4:	b138      	cbz	r0, 800e406 <uxr_output_streams_confirmed+0x26>
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	f004 f826 	bl	8012448 <uxr_is_output_up_to_date>
 800e3fc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800e400:	3401      	adds	r4, #1
 800e402:	42a3      	cmp	r3, r4
 800e404:	d8f5      	bhi.n	800e3f2 <uxr_output_streams_confirmed+0x12>
 800e406:	bd70      	pop	{r4, r5, r6, pc}
 800e408:	2001      	movs	r0, #1
 800e40a:	4770      	bx	lr

0800e40c <uxr_buffer_submessage_header>:
 800e40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40e:	4604      	mov	r4, r0
 800e410:	460e      	mov	r6, r1
 800e412:	2104      	movs	r1, #4
 800e414:	4615      	mov	r5, r2
 800e416:	461f      	mov	r7, r3
 800e418:	f7fe fc88 	bl	800cd2c <ucdr_align_to>
 800e41c:	2301      	movs	r3, #1
 800e41e:	ea47 0203 	orr.w	r2, r7, r3
 800e422:	4631      	mov	r1, r6
 800e424:	7523      	strb	r3, [r4, #20]
 800e426:	4620      	mov	r0, r4
 800e428:	462b      	mov	r3, r5
 800e42a:	f000 fa27 	bl	800e87c <uxr_serialize_submessage_header>
 800e42e:	4620      	mov	r0, r4
 800e430:	f7fe fc92 	bl	800cd58 <ucdr_buffer_remaining>
 800e434:	42a8      	cmp	r0, r5
 800e436:	bf34      	ite	cc
 800e438:	2000      	movcc	r0, #0
 800e43a:	2001      	movcs	r0, #1
 800e43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e43e:	bf00      	nop

0800e440 <uxr_read_submessage_header>:
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e444:	4604      	mov	r4, r0
 800e446:	460d      	mov	r5, r1
 800e448:	2104      	movs	r1, #4
 800e44a:	4616      	mov	r6, r2
 800e44c:	4698      	mov	r8, r3
 800e44e:	f7fe fc6d 	bl	800cd2c <ucdr_align_to>
 800e452:	4620      	mov	r0, r4
 800e454:	f7fe fc80 	bl	800cd58 <ucdr_buffer_remaining>
 800e458:	2803      	cmp	r0, #3
 800e45a:	bf8c      	ite	hi
 800e45c:	2701      	movhi	r7, #1
 800e45e:	2700      	movls	r7, #0
 800e460:	d802      	bhi.n	800e468 <uxr_read_submessage_header+0x28>
 800e462:	4638      	mov	r0, r7
 800e464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e468:	4633      	mov	r3, r6
 800e46a:	4642      	mov	r2, r8
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f000 fa18 	bl	800e8a4 <uxr_deserialize_submessage_header>
 800e474:	f898 3000 	ldrb.w	r3, [r8]
 800e478:	f003 0201 	and.w	r2, r3, #1
 800e47c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800e480:	f888 3000 	strb.w	r3, [r8]
 800e484:	7522      	strb	r2, [r4, #20]
 800e486:	4638      	mov	r0, r7
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e48c <uxr_submessage_padding>:
 800e48c:	f010 0003 	ands.w	r0, r0, #3
 800e490:	bf18      	it	ne
 800e492:	f1c0 0004 	rsbne	r0, r0, #4
 800e496:	4770      	bx	lr

0800e498 <uxr_millis>:
 800e498:	b510      	push	{r4, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	4669      	mov	r1, sp
 800e49e:	2001      	movs	r0, #1
 800e4a0:	f7f4 faca 	bl	8002a38 <clock_gettime>
 800e4a4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800e4a8:	4906      	ldr	r1, [pc, #24]	@ (800e4c4 <uxr_millis+0x2c>)
 800e4aa:	fba0 0301 	umull	r0, r3, r0, r1
 800e4ae:	1900      	adds	r0, r0, r4
 800e4b0:	fb01 3102 	mla	r1, r1, r2, r3
 800e4b4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e4b8:	4a03      	ldr	r2, [pc, #12]	@ (800e4c8 <uxr_millis+0x30>)
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	f7f2 fb2e 	bl	8000b1c <__aeabi_ldivmod>
 800e4c0:	b004      	add	sp, #16
 800e4c2:	bd10      	pop	{r4, pc}
 800e4c4:	3b9aca00 	.word	0x3b9aca00
 800e4c8:	000f4240 	.word	0x000f4240

0800e4cc <uxr_nanos>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	4669      	mov	r1, sp
 800e4d2:	2001      	movs	r0, #1
 800e4d4:	f7f4 fab0 	bl	8002a38 <clock_gettime>
 800e4d8:	4a06      	ldr	r2, [pc, #24]	@ (800e4f4 <uxr_nanos+0x28>)
 800e4da:	9800      	ldr	r0, [sp, #0]
 800e4dc:	9902      	ldr	r1, [sp, #8]
 800e4de:	9c01      	ldr	r4, [sp, #4]
 800e4e0:	fba0 0302 	umull	r0, r3, r0, r2
 800e4e4:	1840      	adds	r0, r0, r1
 800e4e6:	fb02 3304 	mla	r3, r2, r4, r3
 800e4ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800e4ee:	b004      	add	sp, #16
 800e4f0:	bd10      	pop	{r4, pc}
 800e4f2:	bf00      	nop
 800e4f4:	3b9aca00 	.word	0x3b9aca00

0800e4f8 <on_full_output_buffer_fragmented>:
 800e4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fc:	460c      	mov	r4, r1
 800e4fe:	b08a      	sub	sp, #40	@ 0x28
 800e500:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800e504:	4606      	mov	r6, r0
 800e506:	f104 0008 	add.w	r0, r4, #8
 800e50a:	f7ff ff4b 	bl	800e3a4 <uxr_get_output_reliable_stream>
 800e50e:	4605      	mov	r5, r0
 800e510:	f003 ffa4 	bl	801245c <get_available_free_slots>
 800e514:	b968      	cbnz	r0, 800e532 <on_full_output_buffer_fragmented+0x3a>
 800e516:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800e51a:	4620      	mov	r0, r4
 800e51c:	4798      	blx	r3
 800e51e:	b918      	cbnz	r0, 800e528 <on_full_output_buffer_fragmented+0x30>
 800e520:	2001      	movs	r0, #1
 800e522:	b00a      	add	sp, #40	@ 0x28
 800e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e528:	4628      	mov	r0, r5
 800e52a:	f003 ff97 	bl	801245c <get_available_free_slots>
 800e52e:	2800      	cmp	r0, #0
 800e530:	d0f6      	beq.n	800e520 <on_full_output_buffer_fragmented+0x28>
 800e532:	8929      	ldrh	r1, [r5, #8]
 800e534:	89eb      	ldrh	r3, [r5, #14]
 800e536:	7b28      	ldrb	r0, [r5, #12]
 800e538:	686a      	ldr	r2, [r5, #4]
 800e53a:	fbb2 f8f1 	udiv	r8, r2, r1
 800e53e:	fbb3 f2f1 	udiv	r2, r3, r1
 800e542:	fb01 3112 	mls	r1, r1, r2, r3
 800e546:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800e54a:	b289      	uxth	r1, r1
 800e54c:	fb08 f101 	mul.w	r1, r8, r1
 800e550:	30fc      	adds	r0, #252	@ 0xfc
 800e552:	f1a8 0804 	sub.w	r8, r8, #4
 800e556:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800e55a:	4440      	add	r0, r8
 800e55c:	b287      	uxth	r7, r0
 800e55e:	1bdb      	subs	r3, r3, r7
 800e560:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	3104      	adds	r1, #4
 800e568:	4419      	add	r1, r3
 800e56a:	4642      	mov	r2, r8
 800e56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	a802      	add	r0, sp, #8
 800e574:	2300      	movs	r3, #0
 800e576:	f7fe fbad 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800e57a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e57e:	f102 0308 	add.w	r3, r2, #8
 800e582:	4543      	cmp	r3, r8
 800e584:	d928      	bls.n	800e5d8 <on_full_output_buffer_fragmented+0xe0>
 800e586:	463a      	mov	r2, r7
 800e588:	2300      	movs	r3, #0
 800e58a:	210d      	movs	r1, #13
 800e58c:	a802      	add	r0, sp, #8
 800e58e:	f7ff ff3d 	bl	800e40c <uxr_buffer_submessage_header>
 800e592:	8929      	ldrh	r1, [r5, #8]
 800e594:	89eb      	ldrh	r3, [r5, #14]
 800e596:	fbb3 f2f1 	udiv	r2, r3, r1
 800e59a:	fb01 3312 	mls	r3, r1, r2, r3
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	686a      	ldr	r2, [r5, #4]
 800e5a2:	fbb2 f2f1 	udiv	r2, r2, r1
 800e5a6:	fb02 f303 	mul.w	r3, r2, r3
 800e5aa:	682a      	ldr	r2, [r5, #0]
 800e5ac:	f842 8003 	str.w	r8, [r2, r3]
 800e5b0:	89e8      	ldrh	r0, [r5, #14]
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	f004 f868 	bl	8012688 <uxr_seq_num_add>
 800e5b8:	9904      	ldr	r1, [sp, #16]
 800e5ba:	9a03      	ldr	r2, [sp, #12]
 800e5bc:	81e8      	strh	r0, [r5, #14]
 800e5be:	1a52      	subs	r2, r2, r1
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f7fe fb99 	bl	800ccf8 <ucdr_init_buffer>
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	490f      	ldr	r1, [pc, #60]	@ (800e608 <on_full_output_buffer_fragmented+0x110>)
 800e5ca:	4622      	mov	r2, r4
 800e5cc:	f7fe fb68 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	b00a      	add	sp, #40	@ 0x28
 800e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5d8:	b292      	uxth	r2, r2
 800e5da:	2302      	movs	r3, #2
 800e5dc:	210d      	movs	r1, #13
 800e5de:	a802      	add	r0, sp, #8
 800e5e0:	f7ff ff14 	bl	800e40c <uxr_buffer_submessage_header>
 800e5e4:	8928      	ldrh	r0, [r5, #8]
 800e5e6:	89eb      	ldrh	r3, [r5, #14]
 800e5e8:	fbb3 f1f0 	udiv	r1, r3, r0
 800e5ec:	fb00 3311 	mls	r3, r0, r1, r3
 800e5f0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800e5f4:	6869      	ldr	r1, [r5, #4]
 800e5f6:	fbb1 f1f0 	udiv	r1, r1, r0
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	fb01 f303 	mul.w	r3, r1, r3
 800e600:	6829      	ldr	r1, [r5, #0]
 800e602:	3208      	adds	r2, #8
 800e604:	50ca      	str	r2, [r1, r3]
 800e606:	e7d3      	b.n	800e5b0 <on_full_output_buffer_fragmented+0xb8>
 800e608:	0800e4f9 	.word	0x0800e4f9

0800e60c <uxr_prepare_output_stream>:
 800e60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e60e:	b087      	sub	sp, #28
 800e610:	2707      	movs	r7, #7
 800e612:	9202      	str	r2, [sp, #8]
 800e614:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e616:	9103      	str	r1, [sp, #12]
 800e618:	2500      	movs	r5, #0
 800e61a:	3204      	adds	r2, #4
 800e61c:	e9cd 7500 	strd	r7, r5, [sp]
 800e620:	461c      	mov	r4, r3
 800e622:	4606      	mov	r6, r0
 800e624:	f7ff fc54 	bl	800ded0 <uxr_prepare_stream_to_write_submessage>
 800e628:	f080 0201 	eor.w	r2, r0, #1
 800e62c:	b2d2      	uxtb	r2, r2
 800e62e:	75a2      	strb	r2, [r4, #22]
 800e630:	b112      	cbz	r2, 800e638 <uxr_prepare_output_stream+0x2c>
 800e632:	4628      	mov	r0, r5
 800e634:	b007      	add	sp, #28
 800e636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e638:	aa05      	add	r2, sp, #20
 800e63a:	9902      	ldr	r1, [sp, #8]
 800e63c:	4630      	mov	r0, r6
 800e63e:	f7ff fd7d 	bl	800e13c <uxr_init_base_object_request>
 800e642:	a905      	add	r1, sp, #20
 800e644:	4605      	mov	r5, r0
 800e646:	4620      	mov	r0, r4
 800e648:	f000 ffa0 	bl	800f58c <uxr_serialize_WRITE_DATA_Payload_Data>
 800e64c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800e650:	69a6      	ldr	r6, [r4, #24]
 800e652:	69e7      	ldr	r7, [r4, #28]
 800e654:	1a52      	subs	r2, r2, r1
 800e656:	4620      	mov	r0, r4
 800e658:	f7fe fb4e 	bl	800ccf8 <ucdr_init_buffer>
 800e65c:	4620      	mov	r0, r4
 800e65e:	463a      	mov	r2, r7
 800e660:	4631      	mov	r1, r6
 800e662:	f7fe fb1d 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 800e666:	4628      	mov	r0, r5
 800e668:	b007      	add	sp, #28
 800e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e66c <uxr_prepare_output_stream_fragmented>:
 800e66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e670:	b091      	sub	sp, #68	@ 0x44
 800e672:	4605      	mov	r5, r0
 800e674:	9105      	str	r1, [sp, #20]
 800e676:	3008      	adds	r0, #8
 800e678:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800e67c:	461e      	mov	r6, r3
 800e67e:	9204      	str	r2, [sp, #16]
 800e680:	f7ff fe90 	bl	800e3a4 <uxr_get_output_reliable_stream>
 800e684:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	f000 8091 	beq.w	800e7b0 <uxr_prepare_output_stream_fragmented+0x144>
 800e68e:	4604      	mov	r4, r0
 800e690:	2800      	cmp	r0, #0
 800e692:	f000 808d 	beq.w	800e7b0 <uxr_prepare_output_stream_fragmented+0x144>
 800e696:	f003 fee1 	bl	801245c <get_available_free_slots>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f000 8083 	beq.w	800e7a6 <uxr_prepare_output_stream_fragmented+0x13a>
 800e6a0:	8922      	ldrh	r2, [r4, #8]
 800e6a2:	89e7      	ldrh	r7, [r4, #14]
 800e6a4:	fbb7 f9f2 	udiv	r9, r7, r2
 800e6a8:	fb02 7919 	mls	r9, r2, r9, r7
 800e6ac:	fa1f f989 	uxth.w	r9, r9
 800e6b0:	6863      	ldr	r3, [r4, #4]
 800e6b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	9203      	str	r2, [sp, #12]
 800e6ba:	fb02 f909 	mul.w	r9, r2, r9
 800e6be:	f109 0904 	add.w	r9, r9, #4
 800e6c2:	4499      	add	r9, r3
 800e6c4:	7b23      	ldrb	r3, [r4, #12]
 800e6c6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e6ca:	4543      	cmp	r3, r8
 800e6cc:	f1a2 0b04 	sub.w	fp, r2, #4
 800e6d0:	d37a      	bcc.n	800e7c8 <uxr_prepare_output_stream_fragmented+0x15c>
 800e6d2:	f1ab 0a04 	sub.w	sl, fp, #4
 800e6d6:	ebaa 0a03 	sub.w	sl, sl, r3
 800e6da:	465a      	mov	r2, fp
 800e6dc:	2300      	movs	r3, #0
 800e6de:	4649      	mov	r1, r9
 800e6e0:	a808      	add	r0, sp, #32
 800e6e2:	f8cd 8000 	str.w	r8, [sp]
 800e6e6:	f7fe faf5 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 800e6ea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e6ec:	fa1f fa8a 	uxth.w	sl, sl
 800e6f0:	4652      	mov	r2, sl
 800e6f2:	f103 0a08 	add.w	sl, r3, #8
 800e6f6:	45da      	cmp	sl, fp
 800e6f8:	bf34      	ite	cc
 800e6fa:	2302      	movcc	r3, #2
 800e6fc:	2300      	movcs	r3, #0
 800e6fe:	210d      	movs	r1, #13
 800e700:	a808      	add	r0, sp, #32
 800e702:	f7ff fe83 	bl	800e40c <uxr_buffer_submessage_header>
 800e706:	8921      	ldrh	r1, [r4, #8]
 800e708:	fbb7 f2f1 	udiv	r2, r7, r1
 800e70c:	fb01 7212 	mls	r2, r1, r2, r7
 800e710:	b292      	uxth	r2, r2
 800e712:	6863      	ldr	r3, [r4, #4]
 800e714:	fbb3 f3f1 	udiv	r3, r3, r1
 800e718:	fb02 f303 	mul.w	r3, r2, r3
 800e71c:	6822      	ldr	r2, [r4, #0]
 800e71e:	4638      	mov	r0, r7
 800e720:	f842 b003 	str.w	fp, [r2, r3]
 800e724:	2101      	movs	r1, #1
 800e726:	f003 ffaf 	bl	8012688 <uxr_seq_num_add>
 800e72a:	9b03      	ldr	r3, [sp, #12]
 800e72c:	f108 0104 	add.w	r1, r8, #4
 800e730:	f1a3 0208 	sub.w	r2, r3, #8
 800e734:	eba2 0208 	sub.w	r2, r2, r8
 800e738:	4449      	add	r1, r9
 800e73a:	4607      	mov	r7, r0
 800e73c:	4630      	mov	r0, r6
 800e73e:	f7fe fadb 	bl	800ccf8 <ucdr_init_buffer>
 800e742:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e744:	81e7      	strh	r7, [r4, #14]
 800e746:	1d1a      	adds	r2, r3, #4
 800e748:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e74c:	bf28      	it	cs
 800e74e:	2200      	movcs	r2, #0
 800e750:	2300      	movs	r3, #0
 800e752:	b292      	uxth	r2, r2
 800e754:	2107      	movs	r1, #7
 800e756:	4630      	mov	r0, r6
 800e758:	f7ff fe58 	bl	800e40c <uxr_buffer_submessage_header>
 800e75c:	9904      	ldr	r1, [sp, #16]
 800e75e:	aa07      	add	r2, sp, #28
 800e760:	4628      	mov	r0, r5
 800e762:	f7ff fceb 	bl	800e13c <uxr_init_base_object_request>
 800e766:	4604      	mov	r4, r0
 800e768:	b318      	cbz	r0, 800e7b2 <uxr_prepare_output_stream_fragmented+0x146>
 800e76a:	a907      	add	r1, sp, #28
 800e76c:	4630      	mov	r0, r6
 800e76e:	f000 ff0d 	bl	800f58c <uxr_serialize_WRITE_DATA_Payload_Data>
 800e772:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800e776:	4630      	mov	r0, r6
 800e778:	1a52      	subs	r2, r2, r1
 800e77a:	f7fe fabd 	bl	800ccf8 <ucdr_init_buffer>
 800e77e:	9b05      	ldr	r3, [sp, #20]
 800e780:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800e784:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e786:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800e78a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800e78c:	491b      	ldr	r1, [pc, #108]	@ (800e7fc <uxr_prepare_output_stream_fragmented+0x190>)
 800e78e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800e792:	4630      	mov	r0, r6
 800e794:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800e798:	462a      	mov	r2, r5
 800e79a:	f7fe fa81 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 800e79e:	4620      	mov	r0, r4
 800e7a0:	b011      	add	sp, #68	@ 0x44
 800e7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800e7a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	4798      	blx	r3
 800e7ae:	b920      	cbnz	r0, 800e7ba <uxr_prepare_output_stream_fragmented+0x14e>
 800e7b0:	2400      	movs	r4, #0
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	b011      	add	sp, #68	@ 0x44
 800e7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f003 fe4e 	bl	801245c <get_available_free_slots>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	f47f af6d 	bne.w	800e6a0 <uxr_prepare_output_stream_fragmented+0x34>
 800e7c6:	e7f3      	b.n	800e7b0 <uxr_prepare_output_stream_fragmented+0x144>
 800e7c8:	4638      	mov	r0, r7
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	f003 ff5c 	bl	8012688 <uxr_seq_num_add>
 800e7d0:	8921      	ldrh	r1, [r4, #8]
 800e7d2:	fbb0 f2f1 	udiv	r2, r0, r1
 800e7d6:	fb01 0912 	mls	r9, r1, r2, r0
 800e7da:	fa1f f289 	uxth.w	r2, r9
 800e7de:	6863      	ldr	r3, [r4, #4]
 800e7e0:	fbb3 f9f1 	udiv	r9, r3, r1
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	fb02 f909 	mul.w	r9, r2, r9
 800e7ea:	f109 0904 	add.w	r9, r9, #4
 800e7ee:	4499      	add	r9, r3
 800e7f0:	4607      	mov	r7, r0
 800e7f2:	7b23      	ldrb	r3, [r4, #12]
 800e7f4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800e7f8:	e76b      	b.n	800e6d2 <uxr_prepare_output_stream_fragmented+0x66>
 800e7fa:	bf00      	nop
 800e7fc:	0800e4f9 	.word	0x0800e4f9

0800e800 <uxr_serialize_message_header>:
 800e800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e802:	b083      	sub	sp, #12
 800e804:	4616      	mov	r6, r2
 800e806:	4604      	mov	r4, r0
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	460d      	mov	r5, r1
 800e80c:	9f08      	ldr	r7, [sp, #32]
 800e80e:	f7fd fac7 	bl	800bda0 <ucdr_serialize_uint8_t>
 800e812:	4631      	mov	r1, r6
 800e814:	4620      	mov	r0, r4
 800e816:	f7fd fac3 	bl	800bda0 <ucdr_serialize_uint8_t>
 800e81a:	9a01      	ldr	r2, [sp, #4]
 800e81c:	2101      	movs	r1, #1
 800e81e:	4620      	mov	r0, r4
 800e820:	f7fd fb6a 	bl	800bef8 <ucdr_serialize_endian_uint16_t>
 800e824:	062b      	lsls	r3, r5, #24
 800e826:	d501      	bpl.n	800e82c <uxr_serialize_message_header+0x2c>
 800e828:	b003      	add	sp, #12
 800e82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82c:	2204      	movs	r2, #4
 800e82e:	4639      	mov	r1, r7
 800e830:	4620      	mov	r0, r4
 800e832:	b003      	add	sp, #12
 800e834:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e838:	f002 beee 	b.w	8011618 <ucdr_serialize_array_uint8_t>

0800e83c <uxr_deserialize_message_header>:
 800e83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83e:	b083      	sub	sp, #12
 800e840:	4616      	mov	r6, r2
 800e842:	4604      	mov	r4, r0
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	460d      	mov	r5, r1
 800e848:	9f08      	ldr	r7, [sp, #32]
 800e84a:	f7fd fabf 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800e84e:	4631      	mov	r1, r6
 800e850:	4620      	mov	r0, r4
 800e852:	f7fd fabb 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800e856:	9a01      	ldr	r2, [sp, #4]
 800e858:	2101      	movs	r1, #1
 800e85a:	4620      	mov	r0, r4
 800e85c:	f7fd fc40 	bl	800c0e0 <ucdr_deserialize_endian_uint16_t>
 800e860:	f995 3000 	ldrsb.w	r3, [r5]
 800e864:	2b00      	cmp	r3, #0
 800e866:	da01      	bge.n	800e86c <uxr_deserialize_message_header+0x30>
 800e868:	b003      	add	sp, #12
 800e86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e86c:	2204      	movs	r2, #4
 800e86e:	4639      	mov	r1, r7
 800e870:	4620      	mov	r0, r4
 800e872:	b003      	add	sp, #12
 800e874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e878:	f002 bf32 	b.w	80116e0 <ucdr_deserialize_array_uint8_t>

0800e87c <uxr_serialize_submessage_header>:
 800e87c:	b530      	push	{r4, r5, lr}
 800e87e:	b083      	sub	sp, #12
 800e880:	4615      	mov	r5, r2
 800e882:	4604      	mov	r4, r0
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	f7fd fa8b 	bl	800bda0 <ucdr_serialize_uint8_t>
 800e88a:	4629      	mov	r1, r5
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7fd fa87 	bl	800bda0 <ucdr_serialize_uint8_t>
 800e892:	9a01      	ldr	r2, [sp, #4]
 800e894:	2101      	movs	r1, #1
 800e896:	4620      	mov	r0, r4
 800e898:	b003      	add	sp, #12
 800e89a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e89e:	f7fd bb2b 	b.w	800bef8 <ucdr_serialize_endian_uint16_t>
 800e8a2:	bf00      	nop

0800e8a4 <uxr_deserialize_submessage_header>:
 800e8a4:	b530      	push	{r4, r5, lr}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	4615      	mov	r5, r2
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	9301      	str	r3, [sp, #4]
 800e8ae:	f7fd fa8d 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	f7fd fa89 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800e8ba:	9a01      	ldr	r2, [sp, #4]
 800e8bc:	2101      	movs	r1, #1
 800e8be:	4620      	mov	r0, r4
 800e8c0:	b003      	add	sp, #12
 800e8c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8c6:	f7fd bc0b 	b.w	800c0e0 <ucdr_deserialize_endian_uint16_t>
 800e8ca:	bf00      	nop

0800e8cc <uxr_serialize_CLIENT_Representation>:
 800e8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8d0:	2204      	movs	r2, #4
 800e8d2:	460e      	mov	r6, r1
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	f002 fe9f 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800e8da:	2202      	movs	r2, #2
 800e8dc:	4607      	mov	r7, r0
 800e8de:	1d31      	adds	r1, r6, #4
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	f002 fe99 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800e8e6:	4038      	ands	r0, r7
 800e8e8:	2202      	movs	r2, #2
 800e8ea:	1db1      	adds	r1, r6, #6
 800e8ec:	b2c7      	uxtb	r7, r0
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f002 fe92 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800e8f4:	2204      	movs	r2, #4
 800e8f6:	4007      	ands	r7, r0
 800e8f8:	f106 0108 	add.w	r1, r6, #8
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	f002 fe8b 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800e902:	7b31      	ldrb	r1, [r6, #12]
 800e904:	4007      	ands	r7, r0
 800e906:	4628      	mov	r0, r5
 800e908:	f7fd fa4a 	bl	800bda0 <ucdr_serialize_uint8_t>
 800e90c:	7b71      	ldrb	r1, [r6, #13]
 800e90e:	4007      	ands	r7, r0
 800e910:	4628      	mov	r0, r5
 800e912:	f7fd fa17 	bl	800bd44 <ucdr_serialize_bool>
 800e916:	7b73      	ldrb	r3, [r6, #13]
 800e918:	ea07 0800 	and.w	r8, r7, r0
 800e91c:	b93b      	cbnz	r3, 800e92e <uxr_serialize_CLIENT_Representation+0x62>
 800e91e:	8bb1      	ldrh	r1, [r6, #28]
 800e920:	4628      	mov	r0, r5
 800e922:	f7fd fa69 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800e926:	ea08 0000 	and.w	r0, r8, r0
 800e92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e92e:	6931      	ldr	r1, [r6, #16]
 800e930:	4628      	mov	r0, r5
 800e932:	f7fd fc4b 	bl	800c1cc <ucdr_serialize_uint32_t>
 800e936:	6933      	ldr	r3, [r6, #16]
 800e938:	b1e3      	cbz	r3, 800e974 <uxr_serialize_CLIENT_Representation+0xa8>
 800e93a:	b1c0      	cbz	r0, 800e96e <uxr_serialize_CLIENT_Representation+0xa2>
 800e93c:	4637      	mov	r7, r6
 800e93e:	f04f 0900 	mov.w	r9, #0
 800e942:	e001      	b.n	800e948 <uxr_serialize_CLIENT_Representation+0x7c>
 800e944:	3708      	adds	r7, #8
 800e946:	b194      	cbz	r4, 800e96e <uxr_serialize_CLIENT_Representation+0xa2>
 800e948:	6979      	ldr	r1, [r7, #20]
 800e94a:	4628      	mov	r0, r5
 800e94c:	f002 ff84 	bl	8011858 <ucdr_serialize_string>
 800e950:	69b9      	ldr	r1, [r7, #24]
 800e952:	4604      	mov	r4, r0
 800e954:	4628      	mov	r0, r5
 800e956:	f002 ff7f 	bl	8011858 <ucdr_serialize_string>
 800e95a:	6933      	ldr	r3, [r6, #16]
 800e95c:	f109 0901 	add.w	r9, r9, #1
 800e960:	4004      	ands	r4, r0
 800e962:	4599      	cmp	r9, r3
 800e964:	b2e4      	uxtb	r4, r4
 800e966:	d3ed      	bcc.n	800e944 <uxr_serialize_CLIENT_Representation+0x78>
 800e968:	ea08 0804 	and.w	r8, r8, r4
 800e96c:	e7d7      	b.n	800e91e <uxr_serialize_CLIENT_Representation+0x52>
 800e96e:	f04f 0800 	mov.w	r8, #0
 800e972:	e7d4      	b.n	800e91e <uxr_serialize_CLIENT_Representation+0x52>
 800e974:	ea08 0800 	and.w	r8, r8, r0
 800e978:	e7d1      	b.n	800e91e <uxr_serialize_CLIENT_Representation+0x52>
 800e97a:	bf00      	nop

0800e97c <uxr_deserialize_CLIENT_Representation>:
 800e97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e980:	2204      	movs	r2, #4
 800e982:	460c      	mov	r4, r1
 800e984:	4605      	mov	r5, r0
 800e986:	f002 feab 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800e98a:	2202      	movs	r2, #2
 800e98c:	4607      	mov	r7, r0
 800e98e:	1d21      	adds	r1, r4, #4
 800e990:	4628      	mov	r0, r5
 800e992:	f002 fea5 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800e996:	4038      	ands	r0, r7
 800e998:	2202      	movs	r2, #2
 800e99a:	1da1      	adds	r1, r4, #6
 800e99c:	b2c6      	uxtb	r6, r0
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f002 fe9e 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800e9a4:	2204      	movs	r2, #4
 800e9a6:	4006      	ands	r6, r0
 800e9a8:	f104 0108 	add.w	r1, r4, #8
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	f002 fe97 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800e9b2:	f104 010c 	add.w	r1, r4, #12
 800e9b6:	4006      	ands	r6, r0
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f7fd fa07 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800e9be:	f104 010d 	add.w	r1, r4, #13
 800e9c2:	ea06 0700 	and.w	r7, r6, r0
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f7fd f9d2 	bl	800bd70 <ucdr_deserialize_bool>
 800e9cc:	7b63      	ldrb	r3, [r4, #13]
 800e9ce:	4007      	ands	r7, r0
 800e9d0:	b93b      	cbnz	r3, 800e9e2 <uxr_deserialize_CLIENT_Representation+0x66>
 800e9d2:	f104 011c 	add.w	r1, r4, #28
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	f7fd fb0e 	bl	800bff8 <ucdr_deserialize_uint16_t>
 800e9dc:	4038      	ands	r0, r7
 800e9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9e2:	f104 0110 	add.w	r1, r4, #16
 800e9e6:	4628      	mov	r0, r5
 800e9e8:	f7fd fd20 	bl	800c42c <ucdr_deserialize_uint32_t>
 800e9ec:	6923      	ldr	r3, [r4, #16]
 800e9ee:	2b01      	cmp	r3, #1
 800e9f0:	d903      	bls.n	800e9fa <uxr_deserialize_CLIENT_Representation+0x7e>
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	75ab      	strb	r3, [r5, #22]
 800e9f6:	2700      	movs	r7, #0
 800e9f8:	e7eb      	b.n	800e9d2 <uxr_deserialize_CLIENT_Representation+0x56>
 800e9fa:	b30b      	cbz	r3, 800ea40 <uxr_deserialize_CLIENT_Representation+0xc4>
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	d0fa      	beq.n	800e9f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ea00:	46a0      	mov	r8, r4
 800ea02:	f04f 0900 	mov.w	r9, #0
 800ea06:	e001      	b.n	800ea0c <uxr_deserialize_CLIENT_Representation+0x90>
 800ea08:	2e00      	cmp	r6, #0
 800ea0a:	d0f4      	beq.n	800e9f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 800ea0c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800ea10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea14:	4628      	mov	r0, r5
 800ea16:	f002 ff2f 	bl	8011878 <ucdr_deserialize_string>
 800ea1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea1e:	4606      	mov	r6, r0
 800ea20:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800ea24:	4628      	mov	r0, r5
 800ea26:	f002 ff27 	bl	8011878 <ucdr_deserialize_string>
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	f109 0901 	add.w	r9, r9, #1
 800ea30:	4006      	ands	r6, r0
 800ea32:	4599      	cmp	r9, r3
 800ea34:	f108 0808 	add.w	r8, r8, #8
 800ea38:	b2f6      	uxtb	r6, r6
 800ea3a:	d3e5      	bcc.n	800ea08 <uxr_deserialize_CLIENT_Representation+0x8c>
 800ea3c:	4037      	ands	r7, r6
 800ea3e:	e7c8      	b.n	800e9d2 <uxr_deserialize_CLIENT_Representation+0x56>
 800ea40:	4007      	ands	r7, r0
 800ea42:	e7c6      	b.n	800e9d2 <uxr_deserialize_CLIENT_Representation+0x56>

0800ea44 <uxr_serialize_AGENT_Representation>:
 800ea44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea48:	2204      	movs	r2, #4
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	4605      	mov	r5, r0
 800ea4e:	f002 fde3 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800ea52:	2202      	movs	r2, #2
 800ea54:	4604      	mov	r4, r0
 800ea56:	1d39      	adds	r1, r7, #4
 800ea58:	4628      	mov	r0, r5
 800ea5a:	f002 fddd 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800ea5e:	4020      	ands	r0, r4
 800ea60:	2202      	movs	r2, #2
 800ea62:	1db9      	adds	r1, r7, #6
 800ea64:	b2c4      	uxtb	r4, r0
 800ea66:	4628      	mov	r0, r5
 800ea68:	f002 fdd6 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800ea6c:	7a39      	ldrb	r1, [r7, #8]
 800ea6e:	4004      	ands	r4, r0
 800ea70:	4628      	mov	r0, r5
 800ea72:	f7fd f967 	bl	800bd44 <ucdr_serialize_bool>
 800ea76:	7a3b      	ldrb	r3, [r7, #8]
 800ea78:	ea00 0804 	and.w	r8, r0, r4
 800ea7c:	b913      	cbnz	r3, 800ea84 <uxr_serialize_AGENT_Representation+0x40>
 800ea7e:	4640      	mov	r0, r8
 800ea80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea84:	68f9      	ldr	r1, [r7, #12]
 800ea86:	4628      	mov	r0, r5
 800ea88:	f7fd fba0 	bl	800c1cc <ucdr_serialize_uint32_t>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	b303      	cbz	r3, 800ead2 <uxr_serialize_AGENT_Representation+0x8e>
 800ea90:	b1d0      	cbz	r0, 800eac8 <uxr_serialize_AGENT_Representation+0x84>
 800ea92:	463e      	mov	r6, r7
 800ea94:	f04f 0900 	mov.w	r9, #0
 800ea98:	e001      	b.n	800ea9e <uxr_serialize_AGENT_Representation+0x5a>
 800ea9a:	3608      	adds	r6, #8
 800ea9c:	b1a4      	cbz	r4, 800eac8 <uxr_serialize_AGENT_Representation+0x84>
 800ea9e:	6931      	ldr	r1, [r6, #16]
 800eaa0:	4628      	mov	r0, r5
 800eaa2:	f002 fed9 	bl	8011858 <ucdr_serialize_string>
 800eaa6:	6971      	ldr	r1, [r6, #20]
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	4628      	mov	r0, r5
 800eaac:	f002 fed4 	bl	8011858 <ucdr_serialize_string>
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f109 0901 	add.w	r9, r9, #1
 800eab6:	4004      	ands	r4, r0
 800eab8:	4599      	cmp	r9, r3
 800eaba:	b2e4      	uxtb	r4, r4
 800eabc:	d3ed      	bcc.n	800ea9a <uxr_serialize_AGENT_Representation+0x56>
 800eabe:	ea08 0804 	and.w	r8, r8, r4
 800eac2:	4640      	mov	r0, r8
 800eac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eac8:	f04f 0800 	mov.w	r8, #0
 800eacc:	4640      	mov	r0, r8
 800eace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ead2:	ea08 0800 	and.w	r8, r8, r0
 800ead6:	e7d2      	b.n	800ea7e <uxr_serialize_AGENT_Representation+0x3a>

0800ead8 <uxr_serialize_DATAWRITER_Representation>:
 800ead8:	b570      	push	{r4, r5, r6, lr}
 800eada:	460d      	mov	r5, r1
 800eadc:	7809      	ldrb	r1, [r1, #0]
 800eade:	4606      	mov	r6, r0
 800eae0:	f7fd f95e 	bl	800bda0 <ucdr_serialize_uint8_t>
 800eae4:	4604      	mov	r4, r0
 800eae6:	b130      	cbz	r0, 800eaf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eae8:	782b      	ldrb	r3, [r5, #0]
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d00c      	beq.n	800eb08 <uxr_serialize_DATAWRITER_Representation+0x30>
 800eaee:	2b03      	cmp	r3, #3
 800eaf0:	d010      	beq.n	800eb14 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d008      	beq.n	800eb08 <uxr_serialize_DATAWRITER_Representation+0x30>
 800eaf6:	2202      	movs	r2, #2
 800eaf8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800eafc:	4630      	mov	r0, r6
 800eafe:	f002 fd8b 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800eb02:	4020      	ands	r0, r4
 800eb04:	b2c0      	uxtb	r0, r0
 800eb06:	bd70      	pop	{r4, r5, r6, pc}
 800eb08:	6869      	ldr	r1, [r5, #4]
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f002 fea4 	bl	8011858 <ucdr_serialize_string>
 800eb10:	4604      	mov	r4, r0
 800eb12:	e7f0      	b.n	800eaf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eb14:	4629      	mov	r1, r5
 800eb16:	4630      	mov	r0, r6
 800eb18:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800eb1c:	3104      	adds	r1, #4
 800eb1e:	f002 fe6f 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800eb22:	4604      	mov	r4, r0
 800eb24:	e7e7      	b.n	800eaf6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800eb26:	bf00      	nop

0800eb28 <uxr_serialize_ObjectVariant.part.0>:
 800eb28:	b570      	push	{r4, r5, r6, lr}
 800eb2a:	780b      	ldrb	r3, [r1, #0]
 800eb2c:	3b01      	subs	r3, #1
 800eb2e:	460c      	mov	r4, r1
 800eb30:	4605      	mov	r5, r0
 800eb32:	2b0d      	cmp	r3, #13
 800eb34:	d854      	bhi.n	800ebe0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800eb36:	e8df f003 	tbb	[pc, r3]
 800eb3a:	0730      	.short	0x0730
 800eb3c:	07071b1b 	.word	0x07071b1b
 800eb40:	0c530707 	.word	0x0c530707
 800eb44:	494e0c0c 	.word	0x494e0c0c
 800eb48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb4c:	3104      	adds	r1, #4
 800eb4e:	f7ff bfc3 	b.w	800ead8 <uxr_serialize_DATAWRITER_Representation>
 800eb52:	7909      	ldrb	r1, [r1, #4]
 800eb54:	f7fd f924 	bl	800bda0 <ucdr_serialize_uint8_t>
 800eb58:	b1e8      	cbz	r0, 800eb96 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800eb5a:	7923      	ldrb	r3, [r4, #4]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d001      	beq.n	800eb64 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d13d      	bne.n	800ebe0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800eb64:	68a1      	ldr	r1, [r4, #8]
 800eb66:	4628      	mov	r0, r5
 800eb68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb6c:	f002 be74 	b.w	8011858 <ucdr_serialize_string>
 800eb70:	7909      	ldrb	r1, [r1, #4]
 800eb72:	f7fd f915 	bl	800bda0 <ucdr_serialize_uint8_t>
 800eb76:	4606      	mov	r6, r0
 800eb78:	b120      	cbz	r0, 800eb84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800eb7a:	7923      	ldrb	r3, [r4, #4]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d039      	beq.n	800ebf4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d02f      	beq.n	800ebe4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800eb84:	2202      	movs	r2, #2
 800eb86:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	f002 fd44 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800eb90:	4030      	ands	r0, r6
 800eb92:	b2c0      	uxtb	r0, r0
 800eb94:	bd70      	pop	{r4, r5, r6, pc}
 800eb96:	2000      	movs	r0, #0
 800eb98:	bd70      	pop	{r4, r5, r6, pc}
 800eb9a:	7909      	ldrb	r1, [r1, #4]
 800eb9c:	f7fd f900 	bl	800bda0 <ucdr_serialize_uint8_t>
 800eba0:	4606      	mov	r6, r0
 800eba2:	b158      	cbz	r0, 800ebbc <uxr_serialize_ObjectVariant.part.0+0x94>
 800eba4:	7923      	ldrb	r3, [r4, #4]
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d003      	beq.n	800ebb2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	d028      	beq.n	800ec00 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d104      	bne.n	800ebbc <uxr_serialize_ObjectVariant.part.0+0x94>
 800ebb2:	68a1      	ldr	r1, [r4, #8]
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	f002 fe4f 	bl	8011858 <ucdr_serialize_string>
 800ebba:	4606      	mov	r6, r0
 800ebbc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800ebc0:	4628      	mov	r0, r5
 800ebc2:	f7fd fe29 	bl	800c818 <ucdr_serialize_int16_t>
 800ebc6:	4030      	ands	r0, r6
 800ebc8:	b2c0      	uxtb	r0, r0
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebd0:	3104      	adds	r1, #4
 800ebd2:	f7ff be7b 	b.w	800e8cc <uxr_serialize_CLIENT_Representation>
 800ebd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebda:	3104      	adds	r1, #4
 800ebdc:	f7ff bf32 	b.w	800ea44 <uxr_serialize_AGENT_Representation>
 800ebe0:	2001      	movs	r0, #1
 800ebe2:	bd70      	pop	{r4, r5, r6, pc}
 800ebe4:	68a2      	ldr	r2, [r4, #8]
 800ebe6:	f104 010c 	add.w	r1, r4, #12
 800ebea:	4628      	mov	r0, r5
 800ebec:	f002 fe08 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	e7c7      	b.n	800eb84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ebf4:	68a1      	ldr	r1, [r4, #8]
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	f002 fe2e 	bl	8011858 <ucdr_serialize_string>
 800ebfc:	4606      	mov	r6, r0
 800ebfe:	e7c1      	b.n	800eb84 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800ec00:	68a2      	ldr	r2, [r4, #8]
 800ec02:	f104 010c 	add.w	r1, r4, #12
 800ec06:	4628      	mov	r0, r5
 800ec08:	f002 fdfa 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800ec0c:	4606      	mov	r6, r0
 800ec0e:	e7d5      	b.n	800ebbc <uxr_serialize_ObjectVariant.part.0+0x94>

0800ec10 <uxr_deserialize_DATAWRITER_Representation>:
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	4606      	mov	r6, r0
 800ec14:	460d      	mov	r5, r1
 800ec16:	f7fd f8d9 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	b130      	cbz	r0, 800ec2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec1e:	782b      	ldrb	r3, [r5, #0]
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d00c      	beq.n	800ec3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ec24:	2b03      	cmp	r3, #3
 800ec26:	d012      	beq.n	800ec4e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d008      	beq.n	800ec3e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800ec2c:	2202      	movs	r2, #2
 800ec2e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800ec32:	4630      	mov	r0, r6
 800ec34:	f002 fd54 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800ec38:	4020      	ands	r0, r4
 800ec3a:	b2c0      	uxtb	r0, r0
 800ec3c:	bd70      	pop	{r4, r5, r6, pc}
 800ec3e:	6869      	ldr	r1, [r5, #4]
 800ec40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec44:	4630      	mov	r0, r6
 800ec46:	f002 fe17 	bl	8011878 <ucdr_deserialize_string>
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	e7ee      	b.n	800ec2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec4e:	1d2b      	adds	r3, r5, #4
 800ec50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec54:	f105 0108 	add.w	r1, r5, #8
 800ec58:	4630      	mov	r0, r6
 800ec5a:	f002 fde3 	bl	8011824 <ucdr_deserialize_sequence_uint8_t>
 800ec5e:	4604      	mov	r4, r0
 800ec60:	e7e4      	b.n	800ec2c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800ec62:	bf00      	nop

0800ec64 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	460d      	mov	r5, r1
 800ec68:	7809      	ldrb	r1, [r1, #0]
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	f7fd f86a 	bl	800bd44 <ucdr_serialize_bool>
 800ec70:	782b      	ldrb	r3, [r5, #0]
 800ec72:	4604      	mov	r4, r0
 800ec74:	b94b      	cbnz	r3, 800ec8a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800ec76:	7a29      	ldrb	r1, [r5, #8]
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f7fd f863 	bl	800bd44 <ucdr_serialize_bool>
 800ec7e:	7a2b      	ldrb	r3, [r5, #8]
 800ec80:	4004      	ands	r4, r0
 800ec82:	b2e4      	uxtb	r4, r4
 800ec84:	b943      	cbnz	r3, 800ec98 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ec86:	4620      	mov	r0, r4
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
 800ec8a:	6869      	ldr	r1, [r5, #4]
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f002 fde3 	bl	8011858 <ucdr_serialize_string>
 800ec92:	4004      	ands	r4, r0
 800ec94:	b2e4      	uxtb	r4, r4
 800ec96:	e7ee      	b.n	800ec76 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ec98:	68e9      	ldr	r1, [r5, #12]
 800ec9a:	4630      	mov	r0, r6
 800ec9c:	f002 fddc 	bl	8011858 <ucdr_serialize_string>
 800eca0:	4004      	ands	r4, r0
 800eca2:	4620      	mov	r0, r4
 800eca4:	bd70      	pop	{r4, r5, r6, pc}
 800eca6:	bf00      	nop

0800eca8 <uxr_serialize_OBJK_Topic_Binary>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	460d      	mov	r5, r1
 800ecac:	6809      	ldr	r1, [r1, #0]
 800ecae:	4606      	mov	r6, r0
 800ecb0:	f002 fdd2 	bl	8011858 <ucdr_serialize_string>
 800ecb4:	7929      	ldrb	r1, [r5, #4]
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	4630      	mov	r0, r6
 800ecba:	f7fd f843 	bl	800bd44 <ucdr_serialize_bool>
 800ecbe:	792b      	ldrb	r3, [r5, #4]
 800ecc0:	4004      	ands	r4, r0
 800ecc2:	b2e4      	uxtb	r4, r4
 800ecc4:	b943      	cbnz	r3, 800ecd8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ecc6:	7b29      	ldrb	r1, [r5, #12]
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7fd f83b 	bl	800bd44 <ucdr_serialize_bool>
 800ecce:	7b2b      	ldrb	r3, [r5, #12]
 800ecd0:	4004      	ands	r4, r0
 800ecd2:	b93b      	cbnz	r3, 800ece4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800ecd4:	4620      	mov	r0, r4
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	68a9      	ldr	r1, [r5, #8]
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f002 fdbc 	bl	8011858 <ucdr_serialize_string>
 800ece0:	4004      	ands	r4, r0
 800ece2:	e7f0      	b.n	800ecc6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800ece4:	6929      	ldr	r1, [r5, #16]
 800ece6:	4630      	mov	r0, r6
 800ece8:	f002 fdb6 	bl	8011858 <ucdr_serialize_string>
 800ecec:	4004      	ands	r4, r0
 800ecee:	b2e4      	uxtb	r4, r4
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	bd70      	pop	{r4, r5, r6, pc}

0800ecf4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	460c      	mov	r4, r1
 800ecfa:	7809      	ldrb	r1, [r1, #0]
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	f7fd f821 	bl	800bd44 <ucdr_serialize_bool>
 800ed02:	7823      	ldrb	r3, [r4, #0]
 800ed04:	4605      	mov	r5, r0
 800ed06:	b96b      	cbnz	r3, 800ed24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800ed08:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7fd f819 	bl	800bd44 <ucdr_serialize_bool>
 800ed12:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800ed16:	4005      	ands	r5, r0
 800ed18:	b2ed      	uxtb	r5, r5
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d169      	bne.n	800edf2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800ed1e:	4628      	mov	r0, r5
 800ed20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed24:	6861      	ldr	r1, [r4, #4]
 800ed26:	4630      	mov	r0, r6
 800ed28:	f7fd fa50 	bl	800c1cc <ucdr_serialize_uint32_t>
 800ed2c:	6863      	ldr	r3, [r4, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d06b      	beq.n	800ee0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800ed32:	2800      	cmp	r0, #0
 800ed34:	d067      	beq.n	800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed36:	68a1      	ldr	r1, [r4, #8]
 800ed38:	4630      	mov	r0, r6
 800ed3a:	f002 fd8d 	bl	8011858 <ucdr_serialize_string>
 800ed3e:	6863      	ldr	r3, [r4, #4]
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d953      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d05e      	beq.n	800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed48:	68e1      	ldr	r1, [r4, #12]
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f002 fd84 	bl	8011858 <ucdr_serialize_string>
 800ed50:	6863      	ldr	r3, [r4, #4]
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d94a      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	d055      	beq.n	800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed5a:	6921      	ldr	r1, [r4, #16]
 800ed5c:	4630      	mov	r0, r6
 800ed5e:	f002 fd7b 	bl	8011858 <ucdr_serialize_string>
 800ed62:	6863      	ldr	r3, [r4, #4]
 800ed64:	2b03      	cmp	r3, #3
 800ed66:	d941      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d04c      	beq.n	800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed6c:	6961      	ldr	r1, [r4, #20]
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f002 fd72 	bl	8011858 <ucdr_serialize_string>
 800ed74:	6863      	ldr	r3, [r4, #4]
 800ed76:	2b04      	cmp	r3, #4
 800ed78:	d938      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d043      	beq.n	800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed7e:	69a1      	ldr	r1, [r4, #24]
 800ed80:	4630      	mov	r0, r6
 800ed82:	f002 fd69 	bl	8011858 <ucdr_serialize_string>
 800ed86:	6863      	ldr	r3, [r4, #4]
 800ed88:	2b05      	cmp	r3, #5
 800ed8a:	d92f      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d03a      	beq.n	800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ed90:	69e1      	ldr	r1, [r4, #28]
 800ed92:	4630      	mov	r0, r6
 800ed94:	f002 fd60 	bl	8011858 <ucdr_serialize_string>
 800ed98:	6863      	ldr	r3, [r4, #4]
 800ed9a:	2b06      	cmp	r3, #6
 800ed9c:	d926      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800ed9e:	b390      	cbz	r0, 800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800eda0:	6a21      	ldr	r1, [r4, #32]
 800eda2:	4630      	mov	r0, r6
 800eda4:	f002 fd58 	bl	8011858 <ucdr_serialize_string>
 800eda8:	6863      	ldr	r3, [r4, #4]
 800edaa:	2b07      	cmp	r3, #7
 800edac:	d91e      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edae:	b350      	cbz	r0, 800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edb0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800edb2:	4630      	mov	r0, r6
 800edb4:	f002 fd50 	bl	8011858 <ucdr_serialize_string>
 800edb8:	6863      	ldr	r3, [r4, #4]
 800edba:	2b08      	cmp	r3, #8
 800edbc:	d916      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edbe:	b310      	cbz	r0, 800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edc0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800edc2:	4630      	mov	r0, r6
 800edc4:	f002 fd48 	bl	8011858 <ucdr_serialize_string>
 800edc8:	6863      	ldr	r3, [r4, #4]
 800edca:	2b09      	cmp	r3, #9
 800edcc:	d90e      	bls.n	800edec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800edce:	b1d0      	cbz	r0, 800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edd0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800edd4:	2709      	movs	r7, #9
 800edd6:	e000      	b.n	800edda <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800edd8:	b1a8      	cbz	r0, 800ee06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800edda:	f858 1b04 	ldr.w	r1, [r8], #4
 800edde:	4630      	mov	r0, r6
 800ede0:	f002 fd3a 	bl	8011858 <ucdr_serialize_string>
 800ede4:	6862      	ldr	r2, [r4, #4]
 800ede6:	3701      	adds	r7, #1
 800ede8:	4297      	cmp	r7, r2
 800edea:	d3f5      	bcc.n	800edd8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800edec:	4005      	ands	r5, r0
 800edee:	b2ed      	uxtb	r5, r5
 800edf0:	e78a      	b.n	800ed08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800edf2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800edf4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800edf8:	4630      	mov	r0, r6
 800edfa:	f002 fd01 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800edfe:	4005      	ands	r5, r0
 800ee00:	4628      	mov	r0, r5
 800ee02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee06:	2500      	movs	r5, #0
 800ee08:	e77e      	b.n	800ed08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800ee0a:	4028      	ands	r0, r5
 800ee0c:	b2c5      	uxtb	r5, r0
 800ee0e:	e77b      	b.n	800ed08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800ee10 <uxr_serialize_OBJK_Publisher_Binary>:
 800ee10:	b570      	push	{r4, r5, r6, lr}
 800ee12:	460d      	mov	r5, r1
 800ee14:	7809      	ldrb	r1, [r1, #0]
 800ee16:	4606      	mov	r6, r0
 800ee18:	f7fc ff94 	bl	800bd44 <ucdr_serialize_bool>
 800ee1c:	782b      	ldrb	r3, [r5, #0]
 800ee1e:	4604      	mov	r4, r0
 800ee20:	b94b      	cbnz	r3, 800ee36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800ee22:	7a29      	ldrb	r1, [r5, #8]
 800ee24:	4630      	mov	r0, r6
 800ee26:	f7fc ff8d 	bl	800bd44 <ucdr_serialize_bool>
 800ee2a:	7a2b      	ldrb	r3, [r5, #8]
 800ee2c:	4004      	ands	r4, r0
 800ee2e:	b2e4      	uxtb	r4, r4
 800ee30:	b943      	cbnz	r3, 800ee44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800ee32:	4620      	mov	r0, r4
 800ee34:	bd70      	pop	{r4, r5, r6, pc}
 800ee36:	6869      	ldr	r1, [r5, #4]
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f002 fd0d 	bl	8011858 <ucdr_serialize_string>
 800ee3e:	4004      	ands	r4, r0
 800ee40:	b2e4      	uxtb	r4, r4
 800ee42:	e7ee      	b.n	800ee22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800ee44:	f105 010c 	add.w	r1, r5, #12
 800ee48:	4630      	mov	r0, r6
 800ee4a:	f7ff ff53 	bl	800ecf4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800ee4e:	4004      	ands	r4, r0
 800ee50:	4620      	mov	r0, r4
 800ee52:	bd70      	pop	{r4, r5, r6, pc}

0800ee54 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800ee54:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800ee58:	4688      	mov	r8, r1
 800ee5a:	8809      	ldrh	r1, [r1, #0]
 800ee5c:	4681      	mov	r9, r0
 800ee5e:	f7fc ffcb 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800ee62:	f898 1002 	ldrb.w	r1, [r8, #2]
 800ee66:	4606      	mov	r6, r0
 800ee68:	4648      	mov	r0, r9
 800ee6a:	f7fc ff6b 	bl	800bd44 <ucdr_serialize_bool>
 800ee6e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ee72:	4006      	ands	r6, r0
 800ee74:	b2f5      	uxtb	r5, r6
 800ee76:	b9eb      	cbnz	r3, 800eeb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800ee78:	f898 1006 	ldrb.w	r1, [r8, #6]
 800ee7c:	4648      	mov	r0, r9
 800ee7e:	f7fc ff61 	bl	800bd44 <ucdr_serialize_bool>
 800ee82:	f898 3006 	ldrb.w	r3, [r8, #6]
 800ee86:	4005      	ands	r5, r0
 800ee88:	bb7b      	cbnz	r3, 800eeea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800ee8a:	f898 100c 	ldrb.w	r1, [r8, #12]
 800ee8e:	4648      	mov	r0, r9
 800ee90:	f7fc ff58 	bl	800bd44 <ucdr_serialize_bool>
 800ee94:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ee98:	4005      	ands	r5, r0
 800ee9a:	b9f3      	cbnz	r3, 800eeda <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800ee9c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800eea0:	4648      	mov	r0, r9
 800eea2:	f7fc ff4f 	bl	800bd44 <ucdr_serialize_bool>
 800eea6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800eeaa:	4005      	ands	r5, r0
 800eeac:	b94b      	cbnz	r3, 800eec2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800eeae:	4628      	mov	r0, r5
 800eeb0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eeb4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800eeb8:	4648      	mov	r0, r9
 800eeba:	f7fc ff9d 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800eebe:	4005      	ands	r5, r0
 800eec0:	e7da      	b.n	800ee78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800eec2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800eec6:	f108 011c 	add.w	r1, r8, #28
 800eeca:	4648      	mov	r0, r9
 800eecc:	f002 fc98 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800eed0:	4028      	ands	r0, r5
 800eed2:	b2c5      	uxtb	r5, r0
 800eed4:	4628      	mov	r0, r5
 800eed6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800eeda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eede:	4648      	mov	r0, r9
 800eee0:	f7fd f974 	bl	800c1cc <ucdr_serialize_uint32_t>
 800eee4:	4028      	ands	r0, r5
 800eee6:	b2c5      	uxtb	r5, r0
 800eee8:	e7d8      	b.n	800ee9c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800eeea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800eeee:	4648      	mov	r0, r9
 800eef0:	f7fd f96c 	bl	800c1cc <ucdr_serialize_uint32_t>
 800eef4:	4028      	ands	r0, r5
 800eef6:	b2c5      	uxtb	r5, r0
 800eef8:	e7c7      	b.n	800ee8a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800eefa:	bf00      	nop

0800eefc <uxr_serialize_OBJK_DataWriter_Binary>:
 800eefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefe:	2202      	movs	r2, #2
 800ef00:	460d      	mov	r5, r1
 800ef02:	4606      	mov	r6, r0
 800ef04:	f002 fb88 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800ef08:	78a9      	ldrb	r1, [r5, #2]
 800ef0a:	4604      	mov	r4, r0
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f7fc ff19 	bl	800bd44 <ucdr_serialize_bool>
 800ef12:	78ab      	ldrb	r3, [r5, #2]
 800ef14:	4004      	ands	r4, r0
 800ef16:	b2e4      	uxtb	r4, r4
 800ef18:	b90b      	cbnz	r3, 800ef1e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef1e:	f105 0108 	add.w	r1, r5, #8
 800ef22:	4630      	mov	r0, r6
 800ef24:	f7ff ff96 	bl	800ee54 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800ef28:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f7fc ff08 	bl	800bd44 <ucdr_serialize_bool>
 800ef34:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800ef38:	4038      	ands	r0, r7
 800ef3a:	b2c7      	uxtb	r7, r0
 800ef3c:	b913      	cbnz	r3, 800ef44 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800ef3e:	403c      	ands	r4, r7
 800ef40:	4620      	mov	r0, r4
 800ef42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef44:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f7fd fb95 	bl	800c678 <ucdr_serialize_uint64_t>
 800ef4e:	4007      	ands	r7, r0
 800ef50:	e7f5      	b.n	800ef3e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800ef52:	bf00      	nop

0800ef54 <uxr_deserialize_ObjectVariant>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	4605      	mov	r5, r0
 800ef58:	460e      	mov	r6, r1
 800ef5a:	f7fc ff37 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800ef5e:	b168      	cbz	r0, 800ef7c <uxr_deserialize_ObjectVariant+0x28>
 800ef60:	7833      	ldrb	r3, [r6, #0]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	4604      	mov	r4, r0
 800ef66:	2b0d      	cmp	r3, #13
 800ef68:	d809      	bhi.n	800ef7e <uxr_deserialize_ObjectVariant+0x2a>
 800ef6a:	e8df f003 	tbb	[pc, r3]
 800ef6e:	0a41      	.short	0x0a41
 800ef70:	0a0a2323 	.word	0x0a0a2323
 800ef74:	10080a0a 	.word	0x10080a0a
 800ef78:	565c1010 	.word	0x565c1010
 800ef7c:	2400      	movs	r4, #0
 800ef7e:	4620      	mov	r0, r4
 800ef80:	bd70      	pop	{r4, r5, r6, pc}
 800ef82:	1d31      	adds	r1, r6, #4
 800ef84:	4628      	mov	r0, r5
 800ef86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef8a:	f7ff be41 	b.w	800ec10 <uxr_deserialize_DATAWRITER_Representation>
 800ef8e:	1d31      	adds	r1, r6, #4
 800ef90:	4628      	mov	r0, r5
 800ef92:	f7fc ff1b 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800ef96:	2800      	cmp	r0, #0
 800ef98:	d0f0      	beq.n	800ef7c <uxr_deserialize_ObjectVariant+0x28>
 800ef9a:	7933      	ldrb	r3, [r6, #4]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d001      	beq.n	800efa4 <uxr_deserialize_ObjectVariant+0x50>
 800efa0:	2b02      	cmp	r3, #2
 800efa2:	d1ec      	bne.n	800ef7e <uxr_deserialize_ObjectVariant+0x2a>
 800efa4:	68b1      	ldr	r1, [r6, #8]
 800efa6:	4628      	mov	r0, r5
 800efa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efb0:	f002 bc62 	b.w	8011878 <ucdr_deserialize_string>
 800efb4:	1d31      	adds	r1, r6, #4
 800efb6:	4628      	mov	r0, r5
 800efb8:	f7fc ff08 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800efbc:	4604      	mov	r4, r0
 800efbe:	b170      	cbz	r0, 800efde <uxr_deserialize_ObjectVariant+0x8a>
 800efc0:	7933      	ldrb	r3, [r6, #4]
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	d04c      	beq.n	800f060 <uxr_deserialize_ObjectVariant+0x10c>
 800efc6:	2b03      	cmp	r3, #3
 800efc8:	d109      	bne.n	800efde <uxr_deserialize_ObjectVariant+0x8a>
 800efca:	f106 0308 	add.w	r3, r6, #8
 800efce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800efd2:	f106 010c 	add.w	r1, r6, #12
 800efd6:	4628      	mov	r0, r5
 800efd8:	f002 fc24 	bl	8011824 <ucdr_deserialize_sequence_uint8_t>
 800efdc:	4604      	mov	r4, r0
 800efde:	2202      	movs	r2, #2
 800efe0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800efe4:	4628      	mov	r0, r5
 800efe6:	f002 fb7b 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800efea:	4020      	ands	r0, r4
 800efec:	b2c4      	uxtb	r4, r0
 800efee:	e7c6      	b.n	800ef7e <uxr_deserialize_ObjectVariant+0x2a>
 800eff0:	1d31      	adds	r1, r6, #4
 800eff2:	4628      	mov	r0, r5
 800eff4:	f7fc feea 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800eff8:	4604      	mov	r4, r0
 800effa:	b130      	cbz	r0, 800f00a <uxr_deserialize_ObjectVariant+0xb6>
 800effc:	7933      	ldrb	r3, [r6, #4]
 800effe:	2b02      	cmp	r3, #2
 800f000:	d036      	beq.n	800f070 <uxr_deserialize_ObjectVariant+0x11c>
 800f002:	2b03      	cmp	r3, #3
 800f004:	d03c      	beq.n	800f080 <uxr_deserialize_ObjectVariant+0x12c>
 800f006:	2b01      	cmp	r3, #1
 800f008:	d032      	beq.n	800f070 <uxr_deserialize_ObjectVariant+0x11c>
 800f00a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800f00e:	4628      	mov	r0, r5
 800f010:	f7fd fc82 	bl	800c918 <ucdr_deserialize_int16_t>
 800f014:	4020      	ands	r0, r4
 800f016:	b2c4      	uxtb	r4, r0
 800f018:	e7b1      	b.n	800ef7e <uxr_deserialize_ObjectVariant+0x2a>
 800f01a:	1d31      	adds	r1, r6, #4
 800f01c:	4628      	mov	r0, r5
 800f01e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f022:	f7ff bcab 	b.w	800e97c <uxr_deserialize_CLIENT_Representation>
 800f026:	2204      	movs	r2, #4
 800f028:	18b1      	adds	r1, r6, r2
 800f02a:	4628      	mov	r0, r5
 800f02c:	f002 fb58 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f030:	2202      	movs	r2, #2
 800f032:	f106 0108 	add.w	r1, r6, #8
 800f036:	4604      	mov	r4, r0
 800f038:	4628      	mov	r0, r5
 800f03a:	f002 fb51 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f03e:	2202      	movs	r2, #2
 800f040:	4004      	ands	r4, r0
 800f042:	f106 010a 	add.w	r1, r6, #10
 800f046:	4628      	mov	r0, r5
 800f048:	f002 fb4a 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f04c:	b2e4      	uxtb	r4, r4
 800f04e:	4603      	mov	r3, r0
 800f050:	f106 010c 	add.w	r1, r6, #12
 800f054:	4628      	mov	r0, r5
 800f056:	401c      	ands	r4, r3
 800f058:	f7fc fe8a 	bl	800bd70 <ucdr_deserialize_bool>
 800f05c:	4004      	ands	r4, r0
 800f05e:	e78e      	b.n	800ef7e <uxr_deserialize_ObjectVariant+0x2a>
 800f060:	68b1      	ldr	r1, [r6, #8]
 800f062:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f066:	4628      	mov	r0, r5
 800f068:	f002 fc06 	bl	8011878 <ucdr_deserialize_string>
 800f06c:	4604      	mov	r4, r0
 800f06e:	e7b6      	b.n	800efde <uxr_deserialize_ObjectVariant+0x8a>
 800f070:	68b1      	ldr	r1, [r6, #8]
 800f072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f076:	4628      	mov	r0, r5
 800f078:	f002 fbfe 	bl	8011878 <ucdr_deserialize_string>
 800f07c:	4604      	mov	r4, r0
 800f07e:	e7c4      	b.n	800f00a <uxr_deserialize_ObjectVariant+0xb6>
 800f080:	f106 0308 	add.w	r3, r6, #8
 800f084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f088:	f106 010c 	add.w	r1, r6, #12
 800f08c:	4628      	mov	r0, r5
 800f08e:	f002 fbc9 	bl	8011824 <ucdr_deserialize_sequence_uint8_t>
 800f092:	4604      	mov	r4, r0
 800f094:	e7b9      	b.n	800f00a <uxr_deserialize_ObjectVariant+0xb6>
 800f096:	bf00      	nop

0800f098 <uxr_deserialize_BaseObjectRequest>:
 800f098:	b570      	push	{r4, r5, r6, lr}
 800f09a:	2202      	movs	r2, #2
 800f09c:	4605      	mov	r5, r0
 800f09e:	460e      	mov	r6, r1
 800f0a0:	f002 fb1e 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f0a4:	2202      	movs	r2, #2
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	18b1      	adds	r1, r6, r2
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	f002 fb18 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f0b0:	4020      	ands	r0, r4
 800f0b2:	b2c0      	uxtb	r0, r0
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
 800f0b6:	bf00      	nop

0800f0b8 <uxr_serialize_ActivityInfoVariant>:
 800f0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0bc:	460d      	mov	r5, r1
 800f0be:	7809      	ldrb	r1, [r1, #0]
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	f7fc fe6d 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f0c6:	4681      	mov	r9, r0
 800f0c8:	b138      	cbz	r0, 800f0da <uxr_serialize_ActivityInfoVariant+0x22>
 800f0ca:	782b      	ldrb	r3, [r5, #0]
 800f0cc:	2b06      	cmp	r3, #6
 800f0ce:	f000 8082 	beq.w	800f1d6 <uxr_serialize_ActivityInfoVariant+0x11e>
 800f0d2:	2b0d      	cmp	r3, #13
 800f0d4:	d016      	beq.n	800f104 <uxr_serialize_ActivityInfoVariant+0x4c>
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	d002      	beq.n	800f0e0 <uxr_serialize_ActivityInfoVariant+0x28>
 800f0da:	4648      	mov	r0, r9
 800f0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	f7fd fb97 	bl	800c818 <ucdr_serialize_int16_t>
 800f0ea:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800f0ee:	4681      	mov	r9, r0
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7fd fac1 	bl	800c678 <ucdr_serialize_uint64_t>
 800f0f6:	ea09 0000 	and.w	r0, r9, r0
 800f0fa:	fa5f f980 	uxtb.w	r9, r0
 800f0fe:	4648      	mov	r0, r9
 800f100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f104:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f108:	4638      	mov	r0, r7
 800f10a:	f7fd fb85 	bl	800c818 <ucdr_serialize_int16_t>
 800f10e:	68e9      	ldr	r1, [r5, #12]
 800f110:	4681      	mov	r9, r0
 800f112:	4638      	mov	r0, r7
 800f114:	f7fd f85a 	bl	800c1cc <ucdr_serialize_uint32_t>
 800f118:	68eb      	ldr	r3, [r5, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d0eb      	beq.n	800f0f6 <uxr_serialize_ActivityInfoVariant+0x3e>
 800f11e:	b320      	cbz	r0, 800f16a <uxr_serialize_ActivityInfoVariant+0xb2>
 800f120:	f105 080c 	add.w	r8, r5, #12
 800f124:	2600      	movs	r6, #0
 800f126:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800f12a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800f12e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800f132:	4638      	mov	r0, r7
 800f134:	f7fc fe34 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f138:	2800      	cmp	r0, #0
 800f13a:	d053      	beq.n	800f1e4 <uxr_serialize_ActivityInfoVariant+0x12c>
 800f13c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800f140:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800f144:	0074      	lsls	r4, r6, #1
 800f146:	00c9      	lsls	r1, r1, #3
 800f148:	2b03      	cmp	r3, #3
 800f14a:	d854      	bhi.n	800f1f6 <uxr_serialize_ActivityInfoVariant+0x13e>
 800f14c:	e8df f003 	tbb	[pc, r3]
 800f150:	02102132 	.word	0x02102132
 800f154:	4441      	add	r1, r8
 800f156:	4638      	mov	r0, r7
 800f158:	6889      	ldr	r1, [r1, #8]
 800f15a:	f002 fb7d 	bl	8011858 <ucdr_serialize_string>
 800f15e:	68ea      	ldr	r2, [r5, #12]
 800f160:	3601      	adds	r6, #1
 800f162:	4296      	cmp	r6, r2
 800f164:	d242      	bcs.n	800f1ec <uxr_serialize_ActivityInfoVariant+0x134>
 800f166:	2800      	cmp	r0, #0
 800f168:	d1dd      	bne.n	800f126 <uxr_serialize_ActivityInfoVariant+0x6e>
 800f16a:	f04f 0900 	mov.w	r9, #0
 800f16e:	e7b4      	b.n	800f0da <uxr_serialize_ActivityInfoVariant+0x22>
 800f170:	3108      	adds	r1, #8
 800f172:	4441      	add	r1, r8
 800f174:	2210      	movs	r2, #16
 800f176:	4638      	mov	r0, r7
 800f178:	f002 fa4e 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f17c:	4434      	add	r4, r6
 800f17e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f182:	4604      	mov	r4, r0
 800f184:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800f186:	4638      	mov	r0, r7
 800f188:	f7fd f820 	bl	800c1cc <ucdr_serialize_uint32_t>
 800f18c:	4020      	ands	r0, r4
 800f18e:	b2c0      	uxtb	r0, r0
 800f190:	e7e5      	b.n	800f15e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f192:	3108      	adds	r1, #8
 800f194:	4441      	add	r1, r8
 800f196:	2204      	movs	r2, #4
 800f198:	4638      	mov	r0, r7
 800f19a:	f002 fa3d 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f19e:	4434      	add	r4, r6
 800f1a0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	8b19      	ldrh	r1, [r3, #24]
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	f7fc fe25 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f1ae:	4020      	ands	r0, r4
 800f1b0:	b2c0      	uxtb	r0, r0
 800f1b2:	e7d4      	b.n	800f15e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f1b4:	3108      	adds	r1, #8
 800f1b6:	4441      	add	r1, r8
 800f1b8:	2202      	movs	r2, #2
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	f002 fa2c 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f1c0:	4434      	add	r4, r6
 800f1c2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	7d99      	ldrb	r1, [r3, #22]
 800f1ca:	4638      	mov	r0, r7
 800f1cc:	f7fc fde8 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f1d0:	4020      	ands	r0, r4
 800f1d2:	b2c0      	uxtb	r0, r0
 800f1d4:	e7c3      	b.n	800f15e <uxr_serialize_ActivityInfoVariant+0xa6>
 800f1d6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800f1da:	4638      	mov	r0, r7
 800f1dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1e0:	f7fd bb1a 	b.w	800c818 <ucdr_serialize_int16_t>
 800f1e4:	68ea      	ldr	r2, [r5, #12]
 800f1e6:	3601      	adds	r6, #1
 800f1e8:	42b2      	cmp	r2, r6
 800f1ea:	d8be      	bhi.n	800f16a <uxr_serialize_ActivityInfoVariant+0xb2>
 800f1ec:	ea09 0900 	and.w	r9, r9, r0
 800f1f0:	fa5f f989 	uxtb.w	r9, r9
 800f1f4:	e771      	b.n	800f0da <uxr_serialize_ActivityInfoVariant+0x22>
 800f1f6:	68eb      	ldr	r3, [r5, #12]
 800f1f8:	3601      	adds	r6, #1
 800f1fa:	429e      	cmp	r6, r3
 800f1fc:	f10a 0a18 	add.w	sl, sl, #24
 800f200:	d395      	bcc.n	800f12e <uxr_serialize_ActivityInfoVariant+0x76>
 800f202:	e76a      	b.n	800f0da <uxr_serialize_ActivityInfoVariant+0x22>

0800f204 <uxr_deserialize_BaseObjectReply>:
 800f204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f208:	2202      	movs	r2, #2
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	f002 fa67 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f212:	2202      	movs	r2, #2
 800f214:	18b9      	adds	r1, r7, r2
 800f216:	4605      	mov	r5, r0
 800f218:	4630      	mov	r0, r6
 800f21a:	f002 fa61 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f21e:	1d39      	adds	r1, r7, #4
 800f220:	4680      	mov	r8, r0
 800f222:	4630      	mov	r0, r6
 800f224:	f7fc fdd2 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f228:	1d79      	adds	r1, r7, #5
 800f22a:	4604      	mov	r4, r0
 800f22c:	4630      	mov	r0, r6
 800f22e:	f7fc fdcd 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f232:	ea05 0508 	and.w	r5, r5, r8
 800f236:	402c      	ands	r4, r5
 800f238:	4020      	ands	r0, r4
 800f23a:	b2c0      	uxtb	r0, r0
 800f23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f240 <uxr_serialize_ReadSpecification>:
 800f240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f244:	460e      	mov	r6, r1
 800f246:	7809      	ldrb	r1, [r1, #0]
 800f248:	4607      	mov	r7, r0
 800f24a:	f7fc fda9 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f24e:	7871      	ldrb	r1, [r6, #1]
 800f250:	4604      	mov	r4, r0
 800f252:	4638      	mov	r0, r7
 800f254:	f7fc fda4 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f258:	78b1      	ldrb	r1, [r6, #2]
 800f25a:	4004      	ands	r4, r0
 800f25c:	4638      	mov	r0, r7
 800f25e:	f7fc fd71 	bl	800bd44 <ucdr_serialize_bool>
 800f262:	78b3      	ldrb	r3, [r6, #2]
 800f264:	b2e4      	uxtb	r4, r4
 800f266:	4004      	ands	r4, r0
 800f268:	b94b      	cbnz	r3, 800f27e <uxr_serialize_ReadSpecification+0x3e>
 800f26a:	7a31      	ldrb	r1, [r6, #8]
 800f26c:	4638      	mov	r0, r7
 800f26e:	f7fc fd69 	bl	800bd44 <ucdr_serialize_bool>
 800f272:	7a33      	ldrb	r3, [r6, #8]
 800f274:	4004      	ands	r4, r0
 800f276:	b943      	cbnz	r3, 800f28a <uxr_serialize_ReadSpecification+0x4a>
 800f278:	4620      	mov	r0, r4
 800f27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f27e:	6871      	ldr	r1, [r6, #4]
 800f280:	4638      	mov	r0, r7
 800f282:	f002 fae9 	bl	8011858 <ucdr_serialize_string>
 800f286:	4004      	ands	r4, r0
 800f288:	e7ef      	b.n	800f26a <uxr_serialize_ReadSpecification+0x2a>
 800f28a:	8971      	ldrh	r1, [r6, #10]
 800f28c:	4638      	mov	r0, r7
 800f28e:	f7fc fdb3 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f292:	89b1      	ldrh	r1, [r6, #12]
 800f294:	4605      	mov	r5, r0
 800f296:	4638      	mov	r0, r7
 800f298:	f7fc fdae 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f29c:	89f1      	ldrh	r1, [r6, #14]
 800f29e:	4005      	ands	r5, r0
 800f2a0:	4638      	mov	r0, r7
 800f2a2:	f7fc fda9 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f2a6:	8a31      	ldrh	r1, [r6, #16]
 800f2a8:	4680      	mov	r8, r0
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f7fc fda4 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f2b0:	b2ed      	uxtb	r5, r5
 800f2b2:	4025      	ands	r5, r4
 800f2b4:	ea08 0505 	and.w	r5, r8, r5
 800f2b8:	ea00 0405 	and.w	r4, r0, r5
 800f2bc:	4620      	mov	r0, r4
 800f2be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c2:	bf00      	nop

0800f2c4 <uxr_serialize_CREATE_CLIENT_Payload>:
 800f2c4:	f7ff bb02 	b.w	800e8cc <uxr_serialize_CLIENT_Representation>

0800f2c8 <uxr_serialize_CREATE_Payload>:
 800f2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ca:	2202      	movs	r2, #2
 800f2cc:	4607      	mov	r7, r0
 800f2ce:	460e      	mov	r6, r1
 800f2d0:	f002 f9a2 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f2d4:	2202      	movs	r2, #2
 800f2d6:	18b1      	adds	r1, r6, r2
 800f2d8:	4605      	mov	r5, r0
 800f2da:	4638      	mov	r0, r7
 800f2dc:	f002 f99c 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f2e0:	7931      	ldrb	r1, [r6, #4]
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f7fc fd5b 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f2ea:	b170      	cbz	r0, 800f30a <uxr_serialize_CREATE_Payload+0x42>
 800f2ec:	7933      	ldrb	r3, [r6, #4]
 800f2ee:	402c      	ands	r4, r5
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	b2e4      	uxtb	r4, r4
 800f2f4:	2b0d      	cmp	r3, #13
 800f2f6:	d809      	bhi.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f2f8:	e8df f003 	tbb	[pc, r3]
 800f2fc:	23230a4c 	.word	0x23230a4c
 800f300:	0a0a0a0a 	.word	0x0a0a0a0a
 800f304:	12121208 	.word	0x12121208
 800f308:	3e45      	.short	0x3e45
 800f30a:	2400      	movs	r4, #0
 800f30c:	4620      	mov	r0, r4
 800f30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f310:	f106 0108 	add.w	r1, r6, #8
 800f314:	4638      	mov	r0, r7
 800f316:	f7ff fbdf 	bl	800ead8 <uxr_serialize_DATAWRITER_Representation>
 800f31a:	4004      	ands	r4, r0
 800f31c:	4620      	mov	r0, r4
 800f31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f320:	7a31      	ldrb	r1, [r6, #8]
 800f322:	4638      	mov	r0, r7
 800f324:	f7fc fd3c 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f328:	2800      	cmp	r0, #0
 800f32a:	d0ee      	beq.n	800f30a <uxr_serialize_CREATE_Payload+0x42>
 800f32c:	7a33      	ldrb	r3, [r6, #8]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d001      	beq.n	800f336 <uxr_serialize_CREATE_Payload+0x6e>
 800f332:	2b02      	cmp	r3, #2
 800f334:	d1ea      	bne.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f336:	68f1      	ldr	r1, [r6, #12]
 800f338:	4638      	mov	r0, r7
 800f33a:	f002 fa8d 	bl	8011858 <ucdr_serialize_string>
 800f33e:	4004      	ands	r4, r0
 800f340:	e7e4      	b.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f342:	7a31      	ldrb	r1, [r6, #8]
 800f344:	4638      	mov	r0, r7
 800f346:	f7fc fd2b 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f34a:	4605      	mov	r5, r0
 800f34c:	b158      	cbz	r0, 800f366 <uxr_serialize_CREATE_Payload+0x9e>
 800f34e:	7a33      	ldrb	r3, [r6, #8]
 800f350:	2b02      	cmp	r3, #2
 800f352:	d034      	beq.n	800f3be <uxr_serialize_CREATE_Payload+0xf6>
 800f354:	2b03      	cmp	r3, #3
 800f356:	d106      	bne.n	800f366 <uxr_serialize_CREATE_Payload+0x9e>
 800f358:	68f2      	ldr	r2, [r6, #12]
 800f35a:	f106 0110 	add.w	r1, r6, #16
 800f35e:	4638      	mov	r0, r7
 800f360:	f002 fa4e 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800f364:	4605      	mov	r5, r0
 800f366:	2202      	movs	r2, #2
 800f368:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800f36c:	4638      	mov	r0, r7
 800f36e:	f002 f953 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f372:	4028      	ands	r0, r5
 800f374:	4004      	ands	r4, r0
 800f376:	e7c9      	b.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f378:	f106 0108 	add.w	r1, r6, #8
 800f37c:	4638      	mov	r0, r7
 800f37e:	f7ff faa5 	bl	800e8cc <uxr_serialize_CLIENT_Representation>
 800f382:	4004      	ands	r4, r0
 800f384:	e7c2      	b.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f386:	f106 0108 	add.w	r1, r6, #8
 800f38a:	4638      	mov	r0, r7
 800f38c:	f7ff fb5a 	bl	800ea44 <uxr_serialize_AGENT_Representation>
 800f390:	4004      	ands	r4, r0
 800f392:	e7bb      	b.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f394:	7a31      	ldrb	r1, [r6, #8]
 800f396:	4638      	mov	r0, r7
 800f398:	f7fc fd02 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f39c:	4605      	mov	r5, r0
 800f39e:	b130      	cbz	r0, 800f3ae <uxr_serialize_CREATE_Payload+0xe6>
 800f3a0:	7a33      	ldrb	r3, [r6, #8]
 800f3a2:	2b02      	cmp	r3, #2
 800f3a4:	d011      	beq.n	800f3ca <uxr_serialize_CREATE_Payload+0x102>
 800f3a6:	2b03      	cmp	r3, #3
 800f3a8:	d015      	beq.n	800f3d6 <uxr_serialize_CREATE_Payload+0x10e>
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d00d      	beq.n	800f3ca <uxr_serialize_CREATE_Payload+0x102>
 800f3ae:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	f7fd fa30 	bl	800c818 <ucdr_serialize_int16_t>
 800f3b8:	4028      	ands	r0, r5
 800f3ba:	4004      	ands	r4, r0
 800f3bc:	e7a6      	b.n	800f30c <uxr_serialize_CREATE_Payload+0x44>
 800f3be:	68f1      	ldr	r1, [r6, #12]
 800f3c0:	4638      	mov	r0, r7
 800f3c2:	f002 fa49 	bl	8011858 <ucdr_serialize_string>
 800f3c6:	4605      	mov	r5, r0
 800f3c8:	e7cd      	b.n	800f366 <uxr_serialize_CREATE_Payload+0x9e>
 800f3ca:	68f1      	ldr	r1, [r6, #12]
 800f3cc:	4638      	mov	r0, r7
 800f3ce:	f002 fa43 	bl	8011858 <ucdr_serialize_string>
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	e7eb      	b.n	800f3ae <uxr_serialize_CREATE_Payload+0xe6>
 800f3d6:	68f2      	ldr	r2, [r6, #12]
 800f3d8:	f106 0110 	add.w	r1, r6, #16
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f002 fa0f 	bl	8011800 <ucdr_serialize_sequence_uint8_t>
 800f3e2:	4605      	mov	r5, r0
 800f3e4:	e7e3      	b.n	800f3ae <uxr_serialize_CREATE_Payload+0xe6>
 800f3e6:	bf00      	nop

0800f3e8 <uxr_deserialize_GET_INFO_Payload>:
 800f3e8:	b570      	push	{r4, r5, r6, lr}
 800f3ea:	2202      	movs	r2, #2
 800f3ec:	4605      	mov	r5, r0
 800f3ee:	460e      	mov	r6, r1
 800f3f0:	f002 f976 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f3f4:	2202      	movs	r2, #2
 800f3f6:	18b1      	adds	r1, r6, r2
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	f002 f970 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f400:	1d31      	adds	r1, r6, #4
 800f402:	4004      	ands	r4, r0
 800f404:	4628      	mov	r0, r5
 800f406:	f7fd f811 	bl	800c42c <ucdr_deserialize_uint32_t>
 800f40a:	b2e4      	uxtb	r4, r4
 800f40c:	4020      	ands	r0, r4
 800f40e:	bd70      	pop	{r4, r5, r6, pc}

0800f410 <uxr_serialize_DELETE_Payload>:
 800f410:	b570      	push	{r4, r5, r6, lr}
 800f412:	2202      	movs	r2, #2
 800f414:	4605      	mov	r5, r0
 800f416:	460e      	mov	r6, r1
 800f418:	f002 f8fe 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f41c:	2202      	movs	r2, #2
 800f41e:	4604      	mov	r4, r0
 800f420:	18b1      	adds	r1, r6, r2
 800f422:	4628      	mov	r0, r5
 800f424:	f002 f8f8 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f428:	4020      	ands	r0, r4
 800f42a:	b2c0      	uxtb	r0, r0
 800f42c:	bd70      	pop	{r4, r5, r6, pc}
 800f42e:	bf00      	nop

0800f430 <uxr_deserialize_STATUS_AGENT_Payload>:
 800f430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f434:	4605      	mov	r5, r0
 800f436:	460e      	mov	r6, r1
 800f438:	f7fc fcc8 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f43c:	1c71      	adds	r1, r6, #1
 800f43e:	4604      	mov	r4, r0
 800f440:	4628      	mov	r0, r5
 800f442:	f7fc fcc3 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f446:	2204      	movs	r2, #4
 800f448:	18b1      	adds	r1, r6, r2
 800f44a:	4680      	mov	r8, r0
 800f44c:	4628      	mov	r0, r5
 800f44e:	f002 f947 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f452:	f106 0108 	add.w	r1, r6, #8
 800f456:	4607      	mov	r7, r0
 800f458:	2202      	movs	r2, #2
 800f45a:	4628      	mov	r0, r5
 800f45c:	f002 f940 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f460:	ea04 0308 	and.w	r3, r4, r8
 800f464:	b2db      	uxtb	r3, r3
 800f466:	ea03 0407 	and.w	r4, r3, r7
 800f46a:	2202      	movs	r2, #2
 800f46c:	4607      	mov	r7, r0
 800f46e:	f106 010a 	add.w	r1, r6, #10
 800f472:	4628      	mov	r0, r5
 800f474:	f002 f934 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f478:	f106 010c 	add.w	r1, r6, #12
 800f47c:	4603      	mov	r3, r0
 800f47e:	4628      	mov	r0, r5
 800f480:	461d      	mov	r5, r3
 800f482:	f7fc fc75 	bl	800bd70 <ucdr_deserialize_bool>
 800f486:	403c      	ands	r4, r7
 800f488:	4025      	ands	r5, r4
 800f48a:	4028      	ands	r0, r5
 800f48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f490 <uxr_deserialize_STATUS_Payload>:
 800f490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f494:	2202      	movs	r2, #2
 800f496:	4606      	mov	r6, r0
 800f498:	460f      	mov	r7, r1
 800f49a:	f002 f921 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f49e:	2202      	movs	r2, #2
 800f4a0:	18b9      	adds	r1, r7, r2
 800f4a2:	4605      	mov	r5, r0
 800f4a4:	4630      	mov	r0, r6
 800f4a6:	f002 f91b 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f4aa:	1d39      	adds	r1, r7, #4
 800f4ac:	4680      	mov	r8, r0
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f7fc fc8c 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f4b4:	1d79      	adds	r1, r7, #5
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f7fc fc87 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f4be:	ea05 0508 	and.w	r5, r5, r8
 800f4c2:	402c      	ands	r4, r5
 800f4c4:	4020      	ands	r0, r4
 800f4c6:	b2c0      	uxtb	r0, r0
 800f4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f4cc <uxr_serialize_INFO_Payload>:
 800f4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	4605      	mov	r5, r0
 800f4d6:	f002 f89f 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f4da:	2202      	movs	r2, #2
 800f4dc:	18a1      	adds	r1, r4, r2
 800f4de:	4680      	mov	r8, r0
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f002 f899 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f4e6:	7921      	ldrb	r1, [r4, #4]
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f7fc fc58 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f4f0:	7961      	ldrb	r1, [r4, #5]
 800f4f2:	4606      	mov	r6, r0
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f7fc fc53 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f4fa:	ea08 0807 	and.w	r8, r8, r7
 800f4fe:	ea06 0608 	and.w	r6, r6, r8
 800f502:	4006      	ands	r6, r0
 800f504:	7a21      	ldrb	r1, [r4, #8]
 800f506:	4628      	mov	r0, r5
 800f508:	f7fc fc1c 	bl	800bd44 <ucdr_serialize_bool>
 800f50c:	7a23      	ldrb	r3, [r4, #8]
 800f50e:	b2f7      	uxtb	r7, r6
 800f510:	4606      	mov	r6, r0
 800f512:	b96b      	cbnz	r3, 800f530 <uxr_serialize_INFO_Payload+0x64>
 800f514:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800f518:	4628      	mov	r0, r5
 800f51a:	f7fc fc13 	bl	800bd44 <ucdr_serialize_bool>
 800f51e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800f522:	4030      	ands	r0, r6
 800f524:	b2c6      	uxtb	r6, r0
 800f526:	b983      	cbnz	r3, 800f54a <uxr_serialize_INFO_Payload+0x7e>
 800f528:	ea06 0007 	and.w	r0, r6, r7
 800f52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f530:	7b21      	ldrb	r1, [r4, #12]
 800f532:	4628      	mov	r0, r5
 800f534:	f7fc fc34 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f538:	b188      	cbz	r0, 800f55e <uxr_serialize_INFO_Payload+0x92>
 800f53a:	f104 010c 	add.w	r1, r4, #12
 800f53e:	4628      	mov	r0, r5
 800f540:	f7ff faf2 	bl	800eb28 <uxr_serialize_ObjectVariant.part.0>
 800f544:	4030      	ands	r0, r6
 800f546:	b2c6      	uxtb	r6, r0
 800f548:	e7e4      	b.n	800f514 <uxr_serialize_INFO_Payload+0x48>
 800f54a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800f54e:	4628      	mov	r0, r5
 800f550:	f7ff fdb2 	bl	800f0b8 <uxr_serialize_ActivityInfoVariant>
 800f554:	4006      	ands	r6, r0
 800f556:	ea06 0007 	and.w	r0, r6, r7
 800f55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f55e:	4606      	mov	r6, r0
 800f560:	e7d8      	b.n	800f514 <uxr_serialize_INFO_Payload+0x48>
 800f562:	bf00      	nop

0800f564 <uxr_serialize_READ_DATA_Payload>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	2202      	movs	r2, #2
 800f568:	4605      	mov	r5, r0
 800f56a:	460e      	mov	r6, r1
 800f56c:	f002 f854 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f570:	2202      	movs	r2, #2
 800f572:	18b1      	adds	r1, r6, r2
 800f574:	4604      	mov	r4, r0
 800f576:	4628      	mov	r0, r5
 800f578:	f002 f84e 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f57c:	1d31      	adds	r1, r6, #4
 800f57e:	4004      	ands	r4, r0
 800f580:	4628      	mov	r0, r5
 800f582:	f7ff fe5d 	bl	800f240 <uxr_serialize_ReadSpecification>
 800f586:	b2e4      	uxtb	r4, r4
 800f588:	4020      	ands	r0, r4
 800f58a:	bd70      	pop	{r4, r5, r6, pc}

0800f58c <uxr_serialize_WRITE_DATA_Payload_Data>:
 800f58c:	b570      	push	{r4, r5, r6, lr}
 800f58e:	2202      	movs	r2, #2
 800f590:	4605      	mov	r5, r0
 800f592:	460e      	mov	r6, r1
 800f594:	f002 f840 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f598:	2202      	movs	r2, #2
 800f59a:	4604      	mov	r4, r0
 800f59c:	18b1      	adds	r1, r6, r2
 800f59e:	4628      	mov	r0, r5
 800f5a0:	f002 f83a 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f5a4:	4020      	ands	r0, r4
 800f5a6:	b2c0      	uxtb	r0, r0
 800f5a8:	bd70      	pop	{r4, r5, r6, pc}
 800f5aa:	bf00      	nop

0800f5ac <uxr_serialize_ACKNACK_Payload>:
 800f5ac:	b570      	push	{r4, r5, r6, lr}
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	460e      	mov	r6, r1
 800f5b2:	f834 1b02 	ldrh.w	r1, [r4], #2
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	f7fc fc1e 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f5bc:	2202      	movs	r2, #2
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f002 f828 	bl	8011618 <ucdr_serialize_array_uint8_t>
 800f5c8:	7931      	ldrb	r1, [r6, #4]
 800f5ca:	4004      	ands	r4, r0
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f7fc fbe7 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f5d2:	b2e4      	uxtb	r4, r4
 800f5d4:	4020      	ands	r0, r4
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}

0800f5d8 <uxr_deserialize_ACKNACK_Payload>:
 800f5d8:	b570      	push	{r4, r5, r6, lr}
 800f5da:	4605      	mov	r5, r0
 800f5dc:	460e      	mov	r6, r1
 800f5de:	f7fc fd0b 	bl	800bff8 <ucdr_deserialize_uint16_t>
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	18b1      	adds	r1, r6, r2
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	f002 f879 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f5ee:	1d31      	adds	r1, r6, #4
 800f5f0:	4004      	ands	r4, r0
 800f5f2:	4628      	mov	r0, r5
 800f5f4:	f7fc fbea 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f5f8:	b2e4      	uxtb	r4, r4
 800f5fa:	4020      	ands	r0, r4
 800f5fc:	bd70      	pop	{r4, r5, r6, pc}
 800f5fe:	bf00      	nop

0800f600 <uxr_serialize_HEARTBEAT_Payload>:
 800f600:	b570      	push	{r4, r5, r6, lr}
 800f602:	460d      	mov	r5, r1
 800f604:	8809      	ldrh	r1, [r1, #0]
 800f606:	4606      	mov	r6, r0
 800f608:	f7fc fbf6 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f60c:	8869      	ldrh	r1, [r5, #2]
 800f60e:	4604      	mov	r4, r0
 800f610:	4630      	mov	r0, r6
 800f612:	f7fc fbf1 	bl	800bdf8 <ucdr_serialize_uint16_t>
 800f616:	7929      	ldrb	r1, [r5, #4]
 800f618:	4004      	ands	r4, r0
 800f61a:	4630      	mov	r0, r6
 800f61c:	f7fc fbc0 	bl	800bda0 <ucdr_serialize_uint8_t>
 800f620:	b2e4      	uxtb	r4, r4
 800f622:	4020      	ands	r0, r4
 800f624:	bd70      	pop	{r4, r5, r6, pc}
 800f626:	bf00      	nop

0800f628 <uxr_deserialize_HEARTBEAT_Payload>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	4605      	mov	r5, r0
 800f62c:	460e      	mov	r6, r1
 800f62e:	f7fc fce3 	bl	800bff8 <ucdr_deserialize_uint16_t>
 800f632:	1cb1      	adds	r1, r6, #2
 800f634:	4604      	mov	r4, r0
 800f636:	4628      	mov	r0, r5
 800f638:	f7fc fcde 	bl	800bff8 <ucdr_deserialize_uint16_t>
 800f63c:	1d31      	adds	r1, r6, #4
 800f63e:	4004      	ands	r4, r0
 800f640:	4628      	mov	r0, r5
 800f642:	f7fc fbc3 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f646:	b2e4      	uxtb	r4, r4
 800f648:	4020      	ands	r0, r4
 800f64a:	bd70      	pop	{r4, r5, r6, pc}

0800f64c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800f64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f650:	4605      	mov	r5, r0
 800f652:	460e      	mov	r6, r1
 800f654:	f7fd fa6c 	bl	800cb30 <ucdr_deserialize_int32_t>
 800f658:	1d31      	adds	r1, r6, #4
 800f65a:	4607      	mov	r7, r0
 800f65c:	4628      	mov	r0, r5
 800f65e:	f7fc fee5 	bl	800c42c <ucdr_deserialize_uint32_t>
 800f662:	f106 0108 	add.w	r1, r6, #8
 800f666:	4680      	mov	r8, r0
 800f668:	4628      	mov	r0, r5
 800f66a:	f7fd fa61 	bl	800cb30 <ucdr_deserialize_int32_t>
 800f66e:	f106 010c 	add.w	r1, r6, #12
 800f672:	4604      	mov	r4, r0
 800f674:	4628      	mov	r0, r5
 800f676:	f7fc fed9 	bl	800c42c <ucdr_deserialize_uint32_t>
 800f67a:	ea07 0708 	and.w	r7, r7, r8
 800f67e:	403c      	ands	r4, r7
 800f680:	f106 0110 	add.w	r1, r6, #16
 800f684:	4004      	ands	r4, r0
 800f686:	4628      	mov	r0, r5
 800f688:	f7fd fa52 	bl	800cb30 <ucdr_deserialize_int32_t>
 800f68c:	f106 0114 	add.w	r1, r6, #20
 800f690:	4607      	mov	r7, r0
 800f692:	4628      	mov	r0, r5
 800f694:	f7fc feca 	bl	800c42c <ucdr_deserialize_uint32_t>
 800f698:	b2e4      	uxtb	r4, r4
 800f69a:	403c      	ands	r4, r7
 800f69c:	4020      	ands	r0, r4
 800f69e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a2:	bf00      	nop

0800f6a4 <uxr_deserialize_SampleIdentity>:
 800f6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6a8:	220c      	movs	r2, #12
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	460d      	mov	r5, r1
 800f6ae:	f002 f817 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f6b2:	2203      	movs	r2, #3
 800f6b4:	f105 010c 	add.w	r1, r5, #12
 800f6b8:	4607      	mov	r7, r0
 800f6ba:	4620      	mov	r0, r4
 800f6bc:	f002 f810 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 800f6c0:	f105 010f 	add.w	r1, r5, #15
 800f6c4:	4680      	mov	r8, r0
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f7fc fb80 	bl	800bdcc <ucdr_deserialize_uint8_t>
 800f6cc:	f105 0110 	add.w	r1, r5, #16
 800f6d0:	4606      	mov	r6, r0
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	f7fd fa2c 	bl	800cb30 <ucdr_deserialize_int32_t>
 800f6d8:	f105 0114 	add.w	r1, r5, #20
 800f6dc:	4603      	mov	r3, r0
 800f6de:	4620      	mov	r0, r4
 800f6e0:	ea07 0708 	and.w	r7, r7, r8
 800f6e4:	461c      	mov	r4, r3
 800f6e6:	f7fc fea1 	bl	800c42c <ucdr_deserialize_uint32_t>
 800f6ea:	403e      	ands	r6, r7
 800f6ec:	4034      	ands	r4, r6
 800f6ee:	4020      	ands	r0, r4
 800f6f0:	b2c0      	uxtb	r0, r0
 800f6f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6f6:	bf00      	nop

0800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>:
 800f6f8:	280b      	cmp	r0, #11
 800f6fa:	dc0d      	bgt.n	800f718 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	db09      	blt.n	800f714 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f700:	280b      	cmp	r0, #11
 800f702:	d807      	bhi.n	800f714 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800f704:	e8df f000 	tbb	[pc, r0]
 800f708:	07060607 	.word	0x07060607
 800f70c:	06060606 	.word	0x06060606
 800f710:	07070606 	.word	0x07070606
 800f714:	2001      	movs	r0, #1
 800f716:	4770      	bx	lr
 800f718:	28cb      	cmp	r0, #203	@ 0xcb
 800f71a:	bf18      	it	ne
 800f71c:	2001      	movne	r0, #1
 800f71e:	4770      	bx	lr

0800f720 <rcl_get_zero_initialized_context>:
 800f720:	4a03      	ldr	r2, [pc, #12]	@ (800f730 <rcl_get_zero_initialized_context+0x10>)
 800f722:	4603      	mov	r3, r0
 800f724:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f728:	e883 0003 	stmia.w	r3, {r0, r1}
 800f72c:	4618      	mov	r0, r3
 800f72e:	4770      	bx	lr
 800f730:	08015dfc 	.word	0x08015dfc

0800f734 <rcl_context_is_valid>:
 800f734:	b118      	cbz	r0, 800f73e <rcl_context_is_valid+0xa>
 800f736:	6840      	ldr	r0, [r0, #4]
 800f738:	3800      	subs	r0, #0
 800f73a:	bf18      	it	ne
 800f73c:	2001      	movne	r0, #1
 800f73e:	4770      	bx	lr

0800f740 <__cleanup_context>:
 800f740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f744:	4606      	mov	r6, r0
 800f746:	6800      	ldr	r0, [r0, #0]
 800f748:	2300      	movs	r3, #0
 800f74a:	6073      	str	r3, [r6, #4]
 800f74c:	2800      	cmp	r0, #0
 800f74e:	d049      	beq.n	800f7e4 <__cleanup_context+0xa4>
 800f750:	6947      	ldr	r7, [r0, #20]
 800f752:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f756:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800f75a:	b137      	cbz	r7, 800f76a <__cleanup_context+0x2a>
 800f75c:	3014      	adds	r0, #20
 800f75e:	f000 f9a5 	bl	800faac <rcl_init_options_fini>
 800f762:	4607      	mov	r7, r0
 800f764:	2800      	cmp	r0, #0
 800f766:	d144      	bne.n	800f7f2 <__cleanup_context+0xb2>
 800f768:	6830      	ldr	r0, [r6, #0]
 800f76a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800f76c:	b143      	cbz	r3, 800f780 <__cleanup_context+0x40>
 800f76e:	3028      	adds	r0, #40	@ 0x28
 800f770:	f001 fc38 	bl	8010fe4 <rmw_context_fini>
 800f774:	b118      	cbz	r0, 800f77e <__cleanup_context+0x3e>
 800f776:	2f00      	cmp	r7, #0
 800f778:	d03e      	beq.n	800f7f8 <__cleanup_context+0xb8>
 800f77a:	f7fb fde5 	bl	800b348 <rcutils_reset_error>
 800f77e:	6830      	ldr	r0, [r6, #0]
 800f780:	6a03      	ldr	r3, [r0, #32]
 800f782:	b1db      	cbz	r3, 800f7bc <__cleanup_context+0x7c>
 800f784:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800f788:	2a01      	cmp	r2, #1
 800f78a:	f17c 0100 	sbcs.w	r1, ip, #0
 800f78e:	db11      	blt.n	800f7b4 <__cleanup_context+0x74>
 800f790:	2400      	movs	r4, #0
 800f792:	4625      	mov	r5, r4
 800f794:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f798:	4649      	mov	r1, r9
 800f79a:	b1b8      	cbz	r0, 800f7cc <__cleanup_context+0x8c>
 800f79c:	47c0      	blx	r8
 800f79e:	6833      	ldr	r3, [r6, #0]
 800f7a0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800f7a4:	3401      	adds	r4, #1
 800f7a6:	f145 0500 	adc.w	r5, r5, #0
 800f7aa:	4294      	cmp	r4, r2
 800f7ac:	eb75 010c 	sbcs.w	r1, r5, ip
 800f7b0:	6a1b      	ldr	r3, [r3, #32]
 800f7b2:	dbef      	blt.n	800f794 <__cleanup_context+0x54>
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	4649      	mov	r1, r9
 800f7b8:	47c0      	blx	r8
 800f7ba:	6830      	ldr	r0, [r6, #0]
 800f7bc:	4649      	mov	r1, r9
 800f7be:	47c0      	blx	r8
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	e9c6 3300 	strd	r3, r3, [r6]
 800f7c6:	4638      	mov	r0, r7
 800f7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7cc:	3401      	adds	r4, #1
 800f7ce:	f145 0500 	adc.w	r5, r5, #0
 800f7d2:	4294      	cmp	r4, r2
 800f7d4:	eb75 010c 	sbcs.w	r1, r5, ip
 800f7d8:	dbdc      	blt.n	800f794 <__cleanup_context+0x54>
 800f7da:	4618      	mov	r0, r3
 800f7dc:	4649      	mov	r1, r9
 800f7de:	47c0      	blx	r8
 800f7e0:	6830      	ldr	r0, [r6, #0]
 800f7e2:	e7eb      	b.n	800f7bc <__cleanup_context+0x7c>
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	e9c6 3300 	strd	r3, r3, [r6]
 800f7ec:	4638      	mov	r0, r7
 800f7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7f2:	f7fb fda9 	bl	800b348 <rcutils_reset_error>
 800f7f6:	e7b7      	b.n	800f768 <__cleanup_context+0x28>
 800f7f8:	f7ff ff7e 	bl	800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>
 800f7fc:	4607      	mov	r7, r0
 800f7fe:	e7bc      	b.n	800f77a <__cleanup_context+0x3a>

0800f800 <rcl_init>:
 800f800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f804:	1e05      	subs	r5, r0, #0
 800f806:	b09c      	sub	sp, #112	@ 0x70
 800f808:	460e      	mov	r6, r1
 800f80a:	4690      	mov	r8, r2
 800f80c:	461f      	mov	r7, r3
 800f80e:	f340 8099 	ble.w	800f944 <rcl_init+0x144>
 800f812:	2900      	cmp	r1, #0
 800f814:	f000 8099 	beq.w	800f94a <rcl_init+0x14a>
 800f818:	f1a1 0e04 	sub.w	lr, r1, #4
 800f81c:	f04f 0c00 	mov.w	ip, #0
 800f820:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800f824:	f10c 0c01 	add.w	ip, ip, #1
 800f828:	2c00      	cmp	r4, #0
 800f82a:	f000 808e 	beq.w	800f94a <rcl_init+0x14a>
 800f82e:	4565      	cmp	r5, ip
 800f830:	d1f6      	bne.n	800f820 <rcl_init+0x20>
 800f832:	f1b8 0f00 	cmp.w	r8, #0
 800f836:	f000 8088 	beq.w	800f94a <rcl_init+0x14a>
 800f83a:	f8d8 4000 	ldr.w	r4, [r8]
 800f83e:	2c00      	cmp	r4, #0
 800f840:	f000 8083 	beq.w	800f94a <rcl_init+0x14a>
 800f844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f846:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800f84a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	f8cc 3000 	str.w	r3, [ip]
 800f854:	a817      	add	r0, sp, #92	@ 0x5c
 800f856:	f7fb fd51 	bl	800b2fc <rcutils_allocator_is_valid>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d075      	beq.n	800f94a <rcl_init+0x14a>
 800f85e:	2f00      	cmp	r7, #0
 800f860:	d073      	beq.n	800f94a <rcl_init+0x14a>
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d175      	bne.n	800f954 <rcl_init+0x154>
 800f868:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800f86c:	2178      	movs	r1, #120	@ 0x78
 800f86e:	2001      	movs	r0, #1
 800f870:	4798      	blx	r3
 800f872:	4604      	mov	r4, r0
 800f874:	6038      	str	r0, [r7, #0]
 800f876:	2800      	cmp	r0, #0
 800f878:	f000 80a0 	beq.w	800f9bc <rcl_init+0x1bc>
 800f87c:	a802      	add	r0, sp, #8
 800f87e:	f000 ffcb 	bl	8010818 <rmw_get_zero_initialized_context>
 800f882:	a902      	add	r1, sp, #8
 800f884:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f888:	2250      	movs	r2, #80	@ 0x50
 800f88a:	ac17      	add	r4, sp, #92	@ 0x5c
 800f88c:	f005 fa1f 	bl	8014cce <memcpy>
 800f890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f892:	f8d7 e000 	ldr.w	lr, [r7]
 800f896:	46f4      	mov	ip, lr
 800f898:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	f8cc 3000 	str.w	r3, [ip]
 800f8a2:	f10e 0114 	add.w	r1, lr, #20
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	f000 f92a 	bl	800fb00 <rcl_init_options_copy>
 800f8ac:	4604      	mov	r4, r0
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	d144      	bne.n	800f93c <rcl_init+0x13c>
 800f8b2:	f8d7 9000 	ldr.w	r9, [r7]
 800f8b6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800f8ba:	f8c9 0020 	str.w	r0, [r9, #32]
 800f8be:	f8c9 5018 	str.w	r5, [r9, #24]
 800f8c2:	f8c9 801c 	str.w	r8, [r9, #28]
 800f8c6:	2d00      	cmp	r5, #0
 800f8c8:	d04b      	beq.n	800f962 <rcl_init+0x162>
 800f8ca:	2e00      	cmp	r6, #0
 800f8cc:	d049      	beq.n	800f962 <rcl_init+0x162>
 800f8ce:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800f8d2:	2104      	movs	r1, #4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	4798      	blx	r3
 800f8d8:	f8c9 0020 	str.w	r0, [r9, #32]
 800f8dc:	f8d7 9000 	ldr.w	r9, [r7]
 800f8e0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800f8e4:	46ca      	mov	sl, r9
 800f8e6:	b343      	cbz	r3, 800f93a <rcl_init+0x13a>
 800f8e8:	2d01      	cmp	r5, #1
 800f8ea:	f178 0300 	sbcs.w	r3, r8, #0
 800f8ee:	db38      	blt.n	800f962 <rcl_init+0x162>
 800f8f0:	2400      	movs	r4, #0
 800f8f2:	3e04      	subs	r6, #4
 800f8f4:	46a1      	mov	r9, r4
 800f8f6:	e00b      	b.n	800f910 <rcl_init+0x110>
 800f8f8:	6831      	ldr	r1, [r6, #0]
 800f8fa:	f005 f9e8 	bl	8014cce <memcpy>
 800f8fe:	3401      	adds	r4, #1
 800f900:	f149 0900 	adc.w	r9, r9, #0
 800f904:	45c8      	cmp	r8, r9
 800f906:	bf08      	it	eq
 800f908:	42a5      	cmpeq	r5, r4
 800f90a:	d028      	beq.n	800f95e <rcl_init+0x15e>
 800f90c:	f8d7 a000 	ldr.w	sl, [r7]
 800f910:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800f914:	f7f0 fc86 	bl	8000224 <strlen>
 800f918:	1c42      	adds	r2, r0, #1
 800f91a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f91c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800f91e:	f8da a020 	ldr.w	sl, [sl, #32]
 800f922:	9201      	str	r2, [sp, #4]
 800f924:	4610      	mov	r0, r2
 800f926:	4798      	blx	r3
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800f92e:	6a1b      	ldr	r3, [r3, #32]
 800f930:	9a01      	ldr	r2, [sp, #4]
 800f932:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f936:	2800      	cmp	r0, #0
 800f938:	d1de      	bne.n	800f8f8 <rcl_init+0xf8>
 800f93a:	240a      	movs	r4, #10
 800f93c:	4638      	mov	r0, r7
 800f93e:	f7ff feff 	bl	800f740 <__cleanup_context>
 800f942:	e003      	b.n	800f94c <rcl_init+0x14c>
 800f944:	2900      	cmp	r1, #0
 800f946:	f43f af74 	beq.w	800f832 <rcl_init+0x32>
 800f94a:	240b      	movs	r4, #11
 800f94c:	4620      	mov	r0, r4
 800f94e:	b01c      	add	sp, #112	@ 0x70
 800f950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f954:	2464      	movs	r4, #100	@ 0x64
 800f956:	4620      	mov	r0, r4
 800f958:	b01c      	add	sp, #112	@ 0x70
 800f95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f95e:	f8d7 9000 	ldr.w	r9, [r7]
 800f962:	491d      	ldr	r1, [pc, #116]	@ (800f9d8 <rcl_init+0x1d8>)
 800f964:	680b      	ldr	r3, [r1, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	d023      	beq.n	800f9b2 <rcl_init+0x1b2>
 800f96a:	600b      	str	r3, [r1, #0]
 800f96c:	461a      	mov	r2, r3
 800f96e:	2400      	movs	r4, #0
 800f970:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f974:	607b      	str	r3, [r7, #4]
 800f976:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800f978:	6182      	str	r2, [r0, #24]
 800f97a:	3301      	adds	r3, #1
 800f97c:	61c4      	str	r4, [r0, #28]
 800f97e:	d01f      	beq.n	800f9c0 <rcl_init+0x1c0>
 800f980:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800f984:	b94b      	cbnz	r3, 800f99a <rcl_init+0x19a>
 800f986:	3030      	adds	r0, #48	@ 0x30
 800f988:	f000 f926 	bl	800fbd8 <rcl_get_localhost_only>
 800f98c:	4604      	mov	r4, r0
 800f98e:	2800      	cmp	r0, #0
 800f990:	d1d4      	bne.n	800f93c <rcl_init+0x13c>
 800f992:	f8d7 9000 	ldr.w	r9, [r7]
 800f996:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f99a:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800f99e:	3018      	adds	r0, #24
 800f9a0:	f001 f9ea 	bl	8010d78 <rmw_init>
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d0d0      	beq.n	800f94c <rcl_init+0x14c>
 800f9aa:	f7ff fea5 	bl	800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	e7c4      	b.n	800f93c <rcl_init+0x13c>
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	461c      	mov	r4, r3
 800f9b6:	600a      	str	r2, [r1, #0]
 800f9b8:	4613      	mov	r3, r2
 800f9ba:	e7d9      	b.n	800f970 <rcl_init+0x170>
 800f9bc:	240a      	movs	r4, #10
 800f9be:	e7c5      	b.n	800f94c <rcl_init+0x14c>
 800f9c0:	3024      	adds	r0, #36	@ 0x24
 800f9c2:	f003 fb13 	bl	8012fec <rcl_get_default_domain_id>
 800f9c6:	4604      	mov	r4, r0
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d1b7      	bne.n	800f93c <rcl_init+0x13c>
 800f9cc:	f8d7 9000 	ldr.w	r9, [r7]
 800f9d0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f9d4:	e7d4      	b.n	800f980 <rcl_init+0x180>
 800f9d6:	bf00      	nop
 800f9d8:	20010ddc 	.word	0x20010ddc

0800f9dc <rcl_get_zero_initialized_init_options>:
 800f9dc:	2000      	movs	r0, #0
 800f9de:	4770      	bx	lr

0800f9e0 <rcl_init_options_init>:
 800f9e0:	b084      	sub	sp, #16
 800f9e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9e4:	b097      	sub	sp, #92	@ 0x5c
 800f9e6:	ae1d      	add	r6, sp, #116	@ 0x74
 800f9e8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f9ec:	2800      	cmp	r0, #0
 800f9ee:	d058      	beq.n	800faa2 <rcl_init_options_init+0xc2>
 800f9f0:	6803      	ldr	r3, [r0, #0]
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	b133      	cbz	r3, 800fa04 <rcl_init_options_init+0x24>
 800f9f6:	2464      	movs	r4, #100	@ 0x64
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	b017      	add	sp, #92	@ 0x5c
 800f9fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fa00:	b004      	add	sp, #16
 800fa02:	4770      	bx	lr
 800fa04:	4630      	mov	r0, r6
 800fa06:	f7fb fc79 	bl	800b2fc <rcutils_allocator_is_valid>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d049      	beq.n	800faa2 <rcl_init_options_init+0xc2>
 800fa0e:	46b4      	mov	ip, r6
 800fa10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa14:	ac11      	add	r4, sp, #68	@ 0x44
 800fa16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa18:	f8dc 3000 	ldr.w	r3, [ip]
 800fa1c:	6023      	str	r3, [r4, #0]
 800fa1e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fa20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fa22:	2050      	movs	r0, #80	@ 0x50
 800fa24:	4798      	blx	r3
 800fa26:	4604      	mov	r4, r0
 800fa28:	6028      	str	r0, [r5, #0]
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	d03b      	beq.n	800faa6 <rcl_init_options_init+0xc6>
 800fa2e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800fa32:	4686      	mov	lr, r0
 800fa34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa3c:	f8dc 3000 	ldr.w	r3, [ip]
 800fa40:	f8ce 3000 	str.w	r3, [lr]
 800fa44:	a802      	add	r0, sp, #8
 800fa46:	f000 fef7 	bl	8010838 <rmw_get_zero_initialized_init_options>
 800fa4a:	f10d 0e08 	add.w	lr, sp, #8
 800fa4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa52:	f104 0c18 	add.w	ip, r4, #24
 800fa56:	682f      	ldr	r7, [r5, #0]
 800fa58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa6c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fa70:	ac20      	add	r4, sp, #128	@ 0x80
 800fa72:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fa76:	e894 0003 	ldmia.w	r4, {r0, r1}
 800fa7a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fa7e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800fa82:	f107 0018 	add.w	r0, r7, #24
 800fa86:	f001 f855 	bl	8010b34 <rmw_init_options_init>
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	d0b3      	beq.n	800f9f8 <rcl_init_options_init+0x18>
 800fa90:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800fa92:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fa94:	6828      	ldr	r0, [r5, #0]
 800fa96:	4798      	blx	r3
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f7ff fe2d 	bl	800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>
 800fa9e:	4604      	mov	r4, r0
 800faa0:	e7aa      	b.n	800f9f8 <rcl_init_options_init+0x18>
 800faa2:	240b      	movs	r4, #11
 800faa4:	e7a8      	b.n	800f9f8 <rcl_init_options_init+0x18>
 800faa6:	240a      	movs	r4, #10
 800faa8:	e7a6      	b.n	800f9f8 <rcl_init_options_init+0x18>
 800faaa:	bf00      	nop

0800faac <rcl_init_options_fini>:
 800faac:	b530      	push	{r4, r5, lr}
 800faae:	b087      	sub	sp, #28
 800fab0:	b1f0      	cbz	r0, 800faf0 <rcl_init_options_fini+0x44>
 800fab2:	6803      	ldr	r3, [r0, #0]
 800fab4:	4604      	mov	r4, r0
 800fab6:	b1db      	cbz	r3, 800faf0 <rcl_init_options_fini+0x44>
 800fab8:	469c      	mov	ip, r3
 800faba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fabe:	f10d 0e04 	add.w	lr, sp, #4
 800fac2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fac6:	f8dc 3000 	ldr.w	r3, [ip]
 800faca:	f8ce 3000 	str.w	r3, [lr]
 800face:	a801      	add	r0, sp, #4
 800fad0:	f7fb fc14 	bl	800b2fc <rcutils_allocator_is_valid>
 800fad4:	b160      	cbz	r0, 800faf0 <rcl_init_options_fini+0x44>
 800fad6:	6820      	ldr	r0, [r4, #0]
 800fad8:	3018      	adds	r0, #24
 800fada:	f001 f901 	bl	8010ce0 <rmw_init_options_fini>
 800fade:	4605      	mov	r5, r0
 800fae0:	b950      	cbnz	r0, 800faf8 <rcl_init_options_fini+0x4c>
 800fae2:	6820      	ldr	r0, [r4, #0]
 800fae4:	9b02      	ldr	r3, [sp, #8]
 800fae6:	9905      	ldr	r1, [sp, #20]
 800fae8:	4798      	blx	r3
 800faea:	4628      	mov	r0, r5
 800faec:	b007      	add	sp, #28
 800faee:	bd30      	pop	{r4, r5, pc}
 800faf0:	250b      	movs	r5, #11
 800faf2:	4628      	mov	r0, r5
 800faf4:	b007      	add	sp, #28
 800faf6:	bd30      	pop	{r4, r5, pc}
 800faf8:	f7ff fdfe 	bl	800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>
 800fafc:	4605      	mov	r5, r0
 800fafe:	e7f8      	b.n	800faf2 <rcl_init_options_fini+0x46>

0800fb00 <rcl_init_options_copy>:
 800fb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb04:	b094      	sub	sp, #80	@ 0x50
 800fb06:	2800      	cmp	r0, #0
 800fb08:	d058      	beq.n	800fbbc <rcl_init_options_copy+0xbc>
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	6800      	ldr	r0, [r0, #0]
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	d054      	beq.n	800fbbc <rcl_init_options_copy+0xbc>
 800fb12:	460e      	mov	r6, r1
 800fb14:	f7fb fbf2 	bl	800b2fc <rcutils_allocator_is_valid>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d04f      	beq.n	800fbbc <rcl_init_options_copy+0xbc>
 800fb1c:	2e00      	cmp	r6, #0
 800fb1e:	d04d      	beq.n	800fbbc <rcl_init_options_copy+0xbc>
 800fb20:	6833      	ldr	r3, [r6, #0]
 800fb22:	b123      	cbz	r3, 800fb2e <rcl_init_options_copy+0x2e>
 800fb24:	2464      	movs	r4, #100	@ 0x64
 800fb26:	4620      	mov	r0, r4
 800fb28:	b014      	add	sp, #80	@ 0x50
 800fb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb2e:	6827      	ldr	r7, [r4, #0]
 800fb30:	46bc      	mov	ip, r7
 800fb32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb36:	ad0f      	add	r5, sp, #60	@ 0x3c
 800fb38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb3a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb3e:	f8d7 8000 	ldr.w	r8, [r7]
 800fb42:	602b      	str	r3, [r5, #0]
 800fb44:	4619      	mov	r1, r3
 800fb46:	2050      	movs	r0, #80	@ 0x50
 800fb48:	47c0      	blx	r8
 800fb4a:	4605      	mov	r5, r0
 800fb4c:	6030      	str	r0, [r6, #0]
 800fb4e:	b3d0      	cbz	r0, 800fbc6 <rcl_init_options_copy+0xc6>
 800fb50:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800fb54:	4686      	mov	lr, r0
 800fb56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb5a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fb5e:	f8dc 3000 	ldr.w	r3, [ip]
 800fb62:	f8ce 3000 	str.w	r3, [lr]
 800fb66:	4668      	mov	r0, sp
 800fb68:	f000 fe66 	bl	8010838 <rmw_get_zero_initialized_init_options>
 800fb6c:	46ee      	mov	lr, sp
 800fb6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb72:	f105 0c18 	add.w	ip, r5, #24
 800fb76:	6824      	ldr	r4, [r4, #0]
 800fb78:	6835      	ldr	r5, [r6, #0]
 800fb7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb86:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb8e:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fb92:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fb96:	f104 0018 	add.w	r0, r4, #24
 800fb9a:	f105 0118 	add.w	r1, r5, #24
 800fb9e:	f001 f82b 	bl	8010bf8 <rmw_init_options_copy>
 800fba2:	4604      	mov	r4, r0
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d0be      	beq.n	800fb26 <rcl_init_options_copy+0x26>
 800fba8:	f7fb fbb6 	bl	800b318 <rcutils_get_error_string>
 800fbac:	f7fb fbcc 	bl	800b348 <rcutils_reset_error>
 800fbb0:	4630      	mov	r0, r6
 800fbb2:	f7ff ff7b 	bl	800faac <rcl_init_options_fini>
 800fbb6:	b140      	cbz	r0, 800fbca <rcl_init_options_copy+0xca>
 800fbb8:	4604      	mov	r4, r0
 800fbba:	e7b4      	b.n	800fb26 <rcl_init_options_copy+0x26>
 800fbbc:	240b      	movs	r4, #11
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	b014      	add	sp, #80	@ 0x50
 800fbc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc6:	240a      	movs	r4, #10
 800fbc8:	e7ad      	b.n	800fb26 <rcl_init_options_copy+0x26>
 800fbca:	4620      	mov	r0, r4
 800fbcc:	b014      	add	sp, #80	@ 0x50
 800fbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbd2:	f7ff bd91 	b.w	800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>
 800fbd6:	bf00      	nop

0800fbd8 <rcl_get_localhost_only>:
 800fbd8:	b510      	push	{r4, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	2300      	movs	r3, #0
 800fbde:	9301      	str	r3, [sp, #4]
 800fbe0:	b1b8      	cbz	r0, 800fc12 <rcl_get_localhost_only+0x3a>
 800fbe2:	4604      	mov	r4, r0
 800fbe4:	a901      	add	r1, sp, #4
 800fbe6:	480c      	ldr	r0, [pc, #48]	@ (800fc18 <rcl_get_localhost_only+0x40>)
 800fbe8:	f000 fb2a 	bl	8010240 <rcutils_get_env>
 800fbec:	b110      	cbz	r0, 800fbf4 <rcl_get_localhost_only+0x1c>
 800fbee:	2001      	movs	r0, #1
 800fbf0:	b002      	add	sp, #8
 800fbf2:	bd10      	pop	{r4, pc}
 800fbf4:	9b01      	ldr	r3, [sp, #4]
 800fbf6:	b113      	cbz	r3, 800fbfe <rcl_get_localhost_only+0x26>
 800fbf8:	781a      	ldrb	r2, [r3, #0]
 800fbfa:	2a31      	cmp	r2, #49	@ 0x31
 800fbfc:	d004      	beq.n	800fc08 <rcl_get_localhost_only+0x30>
 800fbfe:	2302      	movs	r3, #2
 800fc00:	2000      	movs	r0, #0
 800fc02:	7023      	strb	r3, [r4, #0]
 800fc04:	b002      	add	sp, #8
 800fc06:	bd10      	pop	{r4, pc}
 800fc08:	785b      	ldrb	r3, [r3, #1]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1f7      	bne.n	800fbfe <rcl_get_localhost_only+0x26>
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e7f6      	b.n	800fc00 <rcl_get_localhost_only+0x28>
 800fc12:	200b      	movs	r0, #11
 800fc14:	b002      	add	sp, #8
 800fc16:	bd10      	pop	{r4, pc}
 800fc18:	08015e04 	.word	0x08015e04

0800fc1c <rcl_get_zero_initialized_node>:
 800fc1c:	4a03      	ldr	r2, [pc, #12]	@ (800fc2c <rcl_get_zero_initialized_node+0x10>)
 800fc1e:	4603      	mov	r3, r0
 800fc20:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc24:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	4770      	bx	lr
 800fc2c:	08015e2c 	.word	0x08015e2c

0800fc30 <rcl_node_init>:
 800fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	b0a9      	sub	sp, #164	@ 0xa4
 800fc36:	4604      	mov	r4, r0
 800fc38:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800fc3c:	a823      	add	r0, sp, #140	@ 0x8c
 800fc3e:	460e      	mov	r6, r1
 800fc40:	4615      	mov	r5, r2
 800fc42:	461f      	mov	r7, r3
 800fc44:	f003 fbfa 	bl	801343c <rcl_guard_condition_get_default_options>
 800fc48:	f1b8 0f00 	cmp.w	r8, #0
 800fc4c:	f000 80e6 	beq.w	800fe1c <rcl_node_init+0x1ec>
 800fc50:	4640      	mov	r0, r8
 800fc52:	f7fb fb53 	bl	800b2fc <rcutils_allocator_is_valid>
 800fc56:	2800      	cmp	r0, #0
 800fc58:	f000 80e0 	beq.w	800fe1c <rcl_node_init+0x1ec>
 800fc5c:	2e00      	cmp	r6, #0
 800fc5e:	f000 80dd 	beq.w	800fe1c <rcl_node_init+0x1ec>
 800fc62:	2d00      	cmp	r5, #0
 800fc64:	f000 80da 	beq.w	800fe1c <rcl_node_init+0x1ec>
 800fc68:	2c00      	cmp	r4, #0
 800fc6a:	f000 80d7 	beq.w	800fe1c <rcl_node_init+0x1ec>
 800fc6e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fc72:	f1b9 0f00 	cmp.w	r9, #0
 800fc76:	f040 80fd 	bne.w	800fe74 <rcl_node_init+0x244>
 800fc7a:	2f00      	cmp	r7, #0
 800fc7c:	f000 80ce 	beq.w	800fe1c <rcl_node_init+0x1ec>
 800fc80:	4638      	mov	r0, r7
 800fc82:	f7ff fd57 	bl	800f734 <rcl_context_is_valid>
 800fc86:	4682      	mov	sl, r0
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	f000 80cd 	beq.w	800fe28 <rcl_node_init+0x1f8>
 800fc8e:	464a      	mov	r2, r9
 800fc90:	a922      	add	r1, sp, #136	@ 0x88
 800fc92:	4630      	mov	r0, r6
 800fc94:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800fc98:	f000 fec4 	bl	8010a24 <rmw_validate_node_name>
 800fc9c:	4681      	mov	r9, r0
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	f040 80be 	bne.w	800fe20 <rcl_node_init+0x1f0>
 800fca4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fca6:	2800      	cmp	r0, #0
 800fca8:	f040 80f0 	bne.w	800fe8c <rcl_node_init+0x25c>
 800fcac:	4628      	mov	r0, r5
 800fcae:	f7f0 fab9 	bl	8000224 <strlen>
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	f040 80bb 	bne.w	800fe2e <rcl_node_init+0x1fe>
 800fcb8:	4d7c      	ldr	r5, [pc, #496]	@ (800feac <rcl_node_init+0x27c>)
 800fcba:	a922      	add	r1, sp, #136	@ 0x88
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	f000 fe92 	bl	80109e8 <rmw_validate_namespace>
 800fcc4:	4681      	mov	r9, r0
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f040 80aa 	bne.w	800fe20 <rcl_node_init+0x1f0>
 800fccc:	4682      	mov	sl, r0
 800fcce:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	f040 80e0 	bne.w	800fe96 <rcl_node_init+0x266>
 800fcd6:	f8d8 3000 	ldr.w	r3, [r8]
 800fcda:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fcde:	2078      	movs	r0, #120	@ 0x78
 800fce0:	4798      	blx	r3
 800fce2:	4681      	mov	r9, r0
 800fce4:	6060      	str	r0, [r4, #4]
 800fce6:	2800      	cmp	r0, #0
 800fce8:	f000 80ca 	beq.w	800fe80 <rcl_node_init+0x250>
 800fcec:	2200      	movs	r2, #0
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800fcf4:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800fcf8:	a808      	add	r0, sp, #32
 800fcfa:	f000 f907 	bl	800ff0c <rcl_node_get_default_options>
 800fcfe:	a908      	add	r1, sp, #32
 800fd00:	4648      	mov	r0, r9
 800fd02:	2268      	movs	r2, #104	@ 0x68
 800fd04:	f004 ffe3 	bl	8014cce <memcpy>
 800fd08:	6861      	ldr	r1, [r4, #4]
 800fd0a:	6027      	str	r7, [r4, #0]
 800fd0c:	4640      	mov	r0, r8
 800fd0e:	f000 f90b 	bl	800ff28 <rcl_node_options_copy>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d158      	bne.n	800fdc8 <rcl_node_init+0x198>
 800fd16:	4628      	mov	r0, r5
 800fd18:	f7f0 fa84 	bl	8000224 <strlen>
 800fd1c:	4428      	add	r0, r5
 800fd1e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fd22:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fd26:	2b2f      	cmp	r3, #47	@ 0x2f
 800fd28:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	bf0c      	ite	eq
 800fd30:	4b5f      	ldreq	r3, [pc, #380]	@ (800feb0 <rcl_node_init+0x280>)
 800fd32:	4b60      	ldrne	r3, [pc, #384]	@ (800feb4 <rcl_node_init+0x284>)
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fd3a:	9301      	str	r3, [sp, #4]
 800fd3c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fd40:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fd44:	f000 fa94 	bl	8010270 <rcutils_format_string_limit>
 800fd48:	6823      	ldr	r3, [r4, #0]
 800fd4a:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800fd4e:	6818      	ldr	r0, [r3, #0]
 800fd50:	4631      	mov	r1, r6
 800fd52:	3028      	adds	r0, #40	@ 0x28
 800fd54:	462a      	mov	r2, r5
 800fd56:	6866      	ldr	r6, [r4, #4]
 800fd58:	f001 fa62 	bl	8011220 <rmw_create_node>
 800fd5c:	6863      	ldr	r3, [r4, #4]
 800fd5e:	66b0      	str	r0, [r6, #104]	@ 0x68
 800fd60:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d032      	beq.n	800fdcc <rcl_node_init+0x19c>
 800fd66:	f001 faef 	bl	8011348 <rmw_node_get_graph_guard_condition>
 800fd6a:	4681      	mov	r9, r0
 800fd6c:	b360      	cbz	r0, 800fdc8 <rcl_node_init+0x198>
 800fd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fd76:	6866      	ldr	r6, [r4, #4]
 800fd78:	2008      	movs	r0, #8
 800fd7a:	4798      	blx	r3
 800fd7c:	6863      	ldr	r3, [r4, #4]
 800fd7e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800fd80:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800fd84:	f1bb 0f00 	cmp.w	fp, #0
 800fd88:	d020      	beq.n	800fdcc <rcl_node_init+0x19c>
 800fd8a:	a806      	add	r0, sp, #24
 800fd8c:	f003 fac6 	bl	801331c <rcl_get_zero_initialized_guard_condition>
 800fd90:	a806      	add	r0, sp, #24
 800fd92:	c803      	ldmia	r0, {r0, r1}
 800fd94:	6863      	ldr	r3, [r4, #4]
 800fd96:	46c4      	mov	ip, r8
 800fd98:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800fd9c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fda0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fda4:	ae23      	add	r6, sp, #140	@ 0x8c
 800fda6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fda8:	f8dc 3000 	ldr.w	r3, [ip]
 800fdac:	6033      	str	r3, [r6, #0]
 800fdae:	ab28      	add	r3, sp, #160	@ 0xa0
 800fdb0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fdb4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fdb8:	4649      	mov	r1, r9
 800fdba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fdbc:	463a      	mov	r2, r7
 800fdbe:	4670      	mov	r0, lr
 800fdc0:	f003 fab6 	bl	8013330 <rcl_guard_condition_init_from_rmw>
 800fdc4:	4681      	mov	r9, r0
 800fdc6:	b328      	cbz	r0, 800fe14 <rcl_node_init+0x1e4>
 800fdc8:	6863      	ldr	r3, [r4, #4]
 800fdca:	b1f3      	cbz	r3, 800fe0a <rcl_node_init+0x1da>
 800fdcc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800fdce:	b128      	cbz	r0, 800fddc <rcl_node_init+0x1ac>
 800fdd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdd4:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fdd8:	4798      	blx	r3
 800fdda:	6863      	ldr	r3, [r4, #4]
 800fddc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800fdde:	b110      	cbz	r0, 800fde6 <rcl_node_init+0x1b6>
 800fde0:	f001 fa36 	bl	8011250 <rmw_destroy_node>
 800fde4:	6863      	ldr	r3, [r4, #4]
 800fde6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fde8:	b148      	cbz	r0, 800fdfe <rcl_node_init+0x1ce>
 800fdea:	f003 fb01 	bl	80133f0 <rcl_guard_condition_fini>
 800fdee:	6863      	ldr	r3, [r4, #4]
 800fdf0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fdf4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800fdf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fdfa:	4798      	blx	r3
 800fdfc:	6863      	ldr	r3, [r4, #4]
 800fdfe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe08:	4798      	blx	r3
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	e9c4 3300 	strd	r3, r3, [r4]
 800fe10:	f04f 0901 	mov.w	r9, #1
 800fe14:	f1ba 0f00 	cmp.w	sl, #0
 800fe18:	d125      	bne.n	800fe66 <rcl_node_init+0x236>
 800fe1a:	e001      	b.n	800fe20 <rcl_node_init+0x1f0>
 800fe1c:	f04f 090b 	mov.w	r9, #11
 800fe20:	4648      	mov	r0, r9
 800fe22:	b029      	add	sp, #164	@ 0xa4
 800fe24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe28:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800fe2c:	e7f8      	b.n	800fe20 <rcl_node_init+0x1f0>
 800fe2e:	782b      	ldrb	r3, [r5, #0]
 800fe30:	2b2f      	cmp	r3, #47	@ 0x2f
 800fe32:	f43f af42 	beq.w	800fcba <rcl_node_init+0x8a>
 800fe36:	9503      	str	r5, [sp, #12]
 800fe38:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	4b1e      	ldr	r3, [pc, #120]	@ (800feb8 <rcl_node_init+0x288>)
 800fe40:	9302      	str	r3, [sp, #8]
 800fe42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe46:	9301      	str	r3, [sp, #4]
 800fe48:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fe4c:	f000 fa10 	bl	8010270 <rcutils_format_string_limit>
 800fe50:	4605      	mov	r5, r0
 800fe52:	b340      	cbz	r0, 800fea6 <rcl_node_init+0x276>
 800fe54:	2200      	movs	r2, #0
 800fe56:	a922      	add	r1, sp, #136	@ 0x88
 800fe58:	9222      	str	r2, [sp, #136]	@ 0x88
 800fe5a:	f000 fdc5 	bl	80109e8 <rmw_validate_namespace>
 800fe5e:	4681      	mov	r9, r0
 800fe60:	2800      	cmp	r0, #0
 800fe62:	f43f af34 	beq.w	800fcce <rcl_node_init+0x9e>
 800fe66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe6a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fe6e:	4628      	mov	r0, r5
 800fe70:	4798      	blx	r3
 800fe72:	e7d5      	b.n	800fe20 <rcl_node_init+0x1f0>
 800fe74:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800fe78:	4648      	mov	r0, r9
 800fe7a:	b029      	add	sp, #164	@ 0xa4
 800fe7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe80:	f04f 090a 	mov.w	r9, #10
 800fe84:	f1ba 0f00 	cmp.w	sl, #0
 800fe88:	d1ed      	bne.n	800fe66 <rcl_node_init+0x236>
 800fe8a:	e7c9      	b.n	800fe20 <rcl_node_init+0x1f0>
 800fe8c:	f000 fe1c 	bl	8010ac8 <rmw_node_name_validation_result_string>
 800fe90:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800fe94:	e7c4      	b.n	800fe20 <rcl_node_init+0x1f0>
 800fe96:	f000 fdb9 	bl	8010a0c <rmw_namespace_validation_result_string>
 800fe9a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800fe9e:	f1ba 0f00 	cmp.w	sl, #0
 800fea2:	d1e0      	bne.n	800fe66 <rcl_node_init+0x236>
 800fea4:	e7bc      	b.n	800fe20 <rcl_node_init+0x1f0>
 800fea6:	f04f 090a 	mov.w	r9, #10
 800feaa:	e7b9      	b.n	800fe20 <rcl_node_init+0x1f0>
 800feac:	08015e1c 	.word	0x08015e1c
 800feb0:	08015ca0 	.word	0x08015ca0
 800feb4:	08015e24 	.word	0x08015e24
 800feb8:	08015e20 	.word	0x08015e20

0800febc <rcl_node_is_valid>:
 800febc:	b130      	cbz	r0, 800fecc <rcl_node_is_valid+0x10>
 800febe:	6843      	ldr	r3, [r0, #4]
 800fec0:	b123      	cbz	r3, 800fecc <rcl_node_is_valid+0x10>
 800fec2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fec4:	b113      	cbz	r3, 800fecc <rcl_node_is_valid+0x10>
 800fec6:	6800      	ldr	r0, [r0, #0]
 800fec8:	f7ff bc34 	b.w	800f734 <rcl_context_is_valid>
 800fecc:	2000      	movs	r0, #0
 800fece:	4770      	bx	lr

0800fed0 <rcl_node_get_name>:
 800fed0:	b120      	cbz	r0, 800fedc <rcl_node_get_name+0xc>
 800fed2:	6840      	ldr	r0, [r0, #4]
 800fed4:	b110      	cbz	r0, 800fedc <rcl_node_get_name+0xc>
 800fed6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fed8:	b100      	cbz	r0, 800fedc <rcl_node_get_name+0xc>
 800feda:	6880      	ldr	r0, [r0, #8]
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop

0800fee0 <rcl_node_get_namespace>:
 800fee0:	b120      	cbz	r0, 800feec <rcl_node_get_namespace+0xc>
 800fee2:	6840      	ldr	r0, [r0, #4]
 800fee4:	b110      	cbz	r0, 800feec <rcl_node_get_namespace+0xc>
 800fee6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800fee8:	b100      	cbz	r0, 800feec <rcl_node_get_namespace+0xc>
 800feea:	68c0      	ldr	r0, [r0, #12]
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop

0800fef0 <rcl_node_get_options>:
 800fef0:	b128      	cbz	r0, 800fefe <rcl_node_get_options+0xe>
 800fef2:	6840      	ldr	r0, [r0, #4]
 800fef4:	b118      	cbz	r0, 800fefe <rcl_node_get_options+0xe>
 800fef6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	bf08      	it	eq
 800fefc:	2000      	moveq	r0, #0
 800fefe:	4770      	bx	lr

0800ff00 <rcl_node_get_rmw_handle>:
 800ff00:	b110      	cbz	r0, 800ff08 <rcl_node_get_rmw_handle+0x8>
 800ff02:	6840      	ldr	r0, [r0, #4]
 800ff04:	b100      	cbz	r0, 800ff08 <rcl_node_get_rmw_handle+0x8>
 800ff06:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop

0800ff0c <rcl_node_get_default_options>:
 800ff0c:	b510      	push	{r4, lr}
 800ff0e:	2268      	movs	r2, #104	@ 0x68
 800ff10:	4604      	mov	r4, r0
 800ff12:	2100      	movs	r1, #0
 800ff14:	f004 fe12 	bl	8014b3c <memset>
 800ff18:	4620      	mov	r0, r4
 800ff1a:	f7fb f9e1 	bl	800b2e0 <rcutils_get_default_allocator>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	7523      	strb	r3, [r4, #20]
 800ff22:	4620      	mov	r0, r4
 800ff24:	bd10      	pop	{r4, pc}
 800ff26:	bf00      	nop

0800ff28 <rcl_node_options_copy>:
 800ff28:	b1d0      	cbz	r0, 800ff60 <rcl_node_options_copy+0x38>
 800ff2a:	b570      	push	{r4, r5, r6, lr}
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	b1a9      	cbz	r1, 800ff5c <rcl_node_options_copy+0x34>
 800ff30:	4288      	cmp	r0, r1
 800ff32:	4684      	mov	ip, r0
 800ff34:	d012      	beq.n	800ff5c <rcl_node_options_copy+0x34>
 800ff36:	4605      	mov	r5, r0
 800ff38:	8a86      	ldrh	r6, [r0, #20]
 800ff3a:	468e      	mov	lr, r1
 800ff3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff3e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ff42:	682b      	ldr	r3, [r5, #0]
 800ff44:	f8ce 3000 	str.w	r3, [lr]
 800ff48:	f10c 0118 	add.w	r1, ip, #24
 800ff4c:	2250      	movs	r2, #80	@ 0x50
 800ff4e:	82a6      	strh	r6, [r4, #20]
 800ff50:	f104 0018 	add.w	r0, r4, #24
 800ff54:	f004 febb 	bl	8014cce <memcpy>
 800ff58:	2000      	movs	r0, #0
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
 800ff5c:	200b      	movs	r0, #11
 800ff5e:	bd70      	pop	{r4, r5, r6, pc}
 800ff60:	200b      	movs	r0, #11
 800ff62:	4770      	bx	lr

0800ff64 <rcl_node_resolve_name>:
 800ff64:	b082      	sub	sp, #8
 800ff66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6a:	b091      	sub	sp, #68	@ 0x44
 800ff6c:	ac1a      	add	r4, sp, #104	@ 0x68
 800ff6e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ff72:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d03b      	beq.n	800fff2 <rcl_node_resolve_name+0x8e>
 800ff7a:	460c      	mov	r4, r1
 800ff7c:	4605      	mov	r5, r0
 800ff7e:	f7ff ffb7 	bl	800fef0 <rcl_node_get_options>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d037      	beq.n	800fff6 <rcl_node_resolve_name+0x92>
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7ff ffa2 	bl	800fed0 <rcl_node_get_name>
 800ff8c:	4606      	mov	r6, r0
 800ff8e:	4628      	mov	r0, r5
 800ff90:	f7ff ffa6 	bl	800fee0 <rcl_node_get_namespace>
 800ff94:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800ff98:	4681      	mov	r9, r0
 800ff9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ff9e:	ad0b      	add	r5, sp, #44	@ 0x2c
 800ffa0:	46ac      	mov	ip, r5
 800ffa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffa6:	f8de 3000 	ldr.w	r3, [lr]
 800ffaa:	f8cc 3000 	str.w	r3, [ip]
 800ffae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ffb0:	b1fb      	cbz	r3, 800fff2 <rcl_node_resolve_name+0x8e>
 800ffb2:	468a      	mov	sl, r1
 800ffb4:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800ffb8:	f000 fab2 	bl	8010520 <rcutils_get_zero_initialized_string_map>
 800ffbc:	ab10      	add	r3, sp, #64	@ 0x40
 800ffbe:	9008      	str	r0, [sp, #32]
 800ffc0:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800ffc4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ffc8:	2100      	movs	r1, #0
 800ffca:	e895 000c 	ldmia.w	r5, {r2, r3}
 800ffce:	a808      	add	r0, sp, #32
 800ffd0:	f000 fb1e 	bl	8010610 <rcutils_string_map_init>
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	b180      	cbz	r0, 800fffa <rcl_node_resolve_name+0x96>
 800ffd8:	f7fb f99e 	bl	800b318 <rcutils_get_error_string>
 800ffdc:	f7fb f9b4 	bl	800b348 <rcutils_reset_error>
 800ffe0:	2f0a      	cmp	r7, #10
 800ffe2:	bf18      	it	ne
 800ffe4:	2701      	movne	r7, #1
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	b011      	add	sp, #68	@ 0x44
 800ffea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffee:	b002      	add	sp, #8
 800fff0:	4770      	bx	lr
 800fff2:	270b      	movs	r7, #11
 800fff4:	e7f7      	b.n	800ffe6 <rcl_node_resolve_name+0x82>
 800fff6:	2701      	movs	r7, #1
 800fff8:	e7f5      	b.n	800ffe6 <rcl_node_resolve_name+0x82>
 800fffa:	9009      	str	r0, [sp, #36]	@ 0x24
 800fffc:	9007      	str	r0, [sp, #28]
 800fffe:	a808      	add	r0, sp, #32
 8010000:	f003 f986 	bl	8013310 <rcl_get_default_topic_name_substitutions>
 8010004:	4607      	mov	r7, r0
 8010006:	b1a8      	cbz	r0, 8010034 <rcl_node_resolve_name+0xd0>
 8010008:	280a      	cmp	r0, #10
 801000a:	9c07      	ldr	r4, [sp, #28]
 801000c:	d000      	beq.n	8010010 <rcl_node_resolve_name+0xac>
 801000e:	2701      	movs	r7, #1
 8010010:	a808      	add	r0, sp, #32
 8010012:	f000 fb3d 	bl	8010690 <rcutils_string_map_fini>
 8010016:	2800      	cmp	r0, #0
 8010018:	d13d      	bne.n	8010096 <rcl_node_resolve_name+0x132>
 801001a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801001c:	4659      	mov	r1, fp
 801001e:	47d0      	blx	sl
 8010020:	4659      	mov	r1, fp
 8010022:	4620      	mov	r0, r4
 8010024:	47d0      	blx	sl
 8010026:	f1b8 0f00 	cmp.w	r8, #0
 801002a:	d0dc      	beq.n	800ffe6 <rcl_node_resolve_name+0x82>
 801002c:	2f67      	cmp	r7, #103	@ 0x67
 801002e:	bf08      	it	eq
 8010030:	2768      	moveq	r7, #104	@ 0x68
 8010032:	e7d8      	b.n	800ffe6 <rcl_node_resolve_name+0x82>
 8010034:	ab09      	add	r3, sp, #36	@ 0x24
 8010036:	9305      	str	r3, [sp, #20]
 8010038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801003a:	46ec      	mov	ip, sp
 801003c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010040:	682b      	ldr	r3, [r5, #0]
 8010042:	f8cc 3000 	str.w	r3, [ip]
 8010046:	464a      	mov	r2, r9
 8010048:	4631      	mov	r1, r6
 801004a:	4620      	mov	r0, r4
 801004c:	ab08      	add	r3, sp, #32
 801004e:	f003 f801 	bl	8013054 <rcl_expand_topic_name>
 8010052:	4607      	mov	r7, r0
 8010054:	b9b8      	cbnz	r0, 8010086 <rcl_node_resolve_name+0x122>
 8010056:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8010058:	9009      	str	r0, [sp, #36]	@ 0x24
 801005a:	4602      	mov	r2, r0
 801005c:	a90a      	add	r1, sp, #40	@ 0x28
 801005e:	4620      	mov	r0, r4
 8010060:	f000 fbfe 	bl	8010860 <rmw_validate_full_topic_name>
 8010064:	b988      	cbnz	r0, 801008a <rcl_node_resolve_name+0x126>
 8010066:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010068:	b9d5      	cbnz	r5, 80100a0 <rcl_node_resolve_name+0x13c>
 801006a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801006c:	a808      	add	r0, sp, #32
 801006e:	601c      	str	r4, [r3, #0]
 8010070:	f000 fb0e 	bl	8010690 <rcutils_string_map_fini>
 8010074:	4607      	mov	r7, r0
 8010076:	b1a8      	cbz	r0, 80100a4 <rcl_node_resolve_name+0x140>
 8010078:	f7fb f94e 	bl	800b318 <rcutils_get_error_string>
 801007c:	462c      	mov	r4, r5
 801007e:	f7fb f963 	bl	800b348 <rcutils_reset_error>
 8010082:	2701      	movs	r7, #1
 8010084:	e7c9      	b.n	801001a <rcl_node_resolve_name+0xb6>
 8010086:	9c07      	ldr	r4, [sp, #28]
 8010088:	e7c2      	b.n	8010010 <rcl_node_resolve_name+0xac>
 801008a:	f7fb f945 	bl	800b318 <rcutils_get_error_string>
 801008e:	2701      	movs	r7, #1
 8010090:	f7fb f95a 	bl	800b348 <rcutils_reset_error>
 8010094:	e7bc      	b.n	8010010 <rcl_node_resolve_name+0xac>
 8010096:	f7fb f93f 	bl	800b318 <rcutils_get_error_string>
 801009a:	f7fb f955 	bl	800b348 <rcutils_reset_error>
 801009e:	e7bc      	b.n	801001a <rcl_node_resolve_name+0xb6>
 80100a0:	2767      	movs	r7, #103	@ 0x67
 80100a2:	e7b5      	b.n	8010010 <rcl_node_resolve_name+0xac>
 80100a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100a6:	4659      	mov	r1, fp
 80100a8:	47d0      	blx	sl
 80100aa:	4659      	mov	r1, fp
 80100ac:	4638      	mov	r0, r7
 80100ae:	47d0      	blx	sl
 80100b0:	e799      	b.n	800ffe6 <rcl_node_resolve_name+0x82>
 80100b2:	bf00      	nop

080100b4 <rcl_get_system_time>:
 80100b4:	4608      	mov	r0, r1
 80100b6:	f000 bb5f 	b.w	8010778 <rcutils_system_time_now>
 80100ba:	bf00      	nop

080100bc <rcl_get_steady_time>:
 80100bc:	4608      	mov	r0, r1
 80100be:	f000 bb83 	b.w	80107c8 <rcutils_steady_time_now>
 80100c2:	bf00      	nop

080100c4 <rcl_get_ros_time>:
 80100c4:	7a03      	ldrb	r3, [r0, #8]
 80100c6:	b510      	push	{r4, lr}
 80100c8:	460c      	mov	r4, r1
 80100ca:	b133      	cbz	r3, 80100da <rcl_get_ros_time+0x16>
 80100cc:	2105      	movs	r1, #5
 80100ce:	f000 f881 	bl	80101d4 <__atomic_load_8>
 80100d2:	e9c4 0100 	strd	r0, r1, [r4]
 80100d6:	2000      	movs	r0, #0
 80100d8:	bd10      	pop	{r4, pc}
 80100da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100de:	4608      	mov	r0, r1
 80100e0:	f000 bb4a 	b.w	8010778 <rcutils_system_time_now>

080100e4 <rcl_clock_init>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	4605      	mov	r5, r0
 80100e8:	4610      	mov	r0, r2
 80100ea:	4614      	mov	r4, r2
 80100ec:	460e      	mov	r6, r1
 80100ee:	f7fb f905 	bl	800b2fc <rcutils_allocator_is_valid>
 80100f2:	b128      	cbz	r0, 8010100 <rcl_clock_init+0x1c>
 80100f4:	2d03      	cmp	r5, #3
 80100f6:	d803      	bhi.n	8010100 <rcl_clock_init+0x1c>
 80100f8:	e8df f005 	tbb	[pc, r5]
 80100fc:	06532e1d 	.word	0x06532e1d
 8010100:	f04f 0c0b 	mov.w	ip, #11
 8010104:	4660      	mov	r0, ip
 8010106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010108:	2e00      	cmp	r6, #0
 801010a:	d0f9      	beq.n	8010100 <rcl_clock_init+0x1c>
 801010c:	2c00      	cmp	r4, #0
 801010e:	d0f7      	beq.n	8010100 <rcl_clock_init+0x1c>
 8010110:	2300      	movs	r3, #0
 8010112:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010116:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80101cc <rcl_clock_init+0xe8>
 801011a:	6133      	str	r3, [r6, #16]
 801011c:	f106 0514 	add.w	r5, r6, #20
 8010120:	469c      	mov	ip, r3
 8010122:	2703      	movs	r7, #3
 8010124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010126:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010128:	6823      	ldr	r3, [r4, #0]
 801012a:	602b      	str	r3, [r5, #0]
 801012c:	7037      	strb	r7, [r6, #0]
 801012e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010132:	4660      	mov	r0, ip
 8010134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010136:	2e00      	cmp	r6, #0
 8010138:	d0e2      	beq.n	8010100 <rcl_clock_init+0x1c>
 801013a:	2300      	movs	r3, #0
 801013c:	7033      	strb	r3, [r6, #0]
 801013e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8010142:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8010146:	469c      	mov	ip, r3
 8010148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801014a:	f106 0514 	add.w	r5, r6, #20
 801014e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010150:	6823      	ldr	r3, [r4, #0]
 8010152:	602b      	str	r3, [r5, #0]
 8010154:	4660      	mov	r0, ip
 8010156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010158:	2e00      	cmp	r6, #0
 801015a:	d0d1      	beq.n	8010100 <rcl_clock_init+0x1c>
 801015c:	2c00      	cmp	r4, #0
 801015e:	d0cf      	beq.n	8010100 <rcl_clock_init+0x1c>
 8010160:	2700      	movs	r7, #0
 8010162:	7037      	strb	r7, [r6, #0]
 8010164:	46a4      	mov	ip, r4
 8010166:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801016a:	f106 0514 	add.w	r5, r6, #20
 801016e:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8010172:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8010176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010178:	f8dc 3000 	ldr.w	r3, [ip]
 801017c:	602b      	str	r3, [r5, #0]
 801017e:	6921      	ldr	r1, [r4, #16]
 8010180:	6823      	ldr	r3, [r4, #0]
 8010182:	2010      	movs	r0, #16
 8010184:	4798      	blx	r3
 8010186:	6130      	str	r0, [r6, #16]
 8010188:	b1d0      	cbz	r0, 80101c0 <rcl_clock_init+0xdc>
 801018a:	2200      	movs	r2, #0
 801018c:	2300      	movs	r3, #0
 801018e:	e9c0 2300 	strd	r2, r3, [r0]
 8010192:	2301      	movs	r3, #1
 8010194:	7207      	strb	r7, [r0, #8]
 8010196:	4a0c      	ldr	r2, [pc, #48]	@ (80101c8 <rcl_clock_init+0xe4>)
 8010198:	7033      	strb	r3, [r6, #0]
 801019a:	46bc      	mov	ip, r7
 801019c:	60f2      	str	r2, [r6, #12]
 801019e:	4660      	mov	r0, ip
 80101a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101a2:	2e00      	cmp	r6, #0
 80101a4:	d0ac      	beq.n	8010100 <rcl_clock_init+0x1c>
 80101a6:	2c00      	cmp	r4, #0
 80101a8:	d0aa      	beq.n	8010100 <rcl_clock_init+0x1c>
 80101aa:	2300      	movs	r3, #0
 80101ac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80101b0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80101d0 <rcl_clock_init+0xec>
 80101b4:	6133      	str	r3, [r6, #16]
 80101b6:	f106 0514 	add.w	r5, r6, #20
 80101ba:	469c      	mov	ip, r3
 80101bc:	2702      	movs	r7, #2
 80101be:	e7b1      	b.n	8010124 <rcl_clock_init+0x40>
 80101c0:	f04f 0c0a 	mov.w	ip, #10
 80101c4:	e79e      	b.n	8010104 <rcl_clock_init+0x20>
 80101c6:	bf00      	nop
 80101c8:	080100c5 	.word	0x080100c5
 80101cc:	080100bd 	.word	0x080100bd
 80101d0:	080100b5 	.word	0x080100b5

080101d4 <__atomic_load_8>:
 80101d4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80101d8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80101dc:	4a15      	ldr	r2, [pc, #84]	@ (8010234 <__atomic_load_8+0x60>)
 80101de:	4b16      	ldr	r3, [pc, #88]	@ (8010238 <__atomic_load_8+0x64>)
 80101e0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80101e4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80101e8:	fb02 f101 	mul.w	r1, r2, r1
 80101ec:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80101f0:	fba3 2301 	umull	r2, r3, r3, r1
 80101f4:	091b      	lsrs	r3, r3, #4
 80101f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80101fa:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80101fe:	b4d0      	push	{r4, r6, r7}
 8010200:	4c0e      	ldr	r4, [pc, #56]	@ (801023c <__atomic_load_8+0x68>)
 8010202:	1ac9      	subs	r1, r1, r3
 8010204:	1862      	adds	r2, r4, r1
 8010206:	f04f 0c01 	mov.w	ip, #1
 801020a:	e8d2 3f4f 	ldrexb	r3, [r2]
 801020e:	e8c2 cf46 	strexb	r6, ip, [r2]
 8010212:	2e00      	cmp	r6, #0
 8010214:	d1f9      	bne.n	801020a <__atomic_load_8+0x36>
 8010216:	f3bf 8f5b 	dmb	ish
 801021a:	b2db      	uxtb	r3, r3
 801021c:	2b00      	cmp	r3, #0
 801021e:	d1f4      	bne.n	801020a <__atomic_load_8+0x36>
 8010220:	e9d0 6700 	ldrd	r6, r7, [r0]
 8010224:	f3bf 8f5b 	dmb	ish
 8010228:	5463      	strb	r3, [r4, r1]
 801022a:	4630      	mov	r0, r6
 801022c:	4639      	mov	r1, r7
 801022e:	bcd0      	pop	{r4, r6, r7}
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	27d4eb2d 	.word	0x27d4eb2d
 8010238:	b21642c9 	.word	0xb21642c9
 801023c:	20010de0 	.word	0x20010de0

08010240 <rcutils_get_env>:
 8010240:	b168      	cbz	r0, 801025e <rcutils_get_env+0x1e>
 8010242:	b510      	push	{r4, lr}
 8010244:	460c      	mov	r4, r1
 8010246:	b129      	cbz	r1, 8010254 <rcutils_get_env+0x14>
 8010248:	f004 f8d4 	bl	80143f4 <getenv>
 801024c:	b120      	cbz	r0, 8010258 <rcutils_get_env+0x18>
 801024e:	6020      	str	r0, [r4, #0]
 8010250:	2000      	movs	r0, #0
 8010252:	bd10      	pop	{r4, pc}
 8010254:	4803      	ldr	r0, [pc, #12]	@ (8010264 <rcutils_get_env+0x24>)
 8010256:	bd10      	pop	{r4, pc}
 8010258:	4b03      	ldr	r3, [pc, #12]	@ (8010268 <rcutils_get_env+0x28>)
 801025a:	6023      	str	r3, [r4, #0]
 801025c:	bd10      	pop	{r4, pc}
 801025e:	4803      	ldr	r0, [pc, #12]	@ (801026c <rcutils_get_env+0x2c>)
 8010260:	4770      	bx	lr
 8010262:	bf00      	nop
 8010264:	08015e50 	.word	0x08015e50
 8010268:	08015f74 	.word	0x08015f74
 801026c:	08015e34 	.word	0x08015e34

08010270 <rcutils_format_string_limit>:
 8010270:	b40f      	push	{r0, r1, r2, r3}
 8010272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010274:	b083      	sub	sp, #12
 8010276:	ac08      	add	r4, sp, #32
 8010278:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801027a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801027e:	b34e      	cbz	r6, 80102d4 <rcutils_format_string_limit+0x64>
 8010280:	a808      	add	r0, sp, #32
 8010282:	f7fb f83b 	bl	800b2fc <rcutils_allocator_is_valid>
 8010286:	b328      	cbz	r0, 80102d4 <rcutils_format_string_limit+0x64>
 8010288:	2100      	movs	r1, #0
 801028a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801028c:	4632      	mov	r2, r6
 801028e:	4608      	mov	r0, r1
 8010290:	e9cd 3300 	strd	r3, r3, [sp]
 8010294:	f000 f8f4 	bl	8010480 <rcutils_vsnprintf>
 8010298:	1c43      	adds	r3, r0, #1
 801029a:	4605      	mov	r5, r0
 801029c:	d01a      	beq.n	80102d4 <rcutils_format_string_limit+0x64>
 801029e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102a2:	1c47      	adds	r7, r0, #1
 80102a4:	429f      	cmp	r7, r3
 80102a6:	bf84      	itt	hi
 80102a8:	461f      	movhi	r7, r3
 80102aa:	f103 35ff 	addhi.w	r5, r3, #4294967295
 80102ae:	4638      	mov	r0, r7
 80102b0:	9b08      	ldr	r3, [sp, #32]
 80102b2:	4798      	blx	r3
 80102b4:	4604      	mov	r4, r0
 80102b6:	b168      	cbz	r0, 80102d4 <rcutils_format_string_limit+0x64>
 80102b8:	9b01      	ldr	r3, [sp, #4]
 80102ba:	4632      	mov	r2, r6
 80102bc:	4639      	mov	r1, r7
 80102be:	f000 f8df 	bl	8010480 <rcutils_vsnprintf>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	db02      	blt.n	80102cc <rcutils_format_string_limit+0x5c>
 80102c6:	2300      	movs	r3, #0
 80102c8:	5563      	strb	r3, [r4, r5]
 80102ca:	e004      	b.n	80102d6 <rcutils_format_string_limit+0x66>
 80102cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80102d0:	4620      	mov	r0, r4
 80102d2:	4798      	blx	r3
 80102d4:	2400      	movs	r4, #0
 80102d6:	4620      	mov	r0, r4
 80102d8:	b003      	add	sp, #12
 80102da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80102de:	b004      	add	sp, #16
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop

080102e4 <rcutils_repl_str>:
 80102e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102e8:	ed2d 8b02 	vpush	{d8}
 80102ec:	b087      	sub	sp, #28
 80102ee:	4680      	mov	r8, r0
 80102f0:	4608      	mov	r0, r1
 80102f2:	f8cd 8004 	str.w	r8, [sp, #4]
 80102f6:	ee08 2a10 	vmov	s16, r2
 80102fa:	468a      	mov	sl, r1
 80102fc:	4699      	mov	r9, r3
 80102fe:	f7ef ff91 	bl	8000224 <strlen>
 8010302:	2600      	movs	r6, #0
 8010304:	4647      	mov	r7, r8
 8010306:	9002      	str	r0, [sp, #8]
 8010308:	46b3      	mov	fp, r6
 801030a:	2510      	movs	r5, #16
 801030c:	46b0      	mov	r8, r6
 801030e:	e01d      	b.n	801034c <rcutils_repl_str+0x68>
 8010310:	f10b 0b01 	add.w	fp, fp, #1
 8010314:	455e      	cmp	r6, fp
 8010316:	d211      	bcs.n	801033c <rcutils_repl_str+0x58>
 8010318:	442e      	add	r6, r5
 801031a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801031e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010322:	00b1      	lsls	r1, r6, #2
 8010324:	4798      	blx	r3
 8010326:	2800      	cmp	r0, #0
 8010328:	f000 8088 	beq.w	801043c <rcutils_repl_str+0x158>
 801032c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010330:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8010334:	4680      	mov	r8, r0
 8010336:	bf28      	it	cs
 8010338:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801033c:	9a01      	ldr	r2, [sp, #4]
 801033e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010342:	1aa2      	subs	r2, r4, r2
 8010344:	f843 2c04 	str.w	r2, [r3, #-4]
 8010348:	9b02      	ldr	r3, [sp, #8]
 801034a:	18e7      	adds	r7, r4, r3
 801034c:	4651      	mov	r1, sl
 801034e:	4638      	mov	r0, r7
 8010350:	f004 fc1b 	bl	8014b8a <strstr>
 8010354:	4604      	mov	r4, r0
 8010356:	4640      	mov	r0, r8
 8010358:	2c00      	cmp	r4, #0
 801035a:	d1d9      	bne.n	8010310 <rcutils_repl_str+0x2c>
 801035c:	46b8      	mov	r8, r7
 801035e:	4607      	mov	r7, r0
 8010360:	4640      	mov	r0, r8
 8010362:	f7ef ff5f 	bl	8000224 <strlen>
 8010366:	9b01      	ldr	r3, [sp, #4]
 8010368:	eba8 0303 	sub.w	r3, r8, r3
 801036c:	181c      	adds	r4, r3, r0
 801036e:	9404      	str	r4, [sp, #16]
 8010370:	f1bb 0f00 	cmp.w	fp, #0
 8010374:	d04a      	beq.n	801040c <rcutils_repl_str+0x128>
 8010376:	ee18 0a10 	vmov	r0, s16
 801037a:	f7ef ff53 	bl	8000224 <strlen>
 801037e:	9b02      	ldr	r3, [sp, #8]
 8010380:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010384:	1ac3      	subs	r3, r0, r3
 8010386:	fb0b 4303 	mla	r3, fp, r3, r4
 801038a:	461a      	mov	r2, r3
 801038c:	9305      	str	r3, [sp, #20]
 801038e:	4606      	mov	r6, r0
 8010390:	f8d9 3000 	ldr.w	r3, [r9]
 8010394:	1c50      	adds	r0, r2, #1
 8010396:	4798      	blx	r3
 8010398:	9003      	str	r0, [sp, #12]
 801039a:	2800      	cmp	r0, #0
 801039c:	d04f      	beq.n	801043e <rcutils_repl_str+0x15a>
 801039e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80103a2:	683a      	ldr	r2, [r7, #0]
 80103a4:	4641      	mov	r1, r8
 80103a6:	f004 fc92 	bl	8014cce <memcpy>
 80103aa:	683d      	ldr	r5, [r7, #0]
 80103ac:	9b03      	ldr	r3, [sp, #12]
 80103ae:	9701      	str	r7, [sp, #4]
 80103b0:	46ba      	mov	sl, r7
 80103b2:	441d      	add	r5, r3
 80103b4:	9f02      	ldr	r7, [sp, #8]
 80103b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80103ba:	2401      	movs	r4, #1
 80103bc:	46d1      	mov	r9, sl
 80103be:	ee18 aa10 	vmov	sl, s16
 80103c2:	e00a      	b.n	80103da <rcutils_repl_str+0xf6>
 80103c4:	f8d9 5000 	ldr.w	r5, [r9]
 80103c8:	1aaa      	subs	r2, r5, r2
 80103ca:	1885      	adds	r5, r0, r2
 80103cc:	f004 fc7f 	bl	8014cce <memcpy>
 80103d0:	45a3      	cmp	fp, r4
 80103d2:	f104 0201 	add.w	r2, r4, #1
 80103d6:	d935      	bls.n	8010444 <rcutils_repl_str+0x160>
 80103d8:	4614      	mov	r4, r2
 80103da:	4632      	mov	r2, r6
 80103dc:	4651      	mov	r1, sl
 80103de:	4628      	mov	r0, r5
 80103e0:	f004 fc75 	bl	8014cce <memcpy>
 80103e4:	f859 2b04 	ldr.w	r2, [r9], #4
 80103e8:	45a3      	cmp	fp, r4
 80103ea:	443a      	add	r2, r7
 80103ec:	eb05 0006 	add.w	r0, r5, r6
 80103f0:	eb08 0102 	add.w	r1, r8, r2
 80103f4:	d1e6      	bne.n	80103c4 <rcutils_repl_str+0xe0>
 80103f6:	9b04      	ldr	r3, [sp, #16]
 80103f8:	1a9a      	subs	r2, r3, r2
 80103fa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 80103fe:	f004 fc66 	bl	8014cce <memcpy>
 8010402:	9a03      	ldr	r2, [sp, #12]
 8010404:	9905      	ldr	r1, [sp, #20]
 8010406:	2300      	movs	r3, #0
 8010408:	5453      	strb	r3, [r2, r1]
 801040a:	e00b      	b.n	8010424 <rcutils_repl_str+0x140>
 801040c:	4620      	mov	r0, r4
 801040e:	f8d9 3000 	ldr.w	r3, [r9]
 8010412:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010416:	3001      	adds	r0, #1
 8010418:	4798      	blx	r3
 801041a:	9003      	str	r0, [sp, #12]
 801041c:	b110      	cbz	r0, 8010424 <rcutils_repl_str+0x140>
 801041e:	9901      	ldr	r1, [sp, #4]
 8010420:	f004 fc4d 	bl	8014cbe <strcpy>
 8010424:	4638      	mov	r0, r7
 8010426:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801042a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801042e:	4798      	blx	r3
 8010430:	9803      	ldr	r0, [sp, #12]
 8010432:	b007      	add	sp, #28
 8010434:	ecbd 8b02 	vpop	{d8}
 8010438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043c:	4647      	mov	r7, r8
 801043e:	2300      	movs	r3, #0
 8010440:	9303      	str	r3, [sp, #12]
 8010442:	e7ef      	b.n	8010424 <rcutils_repl_str+0x140>
 8010444:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010448:	e7db      	b.n	8010402 <rcutils_repl_str+0x11e>
 801044a:	bf00      	nop

0801044c <rcutils_snprintf>:
 801044c:	b40c      	push	{r2, r3}
 801044e:	b530      	push	{r4, r5, lr}
 8010450:	b083      	sub	sp, #12
 8010452:	ab06      	add	r3, sp, #24
 8010454:	f853 2b04 	ldr.w	r2, [r3], #4
 8010458:	9301      	str	r3, [sp, #4]
 801045a:	b152      	cbz	r2, 8010472 <rcutils_snprintf+0x26>
 801045c:	b138      	cbz	r0, 801046e <rcutils_snprintf+0x22>
 801045e:	b141      	cbz	r1, 8010472 <rcutils_snprintf+0x26>
 8010460:	f004 fb5e 	bl	8014b20 <vsniprintf>
 8010464:	b003      	add	sp, #12
 8010466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801046a:	b002      	add	sp, #8
 801046c:	4770      	bx	lr
 801046e:	2900      	cmp	r1, #0
 8010470:	d0f6      	beq.n	8010460 <rcutils_snprintf+0x14>
 8010472:	f004 fbf7 	bl	8014c64 <__errno>
 8010476:	2316      	movs	r3, #22
 8010478:	6003      	str	r3, [r0, #0]
 801047a:	f04f 30ff 	mov.w	r0, #4294967295
 801047e:	e7f1      	b.n	8010464 <rcutils_snprintf+0x18>

08010480 <rcutils_vsnprintf>:
 8010480:	b570      	push	{r4, r5, r6, lr}
 8010482:	b13a      	cbz	r2, 8010494 <rcutils_vsnprintf+0x14>
 8010484:	b120      	cbz	r0, 8010490 <rcutils_vsnprintf+0x10>
 8010486:	b129      	cbz	r1, 8010494 <rcutils_vsnprintf+0x14>
 8010488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801048c:	f004 bb48 	b.w	8014b20 <vsniprintf>
 8010490:	2900      	cmp	r1, #0
 8010492:	d0f9      	beq.n	8010488 <rcutils_vsnprintf+0x8>
 8010494:	f004 fbe6 	bl	8014c64 <__errno>
 8010498:	2316      	movs	r3, #22
 801049a:	6003      	str	r3, [r0, #0]
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
 80104a0:	bd70      	pop	{r4, r5, r6, pc}
 80104a2:	bf00      	nop

080104a4 <rcutils_strdup>:
 80104a4:	b084      	sub	sp, #16
 80104a6:	b570      	push	{r4, r5, r6, lr}
 80104a8:	b082      	sub	sp, #8
 80104aa:	ac07      	add	r4, sp, #28
 80104ac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80104b0:	4605      	mov	r5, r0
 80104b2:	b1b0      	cbz	r0, 80104e2 <rcutils_strdup+0x3e>
 80104b4:	f7ef feb6 	bl	8000224 <strlen>
 80104b8:	1c42      	adds	r2, r0, #1
 80104ba:	9b07      	ldr	r3, [sp, #28]
 80104bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80104be:	9201      	str	r2, [sp, #4]
 80104c0:	4606      	mov	r6, r0
 80104c2:	4610      	mov	r0, r2
 80104c4:	4798      	blx	r3
 80104c6:	4604      	mov	r4, r0
 80104c8:	b128      	cbz	r0, 80104d6 <rcutils_strdup+0x32>
 80104ca:	9a01      	ldr	r2, [sp, #4]
 80104cc:	4629      	mov	r1, r5
 80104ce:	f004 fbfe 	bl	8014cce <memcpy>
 80104d2:	2300      	movs	r3, #0
 80104d4:	55a3      	strb	r3, [r4, r6]
 80104d6:	4620      	mov	r0, r4
 80104d8:	b002      	add	sp, #8
 80104da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104de:	b004      	add	sp, #16
 80104e0:	4770      	bx	lr
 80104e2:	4604      	mov	r4, r0
 80104e4:	e7f7      	b.n	80104d6 <rcutils_strdup+0x32>
 80104e6:	bf00      	nop

080104e8 <rcutils_strndup>:
 80104e8:	b082      	sub	sp, #8
 80104ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ec:	ac06      	add	r4, sp, #24
 80104ee:	e884 000c 	stmia.w	r4, {r2, r3}
 80104f2:	4605      	mov	r5, r0
 80104f4:	b188      	cbz	r0, 801051a <rcutils_strndup+0x32>
 80104f6:	1c4f      	adds	r7, r1, #1
 80104f8:	460e      	mov	r6, r1
 80104fa:	4638      	mov	r0, r7
 80104fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80104fe:	4790      	blx	r2
 8010500:	4604      	mov	r4, r0
 8010502:	b128      	cbz	r0, 8010510 <rcutils_strndup+0x28>
 8010504:	463a      	mov	r2, r7
 8010506:	4629      	mov	r1, r5
 8010508:	f004 fbe1 	bl	8014cce <memcpy>
 801050c:	2300      	movs	r3, #0
 801050e:	55a3      	strb	r3, [r4, r6]
 8010510:	4620      	mov	r0, r4
 8010512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010516:	b002      	add	sp, #8
 8010518:	4770      	bx	lr
 801051a:	4604      	mov	r4, r0
 801051c:	e7f8      	b.n	8010510 <rcutils_strndup+0x28>
 801051e:	bf00      	nop

08010520 <rcutils_get_zero_initialized_string_map>:
 8010520:	4b01      	ldr	r3, [pc, #4]	@ (8010528 <rcutils_get_zero_initialized_string_map+0x8>)
 8010522:	2000      	movs	r0, #0
 8010524:	6018      	str	r0, [r3, #0]
 8010526:	4770      	bx	lr
 8010528:	20010df8 	.word	0x20010df8

0801052c <rcutils_string_map_reserve>:
 801052c:	2800      	cmp	r0, #0
 801052e:	d05f      	beq.n	80105f0 <rcutils_string_map_reserve+0xc4>
 8010530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010534:	460c      	mov	r4, r1
 8010536:	6801      	ldr	r1, [r0, #0]
 8010538:	b082      	sub	sp, #8
 801053a:	4605      	mov	r5, r0
 801053c:	b129      	cbz	r1, 801054a <rcutils_string_map_reserve+0x1e>
 801053e:	68cb      	ldr	r3, [r1, #12]
 8010540:	42a3      	cmp	r3, r4
 8010542:	d906      	bls.n	8010552 <rcutils_string_map_reserve+0x26>
 8010544:	461c      	mov	r4, r3
 8010546:	2900      	cmp	r1, #0
 8010548:	d1f9      	bne.n	801053e <rcutils_string_map_reserve+0x12>
 801054a:	201f      	movs	r0, #31
 801054c:	b002      	add	sp, #8
 801054e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010552:	688b      	ldr	r3, [r1, #8]
 8010554:	42a3      	cmp	r3, r4
 8010556:	d047      	beq.n	80105e8 <rcutils_string_map_reserve+0xbc>
 8010558:	6a0e      	ldr	r6, [r1, #32]
 801055a:	2c00      	cmp	r4, #0
 801055c:	d034      	beq.n	80105c8 <rcutils_string_map_reserve+0x9c>
 801055e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010562:	d243      	bcs.n	80105ec <rcutils_string_map_reserve+0xc0>
 8010564:	00a7      	lsls	r7, r4, #2
 8010566:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801056a:	6808      	ldr	r0, [r1, #0]
 801056c:	4632      	mov	r2, r6
 801056e:	4639      	mov	r1, r7
 8010570:	47c0      	blx	r8
 8010572:	2800      	cmp	r0, #0
 8010574:	d03a      	beq.n	80105ec <rcutils_string_map_reserve+0xc0>
 8010576:	682b      	ldr	r3, [r5, #0]
 8010578:	4632      	mov	r2, r6
 801057a:	6018      	str	r0, [r3, #0]
 801057c:	4639      	mov	r1, r7
 801057e:	6858      	ldr	r0, [r3, #4]
 8010580:	47c0      	blx	r8
 8010582:	2800      	cmp	r0, #0
 8010584:	d032      	beq.n	80105ec <rcutils_string_map_reserve+0xc0>
 8010586:	682d      	ldr	r5, [r5, #0]
 8010588:	68ab      	ldr	r3, [r5, #8]
 801058a:	6068      	str	r0, [r5, #4]
 801058c:	42a3      	cmp	r3, r4
 801058e:	d226      	bcs.n	80105de <rcutils_string_map_reserve+0xb2>
 8010590:	682a      	ldr	r2, [r5, #0]
 8010592:	eb00 0c07 	add.w	ip, r0, r7
 8010596:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801059a:	45e6      	cmp	lr, ip
 801059c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80105a0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80105a4:	d203      	bcs.n	80105ae <rcutils_string_map_reserve+0x82>
 80105a6:	eb02 0c07 	add.w	ip, r2, r7
 80105aa:	4566      	cmp	r6, ip
 80105ac:	d322      	bcc.n	80105f4 <rcutils_string_map_reserve+0xc8>
 80105ae:	1ae3      	subs	r3, r4, r3
 80105b0:	009a      	lsls	r2, r3, #2
 80105b2:	4670      	mov	r0, lr
 80105b4:	2100      	movs	r1, #0
 80105b6:	9201      	str	r2, [sp, #4]
 80105b8:	f004 fac0 	bl	8014b3c <memset>
 80105bc:	9a01      	ldr	r2, [sp, #4]
 80105be:	2100      	movs	r1, #0
 80105c0:	4630      	mov	r0, r6
 80105c2:	f004 fabb 	bl	8014b3c <memset>
 80105c6:	e00a      	b.n	80105de <rcutils_string_map_reserve+0xb2>
 80105c8:	694f      	ldr	r7, [r1, #20]
 80105ca:	6808      	ldr	r0, [r1, #0]
 80105cc:	4631      	mov	r1, r6
 80105ce:	47b8      	blx	r7
 80105d0:	682b      	ldr	r3, [r5, #0]
 80105d2:	4631      	mov	r1, r6
 80105d4:	6858      	ldr	r0, [r3, #4]
 80105d6:	601c      	str	r4, [r3, #0]
 80105d8:	47b8      	blx	r7
 80105da:	682d      	ldr	r5, [r5, #0]
 80105dc:	606c      	str	r4, [r5, #4]
 80105de:	2000      	movs	r0, #0
 80105e0:	60ac      	str	r4, [r5, #8]
 80105e2:	b002      	add	sp, #8
 80105e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105e8:	2000      	movs	r0, #0
 80105ea:	e7af      	b.n	801054c <rcutils_string_map_reserve+0x20>
 80105ec:	200a      	movs	r0, #10
 80105ee:	e7ad      	b.n	801054c <rcutils_string_map_reserve+0x20>
 80105f0:	200b      	movs	r0, #11
 80105f2:	4770      	bx	lr
 80105f4:	1f0b      	subs	r3, r1, #4
 80105f6:	4418      	add	r0, r3
 80105f8:	4413      	add	r3, r2
 80105fa:	3a04      	subs	r2, #4
 80105fc:	4417      	add	r7, r2
 80105fe:	2200      	movs	r2, #0
 8010600:	f843 2f04 	str.w	r2, [r3, #4]!
 8010604:	42bb      	cmp	r3, r7
 8010606:	f840 2f04 	str.w	r2, [r0, #4]!
 801060a:	d1f9      	bne.n	8010600 <rcutils_string_map_reserve+0xd4>
 801060c:	e7e7      	b.n	80105de <rcutils_string_map_reserve+0xb2>
 801060e:	bf00      	nop

08010610 <rcutils_string_map_init>:
 8010610:	b082      	sub	sp, #8
 8010612:	b570      	push	{r4, r5, r6, lr}
 8010614:	ac04      	add	r4, sp, #16
 8010616:	e884 000c 	stmia.w	r4, {r2, r3}
 801061a:	b380      	cbz	r0, 801067e <rcutils_string_map_init+0x6e>
 801061c:	6806      	ldr	r6, [r0, #0]
 801061e:	4604      	mov	r4, r0
 8010620:	b12e      	cbz	r6, 801062e <rcutils_string_map_init+0x1e>
 8010622:	251e      	movs	r5, #30
 8010624:	4628      	mov	r0, r5
 8010626:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801062a:	b002      	add	sp, #8
 801062c:	4770      	bx	lr
 801062e:	a804      	add	r0, sp, #16
 8010630:	460d      	mov	r5, r1
 8010632:	f7fa fe63 	bl	800b2fc <rcutils_allocator_is_valid>
 8010636:	b310      	cbz	r0, 801067e <rcutils_string_map_init+0x6e>
 8010638:	9b04      	ldr	r3, [sp, #16]
 801063a:	9908      	ldr	r1, [sp, #32]
 801063c:	2024      	movs	r0, #36	@ 0x24
 801063e:	4798      	blx	r3
 8010640:	6020      	str	r0, [r4, #0]
 8010642:	b310      	cbz	r0, 801068a <rcutils_string_map_init+0x7a>
 8010644:	f10d 0e10 	add.w	lr, sp, #16
 8010648:	e9c0 6600 	strd	r6, r6, [r0]
 801064c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8010650:	f100 0c10 	add.w	ip, r0, #16
 8010654:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801065c:	f8de 3000 	ldr.w	r3, [lr]
 8010660:	f8cc 3000 	str.w	r3, [ip]
 8010664:	4629      	mov	r1, r5
 8010666:	4620      	mov	r0, r4
 8010668:	f7ff ff60 	bl	801052c <rcutils_string_map_reserve>
 801066c:	4605      	mov	r5, r0
 801066e:	2800      	cmp	r0, #0
 8010670:	d0d8      	beq.n	8010624 <rcutils_string_map_init+0x14>
 8010672:	9b05      	ldr	r3, [sp, #20]
 8010674:	9908      	ldr	r1, [sp, #32]
 8010676:	6820      	ldr	r0, [r4, #0]
 8010678:	4798      	blx	r3
 801067a:	6026      	str	r6, [r4, #0]
 801067c:	e7d2      	b.n	8010624 <rcutils_string_map_init+0x14>
 801067e:	250b      	movs	r5, #11
 8010680:	4628      	mov	r0, r5
 8010682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010686:	b002      	add	sp, #8
 8010688:	4770      	bx	lr
 801068a:	250a      	movs	r5, #10
 801068c:	e7ca      	b.n	8010624 <rcutils_string_map_init+0x14>
 801068e:	bf00      	nop

08010690 <rcutils_string_map_fini>:
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	b082      	sub	sp, #8
 8010696:	2800      	cmp	r0, #0
 8010698:	d03a      	beq.n	8010710 <rcutils_string_map_fini+0x80>
 801069a:	6804      	ldr	r4, [r0, #0]
 801069c:	4606      	mov	r6, r0
 801069e:	2c00      	cmp	r4, #0
 80106a0:	d032      	beq.n	8010708 <rcutils_string_map_fini+0x78>
 80106a2:	68a3      	ldr	r3, [r4, #8]
 80106a4:	b32b      	cbz	r3, 80106f2 <rcutils_string_map_fini+0x62>
 80106a6:	2500      	movs	r5, #0
 80106a8:	6822      	ldr	r2, [r4, #0]
 80106aa:	462f      	mov	r7, r5
 80106ac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80106b0:	b1e0      	cbz	r0, 80106ec <rcutils_string_map_fini+0x5c>
 80106b2:	6a21      	ldr	r1, [r4, #32]
 80106b4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80106b8:	9101      	str	r1, [sp, #4]
 80106ba:	47c0      	blx	r8
 80106bc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80106c0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80106c4:	9901      	ldr	r1, [sp, #4]
 80106c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80106ca:	47c0      	blx	r8
 80106cc:	68e3      	ldr	r3, [r4, #12]
 80106ce:	6862      	ldr	r2, [r4, #4]
 80106d0:	3b01      	subs	r3, #1
 80106d2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80106d6:	60e3      	str	r3, [r4, #12]
 80106d8:	6834      	ldr	r4, [r6, #0]
 80106da:	68a3      	ldr	r3, [r4, #8]
 80106dc:	3501      	adds	r5, #1
 80106de:	429d      	cmp	r5, r3
 80106e0:	d207      	bcs.n	80106f2 <rcutils_string_map_fini+0x62>
 80106e2:	6822      	ldr	r2, [r4, #0]
 80106e4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d1e2      	bne.n	80106b2 <rcutils_string_map_fini+0x22>
 80106ec:	3501      	adds	r5, #1
 80106ee:	429d      	cmp	r5, r3
 80106f0:	d3dc      	bcc.n	80106ac <rcutils_string_map_fini+0x1c>
 80106f2:	2100      	movs	r1, #0
 80106f4:	4630      	mov	r0, r6
 80106f6:	f7ff ff19 	bl	801052c <rcutils_string_map_reserve>
 80106fa:	4604      	mov	r4, r0
 80106fc:	b920      	cbnz	r0, 8010708 <rcutils_string_map_fini+0x78>
 80106fe:	6830      	ldr	r0, [r6, #0]
 8010700:	6943      	ldr	r3, [r0, #20]
 8010702:	6a01      	ldr	r1, [r0, #32]
 8010704:	4798      	blx	r3
 8010706:	6034      	str	r4, [r6, #0]
 8010708:	4620      	mov	r0, r4
 801070a:	b002      	add	sp, #8
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	240b      	movs	r4, #11
 8010712:	4620      	mov	r0, r4
 8010714:	b002      	add	sp, #8
 8010716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801071a:	bf00      	nop

0801071c <rcutils_string_map_getn>:
 801071c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010720:	b300      	cbz	r0, 8010764 <rcutils_string_map_getn+0x48>
 8010722:	6807      	ldr	r7, [r0, #0]
 8010724:	b1ff      	cbz	r7, 8010766 <rcutils_string_map_getn+0x4a>
 8010726:	4688      	mov	r8, r1
 8010728:	b1e1      	cbz	r1, 8010764 <rcutils_string_map_getn+0x48>
 801072a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801072e:	683e      	ldr	r6, [r7, #0]
 8010730:	f1ba 0f00 	cmp.w	sl, #0
 8010734:	d016      	beq.n	8010764 <rcutils_string_map_getn+0x48>
 8010736:	4691      	mov	r9, r2
 8010738:	3e04      	subs	r6, #4
 801073a:	2400      	movs	r4, #0
 801073c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8010740:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010744:	4628      	mov	r0, r5
 8010746:	3401      	adds	r4, #1
 8010748:	b155      	cbz	r5, 8010760 <rcutils_string_map_getn+0x44>
 801074a:	f7ef fd6b 	bl	8000224 <strlen>
 801074e:	4548      	cmp	r0, r9
 8010750:	4602      	mov	r2, r0
 8010752:	4629      	mov	r1, r5
 8010754:	bf38      	it	cc
 8010756:	464a      	movcc	r2, r9
 8010758:	4640      	mov	r0, r8
 801075a:	f004 fa04 	bl	8014b66 <strncmp>
 801075e:	b128      	cbz	r0, 801076c <rcutils_string_map_getn+0x50>
 8010760:	45a2      	cmp	sl, r4
 8010762:	d1eb      	bne.n	801073c <rcutils_string_map_getn+0x20>
 8010764:	2700      	movs	r7, #0
 8010766:	4638      	mov	r0, r7
 8010768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f853 700b 	ldr.w	r7, [r3, fp]
 8010772:	4638      	mov	r0, r7
 8010774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010778 <rcutils_system_time_now>:
 8010778:	b308      	cbz	r0, 80107be <rcutils_system_time_now+0x46>
 801077a:	b570      	push	{r4, r5, r6, lr}
 801077c:	b084      	sub	sp, #16
 801077e:	4604      	mov	r4, r0
 8010780:	4669      	mov	r1, sp
 8010782:	2001      	movs	r0, #1
 8010784:	f7f2 f958 	bl	8002a38 <clock_gettime>
 8010788:	e9dd 3500 	ldrd	r3, r5, [sp]
 801078c:	2d00      	cmp	r5, #0
 801078e:	db13      	blt.n	80107b8 <rcutils_system_time_now+0x40>
 8010790:	9902      	ldr	r1, [sp, #8]
 8010792:	2900      	cmp	r1, #0
 8010794:	db0d      	blt.n	80107b2 <rcutils_system_time_now+0x3a>
 8010796:	4e0b      	ldr	r6, [pc, #44]	@ (80107c4 <rcutils_system_time_now+0x4c>)
 8010798:	fba3 3206 	umull	r3, r2, r3, r6
 801079c:	185b      	adds	r3, r3, r1
 801079e:	fb06 2205 	mla	r2, r6, r5, r2
 80107a2:	f04f 0000 	mov.w	r0, #0
 80107a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80107aa:	e9c4 3200 	strd	r3, r2, [r4]
 80107ae:	b004      	add	sp, #16
 80107b0:	bd70      	pop	{r4, r5, r6, pc}
 80107b2:	ea53 0205 	orrs.w	r2, r3, r5
 80107b6:	d1ee      	bne.n	8010796 <rcutils_system_time_now+0x1e>
 80107b8:	2002      	movs	r0, #2
 80107ba:	b004      	add	sp, #16
 80107bc:	bd70      	pop	{r4, r5, r6, pc}
 80107be:	200b      	movs	r0, #11
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop
 80107c4:	3b9aca00 	.word	0x3b9aca00

080107c8 <rcutils_steady_time_now>:
 80107c8:	b308      	cbz	r0, 801080e <rcutils_steady_time_now+0x46>
 80107ca:	b570      	push	{r4, r5, r6, lr}
 80107cc:	b084      	sub	sp, #16
 80107ce:	4604      	mov	r4, r0
 80107d0:	4669      	mov	r1, sp
 80107d2:	2000      	movs	r0, #0
 80107d4:	f7f2 f930 	bl	8002a38 <clock_gettime>
 80107d8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80107dc:	2d00      	cmp	r5, #0
 80107de:	db13      	blt.n	8010808 <rcutils_steady_time_now+0x40>
 80107e0:	9902      	ldr	r1, [sp, #8]
 80107e2:	2900      	cmp	r1, #0
 80107e4:	db0d      	blt.n	8010802 <rcutils_steady_time_now+0x3a>
 80107e6:	4e0b      	ldr	r6, [pc, #44]	@ (8010814 <rcutils_steady_time_now+0x4c>)
 80107e8:	fba3 3206 	umull	r3, r2, r3, r6
 80107ec:	185b      	adds	r3, r3, r1
 80107ee:	fb06 2205 	mla	r2, r6, r5, r2
 80107f2:	f04f 0000 	mov.w	r0, #0
 80107f6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80107fa:	e9c4 3200 	strd	r3, r2, [r4]
 80107fe:	b004      	add	sp, #16
 8010800:	bd70      	pop	{r4, r5, r6, pc}
 8010802:	ea53 0205 	orrs.w	r2, r3, r5
 8010806:	d1ee      	bne.n	80107e6 <rcutils_steady_time_now+0x1e>
 8010808:	2002      	movs	r0, #2
 801080a:	b004      	add	sp, #16
 801080c:	bd70      	pop	{r4, r5, r6, pc}
 801080e:	200b      	movs	r0, #11
 8010810:	4770      	bx	lr
 8010812:	bf00      	nop
 8010814:	3b9aca00 	.word	0x3b9aca00

08010818 <rmw_get_zero_initialized_context>:
 8010818:	b510      	push	{r4, lr}
 801081a:	4604      	mov	r4, r0
 801081c:	3010      	adds	r0, #16
 801081e:	f000 f80b 	bl	8010838 <rmw_get_zero_initialized_init_options>
 8010822:	2300      	movs	r3, #0
 8010824:	2000      	movs	r0, #0
 8010826:	2100      	movs	r1, #0
 8010828:	e9c4 0100 	strd	r0, r1, [r4]
 801082c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8010830:	60a3      	str	r3, [r4, #8]
 8010832:	4620      	mov	r0, r4
 8010834:	bd10      	pop	{r4, pc}
 8010836:	bf00      	nop

08010838 <rmw_get_zero_initialized_init_options>:
 8010838:	b510      	push	{r4, lr}
 801083a:	2238      	movs	r2, #56	@ 0x38
 801083c:	4604      	mov	r4, r0
 801083e:	2100      	movs	r1, #0
 8010840:	f004 f97c 	bl	8014b3c <memset>
 8010844:	f104 0010 	add.w	r0, r4, #16
 8010848:	f000 f806 	bl	8010858 <rmw_get_default_security_options>
 801084c:	f04f 33ff 	mov.w	r3, #4294967295
 8010850:	60e3      	str	r3, [r4, #12]
 8010852:	4620      	mov	r0, r4
 8010854:	bd10      	pop	{r4, pc}
 8010856:	bf00      	nop

08010858 <rmw_get_default_security_options>:
 8010858:	2200      	movs	r2, #0
 801085a:	7002      	strb	r2, [r0, #0]
 801085c:	6042      	str	r2, [r0, #4]
 801085e:	4770      	bx	lr

08010860 <rmw_validate_full_topic_name>:
 8010860:	2800      	cmp	r0, #0
 8010862:	d057      	beq.n	8010914 <rmw_validate_full_topic_name+0xb4>
 8010864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010868:	460d      	mov	r5, r1
 801086a:	2900      	cmp	r1, #0
 801086c:	d054      	beq.n	8010918 <rmw_validate_full_topic_name+0xb8>
 801086e:	4616      	mov	r6, r2
 8010870:	4604      	mov	r4, r0
 8010872:	f7ef fcd7 	bl	8000224 <strlen>
 8010876:	b148      	cbz	r0, 801088c <rmw_validate_full_topic_name+0x2c>
 8010878:	7823      	ldrb	r3, [r4, #0]
 801087a:	2b2f      	cmp	r3, #47	@ 0x2f
 801087c:	d00d      	beq.n	801089a <rmw_validate_full_topic_name+0x3a>
 801087e:	2302      	movs	r3, #2
 8010880:	602b      	str	r3, [r5, #0]
 8010882:	b13e      	cbz	r6, 8010894 <rmw_validate_full_topic_name+0x34>
 8010884:	2000      	movs	r0, #0
 8010886:	6030      	str	r0, [r6, #0]
 8010888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801088c:	2301      	movs	r3, #1
 801088e:	602b      	str	r3, [r5, #0]
 8010890:	2e00      	cmp	r6, #0
 8010892:	d1f7      	bne.n	8010884 <rmw_validate_full_topic_name+0x24>
 8010894:	2000      	movs	r0, #0
 8010896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801089a:	1e43      	subs	r3, r0, #1
 801089c:	5ce2      	ldrb	r2, [r4, r3]
 801089e:	2a2f      	cmp	r2, #47	@ 0x2f
 80108a0:	d03c      	beq.n	801091c <rmw_validate_full_topic_name+0xbc>
 80108a2:	1e63      	subs	r3, r4, #1
 80108a4:	eb03 0800 	add.w	r8, r3, r0
 80108a8:	f1c4 0e01 	rsb	lr, r4, #1
 80108ac:	eb0e 0703 	add.w	r7, lr, r3
 80108b0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80108b4:	f021 0220 	bic.w	r2, r1, #32
 80108b8:	3a41      	subs	r2, #65	@ 0x41
 80108ba:	2a19      	cmp	r2, #25
 80108bc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80108c0:	d90b      	bls.n	80108da <rmw_validate_full_topic_name+0x7a>
 80108c2:	295f      	cmp	r1, #95	@ 0x5f
 80108c4:	d009      	beq.n	80108da <rmw_validate_full_topic_name+0x7a>
 80108c6:	f1bc 0f0a 	cmp.w	ip, #10
 80108ca:	d906      	bls.n	80108da <rmw_validate_full_topic_name+0x7a>
 80108cc:	2304      	movs	r3, #4
 80108ce:	602b      	str	r3, [r5, #0]
 80108d0:	2e00      	cmp	r6, #0
 80108d2:	d0df      	beq.n	8010894 <rmw_validate_full_topic_name+0x34>
 80108d4:	6037      	str	r7, [r6, #0]
 80108d6:	2000      	movs	r0, #0
 80108d8:	e7d6      	b.n	8010888 <rmw_validate_full_topic_name+0x28>
 80108da:	4543      	cmp	r3, r8
 80108dc:	d1e6      	bne.n	80108ac <rmw_validate_full_topic_name+0x4c>
 80108de:	4f1a      	ldr	r7, [pc, #104]	@ (8010948 <rmw_validate_full_topic_name+0xe8>)
 80108e0:	2301      	movs	r3, #1
 80108e2:	e004      	b.n	80108ee <rmw_validate_full_topic_name+0x8e>
 80108e4:	4298      	cmp	r0, r3
 80108e6:	f104 0401 	add.w	r4, r4, #1
 80108ea:	d91c      	bls.n	8010926 <rmw_validate_full_topic_name+0xc6>
 80108ec:	4613      	mov	r3, r2
 80108ee:	4298      	cmp	r0, r3
 80108f0:	f103 0201 	add.w	r2, r3, #1
 80108f4:	d0f6      	beq.n	80108e4 <rmw_validate_full_topic_name+0x84>
 80108f6:	7821      	ldrb	r1, [r4, #0]
 80108f8:	292f      	cmp	r1, #47	@ 0x2f
 80108fa:	d1f3      	bne.n	80108e4 <rmw_validate_full_topic_name+0x84>
 80108fc:	7861      	ldrb	r1, [r4, #1]
 80108fe:	292f      	cmp	r1, #47	@ 0x2f
 8010900:	d01c      	beq.n	801093c <rmw_validate_full_topic_name+0xdc>
 8010902:	5dc9      	ldrb	r1, [r1, r7]
 8010904:	0749      	lsls	r1, r1, #29
 8010906:	d5ed      	bpl.n	80108e4 <rmw_validate_full_topic_name+0x84>
 8010908:	2206      	movs	r2, #6
 801090a:	602a      	str	r2, [r5, #0]
 801090c:	2e00      	cmp	r6, #0
 801090e:	d0c1      	beq.n	8010894 <rmw_validate_full_topic_name+0x34>
 8010910:	6033      	str	r3, [r6, #0]
 8010912:	e7bf      	b.n	8010894 <rmw_validate_full_topic_name+0x34>
 8010914:	200b      	movs	r0, #11
 8010916:	4770      	bx	lr
 8010918:	200b      	movs	r0, #11
 801091a:	e7b5      	b.n	8010888 <rmw_validate_full_topic_name+0x28>
 801091c:	2203      	movs	r2, #3
 801091e:	602a      	str	r2, [r5, #0]
 8010920:	2e00      	cmp	r6, #0
 8010922:	d1f5      	bne.n	8010910 <rmw_validate_full_topic_name+0xb0>
 8010924:	e7b6      	b.n	8010894 <rmw_validate_full_topic_name+0x34>
 8010926:	28f7      	cmp	r0, #247	@ 0xf7
 8010928:	d802      	bhi.n	8010930 <rmw_validate_full_topic_name+0xd0>
 801092a:	2000      	movs	r0, #0
 801092c:	6028      	str	r0, [r5, #0]
 801092e:	e7ab      	b.n	8010888 <rmw_validate_full_topic_name+0x28>
 8010930:	2307      	movs	r3, #7
 8010932:	602b      	str	r3, [r5, #0]
 8010934:	2e00      	cmp	r6, #0
 8010936:	d0ad      	beq.n	8010894 <rmw_validate_full_topic_name+0x34>
 8010938:	23f6      	movs	r3, #246	@ 0xf6
 801093a:	e7e9      	b.n	8010910 <rmw_validate_full_topic_name+0xb0>
 801093c:	2205      	movs	r2, #5
 801093e:	602a      	str	r2, [r5, #0]
 8010940:	2e00      	cmp	r6, #0
 8010942:	d1e5      	bne.n	8010910 <rmw_validate_full_topic_name+0xb0>
 8010944:	e7a6      	b.n	8010894 <rmw_validate_full_topic_name+0x34>
 8010946:	bf00      	nop
 8010948:	08016834 	.word	0x08016834

0801094c <rmw_validate_namespace_with_size>:
 801094c:	b340      	cbz	r0, 80109a0 <rmw_validate_namespace_with_size+0x54>
 801094e:	b570      	push	{r4, r5, r6, lr}
 8010950:	4614      	mov	r4, r2
 8010952:	b0c2      	sub	sp, #264	@ 0x108
 8010954:	b332      	cbz	r2, 80109a4 <rmw_validate_namespace_with_size+0x58>
 8010956:	2901      	cmp	r1, #1
 8010958:	460d      	mov	r5, r1
 801095a:	461e      	mov	r6, r3
 801095c:	d102      	bne.n	8010964 <rmw_validate_namespace_with_size+0x18>
 801095e:	7803      	ldrb	r3, [r0, #0]
 8010960:	2b2f      	cmp	r3, #47	@ 0x2f
 8010962:	d012      	beq.n	801098a <rmw_validate_namespace_with_size+0x3e>
 8010964:	aa01      	add	r2, sp, #4
 8010966:	4669      	mov	r1, sp
 8010968:	f7ff ff7a 	bl	8010860 <rmw_validate_full_topic_name>
 801096c:	b978      	cbnz	r0, 801098e <rmw_validate_namespace_with_size+0x42>
 801096e:	9b00      	ldr	r3, [sp, #0]
 8010970:	b14b      	cbz	r3, 8010986 <rmw_validate_namespace_with_size+0x3a>
 8010972:	2b07      	cmp	r3, #7
 8010974:	d007      	beq.n	8010986 <rmw_validate_namespace_with_size+0x3a>
 8010976:	1e5a      	subs	r2, r3, #1
 8010978:	2a05      	cmp	r2, #5
 801097a:	d82b      	bhi.n	80109d4 <rmw_validate_namespace_with_size+0x88>
 801097c:	e8df f002 	tbb	[pc, r2]
 8010980:	1e212427 	.word	0x1e212427
 8010984:	141b      	.short	0x141b
 8010986:	2df5      	cmp	r5, #245	@ 0xf5
 8010988:	d803      	bhi.n	8010992 <rmw_validate_namespace_with_size+0x46>
 801098a:	2000      	movs	r0, #0
 801098c:	6020      	str	r0, [r4, #0]
 801098e:	b042      	add	sp, #264	@ 0x108
 8010990:	bd70      	pop	{r4, r5, r6, pc}
 8010992:	2307      	movs	r3, #7
 8010994:	6023      	str	r3, [r4, #0]
 8010996:	2e00      	cmp	r6, #0
 8010998:	d0f9      	beq.n	801098e <rmw_validate_namespace_with_size+0x42>
 801099a:	23f4      	movs	r3, #244	@ 0xf4
 801099c:	6033      	str	r3, [r6, #0]
 801099e:	e7f6      	b.n	801098e <rmw_validate_namespace_with_size+0x42>
 80109a0:	200b      	movs	r0, #11
 80109a2:	4770      	bx	lr
 80109a4:	200b      	movs	r0, #11
 80109a6:	e7f2      	b.n	801098e <rmw_validate_namespace_with_size+0x42>
 80109a8:	2306      	movs	r3, #6
 80109aa:	6023      	str	r3, [r4, #0]
 80109ac:	2e00      	cmp	r6, #0
 80109ae:	d0ee      	beq.n	801098e <rmw_validate_namespace_with_size+0x42>
 80109b0:	9b01      	ldr	r3, [sp, #4]
 80109b2:	6033      	str	r3, [r6, #0]
 80109b4:	e7eb      	b.n	801098e <rmw_validate_namespace_with_size+0x42>
 80109b6:	2305      	movs	r3, #5
 80109b8:	6023      	str	r3, [r4, #0]
 80109ba:	e7f7      	b.n	80109ac <rmw_validate_namespace_with_size+0x60>
 80109bc:	2304      	movs	r3, #4
 80109be:	6023      	str	r3, [r4, #0]
 80109c0:	e7f4      	b.n	80109ac <rmw_validate_namespace_with_size+0x60>
 80109c2:	2303      	movs	r3, #3
 80109c4:	6023      	str	r3, [r4, #0]
 80109c6:	e7f1      	b.n	80109ac <rmw_validate_namespace_with_size+0x60>
 80109c8:	2302      	movs	r3, #2
 80109ca:	6023      	str	r3, [r4, #0]
 80109cc:	e7ee      	b.n	80109ac <rmw_validate_namespace_with_size+0x60>
 80109ce:	2301      	movs	r3, #1
 80109d0:	6023      	str	r3, [r4, #0]
 80109d2:	e7eb      	b.n	80109ac <rmw_validate_namespace_with_size+0x60>
 80109d4:	4a03      	ldr	r2, [pc, #12]	@ (80109e4 <rmw_validate_namespace_with_size+0x98>)
 80109d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80109da:	a802      	add	r0, sp, #8
 80109dc:	f7ff fd36 	bl	801044c <rcutils_snprintf>
 80109e0:	2001      	movs	r0, #1
 80109e2:	e7d4      	b.n	801098e <rmw_validate_namespace_with_size+0x42>
 80109e4:	08015e6c 	.word	0x08015e6c

080109e8 <rmw_validate_namespace>:
 80109e8:	b168      	cbz	r0, 8010a06 <rmw_validate_namespace+0x1e>
 80109ea:	b570      	push	{r4, r5, r6, lr}
 80109ec:	460d      	mov	r5, r1
 80109ee:	4616      	mov	r6, r2
 80109f0:	4604      	mov	r4, r0
 80109f2:	f7ef fc17 	bl	8000224 <strlen>
 80109f6:	4633      	mov	r3, r6
 80109f8:	4601      	mov	r1, r0
 80109fa:	462a      	mov	r2, r5
 80109fc:	4620      	mov	r0, r4
 80109fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a02:	f7ff bfa3 	b.w	801094c <rmw_validate_namespace_with_size>
 8010a06:	200b      	movs	r0, #11
 8010a08:	4770      	bx	lr
 8010a0a:	bf00      	nop

08010a0c <rmw_namespace_validation_result_string>:
 8010a0c:	2807      	cmp	r0, #7
 8010a0e:	bf9a      	itte	ls
 8010a10:	4b02      	ldrls	r3, [pc, #8]	@ (8010a1c <rmw_namespace_validation_result_string+0x10>)
 8010a12:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010a16:	4802      	ldrhi	r0, [pc, #8]	@ (8010a20 <rmw_namespace_validation_result_string+0x14>)
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	08016064 	.word	0x08016064
 8010a20:	08015ebc 	.word	0x08015ebc

08010a24 <rmw_validate_node_name>:
 8010a24:	2800      	cmp	r0, #0
 8010a26:	d03b      	beq.n	8010aa0 <rmw_validate_node_name+0x7c>
 8010a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2c:	460d      	mov	r5, r1
 8010a2e:	2900      	cmp	r1, #0
 8010a30:	d038      	beq.n	8010aa4 <rmw_validate_node_name+0x80>
 8010a32:	4616      	mov	r6, r2
 8010a34:	4604      	mov	r4, r0
 8010a36:	f7ef fbf5 	bl	8000224 <strlen>
 8010a3a:	b1e0      	cbz	r0, 8010a76 <rmw_validate_node_name+0x52>
 8010a3c:	1e63      	subs	r3, r4, #1
 8010a3e:	eb03 0800 	add.w	r8, r3, r0
 8010a42:	f1c4 0101 	rsb	r1, r4, #1
 8010a46:	18cf      	adds	r7, r1, r3
 8010a48:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010a4c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8010a50:	f02e 0c20 	bic.w	ip, lr, #32
 8010a54:	2a09      	cmp	r2, #9
 8010a56:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8010a5a:	d914      	bls.n	8010a86 <rmw_validate_node_name+0x62>
 8010a5c:	f1bc 0f19 	cmp.w	ip, #25
 8010a60:	d911      	bls.n	8010a86 <rmw_validate_node_name+0x62>
 8010a62:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8010a66:	d00e      	beq.n	8010a86 <rmw_validate_node_name+0x62>
 8010a68:	2302      	movs	r3, #2
 8010a6a:	602b      	str	r3, [r5, #0]
 8010a6c:	b106      	cbz	r6, 8010a70 <rmw_validate_node_name+0x4c>
 8010a6e:	6037      	str	r7, [r6, #0]
 8010a70:	2000      	movs	r0, #0
 8010a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a76:	2301      	movs	r3, #1
 8010a78:	602b      	str	r3, [r5, #0]
 8010a7a:	2e00      	cmp	r6, #0
 8010a7c:	d0f8      	beq.n	8010a70 <rmw_validate_node_name+0x4c>
 8010a7e:	2000      	movs	r0, #0
 8010a80:	6030      	str	r0, [r6, #0]
 8010a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a86:	4543      	cmp	r3, r8
 8010a88:	d1dd      	bne.n	8010a46 <rmw_validate_node_name+0x22>
 8010a8a:	7822      	ldrb	r2, [r4, #0]
 8010a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8010ac4 <rmw_validate_node_name+0xa0>)
 8010a8e:	5cd3      	ldrb	r3, [r2, r3]
 8010a90:	f013 0304 	ands.w	r3, r3, #4
 8010a94:	d110      	bne.n	8010ab8 <rmw_validate_node_name+0x94>
 8010a96:	28ff      	cmp	r0, #255	@ 0xff
 8010a98:	d806      	bhi.n	8010aa8 <rmw_validate_node_name+0x84>
 8010a9a:	602b      	str	r3, [r5, #0]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	e7e8      	b.n	8010a72 <rmw_validate_node_name+0x4e>
 8010aa0:	200b      	movs	r0, #11
 8010aa2:	4770      	bx	lr
 8010aa4:	200b      	movs	r0, #11
 8010aa6:	e7e4      	b.n	8010a72 <rmw_validate_node_name+0x4e>
 8010aa8:	2204      	movs	r2, #4
 8010aaa:	602a      	str	r2, [r5, #0]
 8010aac:	2e00      	cmp	r6, #0
 8010aae:	d0df      	beq.n	8010a70 <rmw_validate_node_name+0x4c>
 8010ab0:	22fe      	movs	r2, #254	@ 0xfe
 8010ab2:	6032      	str	r2, [r6, #0]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	e7dc      	b.n	8010a72 <rmw_validate_node_name+0x4e>
 8010ab8:	2303      	movs	r3, #3
 8010aba:	602b      	str	r3, [r5, #0]
 8010abc:	2e00      	cmp	r6, #0
 8010abe:	d1de      	bne.n	8010a7e <rmw_validate_node_name+0x5a>
 8010ac0:	e7d6      	b.n	8010a70 <rmw_validate_node_name+0x4c>
 8010ac2:	bf00      	nop
 8010ac4:	08016834 	.word	0x08016834

08010ac8 <rmw_node_name_validation_result_string>:
 8010ac8:	2804      	cmp	r0, #4
 8010aca:	bf9a      	itte	ls
 8010acc:	4b02      	ldrls	r3, [pc, #8]	@ (8010ad8 <rmw_node_name_validation_result_string+0x10>)
 8010ace:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8010ad2:	4802      	ldrhi	r0, [pc, #8]	@ (8010adc <rmw_node_name_validation_result_string+0x14>)
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	08016170 	.word	0x08016170
 8010adc:	08016084 	.word	0x08016084

08010ae0 <get_memory>:
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	6840      	ldr	r0, [r0, #4]
 8010ae4:	b158      	cbz	r0, 8010afe <get_memory+0x1e>
 8010ae6:	6842      	ldr	r2, [r0, #4]
 8010ae8:	605a      	str	r2, [r3, #4]
 8010aea:	b10a      	cbz	r2, 8010af0 <get_memory+0x10>
 8010aec:	2100      	movs	r1, #0
 8010aee:	6011      	str	r1, [r2, #0]
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	6042      	str	r2, [r0, #4]
 8010af4:	b102      	cbz	r2, 8010af8 <get_memory+0x18>
 8010af6:	6010      	str	r0, [r2, #0]
 8010af8:	2200      	movs	r2, #0
 8010afa:	6002      	str	r2, [r0, #0]
 8010afc:	6018      	str	r0, [r3, #0]
 8010afe:	4770      	bx	lr

08010b00 <put_memory>:
 8010b00:	680b      	ldr	r3, [r1, #0]
 8010b02:	b10b      	cbz	r3, 8010b08 <put_memory+0x8>
 8010b04:	684a      	ldr	r2, [r1, #4]
 8010b06:	605a      	str	r2, [r3, #4]
 8010b08:	684a      	ldr	r2, [r1, #4]
 8010b0a:	b102      	cbz	r2, 8010b0e <put_memory+0xe>
 8010b0c:	6013      	str	r3, [r2, #0]
 8010b0e:	6803      	ldr	r3, [r0, #0]
 8010b10:	428b      	cmp	r3, r1
 8010b12:	6843      	ldr	r3, [r0, #4]
 8010b14:	bf08      	it	eq
 8010b16:	6002      	streq	r2, [r0, #0]
 8010b18:	604b      	str	r3, [r1, #4]
 8010b1a:	b103      	cbz	r3, 8010b1e <put_memory+0x1e>
 8010b1c:	6019      	str	r1, [r3, #0]
 8010b1e:	2300      	movs	r3, #0
 8010b20:	600b      	str	r3, [r1, #0]
 8010b22:	6041      	str	r1, [r0, #4]
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop

08010b28 <rmw_get_implementation_identifier>:
 8010b28:	4b01      	ldr	r3, [pc, #4]	@ (8010b30 <rmw_get_implementation_identifier+0x8>)
 8010b2a:	6818      	ldr	r0, [r3, #0]
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	0801619c 	.word	0x0801619c

08010b34 <rmw_init_options_init>:
 8010b34:	b084      	sub	sp, #16
 8010b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b38:	b083      	sub	sp, #12
 8010b3a:	ad09      	add	r5, sp, #36	@ 0x24
 8010b3c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010b40:	b130      	cbz	r0, 8010b50 <rmw_init_options_init+0x1c>
 8010b42:	4604      	mov	r4, r0
 8010b44:	4628      	mov	r0, r5
 8010b46:	f7fa fbd9 	bl	800b2fc <rcutils_allocator_is_valid>
 8010b4a:	b108      	cbz	r0, 8010b50 <rmw_init_options_init+0x1c>
 8010b4c:	68a6      	ldr	r6, [r4, #8]
 8010b4e:	b12e      	cbz	r6, 8010b5c <rmw_init_options_init+0x28>
 8010b50:	200b      	movs	r0, #11
 8010b52:	b003      	add	sp, #12
 8010b54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b58:	b004      	add	sp, #16
 8010b5a:	4770      	bx	lr
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	2300      	movs	r3, #0
 8010b60:	e9c4 2300 	strd	r2, r3, [r4]
 8010b64:	4b20      	ldr	r3, [pc, #128]	@ (8010be8 <rmw_init_options_init+0xb4>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	60a3      	str	r3, [r4, #8]
 8010b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b6c:	f104 0c20 	add.w	ip, r4, #32
 8010b70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b74:	466f      	mov	r7, sp
 8010b76:	682b      	ldr	r3, [r5, #0]
 8010b78:	f8cc 3000 	str.w	r3, [ip]
 8010b7c:	4638      	mov	r0, r7
 8010b7e:	61e6      	str	r6, [r4, #28]
 8010b80:	60e6      	str	r6, [r4, #12]
 8010b82:	f7ff fe69 	bl	8010858 <rmw_get_default_security_options>
 8010b86:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010b8a:	f104 0310 	add.w	r3, r4, #16
 8010b8e:	e883 0003 	stmia.w	r3, {r0, r1}
 8010b92:	2203      	movs	r2, #3
 8010b94:	4815      	ldr	r0, [pc, #84]	@ (8010bec <rmw_init_options_init+0xb8>)
 8010b96:	4916      	ldr	r1, [pc, #88]	@ (8010bf0 <rmw_init_options_init+0xbc>)
 8010b98:	7626      	strb	r6, [r4, #24]
 8010b9a:	f7fa feaf 	bl	800b8fc <rmw_uxrce_init_init_options_impl_memory>
 8010b9e:	4813      	ldr	r0, [pc, #76]	@ (8010bec <rmw_init_options_init+0xb8>)
 8010ba0:	f7ff ff9e 	bl	8010ae0 <get_memory>
 8010ba4:	b1f0      	cbz	r0, 8010be4 <rmw_init_options_init+0xb0>
 8010ba6:	4a13      	ldr	r2, [pc, #76]	@ (8010bf4 <rmw_init_options_init+0xc0>)
 8010ba8:	6883      	ldr	r3, [r0, #8]
 8010baa:	6851      	ldr	r1, [r2, #4]
 8010bac:	7810      	ldrb	r0, [r2, #0]
 8010bae:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bb0:	7418      	strb	r0, [r3, #16]
 8010bb2:	6159      	str	r1, [r3, #20]
 8010bb4:	68d1      	ldr	r1, [r2, #12]
 8010bb6:	61d9      	str	r1, [r3, #28]
 8010bb8:	6911      	ldr	r1, [r2, #16]
 8010bba:	6219      	str	r1, [r3, #32]
 8010bbc:	6951      	ldr	r1, [r2, #20]
 8010bbe:	6892      	ldr	r2, [r2, #8]
 8010bc0:	619a      	str	r2, [r3, #24]
 8010bc2:	6259      	str	r1, [r3, #36]	@ 0x24
 8010bc4:	f7fd fc82 	bl	800e4cc <uxr_nanos>
 8010bc8:	f003 fd1a 	bl	8014600 <srand>
 8010bcc:	f003 fd46 	bl	801465c <rand>
 8010bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bd2:	6298      	str	r0, [r3, #40]	@ 0x28
 8010bd4:	2800      	cmp	r0, #0
 8010bd6:	d0f9      	beq.n	8010bcc <rmw_init_options_init+0x98>
 8010bd8:	2000      	movs	r0, #0
 8010bda:	b003      	add	sp, #12
 8010bdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010be0:	b004      	add	sp, #16
 8010be2:	4770      	bx	lr
 8010be4:	2001      	movs	r0, #1
 8010be6:	e7b4      	b.n	8010b52 <rmw_init_options_init+0x1e>
 8010be8:	0801619c 	.word	0x0801619c
 8010bec:	20010d4c 	.word	0x20010d4c
 8010bf0:	2000c5e8 	.word	0x2000c5e8
 8010bf4:	2000c474 	.word	0x2000c474

08010bf8 <rmw_init_options_copy>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	b088      	sub	sp, #32
 8010bfc:	b160      	cbz	r0, 8010c18 <rmw_init_options_copy+0x20>
 8010bfe:	460d      	mov	r5, r1
 8010c00:	b151      	cbz	r1, 8010c18 <rmw_init_options_copy+0x20>
 8010c02:	4604      	mov	r4, r0
 8010c04:	6880      	ldr	r0, [r0, #8]
 8010c06:	b128      	cbz	r0, 8010c14 <rmw_init_options_copy+0x1c>
 8010c08:	4b33      	ldr	r3, [pc, #204]	@ (8010cd8 <rmw_init_options_copy+0xe0>)
 8010c0a:	6819      	ldr	r1, [r3, #0]
 8010c0c:	f7ef fb00 	bl	8000210 <strcmp>
 8010c10:	2800      	cmp	r0, #0
 8010c12:	d154      	bne.n	8010cbe <rmw_init_options_copy+0xc6>
 8010c14:	68ab      	ldr	r3, [r5, #8]
 8010c16:	b11b      	cbz	r3, 8010c20 <rmw_init_options_copy+0x28>
 8010c18:	240b      	movs	r4, #11
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	b008      	add	sp, #32
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	4623      	mov	r3, r4
 8010c22:	462a      	mov	r2, r5
 8010c24:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 8010c28:	f8d3 c000 	ldr.w	ip, [r3]
 8010c2c:	6858      	ldr	r0, [r3, #4]
 8010c2e:	6899      	ldr	r1, [r3, #8]
 8010c30:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010c34:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010c38:	3310      	adds	r3, #16
 8010c3a:	42b3      	cmp	r3, r6
 8010c3c:	f8c2 c000 	str.w	ip, [r2]
 8010c40:	6050      	str	r0, [r2, #4]
 8010c42:	6091      	str	r1, [r2, #8]
 8010c44:	f102 0210 	add.w	r2, r2, #16
 8010c48:	d1ee      	bne.n	8010c28 <rmw_init_options_copy+0x30>
 8010c4a:	6819      	ldr	r1, [r3, #0]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	6053      	str	r3, [r2, #4]
 8010c50:	6011      	str	r1, [r2, #0]
 8010c52:	f104 0e20 	add.w	lr, r4, #32
 8010c56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010c5a:	f10d 0c0c 	add.w	ip, sp, #12
 8010c5e:	4666      	mov	r6, ip
 8010c60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010c64:	f8de 3000 	ldr.w	r3, [lr]
 8010c68:	f8cc 3000 	str.w	r3, [ip]
 8010c6c:	4630      	mov	r0, r6
 8010c6e:	f7fa fb45 	bl	800b2fc <rcutils_allocator_is_valid>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d0d0      	beq.n	8010c18 <rmw_init_options_copy+0x20>
 8010c76:	ab08      	add	r3, sp, #32
 8010c78:	e913 0003 	ldmdb	r3, {r0, r1}
 8010c7c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010c80:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8010c84:	69e0      	ldr	r0, [r4, #28]
 8010c86:	f7ff fc0d 	bl	80104a4 <rcutils_strdup>
 8010c8a:	61e8      	str	r0, [r5, #28]
 8010c8c:	69e3      	ldr	r3, [r4, #28]
 8010c8e:	b103      	cbz	r3, 8010c92 <rmw_init_options_copy+0x9a>
 8010c90:	b1f8      	cbz	r0, 8010cd2 <rmw_init_options_copy+0xda>
 8010c92:	4812      	ldr	r0, [pc, #72]	@ (8010cdc <rmw_init_options_copy+0xe4>)
 8010c94:	f7ff ff24 	bl	8010ae0 <get_memory>
 8010c98:	b1a8      	cbz	r0, 8010cc6 <rmw_init_options_copy+0xce>
 8010c9a:	6883      	ldr	r3, [r0, #8]
 8010c9c:	636b      	str	r3, [r5, #52]	@ 0x34
 8010c9e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010ca0:	f102 0c10 	add.w	ip, r2, #16
 8010ca4:	f103 0510 	add.w	r5, r3, #16
 8010ca8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010cb2:	2400      	movs	r4, #0
 8010cb4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010cb8:	4620      	mov	r0, r4
 8010cba:	b008      	add	sp, #32
 8010cbc:	bd70      	pop	{r4, r5, r6, pc}
 8010cbe:	240c      	movs	r4, #12
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	b008      	add	sp, #32
 8010cc4:	bd70      	pop	{r4, r5, r6, pc}
 8010cc6:	9b04      	ldr	r3, [sp, #16]
 8010cc8:	9907      	ldr	r1, [sp, #28]
 8010cca:	69e8      	ldr	r0, [r5, #28]
 8010ccc:	4798      	blx	r3
 8010cce:	2401      	movs	r4, #1
 8010cd0:	e7a3      	b.n	8010c1a <rmw_init_options_copy+0x22>
 8010cd2:	240a      	movs	r4, #10
 8010cd4:	e7a1      	b.n	8010c1a <rmw_init_options_copy+0x22>
 8010cd6:	bf00      	nop
 8010cd8:	0801619c 	.word	0x0801619c
 8010cdc:	20010d4c 	.word	0x20010d4c

08010ce0 <rmw_init_options_fini>:
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	d041      	beq.n	8010d68 <rmw_init_options_fini+0x88>
 8010ce4:	b510      	push	{r4, lr}
 8010ce6:	4604      	mov	r4, r0
 8010ce8:	b08e      	sub	sp, #56	@ 0x38
 8010cea:	3020      	adds	r0, #32
 8010cec:	f7fa fb06 	bl	800b2fc <rcutils_allocator_is_valid>
 8010cf0:	b380      	cbz	r0, 8010d54 <rmw_init_options_fini+0x74>
 8010cf2:	68a0      	ldr	r0, [r4, #8]
 8010cf4:	b120      	cbz	r0, 8010d00 <rmw_init_options_fini+0x20>
 8010cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8010d70 <rmw_init_options_fini+0x90>)
 8010cf8:	6819      	ldr	r1, [r3, #0]
 8010cfa:	f7ef fa89 	bl	8000210 <strcmp>
 8010cfe:	bb88      	cbnz	r0, 8010d64 <rmw_init_options_fini+0x84>
 8010d00:	4b1c      	ldr	r3, [pc, #112]	@ (8010d74 <rmw_init_options_fini+0x94>)
 8010d02:	6819      	ldr	r1, [r3, #0]
 8010d04:	b351      	cbz	r1, 8010d5c <rmw_init_options_fini+0x7c>
 8010d06:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8010d08:	e001      	b.n	8010d0e <rmw_init_options_fini+0x2e>
 8010d0a:	6849      	ldr	r1, [r1, #4]
 8010d0c:	b331      	cbz	r1, 8010d5c <rmw_init_options_fini+0x7c>
 8010d0e:	688b      	ldr	r3, [r1, #8]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d1fa      	bne.n	8010d0a <rmw_init_options_fini+0x2a>
 8010d14:	4817      	ldr	r0, [pc, #92]	@ (8010d74 <rmw_init_options_fini+0x94>)
 8010d16:	f7ff fef3 	bl	8010b00 <put_memory>
 8010d1a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010d1e:	69e0      	ldr	r0, [r4, #28]
 8010d20:	4798      	blx	r3
 8010d22:	4668      	mov	r0, sp
 8010d24:	f7ff fd88 	bl	8010838 <rmw_get_zero_initialized_init_options>
 8010d28:	46ee      	mov	lr, sp
 8010d2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d2e:	46a4      	mov	ip, r4
 8010d30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d44:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d48:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	4618      	mov	r0, r3
 8010d50:	b00e      	add	sp, #56	@ 0x38
 8010d52:	bd10      	pop	{r4, pc}
 8010d54:	230b      	movs	r3, #11
 8010d56:	4618      	mov	r0, r3
 8010d58:	b00e      	add	sp, #56	@ 0x38
 8010d5a:	bd10      	pop	{r4, pc}
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	4618      	mov	r0, r3
 8010d60:	b00e      	add	sp, #56	@ 0x38
 8010d62:	bd10      	pop	{r4, pc}
 8010d64:	230c      	movs	r3, #12
 8010d66:	e7f2      	b.n	8010d4e <rmw_init_options_fini+0x6e>
 8010d68:	230b      	movs	r3, #11
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	4770      	bx	lr
 8010d6e:	bf00      	nop
 8010d70:	0801619c 	.word	0x0801619c
 8010d74:	20010d4c 	.word	0x20010d4c

08010d78 <rmw_init>:
 8010d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d7c:	b083      	sub	sp, #12
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	f000 80d3 	beq.w	8010f2a <rmw_init+0x1b2>
 8010d84:	460e      	mov	r6, r1
 8010d86:	2900      	cmp	r1, #0
 8010d88:	f000 80cf 	beq.w	8010f2a <rmw_init+0x1b2>
 8010d8c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010d8e:	4605      	mov	r5, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	f000 80ca 	beq.w	8010f2a <rmw_init+0x1b2>
 8010d96:	4b78      	ldr	r3, [pc, #480]	@ (8010f78 <rmw_init+0x200>)
 8010d98:	6880      	ldr	r0, [r0, #8]
 8010d9a:	681f      	ldr	r7, [r3, #0]
 8010d9c:	b128      	cbz	r0, 8010daa <rmw_init+0x32>
 8010d9e:	4639      	mov	r1, r7
 8010da0:	f7ef fa36 	bl	8000210 <strcmp>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	f040 80ca 	bne.w	8010f3e <rmw_init+0x1c6>
 8010daa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010dae:	4c73      	ldr	r4, [pc, #460]	@ (8010f7c <rmw_init+0x204>)
 8010db0:	4973      	ldr	r1, [pc, #460]	@ (8010f80 <rmw_init+0x208>)
 8010db2:	4874      	ldr	r0, [pc, #464]	@ (8010f84 <rmw_init+0x20c>)
 8010db4:	60b7      	str	r7, [r6, #8]
 8010db6:	e9c6 2300 	strd	r2, r3, [r6]
 8010dba:	68eb      	ldr	r3, [r5, #12]
 8010dbc:	64b3      	str	r3, [r6, #72]	@ 0x48
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	f7fa fd3c 	bl	800b83c <rmw_uxrce_init_session_memory>
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	4970      	ldr	r1, [pc, #448]	@ (8010f88 <rmw_init+0x210>)
 8010dc8:	2204      	movs	r2, #4
 8010dca:	f7fa fd77 	bl	800b8bc <rmw_uxrce_init_static_input_buffer_memory>
 8010dce:	f04f 0800 	mov.w	r8, #0
 8010dd2:	486c      	ldr	r0, [pc, #432]	@ (8010f84 <rmw_init+0x20c>)
 8010dd4:	f884 800d 	strb.w	r8, [r4, #13]
 8010dd8:	f7ff fe82 	bl	8010ae0 <get_memory>
 8010ddc:	2800      	cmp	r0, #0
 8010dde:	f000 80a9 	beq.w	8010f34 <rmw_init+0x1bc>
 8010de2:	6884      	ldr	r4, [r0, #8]
 8010de4:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010de6:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8010de8:	f890 c010 	ldrb.w	ip, [r0, #16]
 8010dec:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8010df0:	9101      	str	r1, [sp, #4]
 8010df2:	6a00      	ldr	r0, [r0, #32]
 8010df4:	9000      	str	r0, [sp, #0]
 8010df6:	f104 0910 	add.w	r9, r4, #16
 8010dfa:	4661      	mov	r1, ip
 8010dfc:	4648      	mov	r0, r9
 8010dfe:	f000 fdbf 	bl	8011980 <uxr_set_custom_transport_callbacks>
 8010e02:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 8010e06:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010e0a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 8010e0e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 8010e12:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 8010e16:	495d      	ldr	r1, [pc, #372]	@ (8010f8c <rmw_init+0x214>)
 8010e18:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 8010e1c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 8010e20:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 8010e24:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 8010e28:	4859      	ldr	r0, [pc, #356]	@ (8010f90 <rmw_init+0x218>)
 8010e2a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 8010e2e:	2201      	movs	r2, #1
 8010e30:	64f4      	str	r4, [r6, #76]	@ 0x4c
 8010e32:	f7fa fce3 	bl	800b7fc <rmw_uxrce_init_node_memory>
 8010e36:	4957      	ldr	r1, [pc, #348]	@ (8010f94 <rmw_init+0x21c>)
 8010e38:	4857      	ldr	r0, [pc, #348]	@ (8010f98 <rmw_init+0x220>)
 8010e3a:	2205      	movs	r2, #5
 8010e3c:	f7fa fcbe 	bl	800b7bc <rmw_uxrce_init_subscription_memory>
 8010e40:	4956      	ldr	r1, [pc, #344]	@ (8010f9c <rmw_init+0x224>)
 8010e42:	4857      	ldr	r0, [pc, #348]	@ (8010fa0 <rmw_init+0x228>)
 8010e44:	220a      	movs	r2, #10
 8010e46:	f7fa fc99 	bl	800b77c <rmw_uxrce_init_publisher_memory>
 8010e4a:	4956      	ldr	r1, [pc, #344]	@ (8010fa4 <rmw_init+0x22c>)
 8010e4c:	4856      	ldr	r0, [pc, #344]	@ (8010fa8 <rmw_init+0x230>)
 8010e4e:	2201      	movs	r2, #1
 8010e50:	f7fa fc54 	bl	800b6fc <rmw_uxrce_init_service_memory>
 8010e54:	4955      	ldr	r1, [pc, #340]	@ (8010fac <rmw_init+0x234>)
 8010e56:	4856      	ldr	r0, [pc, #344]	@ (8010fb0 <rmw_init+0x238>)
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f7fa fc6f 	bl	800b73c <rmw_uxrce_init_client_memory>
 8010e5e:	4955      	ldr	r1, [pc, #340]	@ (8010fb4 <rmw_init+0x23c>)
 8010e60:	4855      	ldr	r0, [pc, #340]	@ (8010fb8 <rmw_init+0x240>)
 8010e62:	220f      	movs	r2, #15
 8010e64:	f7fa fd0a 	bl	800b87c <rmw_uxrce_init_topic_memory>
 8010e68:	4954      	ldr	r1, [pc, #336]	@ (8010fbc <rmw_init+0x244>)
 8010e6a:	4855      	ldr	r0, [pc, #340]	@ (8010fc0 <rmw_init+0x248>)
 8010e6c:	2203      	movs	r2, #3
 8010e6e:	f7fa fd45 	bl	800b8fc <rmw_uxrce_init_init_options_impl_memory>
 8010e72:	4954      	ldr	r1, [pc, #336]	@ (8010fc4 <rmw_init+0x24c>)
 8010e74:	4854      	ldr	r0, [pc, #336]	@ (8010fc8 <rmw_init+0x250>)
 8010e76:	2204      	movs	r2, #4
 8010e78:	f7fa fd60 	bl	800b93c <rmw_uxrce_init_wait_set_memory>
 8010e7c:	4953      	ldr	r1, [pc, #332]	@ (8010fcc <rmw_init+0x254>)
 8010e7e:	4854      	ldr	r0, [pc, #336]	@ (8010fd0 <rmw_init+0x258>)
 8010e80:	2204      	movs	r2, #4
 8010e82:	f7fa fd7b 	bl	800b97c <rmw_uxrce_init_guard_condition_memory>
 8010e86:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010e88:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 8010e8a:	4642      	mov	r2, r8
 8010e8c:	f000 fb06 	bl	801149c <rmw_uxrce_transport_init>
 8010e90:	4607      	mov	r7, r0
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d158      	bne.n	8010f48 <rmw_init+0x1d0>
 8010e96:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8010e98:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 8010e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e9e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f7fc f9b0 	bl	800d208 <uxr_init_session>
 8010ea8:	494a      	ldr	r1, [pc, #296]	@ (8010fd4 <rmw_init+0x25c>)
 8010eaa:	4622      	mov	r2, r4
 8010eac:	4628      	mov	r0, r5
 8010eae:	f7fc f9cf 	bl	800d250 <uxr_set_topic_callback>
 8010eb2:	4949      	ldr	r1, [pc, #292]	@ (8010fd8 <rmw_init+0x260>)
 8010eb4:	463a      	mov	r2, r7
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f7fc f9c6 	bl	800d248 <uxr_set_status_callback>
 8010ebc:	4947      	ldr	r1, [pc, #284]	@ (8010fdc <rmw_init+0x264>)
 8010ebe:	463a      	mov	r2, r7
 8010ec0:	4628      	mov	r0, r5
 8010ec2:	f7fc f9c9 	bl	800d258 <uxr_set_request_callback>
 8010ec6:	4946      	ldr	r1, [pc, #280]	@ (8010fe0 <rmw_init+0x268>)
 8010ec8:	463a      	mov	r2, r7
 8010eca:	4628      	mov	r0, r5
 8010ecc:	f7fc f9c8 	bl	800d260 <uxr_set_reply_callback>
 8010ed0:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010ed4:	2304      	movs	r3, #4
 8010ed6:	0092      	lsls	r2, r2, #2
 8010ed8:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 8010edc:	4628      	mov	r0, r5
 8010ede:	f7fc f9fd 	bl	800d2dc <uxr_create_input_reliable_stream>
 8010ee2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010ee6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 8010eea:	0092      	lsls	r2, r2, #2
 8010eec:	2304      	movs	r3, #4
 8010eee:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 8010ef2:	4628      	mov	r0, r5
 8010ef4:	f7fc f9ca 	bl	800d28c <uxr_create_output_reliable_stream>
 8010ef8:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 8010efc:	4628      	mov	r0, r5
 8010efe:	f7fc f9e7 	bl	800d2d0 <uxr_create_input_best_effort_stream>
 8010f02:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 8010f06:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 8010f0a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 8010f0e:	3114      	adds	r1, #20
 8010f10:	4628      	mov	r0, r5
 8010f12:	f7fc f9a9 	bl	800d268 <uxr_create_output_best_effort_stream>
 8010f16:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 8010f1a:	4628      	mov	r0, r5
 8010f1c:	f7fc fefa 	bl	800dd14 <uxr_create_session>
 8010f20:	b1f8      	cbz	r0, 8010f62 <rmw_init+0x1ea>
 8010f22:	4638      	mov	r0, r7
 8010f24:	b003      	add	sp, #12
 8010f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f2a:	270b      	movs	r7, #11
 8010f2c:	4638      	mov	r0, r7
 8010f2e:	b003      	add	sp, #12
 8010f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f34:	2701      	movs	r7, #1
 8010f36:	4638      	mov	r0, r7
 8010f38:	b003      	add	sp, #12
 8010f3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f3e:	270c      	movs	r7, #12
 8010f40:	4638      	mov	r0, r7
 8010f42:	b003      	add	sp, #12
 8010f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f48:	4648      	mov	r0, r9
 8010f4a:	f000 fd5b 	bl	8011a04 <uxr_close_custom_transport>
 8010f4e:	480d      	ldr	r0, [pc, #52]	@ (8010f84 <rmw_init+0x20c>)
 8010f50:	4621      	mov	r1, r4
 8010f52:	f7ff fdd5 	bl	8010b00 <put_memory>
 8010f56:	4638      	mov	r0, r7
 8010f58:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 8010f5c:	b003      	add	sp, #12
 8010f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f62:	4648      	mov	r0, r9
 8010f64:	f000 fd4e 	bl	8011a04 <uxr_close_custom_transport>
 8010f68:	4806      	ldr	r0, [pc, #24]	@ (8010f84 <rmw_init+0x20c>)
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	f7ff fdc8 	bl	8010b00 <put_memory>
 8010f70:	64f7      	str	r7, [r6, #76]	@ 0x4c
 8010f72:	2701      	movs	r7, #1
 8010f74:	e7d5      	b.n	8010f22 <rmw_init+0x1aa>
 8010f76:	bf00      	nop
 8010f78:	0801619c 	.word	0x0801619c
 8010f7c:	20010d9c 	.word	0x20010d9c
 8010f80:	2000d048 	.word	0x2000d048
 8010f84:	20010d8c 	.word	0x20010d8c
 8010f88:	2000e5f0 	.word	0x2000e5f0
 8010f8c:	2000c66c 	.word	0x2000c66c
 8010f90:	20010d5c 	.word	0x20010d5c
 8010f94:	200106f0 	.word	0x200106f0
 8010f98:	20010dac 	.word	0x20010dac
 8010f9c:	2000c710 	.word	0x2000c710
 8010fa0:	20010d6c 	.word	0x20010d6c
 8010fa4:	2000cf80 	.word	0x2000cf80
 8010fa8:	20010d7c 	.word	0x20010d7c
 8010fac:	2000c4a0 	.word	0x2000c4a0
 8010fb0:	2000c490 	.word	0x2000c490
 8010fb4:	20010b28 	.word	0x20010b28
 8010fb8:	20010dbc 	.word	0x20010dbc
 8010fbc:	2000c5e8 	.word	0x2000c5e8
 8010fc0:	20010d4c 	.word	0x20010d4c
 8010fc4:	20010ccc 	.word	0x20010ccc
 8010fc8:	20010dcc 	.word	0x20010dcc
 8010fcc:	2000c568 	.word	0x2000c568
 8010fd0:	20010d3c 	.word	0x20010d3c
 8010fd4:	08013621 	.word	0x08013621
 8010fd8:	08013619 	.word	0x08013619
 8010fdc:	080136b9 	.word	0x080136b9
 8010fe0:	08013755 	.word	0x08013755

08010fe4 <rmw_context_fini>:
 8010fe4:	4b17      	ldr	r3, [pc, #92]	@ (8011044 <rmw_context_fini+0x60>)
 8010fe6:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8010fe8:	b570      	push	{r4, r5, r6, lr}
 8010fea:	681c      	ldr	r4, [r3, #0]
 8010fec:	4605      	mov	r5, r0
 8010fee:	b334      	cbz	r4, 801103e <rmw_context_fini+0x5a>
 8010ff0:	2600      	movs	r6, #0
 8010ff2:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8010ff6:	6902      	ldr	r2, [r0, #16]
 8010ff8:	428a      	cmp	r2, r1
 8010ffa:	d018      	beq.n	801102e <rmw_context_fini+0x4a>
 8010ffc:	2c00      	cmp	r4, #0
 8010ffe:	d1f8      	bne.n	8010ff2 <rmw_context_fini+0xe>
 8011000:	b189      	cbz	r1, 8011026 <rmw_context_fini+0x42>
 8011002:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 8011006:	789b      	ldrb	r3, [r3, #2]
 8011008:	2b01      	cmp	r3, #1
 801100a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801100e:	bf14      	ite	ne
 8011010:	210a      	movne	r1, #10
 8011012:	2100      	moveq	r1, #0
 8011014:	f7fc fe56 	bl	800dcc4 <uxr_delete_session_retries>
 8011018:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801101a:	f7fa fccf 	bl	800b9bc <rmw_uxrce_fini_session_memory>
 801101e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8011020:	3010      	adds	r0, #16
 8011022:	f000 fcef 	bl	8011a04 <uxr_close_custom_transport>
 8011026:	2300      	movs	r3, #0
 8011028:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801102a:	4630      	mov	r0, r6
 801102c:	bd70      	pop	{r4, r5, r6, pc}
 801102e:	3018      	adds	r0, #24
 8011030:	f000 f90e 	bl	8011250 <rmw_destroy_node>
 8011034:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8011036:	4606      	mov	r6, r0
 8011038:	2c00      	cmp	r4, #0
 801103a:	d1da      	bne.n	8010ff2 <rmw_context_fini+0xe>
 801103c:	e7e0      	b.n	8011000 <rmw_context_fini+0x1c>
 801103e:	4626      	mov	r6, r4
 8011040:	e7de      	b.n	8011000 <rmw_context_fini+0x1c>
 8011042:	bf00      	nop
 8011044:	20010d5c 	.word	0x20010d5c

08011048 <create_topic>:
 8011048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801104c:	4605      	mov	r5, r0
 801104e:	b084      	sub	sp, #16
 8011050:	4822      	ldr	r0, [pc, #136]	@ (80110dc <create_topic+0x94>)
 8011052:	460f      	mov	r7, r1
 8011054:	4616      	mov	r6, r2
 8011056:	f7ff fd43 	bl	8010ae0 <get_memory>
 801105a:	4604      	mov	r4, r0
 801105c:	2800      	cmp	r0, #0
 801105e:	d039      	beq.n	80110d4 <create_topic+0x8c>
 8011060:	692b      	ldr	r3, [r5, #16]
 8011062:	6884      	ldr	r4, [r0, #8]
 8011064:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 80110e4 <create_topic+0x9c>
 8011068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801106c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011070:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8011074:	1c42      	adds	r2, r0, #1
 8011076:	2102      	movs	r1, #2
 8011078:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801107c:	f7fc f806 	bl	800d08c <uxr_object_id>
 8011080:	223c      	movs	r2, #60	@ 0x3c
 8011082:	6120      	str	r0, [r4, #16]
 8011084:	4641      	mov	r1, r8
 8011086:	4638      	mov	r0, r7
 8011088:	f7fa fdd0 	bl	800bc2c <generate_topic_name>
 801108c:	b1f0      	cbz	r0, 80110cc <create_topic+0x84>
 801108e:	4f14      	ldr	r7, [pc, #80]	@ (80110e0 <create_topic+0x98>)
 8011090:	4630      	mov	r0, r6
 8011092:	2264      	movs	r2, #100	@ 0x64
 8011094:	4639      	mov	r1, r7
 8011096:	f7fa fd99 	bl	800bbcc <generate_type_name>
 801109a:	b1b8      	cbz	r0, 80110cc <create_topic+0x84>
 801109c:	6928      	ldr	r0, [r5, #16]
 801109e:	2306      	movs	r3, #6
 80110a0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80110a4:	f8cd 8000 	str.w	r8, [sp]
 80110a8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80110ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110b0:	6811      	ldr	r1, [r2, #0]
 80110b2:	696b      	ldr	r3, [r5, #20]
 80110b4:	6922      	ldr	r2, [r4, #16]
 80110b6:	f7fb ff0d 	bl	800ced4 <uxr_buffer_create_topic_bin>
 80110ba:	4602      	mov	r2, r0
 80110bc:	6928      	ldr	r0, [r5, #16]
 80110be:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80110c2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80110c6:	f7fa fd4b 	bl	800bb60 <run_xrce_session>
 80110ca:	b918      	cbnz	r0, 80110d4 <create_topic+0x8c>
 80110cc:	4620      	mov	r0, r4
 80110ce:	f7fa fceb 	bl	800baa8 <rmw_uxrce_fini_topic_memory>
 80110d2:	2400      	movs	r4, #0
 80110d4:	4620      	mov	r0, r4
 80110d6:	b004      	add	sp, #16
 80110d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110dc:	20010dbc 	.word	0x20010dbc
 80110e0:	20010e38 	.word	0x20010e38
 80110e4:	20010dfc 	.word	0x20010dfc

080110e8 <destroy_topic>:
 80110e8:	b538      	push	{r3, r4, r5, lr}
 80110ea:	6985      	ldr	r5, [r0, #24]
 80110ec:	b1d5      	cbz	r5, 8011124 <destroy_topic+0x3c>
 80110ee:	4604      	mov	r4, r0
 80110f0:	6928      	ldr	r0, [r5, #16]
 80110f2:	6922      	ldr	r2, [r4, #16]
 80110f4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80110f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80110fc:	6819      	ldr	r1, [r3, #0]
 80110fe:	f7fb fe6b 	bl	800cdd8 <uxr_buffer_delete_entity>
 8011102:	4602      	mov	r2, r0
 8011104:	6928      	ldr	r0, [r5, #16]
 8011106:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801110a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801110e:	f7fa fd27 	bl	800bb60 <run_xrce_session>
 8011112:	2800      	cmp	r0, #0
 8011114:	4620      	mov	r0, r4
 8011116:	bf14      	ite	ne
 8011118:	2400      	movne	r4, #0
 801111a:	2402      	moveq	r4, #2
 801111c:	f7fa fcc4 	bl	800baa8 <rmw_uxrce_fini_topic_memory>
 8011120:	4620      	mov	r0, r4
 8011122:	bd38      	pop	{r3, r4, r5, pc}
 8011124:	2401      	movs	r4, #1
 8011126:	4620      	mov	r0, r4
 8011128:	bd38      	pop	{r3, r4, r5, pc}
 801112a:	bf00      	nop

0801112c <create_node>:
 801112c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011130:	b083      	sub	sp, #12
 8011132:	2b00      	cmp	r3, #0
 8011134:	d05f      	beq.n	80111f6 <create_node+0xca>
 8011136:	4606      	mov	r6, r0
 8011138:	4835      	ldr	r0, [pc, #212]	@ (8011210 <create_node+0xe4>)
 801113a:	460f      	mov	r7, r1
 801113c:	4690      	mov	r8, r2
 801113e:	461d      	mov	r5, r3
 8011140:	f7ff fcce 	bl	8010ae0 <get_memory>
 8011144:	2800      	cmp	r0, #0
 8011146:	d056      	beq.n	80111f6 <create_node+0xca>
 8011148:	6884      	ldr	r4, [r0, #8]
 801114a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801114c:	6123      	str	r3, [r4, #16]
 801114e:	f7ff fceb 	bl	8010b28 <rmw_get_implementation_identifier>
 8011152:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 8011156:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801115a:	f8c4 9020 	str.w	r9, [r4, #32]
 801115e:	4630      	mov	r0, r6
 8011160:	f7ef f860 	bl	8000224 <strlen>
 8011164:	1c42      	adds	r2, r0, #1
 8011166:	2a3c      	cmp	r2, #60	@ 0x3c
 8011168:	f104 0518 	add.w	r5, r4, #24
 801116c:	d840      	bhi.n	80111f0 <create_node+0xc4>
 801116e:	4648      	mov	r0, r9
 8011170:	4631      	mov	r1, r6
 8011172:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 8011176:	f003 fdaa 	bl	8014cce <memcpy>
 801117a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801117e:	4638      	mov	r0, r7
 8011180:	f7ef f850 	bl	8000224 <strlen>
 8011184:	1c42      	adds	r2, r0, #1
 8011186:	2a3c      	cmp	r2, #60	@ 0x3c
 8011188:	d832      	bhi.n	80111f0 <create_node+0xc4>
 801118a:	4639      	mov	r1, r7
 801118c:	4648      	mov	r0, r9
 801118e:	f003 fd9e 	bl	8014cce <memcpy>
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011198:	2101      	movs	r1, #1
 801119a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801119e:	1842      	adds	r2, r0, r1
 80111a0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 80111a4:	f7fb ff72 	bl	800d08c <uxr_object_id>
 80111a8:	6160      	str	r0, [r4, #20]
 80111aa:	783b      	ldrb	r3, [r7, #0]
 80111ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80111ae:	d127      	bne.n	8011200 <create_node+0xd4>
 80111b0:	787b      	ldrb	r3, [r7, #1]
 80111b2:	bb2b      	cbnz	r3, 8011200 <create_node+0xd4>
 80111b4:	4a17      	ldr	r2, [pc, #92]	@ (8011214 <create_node+0xe8>)
 80111b6:	4818      	ldr	r0, [pc, #96]	@ (8011218 <create_node+0xec>)
 80111b8:	4633      	mov	r3, r6
 80111ba:	213c      	movs	r1, #60	@ 0x3c
 80111bc:	f003 fc0e 	bl	80149dc <sniprintf>
 80111c0:	6920      	ldr	r0, [r4, #16]
 80111c2:	4915      	ldr	r1, [pc, #84]	@ (8011218 <create_node+0xec>)
 80111c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80111c8:	9100      	str	r1, [sp, #0]
 80111ca:	2106      	movs	r1, #6
 80111cc:	9101      	str	r1, [sp, #4]
 80111ce:	6811      	ldr	r1, [r2, #0]
 80111d0:	6962      	ldr	r2, [r4, #20]
 80111d2:	fa1f f388 	uxth.w	r3, r8
 80111d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80111da:	f7fb fe49 	bl	800ce70 <uxr_buffer_create_participant_bin>
 80111de:	4602      	mov	r2, r0
 80111e0:	6920      	ldr	r0, [r4, #16]
 80111e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80111e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80111ea:	f7fa fcb9 	bl	800bb60 <run_xrce_session>
 80111ee:	b918      	cbnz	r0, 80111f8 <create_node+0xcc>
 80111f0:	4628      	mov	r0, r5
 80111f2:	f7fa fbe9 	bl	800b9c8 <rmw_uxrce_fini_node_memory>
 80111f6:	2500      	movs	r5, #0
 80111f8:	4628      	mov	r0, r5
 80111fa:	b003      	add	sp, #12
 80111fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011200:	4a06      	ldr	r2, [pc, #24]	@ (801121c <create_node+0xf0>)
 8011202:	9600      	str	r6, [sp, #0]
 8011204:	463b      	mov	r3, r7
 8011206:	213c      	movs	r1, #60	@ 0x3c
 8011208:	4803      	ldr	r0, [pc, #12]	@ (8011218 <create_node+0xec>)
 801120a:	f003 fbe7 	bl	80149dc <sniprintf>
 801120e:	e7d7      	b.n	80111c0 <create_node+0x94>
 8011210:	20010d5c 	.word	0x20010d5c
 8011214:	08015c94 	.word	0x08015c94
 8011218:	20010e9c 	.word	0x20010e9c
 801121c:	08015e24 	.word	0x08015e24

08011220 <rmw_create_node>:
 8011220:	b199      	cbz	r1, 801124a <rmw_create_node+0x2a>
 8011222:	780b      	ldrb	r3, [r1, #0]
 8011224:	468c      	mov	ip, r1
 8011226:	b183      	cbz	r3, 801124a <rmw_create_node+0x2a>
 8011228:	b410      	push	{r4}
 801122a:	4614      	mov	r4, r2
 801122c:	b14a      	cbz	r2, 8011242 <rmw_create_node+0x22>
 801122e:	7813      	ldrb	r3, [r2, #0]
 8011230:	b13b      	cbz	r3, 8011242 <rmw_create_node+0x22>
 8011232:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8011234:	4603      	mov	r3, r0
 8011236:	4621      	mov	r1, r4
 8011238:	4660      	mov	r0, ip
 801123a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801123e:	f7ff bf75 	b.w	801112c <create_node>
 8011242:	2000      	movs	r0, #0
 8011244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011248:	4770      	bx	lr
 801124a:	2000      	movs	r0, #0
 801124c:	4770      	bx	lr
 801124e:	bf00      	nop

08011250 <rmw_destroy_node>:
 8011250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011252:	b328      	cbz	r0, 80112a0 <rmw_destroy_node+0x50>
 8011254:	4607      	mov	r7, r0
 8011256:	6800      	ldr	r0, [r0, #0]
 8011258:	b120      	cbz	r0, 8011264 <rmw_destroy_node+0x14>
 801125a:	4b36      	ldr	r3, [pc, #216]	@ (8011334 <rmw_destroy_node+0xe4>)
 801125c:	6819      	ldr	r1, [r3, #0]
 801125e:	f7ee ffd7 	bl	8000210 <strcmp>
 8011262:	b9e8      	cbnz	r0, 80112a0 <rmw_destroy_node+0x50>
 8011264:	687d      	ldr	r5, [r7, #4]
 8011266:	b1dd      	cbz	r5, 80112a0 <rmw_destroy_node+0x50>
 8011268:	4b33      	ldr	r3, [pc, #204]	@ (8011338 <rmw_destroy_node+0xe8>)
 801126a:	681c      	ldr	r4, [r3, #0]
 801126c:	2c00      	cmp	r4, #0
 801126e:	d05f      	beq.n	8011330 <rmw_destroy_node+0xe0>
 8011270:	2600      	movs	r6, #0
 8011272:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011276:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801127a:	429d      	cmp	r5, r3
 801127c:	d013      	beq.n	80112a6 <rmw_destroy_node+0x56>
 801127e:	2c00      	cmp	r4, #0
 8011280:	d1f7      	bne.n	8011272 <rmw_destroy_node+0x22>
 8011282:	4b2e      	ldr	r3, [pc, #184]	@ (801133c <rmw_destroy_node+0xec>)
 8011284:	681c      	ldr	r4, [r3, #0]
 8011286:	b1c4      	cbz	r4, 80112ba <rmw_destroy_node+0x6a>
 8011288:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801128c:	6a0b      	ldr	r3, [r1, #32]
 801128e:	429d      	cmp	r5, r3
 8011290:	d1f9      	bne.n	8011286 <rmw_destroy_node+0x36>
 8011292:	317c      	adds	r1, #124	@ 0x7c
 8011294:	4638      	mov	r0, r7
 8011296:	f000 f8a1 	bl	80113dc <rmw_destroy_subscription>
 801129a:	2801      	cmp	r0, #1
 801129c:	4606      	mov	r6, r0
 801129e:	d1f2      	bne.n	8011286 <rmw_destroy_node+0x36>
 80112a0:	2601      	movs	r6, #1
 80112a2:	4630      	mov	r0, r6
 80112a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112a6:	3184      	adds	r1, #132	@ 0x84
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7fa f9d5 	bl	800b658 <rmw_destroy_publisher>
 80112ae:	2801      	cmp	r0, #1
 80112b0:	4606      	mov	r6, r0
 80112b2:	d0f5      	beq.n	80112a0 <rmw_destroy_node+0x50>
 80112b4:	2c00      	cmp	r4, #0
 80112b6:	d1dc      	bne.n	8011272 <rmw_destroy_node+0x22>
 80112b8:	e7e3      	b.n	8011282 <rmw_destroy_node+0x32>
 80112ba:	4b21      	ldr	r3, [pc, #132]	@ (8011340 <rmw_destroy_node+0xf0>)
 80112bc:	681c      	ldr	r4, [r3, #0]
 80112be:	b16c      	cbz	r4, 80112dc <rmw_destroy_node+0x8c>
 80112c0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112c4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112c6:	429d      	cmp	r5, r3
 80112c8:	d1f9      	bne.n	80112be <rmw_destroy_node+0x6e>
 80112ca:	317c      	adds	r1, #124	@ 0x7c
 80112cc:	4638      	mov	r0, r7
 80112ce:	f000 f841 	bl	8011354 <rmw_destroy_service>
 80112d2:	2801      	cmp	r0, #1
 80112d4:	4606      	mov	r6, r0
 80112d6:	d0e3      	beq.n	80112a0 <rmw_destroy_node+0x50>
 80112d8:	2c00      	cmp	r4, #0
 80112da:	d1f1      	bne.n	80112c0 <rmw_destroy_node+0x70>
 80112dc:	4b19      	ldr	r3, [pc, #100]	@ (8011344 <rmw_destroy_node+0xf4>)
 80112de:	681c      	ldr	r4, [r3, #0]
 80112e0:	b16c      	cbz	r4, 80112fe <rmw_destroy_node+0xae>
 80112e2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80112e6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 80112e8:	429d      	cmp	r5, r3
 80112ea:	d1f9      	bne.n	80112e0 <rmw_destroy_node+0x90>
 80112ec:	317c      	adds	r1, #124	@ 0x7c
 80112ee:	4638      	mov	r0, r7
 80112f0:	f002 fa7a 	bl	80137e8 <rmw_destroy_client>
 80112f4:	2801      	cmp	r0, #1
 80112f6:	4606      	mov	r6, r0
 80112f8:	d0d2      	beq.n	80112a0 <rmw_destroy_node+0x50>
 80112fa:	2c00      	cmp	r4, #0
 80112fc:	d1f1      	bne.n	80112e2 <rmw_destroy_node+0x92>
 80112fe:	6928      	ldr	r0, [r5, #16]
 8011300:	696a      	ldr	r2, [r5, #20]
 8011302:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011306:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801130a:	6819      	ldr	r1, [r3, #0]
 801130c:	f7fb fd64 	bl	800cdd8 <uxr_buffer_delete_entity>
 8011310:	4602      	mov	r2, r0
 8011312:	6928      	ldr	r0, [r5, #16]
 8011314:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011318:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801131c:	f7fa fc20 	bl	800bb60 <run_xrce_session>
 8011320:	2800      	cmp	r0, #0
 8011322:	bf08      	it	eq
 8011324:	2602      	moveq	r6, #2
 8011326:	4638      	mov	r0, r7
 8011328:	f7fa fb4e 	bl	800b9c8 <rmw_uxrce_fini_node_memory>
 801132c:	4630      	mov	r0, r6
 801132e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011330:	4626      	mov	r6, r4
 8011332:	e7a6      	b.n	8011282 <rmw_destroy_node+0x32>
 8011334:	0801619c 	.word	0x0801619c
 8011338:	20010d6c 	.word	0x20010d6c
 801133c:	20010dac 	.word	0x20010dac
 8011340:	20010d7c 	.word	0x20010d7c
 8011344:	2000c490 	.word	0x2000c490

08011348 <rmw_node_get_graph_guard_condition>:
 8011348:	6843      	ldr	r3, [r0, #4]
 801134a:	6918      	ldr	r0, [r3, #16]
 801134c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop

08011354 <rmw_destroy_service>:
 8011354:	b570      	push	{r4, r5, r6, lr}
 8011356:	b128      	cbz	r0, 8011364 <rmw_destroy_service+0x10>
 8011358:	4604      	mov	r4, r0
 801135a:	6800      	ldr	r0, [r0, #0]
 801135c:	460d      	mov	r5, r1
 801135e:	f7fa fc7f 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 8011362:	b910      	cbnz	r0, 801136a <rmw_destroy_service+0x16>
 8011364:	2401      	movs	r4, #1
 8011366:	4620      	mov	r0, r4
 8011368:	bd70      	pop	{r4, r5, r6, pc}
 801136a:	6863      	ldr	r3, [r4, #4]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d0f9      	beq.n	8011364 <rmw_destroy_service+0x10>
 8011370:	2d00      	cmp	r5, #0
 8011372:	d0f7      	beq.n	8011364 <rmw_destroy_service+0x10>
 8011374:	6828      	ldr	r0, [r5, #0]
 8011376:	f7fa fc73 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 801137a:	2800      	cmp	r0, #0
 801137c:	d0f2      	beq.n	8011364 <rmw_destroy_service+0x10>
 801137e:	686e      	ldr	r6, [r5, #4]
 8011380:	2e00      	cmp	r6, #0
 8011382:	d0ef      	beq.n	8011364 <rmw_destroy_service+0x10>
 8011384:	6864      	ldr	r4, [r4, #4]
 8011386:	6932      	ldr	r2, [r6, #16]
 8011388:	6920      	ldr	r0, [r4, #16]
 801138a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801138e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011392:	6819      	ldr	r1, [r3, #0]
 8011394:	f001 f882 	bl	801249c <uxr_buffer_cancel_data>
 8011398:	4602      	mov	r2, r0
 801139a:	6920      	ldr	r0, [r4, #16]
 801139c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80113a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80113a4:	f7fa fbdc 	bl	800bb60 <run_xrce_session>
 80113a8:	6920      	ldr	r0, [r4, #16]
 80113aa:	6932      	ldr	r2, [r6, #16]
 80113ac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80113b0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80113b4:	6819      	ldr	r1, [r3, #0]
 80113b6:	f7fb fd0f 	bl	800cdd8 <uxr_buffer_delete_entity>
 80113ba:	4602      	mov	r2, r0
 80113bc:	6920      	ldr	r0, [r4, #16]
 80113be:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80113c2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80113c6:	f7fa fbcb 	bl	800bb60 <run_xrce_session>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	4628      	mov	r0, r5
 80113ce:	bf14      	ite	ne
 80113d0:	2400      	movne	r4, #0
 80113d2:	2402      	moveq	r4, #2
 80113d4:	f7fa fb3c 	bl	800ba50 <rmw_uxrce_fini_service_memory>
 80113d8:	e7c5      	b.n	8011366 <rmw_destroy_service+0x12>
 80113da:	bf00      	nop

080113dc <rmw_destroy_subscription>:
 80113dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113de:	b128      	cbz	r0, 80113ec <rmw_destroy_subscription+0x10>
 80113e0:	4604      	mov	r4, r0
 80113e2:	6800      	ldr	r0, [r0, #0]
 80113e4:	460d      	mov	r5, r1
 80113e6:	f7fa fc3b 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 80113ea:	b910      	cbnz	r0, 80113f2 <rmw_destroy_subscription+0x16>
 80113ec:	2401      	movs	r4, #1
 80113ee:	4620      	mov	r0, r4
 80113f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f2:	6863      	ldr	r3, [r4, #4]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d0f9      	beq.n	80113ec <rmw_destroy_subscription+0x10>
 80113f8:	2d00      	cmp	r5, #0
 80113fa:	d0f7      	beq.n	80113ec <rmw_destroy_subscription+0x10>
 80113fc:	6828      	ldr	r0, [r5, #0]
 80113fe:	f7fa fc2f 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 8011402:	2800      	cmp	r0, #0
 8011404:	d0f2      	beq.n	80113ec <rmw_destroy_subscription+0x10>
 8011406:	686c      	ldr	r4, [r5, #4]
 8011408:	2c00      	cmp	r4, #0
 801140a:	d0ef      	beq.n	80113ec <rmw_destroy_subscription+0x10>
 801140c:	6a26      	ldr	r6, [r4, #32]
 801140e:	6962      	ldr	r2, [r4, #20]
 8011410:	6930      	ldr	r0, [r6, #16]
 8011412:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011416:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801141a:	6819      	ldr	r1, [r3, #0]
 801141c:	f001 f83e 	bl	801249c <uxr_buffer_cancel_data>
 8011420:	4602      	mov	r2, r0
 8011422:	6930      	ldr	r0, [r6, #16]
 8011424:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8011428:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801142c:	f7fa fb98 	bl	800bb60 <run_xrce_session>
 8011430:	69e0      	ldr	r0, [r4, #28]
 8011432:	f7ff fe59 	bl	80110e8 <destroy_topic>
 8011436:	6a23      	ldr	r3, [r4, #32]
 8011438:	6962      	ldr	r2, [r4, #20]
 801143a:	6918      	ldr	r0, [r3, #16]
 801143c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8011440:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8011444:	6819      	ldr	r1, [r3, #0]
 8011446:	f7fb fcc7 	bl	800cdd8 <uxr_buffer_delete_entity>
 801144a:	6a23      	ldr	r3, [r4, #32]
 801144c:	6922      	ldr	r2, [r4, #16]
 801144e:	691b      	ldr	r3, [r3, #16]
 8011450:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8011454:	4604      	mov	r4, r0
 8011456:	6809      	ldr	r1, [r1, #0]
 8011458:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801145c:	f7fb fcbc 	bl	800cdd8 <uxr_buffer_delete_entity>
 8011460:	6937      	ldr	r7, [r6, #16]
 8011462:	4622      	mov	r2, r4
 8011464:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8011468:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801146c:	4604      	mov	r4, r0
 801146e:	4638      	mov	r0, r7
 8011470:	f7fa fb76 	bl	800bb60 <run_xrce_session>
 8011474:	6936      	ldr	r6, [r6, #16]
 8011476:	4622      	mov	r2, r4
 8011478:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801147c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8011480:	4604      	mov	r4, r0
 8011482:	4630      	mov	r0, r6
 8011484:	f7fa fb6c 	bl	800bb60 <run_xrce_session>
 8011488:	b12c      	cbz	r4, 8011496 <rmw_destroy_subscription+0xba>
 801148a:	b120      	cbz	r0, 8011496 <rmw_destroy_subscription+0xba>
 801148c:	2400      	movs	r4, #0
 801148e:	4628      	mov	r0, r5
 8011490:	f7fa fac8 	bl	800ba24 <rmw_uxrce_fini_subscription_memory>
 8011494:	e7ab      	b.n	80113ee <rmw_destroy_subscription+0x12>
 8011496:	2402      	movs	r4, #2
 8011498:	e7f9      	b.n	801148e <rmw_destroy_subscription+0xb2>
 801149a:	bf00      	nop

0801149c <rmw_uxrce_transport_init>:
 801149c:	b508      	push	{r3, lr}
 801149e:	b108      	cbz	r0, 80114a4 <rmw_uxrce_transport_init+0x8>
 80114a0:	f100 0210 	add.w	r2, r0, #16
 80114a4:	b139      	cbz	r1, 80114b6 <rmw_uxrce_transport_init+0x1a>
 80114a6:	6949      	ldr	r1, [r1, #20]
 80114a8:	4610      	mov	r0, r2
 80114aa:	f000 fa77 	bl	801199c <uxr_init_custom_transport>
 80114ae:	f080 0001 	eor.w	r0, r0, #1
 80114b2:	b2c0      	uxtb	r0, r0
 80114b4:	bd08      	pop	{r3, pc}
 80114b6:	4b04      	ldr	r3, [pc, #16]	@ (80114c8 <rmw_uxrce_transport_init+0x2c>)
 80114b8:	4610      	mov	r0, r2
 80114ba:	6859      	ldr	r1, [r3, #4]
 80114bc:	f000 fa6e 	bl	801199c <uxr_init_custom_transport>
 80114c0:	f080 0001 	eor.w	r0, r0, #1
 80114c4:	b2c0      	uxtb	r0, r0
 80114c6:	bd08      	pop	{r3, pc}
 80114c8:	2000c474 	.word	0x2000c474

080114cc <rmw_uros_epoch_nanos>:
 80114cc:	4b05      	ldr	r3, [pc, #20]	@ (80114e4 <rmw_uros_epoch_nanos+0x18>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	b123      	cbz	r3, 80114dc <rmw_uros_epoch_nanos+0x10>
 80114d2:	6898      	ldr	r0, [r3, #8]
 80114d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80114d8:	f7fb bf1c 	b.w	800d314 <uxr_epoch_nanos>
 80114dc:	2000      	movs	r0, #0
 80114de:	2100      	movs	r1, #0
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop
 80114e4:	20010d8c 	.word	0x20010d8c

080114e8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80114e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114ec:	6805      	ldr	r5, [r0, #0]
 80114ee:	4604      	mov	r4, r0
 80114f0:	4628      	mov	r0, r5
 80114f2:	460e      	mov	r6, r1
 80114f4:	f7ee fe8c 	bl	8000210 <strcmp>
 80114f8:	b1c8      	cbz	r0, 801152e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80114fa:	4b11      	ldr	r3, [pc, #68]	@ (8011540 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	429d      	cmp	r5, r3
 8011500:	d112      	bne.n	8011528 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8011502:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8011506:	f8d8 4000 	ldr.w	r4, [r8]
 801150a:	b16c      	cbz	r4, 8011528 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801150c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8011510:	2700      	movs	r7, #0
 8011512:	3d04      	subs	r5, #4
 8011514:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8011518:	4631      	mov	r1, r6
 801151a:	f7ee fe79 	bl	8000210 <strcmp>
 801151e:	00bb      	lsls	r3, r7, #2
 8011520:	b140      	cbz	r0, 8011534 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8011522:	3701      	adds	r7, #1
 8011524:	42bc      	cmp	r4, r7
 8011526:	d1f5      	bne.n	8011514 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8011528:	2000      	movs	r0, #0
 801152a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801152e:	4620      	mov	r0, r4
 8011530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011534:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801153c:	58d3      	ldr	r3, [r2, r3]
 801153e:	4718      	bx	r3
 8011540:	2000016c 	.word	0x2000016c

08011544 <std_msgs__msg__Int32__init>:
 8011544:	3800      	subs	r0, #0
 8011546:	bf18      	it	ne
 8011548:	2001      	movne	r0, #1
 801154a:	4770      	bx	lr

0801154c <std_msgs__msg__Int32__fini>:
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop

08011550 <ucdr_serialize_endian_array_char>:
 8011550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011554:	4619      	mov	r1, r3
 8011556:	461f      	mov	r7, r3
 8011558:	4605      	mov	r5, r0
 801155a:	4690      	mov	r8, r2
 801155c:	f7fb fb78 	bl	800cc50 <ucdr_check_buffer_available_for>
 8011560:	b9e0      	cbnz	r0, 801159c <ucdr_serialize_endian_array_char+0x4c>
 8011562:	463e      	mov	r6, r7
 8011564:	e009      	b.n	801157a <ucdr_serialize_endian_array_char+0x2a>
 8011566:	68a8      	ldr	r0, [r5, #8]
 8011568:	f003 fbb1 	bl	8014cce <memcpy>
 801156c:	68ab      	ldr	r3, [r5, #8]
 801156e:	6928      	ldr	r0, [r5, #16]
 8011570:	4423      	add	r3, r4
 8011572:	4420      	add	r0, r4
 8011574:	1b36      	subs	r6, r6, r4
 8011576:	60ab      	str	r3, [r5, #8]
 8011578:	6128      	str	r0, [r5, #16]
 801157a:	4631      	mov	r1, r6
 801157c:	2201      	movs	r2, #1
 801157e:	4628      	mov	r0, r5
 8011580:	f7fb fbee 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 8011584:	1bb9      	subs	r1, r7, r6
 8011586:	4441      	add	r1, r8
 8011588:	4604      	mov	r4, r0
 801158a:	4602      	mov	r2, r0
 801158c:	2800      	cmp	r0, #0
 801158e:	d1ea      	bne.n	8011566 <ucdr_serialize_endian_array_char+0x16>
 8011590:	2301      	movs	r3, #1
 8011592:	7da8      	ldrb	r0, [r5, #22]
 8011594:	756b      	strb	r3, [r5, #21]
 8011596:	4058      	eors	r0, r3
 8011598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801159c:	463a      	mov	r2, r7
 801159e:	68a8      	ldr	r0, [r5, #8]
 80115a0:	4641      	mov	r1, r8
 80115a2:	f003 fb94 	bl	8014cce <memcpy>
 80115a6:	68aa      	ldr	r2, [r5, #8]
 80115a8:	692b      	ldr	r3, [r5, #16]
 80115aa:	443a      	add	r2, r7
 80115ac:	443b      	add	r3, r7
 80115ae:	60aa      	str	r2, [r5, #8]
 80115b0:	612b      	str	r3, [r5, #16]
 80115b2:	e7ed      	b.n	8011590 <ucdr_serialize_endian_array_char+0x40>

080115b4 <ucdr_deserialize_endian_array_char>:
 80115b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b8:	4619      	mov	r1, r3
 80115ba:	461f      	mov	r7, r3
 80115bc:	4605      	mov	r5, r0
 80115be:	4690      	mov	r8, r2
 80115c0:	f7fb fb46 	bl	800cc50 <ucdr_check_buffer_available_for>
 80115c4:	b9e0      	cbnz	r0, 8011600 <ucdr_deserialize_endian_array_char+0x4c>
 80115c6:	463e      	mov	r6, r7
 80115c8:	e009      	b.n	80115de <ucdr_deserialize_endian_array_char+0x2a>
 80115ca:	68a9      	ldr	r1, [r5, #8]
 80115cc:	f003 fb7f 	bl	8014cce <memcpy>
 80115d0:	68ab      	ldr	r3, [r5, #8]
 80115d2:	6928      	ldr	r0, [r5, #16]
 80115d4:	4423      	add	r3, r4
 80115d6:	4420      	add	r0, r4
 80115d8:	1b36      	subs	r6, r6, r4
 80115da:	60ab      	str	r3, [r5, #8]
 80115dc:	6128      	str	r0, [r5, #16]
 80115de:	2201      	movs	r2, #1
 80115e0:	4631      	mov	r1, r6
 80115e2:	4628      	mov	r0, r5
 80115e4:	f7fb fbbc 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 80115e8:	4604      	mov	r4, r0
 80115ea:	1bb8      	subs	r0, r7, r6
 80115ec:	4440      	add	r0, r8
 80115ee:	4622      	mov	r2, r4
 80115f0:	2c00      	cmp	r4, #0
 80115f2:	d1ea      	bne.n	80115ca <ucdr_deserialize_endian_array_char+0x16>
 80115f4:	2301      	movs	r3, #1
 80115f6:	7da8      	ldrb	r0, [r5, #22]
 80115f8:	756b      	strb	r3, [r5, #21]
 80115fa:	4058      	eors	r0, r3
 80115fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011600:	463a      	mov	r2, r7
 8011602:	68a9      	ldr	r1, [r5, #8]
 8011604:	4640      	mov	r0, r8
 8011606:	f003 fb62 	bl	8014cce <memcpy>
 801160a:	68aa      	ldr	r2, [r5, #8]
 801160c:	692b      	ldr	r3, [r5, #16]
 801160e:	443a      	add	r2, r7
 8011610:	443b      	add	r3, r7
 8011612:	60aa      	str	r2, [r5, #8]
 8011614:	612b      	str	r3, [r5, #16]
 8011616:	e7ed      	b.n	80115f4 <ucdr_deserialize_endian_array_char+0x40>

08011618 <ucdr_serialize_array_uint8_t>:
 8011618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801161c:	4688      	mov	r8, r1
 801161e:	4611      	mov	r1, r2
 8011620:	4617      	mov	r7, r2
 8011622:	4605      	mov	r5, r0
 8011624:	f7fb fb14 	bl	800cc50 <ucdr_check_buffer_available_for>
 8011628:	b9e0      	cbnz	r0, 8011664 <ucdr_serialize_array_uint8_t+0x4c>
 801162a:	463e      	mov	r6, r7
 801162c:	e009      	b.n	8011642 <ucdr_serialize_array_uint8_t+0x2a>
 801162e:	68a8      	ldr	r0, [r5, #8]
 8011630:	f003 fb4d 	bl	8014cce <memcpy>
 8011634:	68aa      	ldr	r2, [r5, #8]
 8011636:	692b      	ldr	r3, [r5, #16]
 8011638:	4422      	add	r2, r4
 801163a:	4423      	add	r3, r4
 801163c:	1b36      	subs	r6, r6, r4
 801163e:	60aa      	str	r2, [r5, #8]
 8011640:	612b      	str	r3, [r5, #16]
 8011642:	4631      	mov	r1, r6
 8011644:	2201      	movs	r2, #1
 8011646:	4628      	mov	r0, r5
 8011648:	f7fb fb8a 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 801164c:	1bb9      	subs	r1, r7, r6
 801164e:	4441      	add	r1, r8
 8011650:	4604      	mov	r4, r0
 8011652:	4602      	mov	r2, r0
 8011654:	2800      	cmp	r0, #0
 8011656:	d1ea      	bne.n	801162e <ucdr_serialize_array_uint8_t+0x16>
 8011658:	2301      	movs	r3, #1
 801165a:	7da8      	ldrb	r0, [r5, #22]
 801165c:	756b      	strb	r3, [r5, #21]
 801165e:	4058      	eors	r0, r3
 8011660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011664:	463a      	mov	r2, r7
 8011666:	68a8      	ldr	r0, [r5, #8]
 8011668:	4641      	mov	r1, r8
 801166a:	f003 fb30 	bl	8014cce <memcpy>
 801166e:	68aa      	ldr	r2, [r5, #8]
 8011670:	692b      	ldr	r3, [r5, #16]
 8011672:	443a      	add	r2, r7
 8011674:	443b      	add	r3, r7
 8011676:	60aa      	str	r2, [r5, #8]
 8011678:	612b      	str	r3, [r5, #16]
 801167a:	e7ed      	b.n	8011658 <ucdr_serialize_array_uint8_t+0x40>

0801167c <ucdr_serialize_endian_array_uint8_t>:
 801167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011680:	4619      	mov	r1, r3
 8011682:	461f      	mov	r7, r3
 8011684:	4605      	mov	r5, r0
 8011686:	4690      	mov	r8, r2
 8011688:	f7fb fae2 	bl	800cc50 <ucdr_check_buffer_available_for>
 801168c:	b9e0      	cbnz	r0, 80116c8 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801168e:	463e      	mov	r6, r7
 8011690:	e009      	b.n	80116a6 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8011692:	68a8      	ldr	r0, [r5, #8]
 8011694:	f003 fb1b 	bl	8014cce <memcpy>
 8011698:	68ab      	ldr	r3, [r5, #8]
 801169a:	6928      	ldr	r0, [r5, #16]
 801169c:	4423      	add	r3, r4
 801169e:	4420      	add	r0, r4
 80116a0:	1b36      	subs	r6, r6, r4
 80116a2:	60ab      	str	r3, [r5, #8]
 80116a4:	6128      	str	r0, [r5, #16]
 80116a6:	4631      	mov	r1, r6
 80116a8:	2201      	movs	r2, #1
 80116aa:	4628      	mov	r0, r5
 80116ac:	f7fb fb58 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 80116b0:	1bb9      	subs	r1, r7, r6
 80116b2:	4441      	add	r1, r8
 80116b4:	4604      	mov	r4, r0
 80116b6:	4602      	mov	r2, r0
 80116b8:	2800      	cmp	r0, #0
 80116ba:	d1ea      	bne.n	8011692 <ucdr_serialize_endian_array_uint8_t+0x16>
 80116bc:	2301      	movs	r3, #1
 80116be:	7da8      	ldrb	r0, [r5, #22]
 80116c0:	756b      	strb	r3, [r5, #21]
 80116c2:	4058      	eors	r0, r3
 80116c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c8:	463a      	mov	r2, r7
 80116ca:	68a8      	ldr	r0, [r5, #8]
 80116cc:	4641      	mov	r1, r8
 80116ce:	f003 fafe 	bl	8014cce <memcpy>
 80116d2:	68aa      	ldr	r2, [r5, #8]
 80116d4:	692b      	ldr	r3, [r5, #16]
 80116d6:	443a      	add	r2, r7
 80116d8:	443b      	add	r3, r7
 80116da:	60aa      	str	r2, [r5, #8]
 80116dc:	612b      	str	r3, [r5, #16]
 80116de:	e7ed      	b.n	80116bc <ucdr_serialize_endian_array_uint8_t+0x40>

080116e0 <ucdr_deserialize_array_uint8_t>:
 80116e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116e4:	4688      	mov	r8, r1
 80116e6:	4611      	mov	r1, r2
 80116e8:	4617      	mov	r7, r2
 80116ea:	4605      	mov	r5, r0
 80116ec:	f7fb fab0 	bl	800cc50 <ucdr_check_buffer_available_for>
 80116f0:	b9e0      	cbnz	r0, 801172c <ucdr_deserialize_array_uint8_t+0x4c>
 80116f2:	463e      	mov	r6, r7
 80116f4:	e009      	b.n	801170a <ucdr_deserialize_array_uint8_t+0x2a>
 80116f6:	68a9      	ldr	r1, [r5, #8]
 80116f8:	f003 fae9 	bl	8014cce <memcpy>
 80116fc:	68aa      	ldr	r2, [r5, #8]
 80116fe:	692b      	ldr	r3, [r5, #16]
 8011700:	4422      	add	r2, r4
 8011702:	4423      	add	r3, r4
 8011704:	1b36      	subs	r6, r6, r4
 8011706:	60aa      	str	r2, [r5, #8]
 8011708:	612b      	str	r3, [r5, #16]
 801170a:	2201      	movs	r2, #1
 801170c:	4631      	mov	r1, r6
 801170e:	4628      	mov	r0, r5
 8011710:	f7fb fb26 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 8011714:	4604      	mov	r4, r0
 8011716:	1bb8      	subs	r0, r7, r6
 8011718:	4440      	add	r0, r8
 801171a:	4622      	mov	r2, r4
 801171c:	2c00      	cmp	r4, #0
 801171e:	d1ea      	bne.n	80116f6 <ucdr_deserialize_array_uint8_t+0x16>
 8011720:	2301      	movs	r3, #1
 8011722:	7da8      	ldrb	r0, [r5, #22]
 8011724:	756b      	strb	r3, [r5, #21]
 8011726:	4058      	eors	r0, r3
 8011728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172c:	463a      	mov	r2, r7
 801172e:	68a9      	ldr	r1, [r5, #8]
 8011730:	4640      	mov	r0, r8
 8011732:	f003 facc 	bl	8014cce <memcpy>
 8011736:	68aa      	ldr	r2, [r5, #8]
 8011738:	692b      	ldr	r3, [r5, #16]
 801173a:	443a      	add	r2, r7
 801173c:	443b      	add	r3, r7
 801173e:	60aa      	str	r2, [r5, #8]
 8011740:	612b      	str	r3, [r5, #16]
 8011742:	e7ed      	b.n	8011720 <ucdr_deserialize_array_uint8_t+0x40>

08011744 <ucdr_deserialize_endian_array_uint8_t>:
 8011744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011748:	4619      	mov	r1, r3
 801174a:	461f      	mov	r7, r3
 801174c:	4605      	mov	r5, r0
 801174e:	4690      	mov	r8, r2
 8011750:	f7fb fa7e 	bl	800cc50 <ucdr_check_buffer_available_for>
 8011754:	b9e0      	cbnz	r0, 8011790 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8011756:	463e      	mov	r6, r7
 8011758:	e009      	b.n	801176e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801175a:	68a9      	ldr	r1, [r5, #8]
 801175c:	f003 fab7 	bl	8014cce <memcpy>
 8011760:	68ab      	ldr	r3, [r5, #8]
 8011762:	6928      	ldr	r0, [r5, #16]
 8011764:	4423      	add	r3, r4
 8011766:	4420      	add	r0, r4
 8011768:	1b36      	subs	r6, r6, r4
 801176a:	60ab      	str	r3, [r5, #8]
 801176c:	6128      	str	r0, [r5, #16]
 801176e:	2201      	movs	r2, #1
 8011770:	4631      	mov	r1, r6
 8011772:	4628      	mov	r0, r5
 8011774:	f7fb faf4 	bl	800cd60 <ucdr_check_final_buffer_behavior_array>
 8011778:	4604      	mov	r4, r0
 801177a:	1bb8      	subs	r0, r7, r6
 801177c:	4440      	add	r0, r8
 801177e:	4622      	mov	r2, r4
 8011780:	2c00      	cmp	r4, #0
 8011782:	d1ea      	bne.n	801175a <ucdr_deserialize_endian_array_uint8_t+0x16>
 8011784:	2301      	movs	r3, #1
 8011786:	7da8      	ldrb	r0, [r5, #22]
 8011788:	756b      	strb	r3, [r5, #21]
 801178a:	4058      	eors	r0, r3
 801178c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011790:	463a      	mov	r2, r7
 8011792:	68a9      	ldr	r1, [r5, #8]
 8011794:	4640      	mov	r0, r8
 8011796:	f003 fa9a 	bl	8014cce <memcpy>
 801179a:	68aa      	ldr	r2, [r5, #8]
 801179c:	692b      	ldr	r3, [r5, #16]
 801179e:	443a      	add	r2, r7
 80117a0:	443b      	add	r3, r7
 80117a2:	60aa      	str	r2, [r5, #8]
 80117a4:	612b      	str	r3, [r5, #16]
 80117a6:	e7ed      	b.n	8011784 <ucdr_deserialize_endian_array_uint8_t+0x40>

080117a8 <ucdr_serialize_sequence_char>:
 80117a8:	b570      	push	{r4, r5, r6, lr}
 80117aa:	4615      	mov	r5, r2
 80117ac:	460e      	mov	r6, r1
 80117ae:	7d01      	ldrb	r1, [r0, #20]
 80117b0:	4604      	mov	r4, r0
 80117b2:	f7fa fda3 	bl	800c2fc <ucdr_serialize_endian_uint32_t>
 80117b6:	b90d      	cbnz	r5, 80117bc <ucdr_serialize_sequence_char+0x14>
 80117b8:	2001      	movs	r0, #1
 80117ba:	bd70      	pop	{r4, r5, r6, pc}
 80117bc:	7d21      	ldrb	r1, [r4, #20]
 80117be:	462b      	mov	r3, r5
 80117c0:	4632      	mov	r2, r6
 80117c2:	4620      	mov	r0, r4
 80117c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117c8:	f7ff bec2 	b.w	8011550 <ucdr_serialize_endian_array_char>

080117cc <ucdr_deserialize_sequence_char>:
 80117cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117d0:	461d      	mov	r5, r3
 80117d2:	4616      	mov	r6, r2
 80117d4:	460f      	mov	r7, r1
 80117d6:	461a      	mov	r2, r3
 80117d8:	7d01      	ldrb	r1, [r0, #20]
 80117da:	4604      	mov	r4, r0
 80117dc:	f7fa feb6 	bl	800c54c <ucdr_deserialize_endian_uint32_t>
 80117e0:	682b      	ldr	r3, [r5, #0]
 80117e2:	429e      	cmp	r6, r3
 80117e4:	bf3c      	itt	cc
 80117e6:	2201      	movcc	r2, #1
 80117e8:	75a2      	strbcc	r2, [r4, #22]
 80117ea:	b913      	cbnz	r3, 80117f2 <ucdr_deserialize_sequence_char+0x26>
 80117ec:	2001      	movs	r0, #1
 80117ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117f2:	7d21      	ldrb	r1, [r4, #20]
 80117f4:	463a      	mov	r2, r7
 80117f6:	4620      	mov	r0, r4
 80117f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117fc:	f7ff beda 	b.w	80115b4 <ucdr_deserialize_endian_array_char>

08011800 <ucdr_serialize_sequence_uint8_t>:
 8011800:	b570      	push	{r4, r5, r6, lr}
 8011802:	4615      	mov	r5, r2
 8011804:	460e      	mov	r6, r1
 8011806:	7d01      	ldrb	r1, [r0, #20]
 8011808:	4604      	mov	r4, r0
 801180a:	f7fa fd77 	bl	800c2fc <ucdr_serialize_endian_uint32_t>
 801180e:	b90d      	cbnz	r5, 8011814 <ucdr_serialize_sequence_uint8_t+0x14>
 8011810:	2001      	movs	r0, #1
 8011812:	bd70      	pop	{r4, r5, r6, pc}
 8011814:	7d21      	ldrb	r1, [r4, #20]
 8011816:	462b      	mov	r3, r5
 8011818:	4632      	mov	r2, r6
 801181a:	4620      	mov	r0, r4
 801181c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011820:	f7ff bf2c 	b.w	801167c <ucdr_serialize_endian_array_uint8_t>

08011824 <ucdr_deserialize_sequence_uint8_t>:
 8011824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011828:	461d      	mov	r5, r3
 801182a:	4616      	mov	r6, r2
 801182c:	460f      	mov	r7, r1
 801182e:	461a      	mov	r2, r3
 8011830:	7d01      	ldrb	r1, [r0, #20]
 8011832:	4604      	mov	r4, r0
 8011834:	f7fa fe8a 	bl	800c54c <ucdr_deserialize_endian_uint32_t>
 8011838:	682b      	ldr	r3, [r5, #0]
 801183a:	429e      	cmp	r6, r3
 801183c:	bf3c      	itt	cc
 801183e:	2201      	movcc	r2, #1
 8011840:	75a2      	strbcc	r2, [r4, #22]
 8011842:	b913      	cbnz	r3, 801184a <ucdr_deserialize_sequence_uint8_t+0x26>
 8011844:	2001      	movs	r0, #1
 8011846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801184a:	7d21      	ldrb	r1, [r4, #20]
 801184c:	463a      	mov	r2, r7
 801184e:	4620      	mov	r0, r4
 8011850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011854:	f7ff bf76 	b.w	8011744 <ucdr_deserialize_endian_array_uint8_t>

08011858 <ucdr_serialize_string>:
 8011858:	b510      	push	{r4, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	4604      	mov	r4, r0
 801185e:	4608      	mov	r0, r1
 8011860:	9101      	str	r1, [sp, #4]
 8011862:	f7ee fcdf 	bl	8000224 <strlen>
 8011866:	9901      	ldr	r1, [sp, #4]
 8011868:	1c42      	adds	r2, r0, #1
 801186a:	4620      	mov	r0, r4
 801186c:	b002      	add	sp, #8
 801186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011872:	f7ff bf99 	b.w	80117a8 <ucdr_serialize_sequence_char>
 8011876:	bf00      	nop

08011878 <ucdr_deserialize_string>:
 8011878:	b500      	push	{lr}
 801187a:	b083      	sub	sp, #12
 801187c:	ab01      	add	r3, sp, #4
 801187e:	f7ff ffa5 	bl	80117cc <ucdr_deserialize_sequence_char>
 8011882:	b003      	add	sp, #12
 8011884:	f85d fb04 	ldr.w	pc, [sp], #4

08011888 <get_custom_error>:
 8011888:	4b01      	ldr	r3, [pc, #4]	@ (8011890 <get_custom_error+0x8>)
 801188a:	7818      	ldrb	r0, [r3, #0]
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop
 8011890:	20010ed8 	.word	0x20010ed8

08011894 <recv_custom_msg>:
 8011894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011898:	4693      	mov	fp, r2
 801189a:	b089      	sub	sp, #36	@ 0x24
 801189c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80118a0:	9305      	str	r3, [sp, #20]
 80118a2:	468a      	mov	sl, r1
 80118a4:	2100      	movs	r1, #0
 80118a6:	4604      	mov	r4, r0
 80118a8:	f88d 101e 	strb.w	r1, [sp, #30]
 80118ac:	b322      	cbz	r2, 80118f8 <recv_custom_msg+0x64>
 80118ae:	f200 2902 	addw	r9, r0, #514	@ 0x202
 80118b2:	f10d 081f 	add.w	r8, sp, #31
 80118b6:	af05      	add	r7, sp, #20
 80118b8:	f10d 061e 	add.w	r6, sp, #30
 80118bc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 80118c0:	e002      	b.n	80118c8 <recv_custom_msg+0x34>
 80118c2:	9b05      	ldr	r3, [sp, #20]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	dd0f      	ble.n	80118e8 <recv_custom_msg+0x54>
 80118c8:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 80118cc:	4623      	mov	r3, r4
 80118ce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80118d2:	e9cd 5600 	strd	r5, r6, [sp]
 80118d6:	4622      	mov	r2, r4
 80118d8:	4648      	mov	r0, r9
 80118da:	f001 f8f3 	bl	8012ac4 <uxr_read_framed_msg>
 80118de:	2800      	cmp	r0, #0
 80118e0:	d0ef      	beq.n	80118c2 <recv_custom_msg+0x2e>
 80118e2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80118e6:	b1b3      	cbz	r3, 8011916 <recv_custom_msg+0x82>
 80118e8:	4b0f      	ldr	r3, [pc, #60]	@ (8011928 <recv_custom_msg+0x94>)
 80118ea:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80118ee:	701a      	strb	r2, [r3, #0]
 80118f0:	2000      	movs	r0, #0
 80118f2:	b009      	add	sp, #36	@ 0x24
 80118f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f8:	f10d 021f 	add.w	r2, sp, #31
 80118fc:	9200      	str	r2, [sp, #0]
 80118fe:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8011902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011906:	4601      	mov	r1, r0
 8011908:	47a8      	blx	r5
 801190a:	2800      	cmp	r0, #0
 801190c:	d0ec      	beq.n	80118e8 <recv_custom_msg+0x54>
 801190e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1e8      	bne.n	80118e8 <recv_custom_msg+0x54>
 8011916:	f8cb 0000 	str.w	r0, [fp]
 801191a:	2001      	movs	r0, #1
 801191c:	f8ca 4000 	str.w	r4, [sl]
 8011920:	b009      	add	sp, #36	@ 0x24
 8011922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011926:	bf00      	nop
 8011928:	20010ed8 	.word	0x20010ed8

0801192c <send_custom_msg>:
 801192c:	b530      	push	{r4, r5, lr}
 801192e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8011932:	b087      	sub	sp, #28
 8011934:	4615      	mov	r5, r2
 8011936:	b974      	cbnz	r4, 8011956 <send_custom_msg+0x2a>
 8011938:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801193c:	f10d 0317 	add.w	r3, sp, #23
 8011940:	47a0      	blx	r4
 8011942:	b108      	cbz	r0, 8011948 <send_custom_msg+0x1c>
 8011944:	42a8      	cmp	r0, r5
 8011946:	d015      	beq.n	8011974 <send_custom_msg+0x48>
 8011948:	4b0c      	ldr	r3, [pc, #48]	@ (801197c <send_custom_msg+0x50>)
 801194a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801194e:	701a      	strb	r2, [r3, #0]
 8011950:	2000      	movs	r0, #0
 8011952:	b007      	add	sp, #28
 8011954:	bd30      	pop	{r4, r5, pc}
 8011956:	460b      	mov	r3, r1
 8011958:	2200      	movs	r2, #0
 801195a:	f10d 0117 	add.w	r1, sp, #23
 801195e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8011962:	4602      	mov	r2, r0
 8011964:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8011968:	9500      	str	r5, [sp, #0]
 801196a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801196e:	f000 feb1 	bl	80126d4 <uxr_write_framed_msg>
 8011972:	e7e6      	b.n	8011942 <send_custom_msg+0x16>
 8011974:	2001      	movs	r0, #1
 8011976:	b007      	add	sp, #28
 8011978:	bd30      	pop	{r4, r5, pc}
 801197a:	bf00      	nop
 801197c:	20010ed8 	.word	0x20010ed8

08011980 <uxr_set_custom_transport_callbacks>:
 8011980:	b410      	push	{r4}
 8011982:	9c01      	ldr	r4, [sp, #4]
 8011984:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8011988:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801198c:	9b02      	ldr	r3, [sp, #8]
 801198e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8011992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011996:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801199a:	4770      	bx	lr

0801199c <uxr_init_custom_transport>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 80119a2:	b303      	cbz	r3, 80119e6 <uxr_init_custom_transport+0x4a>
 80119a4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 80119a8:	4604      	mov	r4, r0
 80119aa:	b1e2      	cbz	r2, 80119e6 <uxr_init_custom_transport+0x4a>
 80119ac:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 80119b0:	b1ca      	cbz	r2, 80119e6 <uxr_init_custom_transport+0x4a>
 80119b2:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 80119b6:	b1b2      	cbz	r2, 80119e6 <uxr_init_custom_transport+0x4a>
 80119b8:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 80119bc:	4798      	blx	r3
 80119be:	4605      	mov	r5, r0
 80119c0:	b188      	cbz	r0, 80119e6 <uxr_init_custom_transport+0x4a>
 80119c2:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 80119c6:	b98b      	cbnz	r3, 80119ec <uxr_init_custom_transport+0x50>
 80119c8:	490b      	ldr	r1, [pc, #44]	@ (80119f8 <uxr_init_custom_transport+0x5c>)
 80119ca:	4b0c      	ldr	r3, [pc, #48]	@ (80119fc <uxr_init_custom_transport+0x60>)
 80119cc:	4a0c      	ldr	r2, [pc, #48]	@ (8011a00 <uxr_init_custom_transport+0x64>)
 80119ce:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 80119d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80119d6:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 80119da:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 80119de:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 80119e2:	4628      	mov	r0, r5
 80119e4:	bd38      	pop	{r3, r4, r5, pc}
 80119e6:	2500      	movs	r5, #0
 80119e8:	4628      	mov	r0, r5
 80119ea:	bd38      	pop	{r3, r4, r5, pc}
 80119ec:	2100      	movs	r1, #0
 80119ee:	f204 2002 	addw	r0, r4, #514	@ 0x202
 80119f2:	f000 fe69 	bl	80126c8 <uxr_init_framing_io>
 80119f6:	e7e7      	b.n	80119c8 <uxr_init_custom_transport+0x2c>
 80119f8:	0801192d 	.word	0x0801192d
 80119fc:	08011895 	.word	0x08011895
 8011a00:	08011889 	.word	0x08011889

08011a04 <uxr_close_custom_transport>:
 8011a04:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011a08:	4718      	bx	r3
 8011a0a:	bf00      	nop

08011a0c <uxr_init_input_best_effort_stream>:
 8011a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a10:	8003      	strh	r3, [r0, #0]
 8011a12:	4770      	bx	lr

08011a14 <uxr_reset_input_best_effort_stream>:
 8011a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a18:	8003      	strh	r3, [r0, #0]
 8011a1a:	4770      	bx	lr

08011a1c <uxr_receive_best_effort_message>:
 8011a1c:	b538      	push	{r3, r4, r5, lr}
 8011a1e:	4604      	mov	r4, r0
 8011a20:	8800      	ldrh	r0, [r0, #0]
 8011a22:	460d      	mov	r5, r1
 8011a24:	f000 fe38 	bl	8012698 <uxr_seq_num_cmp>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8011a30:	bfb8      	it	lt
 8011a32:	8025      	strhlt	r5, [r4, #0]
 8011a34:	bd38      	pop	{r3, r4, r5, pc}
 8011a36:	bf00      	nop

08011a38 <on_full_input_buffer>:
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	4605      	mov	r5, r0
 8011a3c:	460c      	mov	r4, r1
 8011a3e:	682b      	ldr	r3, [r5, #0]
 8011a40:	6809      	ldr	r1, [r1, #0]
 8011a42:	8920      	ldrh	r0, [r4, #8]
 8011a44:	6862      	ldr	r2, [r4, #4]
 8011a46:	fbb2 f2f0 	udiv	r2, r2, r0
 8011a4a:	eba3 0c01 	sub.w	ip, r3, r1
 8011a4e:	fbbc fcf2 	udiv	ip, ip, r2
 8011a52:	f10c 0c01 	add.w	ip, ip, #1
 8011a56:	fa1f f38c 	uxth.w	r3, ip
 8011a5a:	fbb3 f6f0 	udiv	r6, r3, r0
 8011a5e:	fb00 3316 	mls	r3, r0, r6, r3
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	fb02 f303 	mul.w	r3, r2, r3
 8011a68:	1d18      	adds	r0, r3, #4
 8011a6a:	4408      	add	r0, r1
 8011a6c:	7d26      	ldrb	r6, [r4, #20]
 8011a6e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8011a72:	b116      	cbz	r6, 8011a7a <on_full_input_buffer+0x42>
 8011a74:	2600      	movs	r6, #0
 8011a76:	f840 6c04 	str.w	r6, [r0, #-4]
 8011a7a:	2a03      	cmp	r2, #3
 8011a7c:	d801      	bhi.n	8011a82 <on_full_input_buffer+0x4a>
 8011a7e:	2001      	movs	r0, #1
 8011a80:	bd70      	pop	{r4, r5, r6, pc}
 8011a82:	3308      	adds	r3, #8
 8011a84:	4419      	add	r1, r3
 8011a86:	4628      	mov	r0, r5
 8011a88:	692b      	ldr	r3, [r5, #16]
 8011a8a:	3a04      	subs	r2, #4
 8011a8c:	f7fb f92c 	bl	800cce8 <ucdr_init_buffer_origin>
 8011a90:	4628      	mov	r0, r5
 8011a92:	4903      	ldr	r1, [pc, #12]	@ (8011aa0 <on_full_input_buffer+0x68>)
 8011a94:	4622      	mov	r2, r4
 8011a96:	f7fb f903 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	bd70      	pop	{r4, r5, r6, pc}
 8011a9e:	bf00      	nop
 8011aa0:	08011a39 	.word	0x08011a39

08011aa4 <uxr_init_input_reliable_stream>:
 8011aa4:	b500      	push	{lr}
 8011aa6:	e9c0 1200 	strd	r1, r2, [r0]
 8011aaa:	f04f 0e00 	mov.w	lr, #0
 8011aae:	9a01      	ldr	r2, [sp, #4]
 8011ab0:	8103      	strh	r3, [r0, #8]
 8011ab2:	6102      	str	r2, [r0, #16]
 8011ab4:	f880 e014 	strb.w	lr, [r0, #20]
 8011ab8:	b1d3      	cbz	r3, 8011af0 <uxr_init_input_reliable_stream+0x4c>
 8011aba:	f8c1 e000 	str.w	lr, [r1]
 8011abe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011ac2:	f1bc 0f01 	cmp.w	ip, #1
 8011ac6:	d913      	bls.n	8011af0 <uxr_init_input_reliable_stream+0x4c>
 8011ac8:	2301      	movs	r3, #1
 8011aca:	fbb3 f1fc 	udiv	r1, r3, ip
 8011ace:	fb0c 3111 	mls	r1, ip, r1, r3
 8011ad2:	b289      	uxth	r1, r1
 8011ad4:	6842      	ldr	r2, [r0, #4]
 8011ad6:	fbb2 f2fc 	udiv	r2, r2, ip
 8011ada:	fb01 f202 	mul.w	r2, r1, r2
 8011ade:	6801      	ldr	r1, [r0, #0]
 8011ae0:	f841 e002 	str.w	lr, [r1, r2]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	459c      	cmp	ip, r3
 8011aee:	d8ec      	bhi.n	8011aca <uxr_init_input_reliable_stream+0x26>
 8011af0:	f04f 33ff 	mov.w	r3, #4294967295
 8011af4:	60c3      	str	r3, [r0, #12]
 8011af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011afa:	bf00      	nop

08011afc <uxr_reset_input_reliable_stream>:
 8011afc:	8901      	ldrh	r1, [r0, #8]
 8011afe:	b1e9      	cbz	r1, 8011b3c <uxr_reset_input_reliable_stream+0x40>
 8011b00:	f04f 0c00 	mov.w	ip, #0
 8011b04:	b500      	push	{lr}
 8011b06:	4663      	mov	r3, ip
 8011b08:	46e6      	mov	lr, ip
 8011b0a:	fbb3 f2f1 	udiv	r2, r3, r1
 8011b0e:	fb01 3312 	mls	r3, r1, r2, r3
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	6842      	ldr	r2, [r0, #4]
 8011b16:	fbb2 f2f1 	udiv	r2, r2, r1
 8011b1a:	fb02 f303 	mul.w	r3, r2, r3
 8011b1e:	6802      	ldr	r2, [r0, #0]
 8011b20:	f842 e003 	str.w	lr, [r2, r3]
 8011b24:	f10c 0c01 	add.w	ip, ip, #1
 8011b28:	8901      	ldrh	r1, [r0, #8]
 8011b2a:	fa1f f38c 	uxth.w	r3, ip
 8011b2e:	4299      	cmp	r1, r3
 8011b30:	d8eb      	bhi.n	8011b0a <uxr_reset_input_reliable_stream+0xe>
 8011b32:	f04f 33ff 	mov.w	r3, #4294967295
 8011b36:	60c3      	str	r3, [r0, #12]
 8011b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b40:	60c3      	str	r3, [r0, #12]
 8011b42:	4770      	bx	lr

08011b44 <uxr_receive_reliable_message>:
 8011b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b48:	4604      	mov	r4, r0
 8011b4a:	460d      	mov	r5, r1
 8011b4c:	8901      	ldrh	r1, [r0, #8]
 8011b4e:	8980      	ldrh	r0, [r0, #12]
 8011b50:	4690      	mov	r8, r2
 8011b52:	461f      	mov	r7, r3
 8011b54:	f000 fd98 	bl	8012688 <uxr_seq_num_add>
 8011b58:	4629      	mov	r1, r5
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	89a0      	ldrh	r0, [r4, #12]
 8011b5e:	f000 fd9b 	bl	8012698 <uxr_seq_num_cmp>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	db0a      	blt.n	8011b7c <uxr_receive_reliable_message+0x38>
 8011b66:	2600      	movs	r6, #0
 8011b68:	89e0      	ldrh	r0, [r4, #14]
 8011b6a:	4629      	mov	r1, r5
 8011b6c:	f000 fd94 	bl	8012698 <uxr_seq_num_cmp>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	da00      	bge.n	8011b76 <uxr_receive_reliable_message+0x32>
 8011b74:	81e5      	strh	r5, [r4, #14]
 8011b76:	4630      	mov	r0, r6
 8011b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	4629      	mov	r1, r5
 8011b80:	f000 fd8a 	bl	8012698 <uxr_seq_num_cmp>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	dbee      	blt.n	8011b66 <uxr_receive_reliable_message+0x22>
 8011b88:	6923      	ldr	r3, [r4, #16]
 8011b8a:	4640      	mov	r0, r8
 8011b8c:	4798      	blx	r3
 8011b8e:	2101      	movs	r1, #1
 8011b90:	4681      	mov	r9, r0
 8011b92:	89a0      	ldrh	r0, [r4, #12]
 8011b94:	f000 fd78 	bl	8012688 <uxr_seq_num_add>
 8011b98:	f1b9 0f00 	cmp.w	r9, #0
 8011b9c:	d101      	bne.n	8011ba2 <uxr_receive_reliable_message+0x5e>
 8011b9e:	4285      	cmp	r5, r0
 8011ba0:	d047      	beq.n	8011c32 <uxr_receive_reliable_message+0xee>
 8011ba2:	8922      	ldrh	r2, [r4, #8]
 8011ba4:	fbb5 f0f2 	udiv	r0, r5, r2
 8011ba8:	fb02 5010 	mls	r0, r2, r0, r5
 8011bac:	b280      	uxth	r0, r0
 8011bae:	6863      	ldr	r3, [r4, #4]
 8011bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bb4:	fb00 f303 	mul.w	r3, r0, r3
 8011bb8:	6820      	ldr	r0, [r4, #0]
 8011bba:	3304      	adds	r3, #4
 8011bbc:	4418      	add	r0, r3
 8011bbe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d1cf      	bne.n	8011b66 <uxr_receive_reliable_message+0x22>
 8011bc6:	4641      	mov	r1, r8
 8011bc8:	463a      	mov	r2, r7
 8011bca:	f003 f880 	bl	8014cce <memcpy>
 8011bce:	8921      	ldrh	r1, [r4, #8]
 8011bd0:	fbb5 f2f1 	udiv	r2, r5, r1
 8011bd4:	fb01 5212 	mls	r2, r1, r2, r5
 8011bd8:	b292      	uxth	r2, r2
 8011bda:	6863      	ldr	r3, [r4, #4]
 8011bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8011be0:	fb02 f303 	mul.w	r3, r2, r3
 8011be4:	6822      	ldr	r2, [r4, #0]
 8011be6:	50d7      	str	r7, [r2, r3]
 8011be8:	9a08      	ldr	r2, [sp, #32]
 8011bea:	2301      	movs	r3, #1
 8011bec:	7013      	strb	r3, [r2, #0]
 8011bee:	f1b9 0f00 	cmp.w	r9, #0
 8011bf2:	d0b8      	beq.n	8011b66 <uxr_receive_reliable_message+0x22>
 8011bf4:	89a6      	ldrh	r6, [r4, #12]
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	2101      	movs	r1, #1
 8011bfa:	f000 fd45 	bl	8012688 <uxr_seq_num_add>
 8011bfe:	8922      	ldrh	r2, [r4, #8]
 8011c00:	6863      	ldr	r3, [r4, #4]
 8011c02:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c06:	4606      	mov	r6, r0
 8011c08:	fbb0 f0f2 	udiv	r0, r0, r2
 8011c0c:	fb02 6010 	mls	r0, r2, r0, r6
 8011c10:	b280      	uxth	r0, r0
 8011c12:	fb00 f303 	mul.w	r3, r0, r3
 8011c16:	6820      	ldr	r0, [r4, #0]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	4418      	add	r0, r3
 8011c1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d0a0      	beq.n	8011b66 <uxr_receive_reliable_message+0x22>
 8011c24:	6923      	ldr	r3, [r4, #16]
 8011c26:	4798      	blx	r3
 8011c28:	2802      	cmp	r0, #2
 8011c2a:	d008      	beq.n	8011c3e <uxr_receive_reliable_message+0xfa>
 8011c2c:	2801      	cmp	r0, #1
 8011c2e:	d0e2      	beq.n	8011bf6 <uxr_receive_reliable_message+0xb2>
 8011c30:	e799      	b.n	8011b66 <uxr_receive_reliable_message+0x22>
 8011c32:	9b08      	ldr	r3, [sp, #32]
 8011c34:	81a5      	strh	r5, [r4, #12]
 8011c36:	2601      	movs	r6, #1
 8011c38:	f883 9000 	strb.w	r9, [r3]
 8011c3c:	e794      	b.n	8011b68 <uxr_receive_reliable_message+0x24>
 8011c3e:	2601      	movs	r6, #1
 8011c40:	e792      	b.n	8011b68 <uxr_receive_reliable_message+0x24>
 8011c42:	bf00      	nop

08011c44 <uxr_next_input_reliable_buffer_available>:
 8011c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c48:	4604      	mov	r4, r0
 8011c4a:	460f      	mov	r7, r1
 8011c4c:	8980      	ldrh	r0, [r0, #12]
 8011c4e:	2101      	movs	r1, #1
 8011c50:	4690      	mov	r8, r2
 8011c52:	f000 fd19 	bl	8012688 <uxr_seq_num_add>
 8011c56:	8922      	ldrh	r2, [r4, #8]
 8011c58:	fbb0 f6f2 	udiv	r6, r0, r2
 8011c5c:	fb02 0616 	mls	r6, r2, r6, r0
 8011c60:	b2b6      	uxth	r6, r6
 8011c62:	6863      	ldr	r3, [r4, #4]
 8011c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c68:	fb06 f303 	mul.w	r3, r6, r3
 8011c6c:	6826      	ldr	r6, [r4, #0]
 8011c6e:	3304      	adds	r3, #4
 8011c70:	441e      	add	r6, r3
 8011c72:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8011c76:	f1b9 0f00 	cmp.w	r9, #0
 8011c7a:	d023      	beq.n	8011cc4 <uxr_next_input_reliable_buffer_available+0x80>
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	4605      	mov	r5, r0
 8011c80:	4630      	mov	r0, r6
 8011c82:	4798      	blx	r3
 8011c84:	4682      	mov	sl, r0
 8011c86:	b300      	cbz	r0, 8011cca <uxr_next_input_reliable_buffer_available+0x86>
 8011c88:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011c8c:	2101      	movs	r1, #1
 8011c8e:	4650      	mov	r0, sl
 8011c90:	f000 fcfa 	bl	8012688 <uxr_seq_num_add>
 8011c94:	8921      	ldrh	r1, [r4, #8]
 8011c96:	fbb0 f2f1 	udiv	r2, r0, r1
 8011c9a:	4682      	mov	sl, r0
 8011c9c:	fb01 0212 	mls	r2, r1, r2, r0
 8011ca0:	e9d4 0300 	ldrd	r0, r3, [r4]
 8011ca4:	b292      	uxth	r2, r2
 8011ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011caa:	fb02 f303 	mul.w	r3, r2, r3
 8011cae:	3304      	adds	r3, #4
 8011cb0:	4418      	add	r0, r3
 8011cb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011cb6:	b12b      	cbz	r3, 8011cc4 <uxr_next_input_reliable_buffer_available+0x80>
 8011cb8:	6923      	ldr	r3, [r4, #16]
 8011cba:	4798      	blx	r3
 8011cbc:	2802      	cmp	r0, #2
 8011cbe:	d01b      	beq.n	8011cf8 <uxr_next_input_reliable_buffer_available+0xb4>
 8011cc0:	2801      	cmp	r0, #1
 8011cc2:	d0e3      	beq.n	8011c8c <uxr_next_input_reliable_buffer_available+0x48>
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cca:	464a      	mov	r2, r9
 8011ccc:	4631      	mov	r1, r6
 8011cce:	4638      	mov	r0, r7
 8011cd0:	f7fb f812 	bl	800ccf8 <ucdr_init_buffer>
 8011cd4:	8921      	ldrh	r1, [r4, #8]
 8011cd6:	fbb5 f2f1 	udiv	r2, r5, r1
 8011cda:	fb01 5212 	mls	r2, r1, r2, r5
 8011cde:	b292      	uxth	r2, r2
 8011ce0:	6863      	ldr	r3, [r4, #4]
 8011ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ce6:	fb02 f303 	mul.w	r3, r2, r3
 8011cea:	6822      	ldr	r2, [r4, #0]
 8011cec:	f842 a003 	str.w	sl, [r2, r3]
 8011cf0:	2001      	movs	r0, #1
 8011cf2:	81a5      	strh	r5, [r4, #12]
 8011cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cf8:	8920      	ldrh	r0, [r4, #8]
 8011cfa:	fbb5 f3f0 	udiv	r3, r5, r0
 8011cfe:	fb00 5513 	mls	r5, r0, r3, r5
 8011d02:	b2ad      	uxth	r5, r5
 8011d04:	6863      	ldr	r3, [r4, #4]
 8011d06:	fbb3 f3f0 	udiv	r3, r3, r0
 8011d0a:	fb03 f505 	mul.w	r5, r3, r5
 8011d0e:	6823      	ldr	r3, [r4, #0]
 8011d10:	2000      	movs	r0, #0
 8011d12:	5158      	str	r0, [r3, r5]
 8011d14:	eb06 0108 	add.w	r1, r6, r8
 8011d18:	eba9 0208 	sub.w	r2, r9, r8
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7fa ffeb 	bl	800ccf8 <ucdr_init_buffer>
 8011d22:	4638      	mov	r0, r7
 8011d24:	4903      	ldr	r1, [pc, #12]	@ (8011d34 <uxr_next_input_reliable_buffer_available+0xf0>)
 8011d26:	4622      	mov	r2, r4
 8011d28:	f7fa ffba 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 8011d2c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8011d30:	2001      	movs	r0, #1
 8011d32:	e7c8      	b.n	8011cc6 <uxr_next_input_reliable_buffer_available+0x82>
 8011d34:	08011a39 	.word	0x08011a39

08011d38 <uxr_process_heartbeat>:
 8011d38:	b538      	push	{r3, r4, r5, lr}
 8011d3a:	4611      	mov	r1, r2
 8011d3c:	4604      	mov	r4, r0
 8011d3e:	89c0      	ldrh	r0, [r0, #14]
 8011d40:	4615      	mov	r5, r2
 8011d42:	f000 fca9 	bl	8012698 <uxr_seq_num_cmp>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	bfb8      	it	lt
 8011d4a:	81e5      	strhlt	r5, [r4, #14]
 8011d4c:	bd38      	pop	{r3, r4, r5, pc}
 8011d4e:	bf00      	nop

08011d50 <uxr_compute_acknack>:
 8011d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d54:	8903      	ldrh	r3, [r0, #8]
 8011d56:	8985      	ldrh	r5, [r0, #12]
 8011d58:	4604      	mov	r4, r0
 8011d5a:	460e      	mov	r6, r1
 8011d5c:	b1d3      	cbz	r3, 8011d94 <uxr_compute_acknack+0x44>
 8011d5e:	4628      	mov	r0, r5
 8011d60:	2701      	movs	r7, #1
 8011d62:	e003      	b.n	8011d6c <uxr_compute_acknack+0x1c>
 8011d64:	4567      	cmp	r7, ip
 8011d66:	d215      	bcs.n	8011d94 <uxr_compute_acknack+0x44>
 8011d68:	89a0      	ldrh	r0, [r4, #12]
 8011d6a:	3701      	adds	r7, #1
 8011d6c:	b2b9      	uxth	r1, r7
 8011d6e:	f000 fc8b 	bl	8012688 <uxr_seq_num_add>
 8011d72:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011d76:	fbb0 f3fc 	udiv	r3, r0, ip
 8011d7a:	fb0c 0313 	mls	r3, ip, r3, r0
 8011d7e:	b29a      	uxth	r2, r3
 8011d80:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011d84:	fbb3 f3fc 	udiv	r3, r3, ip
 8011d88:	fb02 f303 	mul.w	r3, r2, r3
 8011d8c:	58cb      	ldr	r3, [r1, r3]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1e8      	bne.n	8011d64 <uxr_compute_acknack+0x14>
 8011d92:	4605      	mov	r5, r0
 8011d94:	8035      	strh	r5, [r6, #0]
 8011d96:	2101      	movs	r1, #1
 8011d98:	4628      	mov	r0, r5
 8011d9a:	89e7      	ldrh	r7, [r4, #14]
 8011d9c:	f000 fc78 	bl	8012690 <uxr_seq_num_sub>
 8011da0:	4601      	mov	r1, r0
 8011da2:	4638      	mov	r0, r7
 8011da4:	f000 fc74 	bl	8012690 <uxr_seq_num_sub>
 8011da8:	4605      	mov	r5, r0
 8011daa:	b318      	cbz	r0, 8011df4 <uxr_compute_acknack+0xa4>
 8011dac:	f04f 0900 	mov.w	r9, #0
 8011db0:	464f      	mov	r7, r9
 8011db2:	f04f 0801 	mov.w	r8, #1
 8011db6:	fa1f f189 	uxth.w	r1, r9
 8011dba:	8830      	ldrh	r0, [r6, #0]
 8011dbc:	f000 fc64 	bl	8012688 <uxr_seq_num_add>
 8011dc0:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011dc4:	fbb0 f3fc 	udiv	r3, r0, ip
 8011dc8:	e9d4 1200 	ldrd	r1, r2, [r4]
 8011dcc:	fb03 001c 	mls	r0, r3, ip, r0
 8011dd0:	b283      	uxth	r3, r0
 8011dd2:	fbb2 f2fc 	udiv	r2, r2, ip
 8011dd6:	fb02 f303 	mul.w	r3, r2, r3
 8011dda:	fa08 f209 	lsl.w	r2, r8, r9
 8011dde:	58cb      	ldr	r3, [r1, r3]
 8011de0:	f109 0901 	add.w	r9, r9, #1
 8011de4:	b90b      	cbnz	r3, 8011dea <uxr_compute_acknack+0x9a>
 8011de6:	4317      	orrs	r7, r2
 8011de8:	b2bf      	uxth	r7, r7
 8011dea:	454d      	cmp	r5, r9
 8011dec:	d1e3      	bne.n	8011db6 <uxr_compute_acknack+0x66>
 8011dee:	4638      	mov	r0, r7
 8011df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011df4:	4607      	mov	r7, r0
 8011df6:	4638      	mov	r0, r7
 8011df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011dfc <uxr_init_output_best_effort_stream>:
 8011dfc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8011e00:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8011e04:	6001      	str	r1, [r0, #0]
 8011e06:	7303      	strb	r3, [r0, #12]
 8011e08:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011e0c:	4770      	bx	lr
 8011e0e:	bf00      	nop

08011e10 <uxr_reset_output_best_effort_stream>:
 8011e10:	7b02      	ldrb	r2, [r0, #12]
 8011e12:	6042      	str	r2, [r0, #4]
 8011e14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e18:	81c3      	strh	r3, [r0, #14]
 8011e1a:	4770      	bx	lr

08011e1c <uxr_prepare_best_effort_buffer_to_write>:
 8011e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e1e:	4604      	mov	r4, r0
 8011e20:	b083      	sub	sp, #12
 8011e22:	6840      	ldr	r0, [r0, #4]
 8011e24:	460d      	mov	r5, r1
 8011e26:	4616      	mov	r6, r2
 8011e28:	f7fc fb30 	bl	800e48c <uxr_submessage_padding>
 8011e2c:	6863      	ldr	r3, [r4, #4]
 8011e2e:	4418      	add	r0, r3
 8011e30:	68a3      	ldr	r3, [r4, #8]
 8011e32:	1942      	adds	r2, r0, r5
 8011e34:	4293      	cmp	r3, r2
 8011e36:	bf2c      	ite	cs
 8011e38:	2701      	movcs	r7, #1
 8011e3a:	2700      	movcc	r7, #0
 8011e3c:	d202      	bcs.n	8011e44 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8011e3e:	4638      	mov	r0, r7
 8011e40:	b003      	add	sp, #12
 8011e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e44:	9000      	str	r0, [sp, #0]
 8011e46:	6821      	ldr	r1, [r4, #0]
 8011e48:	4630      	mov	r0, r6
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f7fa ff42 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 8011e50:	6861      	ldr	r1, [r4, #4]
 8011e52:	4638      	mov	r0, r7
 8011e54:	4429      	add	r1, r5
 8011e56:	6061      	str	r1, [r4, #4]
 8011e58:	b003      	add	sp, #12
 8011e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e5c <uxr_prepare_best_effort_buffer_to_send>:
 8011e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e60:	4604      	mov	r4, r0
 8011e62:	461d      	mov	r5, r3
 8011e64:	6840      	ldr	r0, [r0, #4]
 8011e66:	7b23      	ldrb	r3, [r4, #12]
 8011e68:	4298      	cmp	r0, r3
 8011e6a:	bf8c      	ite	hi
 8011e6c:	2601      	movhi	r6, #1
 8011e6e:	2600      	movls	r6, #0
 8011e70:	d802      	bhi.n	8011e78 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8011e72:	4630      	mov	r0, r6
 8011e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e78:	4688      	mov	r8, r1
 8011e7a:	89e0      	ldrh	r0, [r4, #14]
 8011e7c:	2101      	movs	r1, #1
 8011e7e:	4617      	mov	r7, r2
 8011e80:	f000 fc02 	bl	8012688 <uxr_seq_num_add>
 8011e84:	6823      	ldr	r3, [r4, #0]
 8011e86:	81e0      	strh	r0, [r4, #14]
 8011e88:	8028      	strh	r0, [r5, #0]
 8011e8a:	f8c8 3000 	str.w	r3, [r8]
 8011e8e:	6863      	ldr	r3, [r4, #4]
 8011e90:	603b      	str	r3, [r7, #0]
 8011e92:	7b23      	ldrb	r3, [r4, #12]
 8011e94:	6063      	str	r3, [r4, #4]
 8011e96:	4630      	mov	r0, r6
 8011e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011e9c <on_full_output_buffer>:
 8011e9c:	b538      	push	{r3, r4, r5, lr}
 8011e9e:	6802      	ldr	r2, [r0, #0]
 8011ea0:	460c      	mov	r4, r1
 8011ea2:	6809      	ldr	r1, [r1, #0]
 8011ea4:	8923      	ldrh	r3, [r4, #8]
 8011ea6:	eba2 0c01 	sub.w	ip, r2, r1
 8011eaa:	6862      	ldr	r2, [r4, #4]
 8011eac:	fbb2 f2f3 	udiv	r2, r2, r3
 8011eb0:	fbbc fcf2 	udiv	ip, ip, r2
 8011eb4:	f10c 0c01 	add.w	ip, ip, #1
 8011eb8:	fa1f fc8c 	uxth.w	ip, ip
 8011ebc:	fbbc fef3 	udiv	lr, ip, r3
 8011ec0:	fb03 c31e 	mls	r3, r3, lr, ip
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	fb02 f303 	mul.w	r3, r2, r3
 8011eca:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8011ece:	58ca      	ldr	r2, [r1, r3]
 8011ed0:	4463      	add	r3, ip
 8011ed2:	eba2 020c 	sub.w	r2, r2, ip
 8011ed6:	3308      	adds	r3, #8
 8011ed8:	4605      	mov	r5, r0
 8011eda:	4419      	add	r1, r3
 8011edc:	3a04      	subs	r2, #4
 8011ede:	6903      	ldr	r3, [r0, #16]
 8011ee0:	f7fa ff02 	bl	800cce8 <ucdr_init_buffer_origin>
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	4903      	ldr	r1, [pc, #12]	@ (8011ef4 <on_full_output_buffer+0x58>)
 8011ee8:	4622      	mov	r2, r4
 8011eea:	f7fa fed9 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 8011eee:	2000      	movs	r0, #0
 8011ef0:	bd38      	pop	{r3, r4, r5, pc}
 8011ef2:	bf00      	nop
 8011ef4:	08011e9d 	.word	0x08011e9d

08011ef8 <uxr_init_output_reliable_stream>:
 8011ef8:	b410      	push	{r4}
 8011efa:	f89d c004 	ldrb.w	ip, [sp, #4]
 8011efe:	8103      	strh	r3, [r0, #8]
 8011f00:	e9c0 1200 	strd	r1, r2, [r0]
 8011f04:	f880 c00c 	strb.w	ip, [r0, #12]
 8011f08:	b1d3      	cbz	r3, 8011f40 <uxr_init_output_reliable_stream+0x48>
 8011f0a:	f8c1 c000 	str.w	ip, [r1]
 8011f0e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011f12:	f1bc 0f01 	cmp.w	ip, #1
 8011f16:	d913      	bls.n	8011f40 <uxr_init_output_reliable_stream+0x48>
 8011f18:	2301      	movs	r3, #1
 8011f1a:	fbb3 f1fc 	udiv	r1, r3, ip
 8011f1e:	fb0c 3111 	mls	r1, ip, r1, r3
 8011f22:	b289      	uxth	r1, r1
 8011f24:	6842      	ldr	r2, [r0, #4]
 8011f26:	6804      	ldr	r4, [r0, #0]
 8011f28:	fbb2 f2fc 	udiv	r2, r2, ip
 8011f2c:	fb01 f202 	mul.w	r2, r1, r2
 8011f30:	7b01      	ldrb	r1, [r0, #12]
 8011f32:	50a1      	str	r1, [r4, r2]
 8011f34:	3301      	adds	r3, #1
 8011f36:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	459c      	cmp	ip, r3
 8011f3e:	d8ec      	bhi.n	8011f1a <uxr_init_output_reliable_stream+0x22>
 8011f40:	f04f 32ff 	mov.w	r2, #4294967295
 8011f44:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011f48:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011f4c:	4905      	ldr	r1, [pc, #20]	@ (8011f64 <uxr_init_output_reliable_stream+0x6c>)
 8011f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f52:	f8c0 100e 	str.w	r1, [r0, #14]
 8011f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	8242      	strh	r2, [r0, #18]
 8011f5e:	8403      	strh	r3, [r0, #32]
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop
 8011f64:	ffff0000 	.word	0xffff0000

08011f68 <uxr_reset_output_reliable_stream>:
 8011f68:	8901      	ldrh	r1, [r0, #8]
 8011f6a:	b1b1      	cbz	r1, 8011f9a <uxr_reset_output_reliable_stream+0x32>
 8011f6c:	f04f 0c00 	mov.w	ip, #0
 8011f70:	4663      	mov	r3, ip
 8011f72:	fbb3 f2f1 	udiv	r2, r3, r1
 8011f76:	fb01 3312 	mls	r3, r1, r2, r3
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	6842      	ldr	r2, [r0, #4]
 8011f7e:	fbb2 f2f1 	udiv	r2, r2, r1
 8011f82:	6801      	ldr	r1, [r0, #0]
 8011f84:	fb02 f303 	mul.w	r3, r2, r3
 8011f88:	7b02      	ldrb	r2, [r0, #12]
 8011f8a:	50ca      	str	r2, [r1, r3]
 8011f8c:	f10c 0c01 	add.w	ip, ip, #1
 8011f90:	8901      	ldrh	r1, [r0, #8]
 8011f92:	fa1f f38c 	uxth.w	r3, ip
 8011f96:	4299      	cmp	r1, r3
 8011f98:	d8eb      	bhi.n	8011f72 <uxr_reset_output_reliable_stream+0xa>
 8011f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f9e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011fa2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011fa6:	4904      	ldr	r1, [pc, #16]	@ (8011fb8 <uxr_reset_output_reliable_stream+0x50>)
 8011fa8:	f8c0 100e 	str.w	r1, [r0, #14]
 8011fac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	8242      	strh	r2, [r0, #18]
 8011fb4:	8403      	strh	r3, [r0, #32]
 8011fb6:	4770      	bx	lr
 8011fb8:	ffff0000 	.word	0xffff0000

08011fbc <uxr_prepare_reliable_buffer_to_write>:
 8011fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc0:	4604      	mov	r4, r0
 8011fc2:	b091      	sub	sp, #68	@ 0x44
 8011fc4:	8900      	ldrh	r0, [r0, #8]
 8011fc6:	89e6      	ldrh	r6, [r4, #14]
 8011fc8:	6823      	ldr	r3, [r4, #0]
 8011fca:	9204      	str	r2, [sp, #16]
 8011fcc:	fbb6 f2f0 	udiv	r2, r6, r0
 8011fd0:	fb00 6212 	mls	r2, r0, r2, r6
 8011fd4:	b292      	uxth	r2, r2
 8011fd6:	6865      	ldr	r5, [r4, #4]
 8011fd8:	fbb5 f5f0 	udiv	r5, r5, r0
 8011fdc:	fb05 3202 	mla	r2, r5, r2, r3
 8011fe0:	3204      	adds	r2, #4
 8011fe2:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8011fe6:	f894 900c 	ldrb.w	r9, [r4, #12]
 8011fea:	9203      	str	r2, [sp, #12]
 8011fec:	468b      	mov	fp, r1
 8011fee:	1f2f      	subs	r7, r5, #4
 8011ff0:	2800      	cmp	r0, #0
 8011ff2:	f000 814c 	beq.w	801228e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8011ff6:	f04f 0c00 	mov.w	ip, #0
 8011ffa:	46e2      	mov	sl, ip
 8011ffc:	4661      	mov	r1, ip
 8011ffe:	fbb1 f2f0 	udiv	r2, r1, r0
 8012002:	fb00 1212 	mls	r2, r0, r2, r1
 8012006:	b292      	uxth	r2, r2
 8012008:	fb05 f202 	mul.w	r2, r5, r2
 801200c:	f10c 0c01 	add.w	ip, ip, #1
 8012010:	589a      	ldr	r2, [r3, r2]
 8012012:	454a      	cmp	r2, r9
 8012014:	bf08      	it	eq
 8012016:	f10a 0a01 	addeq.w	sl, sl, #1
 801201a:	fa1f f18c 	uxth.w	r1, ip
 801201e:	bf08      	it	eq
 8012020:	fa1f fa8a 	uxtheq.w	sl, sl
 8012024:	4281      	cmp	r1, r0
 8012026:	d3ea      	bcc.n	8011ffe <uxr_prepare_reliable_buffer_to_write+0x42>
 8012028:	4640      	mov	r0, r8
 801202a:	2104      	movs	r1, #4
 801202c:	f8cd a014 	str.w	sl, [sp, #20]
 8012030:	f7fa fe66 	bl	800cd00 <ucdr_alignment>
 8012034:	4480      	add	r8, r0
 8012036:	eb08 020b 	add.w	r2, r8, fp
 801203a:	42ba      	cmp	r2, r7
 801203c:	f240 80cd 	bls.w	80121da <uxr_prepare_reliable_buffer_to_write+0x21e>
 8012040:	7b22      	ldrb	r2, [r4, #12]
 8012042:	445a      	add	r2, fp
 8012044:	42ba      	cmp	r2, r7
 8012046:	f240 80b5 	bls.w	80121b4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801204a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 801204e:	33fc      	adds	r3, #252	@ 0xfc
 8012050:	b2ba      	uxth	r2, r7
 8012052:	4413      	add	r3, r2
 8012054:	b29b      	uxth	r3, r3
 8012056:	fb0a f903 	mul.w	r9, sl, r3
 801205a:	45d9      	cmp	r9, fp
 801205c:	9305      	str	r3, [sp, #20]
 801205e:	9306      	str	r3, [sp, #24]
 8012060:	f0c0 80b7 	bcc.w	80121d2 <uxr_prepare_reliable_buffer_to_write+0x216>
 8012064:	f108 0304 	add.w	r3, r8, #4
 8012068:	42bb      	cmp	r3, r7
 801206a:	f080 80db 	bcs.w	8012224 <uxr_prepare_reliable_buffer_to_write+0x268>
 801206e:	f1a2 0904 	sub.w	r9, r2, #4
 8012072:	eba9 0908 	sub.w	r9, r9, r8
 8012076:	9b05      	ldr	r3, [sp, #20]
 8012078:	fa1f f989 	uxth.w	r9, r9
 801207c:	ebab 0b09 	sub.w	fp, fp, r9
 8012080:	fbbb f2f3 	udiv	r2, fp, r3
 8012084:	fb03 b312 	mls	r3, r3, r2, fp
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 80c8 	beq.w	801221e <uxr_prepare_reliable_buffer_to_write+0x262>
 801208e:	3201      	adds	r2, #1
 8012090:	b292      	uxth	r2, r2
 8012092:	9306      	str	r3, [sp, #24]
 8012094:	4552      	cmp	r2, sl
 8012096:	f200 809c 	bhi.w	80121d2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801209a:	f10d 0b20 	add.w	fp, sp, #32
 801209e:	2a00      	cmp	r2, #0
 80120a0:	d042      	beq.n	8012128 <uxr_prepare_reliable_buffer_to_write+0x16c>
 80120a2:	f8cd 801c 	str.w	r8, [sp, #28]
 80120a6:	f04f 0a00 	mov.w	sl, #0
 80120aa:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80120ae:	9505      	str	r5, [sp, #20]
 80120b0:	f10d 0b20 	add.w	fp, sp, #32
 80120b4:	4615      	mov	r5, r2
 80120b6:	e000      	b.n	80120ba <uxr_prepare_reliable_buffer_to_write+0xfe>
 80120b8:	46c1      	mov	r9, r8
 80120ba:	8920      	ldrh	r0, [r4, #8]
 80120bc:	fbb6 f2f0 	udiv	r2, r6, r0
 80120c0:	fb00 6112 	mls	r1, r0, r2, r6
 80120c4:	b28a      	uxth	r2, r1
 80120c6:	6863      	ldr	r3, [r4, #4]
 80120c8:	fbb3 f1f0 	udiv	r1, r3, r0
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	fb02 f101 	mul.w	r1, r2, r1
 80120d2:	3104      	adds	r1, #4
 80120d4:	4419      	add	r1, r3
 80120d6:	4658      	mov	r0, fp
 80120d8:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80120dc:	9200      	str	r2, [sp, #0]
 80120de:	2300      	movs	r3, #0
 80120e0:	463a      	mov	r2, r7
 80120e2:	f7fa fdf7 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 80120e6:	464a      	mov	r2, r9
 80120e8:	2300      	movs	r3, #0
 80120ea:	210d      	movs	r1, #13
 80120ec:	4658      	mov	r0, fp
 80120ee:	f7fc f98d 	bl	800e40c <uxr_buffer_submessage_header>
 80120f2:	8921      	ldrh	r1, [r4, #8]
 80120f4:	fbb6 f2f1 	udiv	r2, r6, r1
 80120f8:	fb01 6212 	mls	r2, r1, r2, r6
 80120fc:	b292      	uxth	r2, r2
 80120fe:	6863      	ldr	r3, [r4, #4]
 8012100:	fbb3 f3f1 	udiv	r3, r3, r1
 8012104:	fb02 f303 	mul.w	r3, r2, r3
 8012108:	6822      	ldr	r2, [r4, #0]
 801210a:	4630      	mov	r0, r6
 801210c:	50d7      	str	r7, [r2, r3]
 801210e:	2101      	movs	r1, #1
 8012110:	f000 faba 	bl	8012688 <uxr_seq_num_add>
 8012114:	f10a 0a01 	add.w	sl, sl, #1
 8012118:	fa1f f38a 	uxth.w	r3, sl
 801211c:	429d      	cmp	r5, r3
 801211e:	4606      	mov	r6, r0
 8012120:	d8ca      	bhi.n	80120b8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8012122:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8012126:	9d05      	ldr	r5, [sp, #20]
 8012128:	8920      	ldrh	r0, [r4, #8]
 801212a:	fbb6 f3f0 	udiv	r3, r6, r0
 801212e:	fb00 6313 	mls	r3, r0, r3, r6
 8012132:	b299      	uxth	r1, r3
 8012134:	6863      	ldr	r3, [r4, #4]
 8012136:	fbb3 f3f0 	udiv	r3, r3, r0
 801213a:	fb01 f303 	mul.w	r3, r1, r3
 801213e:	6821      	ldr	r1, [r4, #0]
 8012140:	3304      	adds	r3, #4
 8012142:	4419      	add	r1, r3
 8012144:	463a      	mov	r2, r7
 8012146:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801214a:	9000      	str	r0, [sp, #0]
 801214c:	2300      	movs	r3, #0
 801214e:	4658      	mov	r0, fp
 8012150:	f7fa fdc0 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 8012154:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8012158:	4658      	mov	r0, fp
 801215a:	fa1f f289 	uxth.w	r2, r9
 801215e:	2302      	movs	r3, #2
 8012160:	210d      	movs	r1, #13
 8012162:	f7fc f953 	bl	800e40c <uxr_buffer_submessage_header>
 8012166:	9b03      	ldr	r3, [sp, #12]
 8012168:	8927      	ldrh	r7, [r4, #8]
 801216a:	7b20      	ldrb	r0, [r4, #12]
 801216c:	f108 0104 	add.w	r1, r8, #4
 8012170:	440b      	add	r3, r1
 8012172:	4619      	mov	r1, r3
 8012174:	fbb6 f3f7 	udiv	r3, r6, r7
 8012178:	fb07 6313 	mls	r3, r7, r3, r6
 801217c:	f1a5 0208 	sub.w	r2, r5, #8
 8012180:	b29d      	uxth	r5, r3
 8012182:	3004      	adds	r0, #4
 8012184:	6863      	ldr	r3, [r4, #4]
 8012186:	fbb3 f3f7 	udiv	r3, r3, r7
 801218a:	fb05 f303 	mul.w	r3, r5, r3
 801218e:	6825      	ldr	r5, [r4, #0]
 8012190:	4448      	add	r0, r9
 8012192:	50e8      	str	r0, [r5, r3]
 8012194:	9d04      	ldr	r5, [sp, #16]
 8012196:	eba2 0208 	sub.w	r2, r2, r8
 801219a:	4628      	mov	r0, r5
 801219c:	f7fa fdac 	bl	800ccf8 <ucdr_init_buffer>
 80121a0:	4628      	mov	r0, r5
 80121a2:	493c      	ldr	r1, [pc, #240]	@ (8012294 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80121a4:	4622      	mov	r2, r4
 80121a6:	f7fa fd7b 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 80121aa:	2001      	movs	r0, #1
 80121ac:	81e6      	strh	r6, [r4, #14]
 80121ae:	b011      	add	sp, #68	@ 0x44
 80121b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b4:	2101      	movs	r1, #1
 80121b6:	89e0      	ldrh	r0, [r4, #14]
 80121b8:	f000 fa66 	bl	8012688 <uxr_seq_num_add>
 80121bc:	8921      	ldrh	r1, [r4, #8]
 80121be:	4605      	mov	r5, r0
 80121c0:	8a60      	ldrh	r0, [r4, #18]
 80121c2:	f000 fa61 	bl	8012688 <uxr_seq_num_add>
 80121c6:	4601      	mov	r1, r0
 80121c8:	4628      	mov	r0, r5
 80121ca:	f000 fa65 	bl	8012698 <uxr_seq_num_cmp>
 80121ce:	2800      	cmp	r0, #0
 80121d0:	dd42      	ble.n	8012258 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80121d2:	2000      	movs	r0, #0
 80121d4:	b011      	add	sp, #68	@ 0x44
 80121d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121da:	8921      	ldrh	r1, [r4, #8]
 80121dc:	8a60      	ldrh	r0, [r4, #18]
 80121de:	9205      	str	r2, [sp, #20]
 80121e0:	f000 fa52 	bl	8012688 <uxr_seq_num_add>
 80121e4:	4601      	mov	r1, r0
 80121e6:	4630      	mov	r0, r6
 80121e8:	f000 fa56 	bl	8012698 <uxr_seq_num_cmp>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	9a05      	ldr	r2, [sp, #20]
 80121f0:	dcef      	bgt.n	80121d2 <uxr_prepare_reliable_buffer_to_write+0x216>
 80121f2:	8927      	ldrh	r7, [r4, #8]
 80121f4:	fbb6 f3f7 	udiv	r3, r6, r7
 80121f8:	fb07 6313 	mls	r3, r7, r3, r6
 80121fc:	b29d      	uxth	r5, r3
 80121fe:	6863      	ldr	r3, [r4, #4]
 8012200:	6824      	ldr	r4, [r4, #0]
 8012202:	fbb3 f3f7 	udiv	r3, r3, r7
 8012206:	fb05 f303 	mul.w	r3, r5, r3
 801220a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801220e:	50e2      	str	r2, [r4, r3]
 8012210:	2300      	movs	r3, #0
 8012212:	f8cd 8000 	str.w	r8, [sp]
 8012216:	f7fa fd5d 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 801221a:	2001      	movs	r0, #1
 801221c:	e7da      	b.n	80121d4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801221e:	b293      	uxth	r3, r2
 8012220:	461a      	mov	r2, r3
 8012222:	e737      	b.n	8012094 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8012224:	4630      	mov	r0, r6
 8012226:	2101      	movs	r1, #1
 8012228:	9207      	str	r2, [sp, #28]
 801222a:	f000 fa2d 	bl	8012688 <uxr_seq_num_add>
 801222e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012232:	fbb0 f1fc 	udiv	r1, r0, ip
 8012236:	fb0c 0111 	mls	r1, ip, r1, r0
 801223a:	4606      	mov	r6, r0
 801223c:	b288      	uxth	r0, r1
 801223e:	6863      	ldr	r3, [r4, #4]
 8012240:	fbb3 f1fc 	udiv	r1, r3, ip
 8012244:	6823      	ldr	r3, [r4, #0]
 8012246:	9a07      	ldr	r2, [sp, #28]
 8012248:	fb00 f101 	mul.w	r1, r0, r1
 801224c:	3104      	adds	r1, #4
 801224e:	440b      	add	r3, r1
 8012250:	9303      	str	r3, [sp, #12]
 8012252:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8012256:	e70a      	b.n	801206e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8012258:	8921      	ldrh	r1, [r4, #8]
 801225a:	fbb5 f3f1 	udiv	r3, r5, r1
 801225e:	fb01 5313 	mls	r3, r1, r3, r5
 8012262:	b29a      	uxth	r2, r3
 8012264:	6863      	ldr	r3, [r4, #4]
 8012266:	fbb3 f3f1 	udiv	r3, r3, r1
 801226a:	6821      	ldr	r1, [r4, #0]
 801226c:	9804      	ldr	r0, [sp, #16]
 801226e:	fb02 f303 	mul.w	r3, r2, r3
 8012272:	3304      	adds	r3, #4
 8012274:	7b22      	ldrb	r2, [r4, #12]
 8012276:	4419      	add	r1, r3
 8012278:	445a      	add	r2, fp
 801227a:	f841 2c04 	str.w	r2, [r1, #-4]
 801227e:	7b23      	ldrb	r3, [r4, #12]
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	2300      	movs	r3, #0
 8012284:	f7fa fd26 	bl	800ccd4 <ucdr_init_buffer_origin_offset>
 8012288:	81e5      	strh	r5, [r4, #14]
 801228a:	2001      	movs	r0, #1
 801228c:	e7a2      	b.n	80121d4 <uxr_prepare_reliable_buffer_to_write+0x218>
 801228e:	4682      	mov	sl, r0
 8012290:	e6ca      	b.n	8012028 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8012292:	bf00      	nop
 8012294:	08011e9d 	.word	0x08011e9d

08012298 <uxr_prepare_next_reliable_buffer_to_send>:
 8012298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229a:	4604      	mov	r4, r0
 801229c:	460f      	mov	r7, r1
 801229e:	8a00      	ldrh	r0, [r0, #16]
 80122a0:	2101      	movs	r1, #1
 80122a2:	4616      	mov	r6, r2
 80122a4:	461d      	mov	r5, r3
 80122a6:	f000 f9ef 	bl	8012688 <uxr_seq_num_add>
 80122aa:	8028      	strh	r0, [r5, #0]
 80122ac:	8922      	ldrh	r2, [r4, #8]
 80122ae:	fbb0 f3f2 	udiv	r3, r0, r2
 80122b2:	fb02 0c13 	mls	ip, r2, r3, r0
 80122b6:	fa1f fc8c 	uxth.w	ip, ip
 80122ba:	6863      	ldr	r3, [r4, #4]
 80122bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80122c0:	fb0c fc03 	mul.w	ip, ip, r3
 80122c4:	6823      	ldr	r3, [r4, #0]
 80122c6:	89e1      	ldrh	r1, [r4, #14]
 80122c8:	f10c 0c04 	add.w	ip, ip, #4
 80122cc:	4463      	add	r3, ip
 80122ce:	603b      	str	r3, [r7, #0]
 80122d0:	6823      	ldr	r3, [r4, #0]
 80122d2:	449c      	add	ip, r3
 80122d4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80122d8:	6033      	str	r3, [r6, #0]
 80122da:	f000 f9dd 	bl	8012698 <uxr_seq_num_cmp>
 80122de:	2800      	cmp	r0, #0
 80122e0:	dd01      	ble.n	80122e6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80122e2:	2000      	movs	r0, #0
 80122e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e6:	7b23      	ldrb	r3, [r4, #12]
 80122e8:	6832      	ldr	r2, [r6, #0]
 80122ea:	429a      	cmp	r2, r3
 80122ec:	d9f9      	bls.n	80122e2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80122ee:	8a61      	ldrh	r1, [r4, #18]
 80122f0:	8a20      	ldrh	r0, [r4, #16]
 80122f2:	f000 f9cd 	bl	8012690 <uxr_seq_num_sub>
 80122f6:	8923      	ldrh	r3, [r4, #8]
 80122f8:	4283      	cmp	r3, r0
 80122fa:	d0f2      	beq.n	80122e2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80122fc:	8828      	ldrh	r0, [r5, #0]
 80122fe:	89e3      	ldrh	r3, [r4, #14]
 8012300:	8220      	strh	r0, [r4, #16]
 8012302:	4298      	cmp	r0, r3
 8012304:	d001      	beq.n	801230a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8012306:	2001      	movs	r0, #1
 8012308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801230a:	2101      	movs	r1, #1
 801230c:	f000 f9bc 	bl	8012688 <uxr_seq_num_add>
 8012310:	81e0      	strh	r0, [r4, #14]
 8012312:	2001      	movs	r0, #1
 8012314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012316:	bf00      	nop

08012318 <uxr_update_output_stream_heartbeat_timestamp>:
 8012318:	b570      	push	{r4, r5, r6, lr}
 801231a:	8a01      	ldrh	r1, [r0, #16]
 801231c:	4604      	mov	r4, r0
 801231e:	8a40      	ldrh	r0, [r0, #18]
 8012320:	4615      	mov	r5, r2
 8012322:	461e      	mov	r6, r3
 8012324:	f000 f9b8 	bl	8012698 <uxr_seq_num_cmp>
 8012328:	2800      	cmp	r0, #0
 801232a:	db07      	blt.n	801233c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801232c:	f04f 32ff 	mov.w	r2, #4294967295
 8012330:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012334:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8012338:	2000      	movs	r0, #0
 801233a:	bd70      	pop	{r4, r5, r6, pc}
 801233c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8012340:	b940      	cbnz	r0, 8012354 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8012342:	2301      	movs	r3, #1
 8012344:	f884 3020 	strb.w	r3, [r4, #32]
 8012348:	3564      	adds	r5, #100	@ 0x64
 801234a:	f146 0600 	adc.w	r6, r6, #0
 801234e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012352:	bd70      	pop	{r4, r5, r6, pc}
 8012354:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8012358:	4295      	cmp	r5, r2
 801235a:	eb76 0303 	sbcs.w	r3, r6, r3
 801235e:	bfa5      	ittet	ge
 8012360:	3001      	addge	r0, #1
 8012362:	f884 0020 	strbge.w	r0, [r4, #32]
 8012366:	2000      	movlt	r0, #0
 8012368:	2001      	movge	r0, #1
 801236a:	e7ed      	b.n	8012348 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801236c <uxr_begin_output_nack_buffer_it>:
 801236c:	8a40      	ldrh	r0, [r0, #18]
 801236e:	4770      	bx	lr

08012370 <uxr_next_reliable_nack_buffer_to_send>:
 8012370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012374:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8012378:	b082      	sub	sp, #8
 801237a:	f1b8 0f00 	cmp.w	r8, #0
 801237e:	d011      	beq.n	80123a4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8012380:	4604      	mov	r4, r0
 8012382:	8818      	ldrh	r0, [r3, #0]
 8012384:	460e      	mov	r6, r1
 8012386:	4617      	mov	r7, r2
 8012388:	461d      	mov	r5, r3
 801238a:	2101      	movs	r1, #1
 801238c:	f000 f97c 	bl	8012688 <uxr_seq_num_add>
 8012390:	8028      	strh	r0, [r5, #0]
 8012392:	8a21      	ldrh	r1, [r4, #16]
 8012394:	f000 f980 	bl	8012698 <uxr_seq_num_cmp>
 8012398:	2800      	cmp	r0, #0
 801239a:	dd07      	ble.n	80123ac <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801239c:	f04f 0800 	mov.w	r8, #0
 80123a0:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 80123a4:	4640      	mov	r0, r8
 80123a6:	b002      	add	sp, #8
 80123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ac:	8921      	ldrh	r1, [r4, #8]
 80123ae:	8828      	ldrh	r0, [r5, #0]
 80123b0:	6823      	ldr	r3, [r4, #0]
 80123b2:	fbb0 f2f1 	udiv	r2, r0, r1
 80123b6:	fb01 0c12 	mls	ip, r1, r2, r0
 80123ba:	fa1f f28c 	uxth.w	r2, ip
 80123be:	9301      	str	r3, [sp, #4]
 80123c0:	6863      	ldr	r3, [r4, #4]
 80123c2:	fbb3 fcf1 	udiv	ip, r3, r1
 80123c6:	9b01      	ldr	r3, [sp, #4]
 80123c8:	fb02 fc0c 	mul.w	ip, r2, ip
 80123cc:	f10c 0c04 	add.w	ip, ip, #4
 80123d0:	4463      	add	r3, ip
 80123d2:	6033      	str	r3, [r6, #0]
 80123d4:	6823      	ldr	r3, [r4, #0]
 80123d6:	4463      	add	r3, ip
 80123d8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80123dc:	603b      	str	r3, [r7, #0]
 80123de:	7b22      	ldrb	r2, [r4, #12]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d0d2      	beq.n	801238a <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80123e4:	4640      	mov	r0, r8
 80123e6:	b002      	add	sp, #8
 80123e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080123ec <uxr_process_acknack>:
 80123ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ee:	4604      	mov	r4, r0
 80123f0:	460e      	mov	r6, r1
 80123f2:	4610      	mov	r0, r2
 80123f4:	2101      	movs	r1, #1
 80123f6:	f000 f94b 	bl	8012690 <uxr_seq_num_sub>
 80123fa:	8a61      	ldrh	r1, [r4, #18]
 80123fc:	f000 f948 	bl	8012690 <uxr_seq_num_sub>
 8012400:	b1c0      	cbz	r0, 8012434 <uxr_process_acknack+0x48>
 8012402:	4605      	mov	r5, r0
 8012404:	2700      	movs	r7, #0
 8012406:	2101      	movs	r1, #1
 8012408:	8a60      	ldrh	r0, [r4, #18]
 801240a:	f000 f93d 	bl	8012688 <uxr_seq_num_add>
 801240e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8012412:	fbb0 f1fc 	udiv	r1, r0, ip
 8012416:	e9d4 2300 	ldrd	r2, r3, [r4]
 801241a:	fb0c 0111 	mls	r1, ip, r1, r0
 801241e:	b289      	uxth	r1, r1
 8012420:	3701      	adds	r7, #1
 8012422:	fbb3 f3fc 	udiv	r3, r3, ip
 8012426:	fb01 f303 	mul.w	r3, r1, r3
 801242a:	42bd      	cmp	r5, r7
 801242c:	7b21      	ldrb	r1, [r4, #12]
 801242e:	8260      	strh	r0, [r4, #18]
 8012430:	50d1      	str	r1, [r2, r3]
 8012432:	d1e8      	bne.n	8012406 <uxr_process_acknack+0x1a>
 8012434:	3e00      	subs	r6, #0
 8012436:	f04f 0300 	mov.w	r3, #0
 801243a:	bf18      	it	ne
 801243c:	2601      	movne	r6, #1
 801243e:	f884 3020 	strb.w	r3, [r4, #32]
 8012442:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8012446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012448 <uxr_is_output_up_to_date>:
 8012448:	8a01      	ldrh	r1, [r0, #16]
 801244a:	8a40      	ldrh	r0, [r0, #18]
 801244c:	b508      	push	{r3, lr}
 801244e:	f000 f923 	bl	8012698 <uxr_seq_num_cmp>
 8012452:	fab0 f080 	clz	r0, r0
 8012456:	0940      	lsrs	r0, r0, #5
 8012458:	bd08      	pop	{r3, pc}
 801245a:	bf00      	nop

0801245c <get_available_free_slots>:
 801245c:	8902      	ldrh	r2, [r0, #8]
 801245e:	b1da      	cbz	r2, 8012498 <get_available_free_slots+0x3c>
 8012460:	b530      	push	{r4, r5, lr}
 8012462:	2100      	movs	r1, #0
 8012464:	6843      	ldr	r3, [r0, #4]
 8012466:	6805      	ldr	r5, [r0, #0]
 8012468:	7b04      	ldrb	r4, [r0, #12]
 801246a:	fbb3 fef2 	udiv	lr, r3, r2
 801246e:	4608      	mov	r0, r1
 8012470:	460b      	mov	r3, r1
 8012472:	fbb3 fcf2 	udiv	ip, r3, r2
 8012476:	fb02 331c 	mls	r3, r2, ip, r3
 801247a:	b29b      	uxth	r3, r3
 801247c:	fb0e f303 	mul.w	r3, lr, r3
 8012480:	3101      	adds	r1, #1
 8012482:	f855 c003 	ldr.w	ip, [r5, r3]
 8012486:	4564      	cmp	r4, ip
 8012488:	bf08      	it	eq
 801248a:	3001      	addeq	r0, #1
 801248c:	b28b      	uxth	r3, r1
 801248e:	bf08      	it	eq
 8012490:	b280      	uxtheq	r0, r0
 8012492:	4293      	cmp	r3, r2
 8012494:	d3ed      	bcc.n	8012472 <get_available_free_slots+0x16>
 8012496:	bd30      	pop	{r4, r5, pc}
 8012498:	4610      	mov	r0, r2
 801249a:	4770      	bx	lr

0801249c <uxr_buffer_cancel_data>:
 801249c:	b510      	push	{r4, lr}
 801249e:	b094      	sub	sp, #80	@ 0x50
 80124a0:	2300      	movs	r3, #0
 80124a2:	9202      	str	r2, [sp, #8]
 80124a4:	9205      	str	r2, [sp, #20]
 80124a6:	9301      	str	r3, [sp, #4]
 80124a8:	2201      	movs	r2, #1
 80124aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80124ae:	f88d 301e 	strb.w	r3, [sp, #30]
 80124b2:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80124b6:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80124ba:	2308      	movs	r3, #8
 80124bc:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80124c0:	9300      	str	r3, [sp, #0]
 80124c2:	2210      	movs	r2, #16
 80124c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80124c6:	4604      	mov	r4, r0
 80124c8:	9103      	str	r1, [sp, #12]
 80124ca:	f7fb fd01 	bl	800ded0 <uxr_prepare_stream_to_write_submessage>
 80124ce:	b918      	cbnz	r0, 80124d8 <uxr_buffer_cancel_data+0x3c>
 80124d0:	4604      	mov	r4, r0
 80124d2:	4620      	mov	r0, r4
 80124d4:	b014      	add	sp, #80	@ 0x50
 80124d6:	bd10      	pop	{r4, pc}
 80124d8:	9905      	ldr	r1, [sp, #20]
 80124da:	aa06      	add	r2, sp, #24
 80124dc:	4620      	mov	r0, r4
 80124de:	f7fb fe2d 	bl	800e13c <uxr_init_base_object_request>
 80124e2:	a906      	add	r1, sp, #24
 80124e4:	4604      	mov	r4, r0
 80124e6:	a80c      	add	r0, sp, #48	@ 0x30
 80124e8:	f7fd f83c 	bl	800f564 <uxr_serialize_READ_DATA_Payload>
 80124ec:	4620      	mov	r0, r4
 80124ee:	b014      	add	sp, #80	@ 0x50
 80124f0:	bd10      	pop	{r4, pc}
 80124f2:	bf00      	nop

080124f4 <read_submessage_format>:
 80124f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124f8:	b095      	sub	sp, #84	@ 0x54
 80124fa:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 80124fe:	b113      	cbz	r3, 8012506 <read_submessage_format+0x12>
 8012500:	b015      	add	sp, #84	@ 0x54
 8012502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012506:	460c      	mov	r4, r1
 8012508:	4615      	mov	r5, r2
 801250a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801250e:	4607      	mov	r7, r0
 8012510:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8012512:	9004      	str	r0, [sp, #16]
 8012514:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012516:	9005      	str	r0, [sp, #20]
 8012518:	1a52      	subs	r2, r2, r1
 801251a:	a80c      	add	r0, sp, #48	@ 0x30
 801251c:	4699      	mov	r9, r3
 801251e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8012522:	f7fa fbe9 	bl	800ccf8 <ucdr_init_buffer>
 8012526:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801252a:	a80c      	add	r0, sp, #48	@ 0x30
 801252c:	f7fa fbb8 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 8012530:	69e2      	ldr	r2, [r4, #28]
 8012532:	b19a      	cbz	r2, 801255c <read_submessage_format+0x68>
 8012534:	f1b8 0f07 	cmp.w	r8, #7
 8012538:	f882 9014 	strb.w	r9, [r2, #20]
 801253c:	d040      	beq.n	80125c0 <read_submessage_format+0xcc>
 801253e:	f1b8 0f08 	cmp.w	r8, #8
 8012542:	d02e      	beq.n	80125a2 <read_submessage_format+0xae>
 8012544:	f1b8 0f06 	cmp.w	r8, #6
 8012548:	d011      	beq.n	801256e <read_submessage_format+0x7a>
 801254a:	2301      	movs	r3, #1
 801254c:	7513      	strb	r3, [r2, #20]
 801254e:	4629      	mov	r1, r5
 8012550:	4620      	mov	r0, r4
 8012552:	f7fa fc21 	bl	800cd98 <ucdr_advance_buffer>
 8012556:	b015      	add	sp, #84	@ 0x54
 8012558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801255c:	f1b8 0f07 	cmp.w	r8, #7
 8012560:	d02e      	beq.n	80125c0 <read_submessage_format+0xcc>
 8012562:	f1b8 0f08 	cmp.w	r8, #8
 8012566:	d01c      	beq.n	80125a2 <read_submessage_format+0xae>
 8012568:	f1b8 0f06 	cmp.w	r8, #6
 801256c:	d1ef      	bne.n	801254e <read_submessage_format+0x5a>
 801256e:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8012572:	f1b8 0f00 	cmp.w	r8, #0
 8012576:	d011      	beq.n	801259c <read_submessage_format+0xa8>
 8012578:	ab0c      	add	r3, sp, #48	@ 0x30
 801257a:	e9cd 3500 	strd	r3, r5, [sp]
 801257e:	2306      	movs	r3, #6
 8012580:	f88d 3016 	strb.w	r3, [sp, #22]
 8012584:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012588:	9302      	str	r3, [sp, #8]
 801258a:	4632      	mov	r2, r6
 801258c:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8012590:	4638      	mov	r0, r7
 8012592:	47c0      	blx	r8
 8012594:	2301      	movs	r3, #1
 8012596:	69e2      	ldr	r2, [r4, #28]
 8012598:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801259c:	2a00      	cmp	r2, #0
 801259e:	d1d4      	bne.n	801254a <read_submessage_format+0x56>
 80125a0:	e7d5      	b.n	801254e <read_submessage_format+0x5a>
 80125a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d0f8      	beq.n	801259c <read_submessage_format+0xa8>
 80125aa:	a906      	add	r1, sp, #24
 80125ac:	a80c      	add	r0, sp, #48	@ 0x30
 80125ae:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80125b2:	f7fd f877 	bl	800f6a4 <uxr_deserialize_SampleIdentity>
 80125b6:	b9a0      	cbnz	r0, 80125e2 <read_submessage_format+0xee>
 80125b8:	69e2      	ldr	r2, [r4, #28]
 80125ba:	2a00      	cmp	r2, #0
 80125bc:	d1c5      	bne.n	801254a <read_submessage_format+0x56>
 80125be:	e7c6      	b.n	801254e <read_submessage_format+0x5a>
 80125c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125c4:	b13b      	cbz	r3, 80125d6 <read_submessage_format+0xe2>
 80125c6:	a906      	add	r1, sp, #24
 80125c8:	a80c      	add	r0, sp, #48	@ 0x30
 80125ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80125ce:	f7fc fd63 	bl	800f098 <uxr_deserialize_BaseObjectRequest>
 80125d2:	bb60      	cbnz	r0, 801262e <read_submessage_format+0x13a>
 80125d4:	69e2      	ldr	r2, [r4, #28]
 80125d6:	68a3      	ldr	r3, [r4, #8]
 80125d8:	442b      	add	r3, r5
 80125da:	60a3      	str	r3, [r4, #8]
 80125dc:	2a00      	cmp	r2, #0
 80125de:	d1b4      	bne.n	801254a <read_submessage_format+0x56>
 80125e0:	e7b5      	b.n	801254e <read_submessage_format+0x5a>
 80125e2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 80125e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80125e8:	1a52      	subs	r2, r2, r1
 80125ea:	eba8 0803 	sub.w	r8, r8, r3
 80125ee:	a80c      	add	r0, sp, #48	@ 0x30
 80125f0:	f7fa fb82 	bl	800ccf8 <ucdr_init_buffer>
 80125f4:	44a8      	add	r8, r5
 80125f6:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80125fa:	a80c      	add	r0, sp, #48	@ 0x30
 80125fc:	f7fa fb50 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 8012600:	fa1f f888 	uxth.w	r8, r8
 8012604:	ab0c      	add	r3, sp, #48	@ 0x30
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	f8cd 8004 	str.w	r8, [sp, #4]
 801260c:	2108      	movs	r1, #8
 801260e:	f88d 1016 	strb.w	r1, [sp, #22]
 8012612:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8012616:	9102      	str	r1, [sp, #8]
 8012618:	ab06      	add	r3, sp, #24
 801261a:	4632      	mov	r2, r6
 801261c:	9905      	ldr	r1, [sp, #20]
 801261e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8012622:	4638      	mov	r0, r7
 8012624:	47b0      	blx	r6
 8012626:	2301      	movs	r3, #1
 8012628:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801262c:	e7c4      	b.n	80125b8 <read_submessage_format+0xc4>
 801262e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012632:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012634:	1a52      	subs	r2, r2, r1
 8012636:	a80c      	add	r0, sp, #48	@ 0x30
 8012638:	eba8 0803 	sub.w	r8, r8, r3
 801263c:	f7fa fb5c 	bl	800ccf8 <ucdr_init_buffer>
 8012640:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012644:	a80c      	add	r0, sp, #48	@ 0x30
 8012646:	f7fa fb2b 	bl	800cca0 <ucdr_set_on_full_buffer_callback>
 801264a:	ab0c      	add	r3, sp, #48	@ 0x30
 801264c:	9300      	str	r3, [sp, #0]
 801264e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012652:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012656:	44a8      	add	r8, r5
 8012658:	fa1f f888 	uxth.w	r8, r8
 801265c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012660:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012664:	2107      	movs	r1, #7
 8012666:	f88d 1016 	strb.w	r1, [sp, #22]
 801266a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801266e:	9102      	str	r1, [sp, #8]
 8012670:	4632      	mov	r2, r6
 8012672:	b29b      	uxth	r3, r3
 8012674:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8012678:	9905      	ldr	r1, [sp, #20]
 801267a:	4638      	mov	r0, r7
 801267c:	47b0      	blx	r6
 801267e:	2301      	movs	r3, #1
 8012680:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8012684:	e7a6      	b.n	80125d4 <read_submessage_format+0xe0>
 8012686:	bf00      	nop

08012688 <uxr_seq_num_add>:
 8012688:	4408      	add	r0, r1
 801268a:	b280      	uxth	r0, r0
 801268c:	4770      	bx	lr
 801268e:	bf00      	nop

08012690 <uxr_seq_num_sub>:
 8012690:	1a40      	subs	r0, r0, r1
 8012692:	b280      	uxth	r0, r0
 8012694:	4770      	bx	lr
 8012696:	bf00      	nop

08012698 <uxr_seq_num_cmp>:
 8012698:	4288      	cmp	r0, r1
 801269a:	d011      	beq.n	80126c0 <uxr_seq_num_cmp+0x28>
 801269c:	d309      	bcc.n	80126b2 <uxr_seq_num_cmp+0x1a>
 801269e:	4288      	cmp	r0, r1
 80126a0:	d910      	bls.n	80126c4 <uxr_seq_num_cmp+0x2c>
 80126a2:	1a40      	subs	r0, r0, r1
 80126a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80126a8:	bfd4      	ite	le
 80126aa:	2001      	movle	r0, #1
 80126ac:	f04f 30ff 	movgt.w	r0, #4294967295
 80126b0:	4770      	bx	lr
 80126b2:	1a0b      	subs	r3, r1, r0
 80126b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80126b8:	daf1      	bge.n	801269e <uxr_seq_num_cmp+0x6>
 80126ba:	f04f 30ff 	mov.w	r0, #4294967295
 80126be:	4770      	bx	lr
 80126c0:	2000      	movs	r0, #0
 80126c2:	4770      	bx	lr
 80126c4:	2001      	movs	r0, #1
 80126c6:	4770      	bx	lr

080126c8 <uxr_init_framing_io>:
 80126c8:	2300      	movs	r3, #0
 80126ca:	7041      	strb	r1, [r0, #1]
 80126cc:	7003      	strb	r3, [r0, #0]
 80126ce:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80126d0:	4770      	bx	lr
 80126d2:	bf00      	nop

080126d4 <uxr_write_framed_msg>:
 80126d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d8:	4617      	mov	r7, r2
 80126da:	7842      	ldrb	r2, [r0, #1]
 80126dc:	b083      	sub	sp, #12
 80126de:	460e      	mov	r6, r1
 80126e0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80126e4:	469a      	mov	sl, r3
 80126e6:	2901      	cmp	r1, #1
 80126e8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80126ec:	4604      	mov	r4, r0
 80126ee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80126f2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80126f6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80126fa:	f240 8137 	bls.w	801296c <uxr_write_framed_msg+0x298>
 80126fe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012702:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8012706:	2901      	cmp	r1, #1
 8012708:	f04f 0202 	mov.w	r2, #2
 801270c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012710:	f240 808f 	bls.w	8012832 <uxr_write_framed_msg+0x15e>
 8012714:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012716:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801271a:	b2dd      	uxtb	r5, r3
 801271c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012720:	2203      	movs	r2, #3
 8012722:	2901      	cmp	r1, #1
 8012724:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012728:	f240 809a 	bls.w	8012860 <uxr_write_framed_msg+0x18c>
 801272c:	18a1      	adds	r1, r4, r2
 801272e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012730:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8012734:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012738:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801273c:	3201      	adds	r2, #1
 801273e:	2801      	cmp	r0, #1
 8012740:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012744:	f240 80a0 	bls.w	8012888 <uxr_write_framed_msg+0x1b4>
 8012748:	18a0      	adds	r0, r4, r2
 801274a:	3201      	adds	r2, #1
 801274c:	b2d2      	uxtb	r2, r2
 801274e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8012752:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012756:	2b00      	cmp	r3, #0
 8012758:	f000 80a9 	beq.w	80128ae <uxr_write_framed_msg+0x1da>
 801275c:	f04f 0900 	mov.w	r9, #0
 8012760:	46c8      	mov	r8, r9
 8012762:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012766:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801276a:	2901      	cmp	r1, #1
 801276c:	f240 80c3 	bls.w	80128f6 <uxr_write_framed_msg+0x222>
 8012770:	2a29      	cmp	r2, #41	@ 0x29
 8012772:	f200 809f 	bhi.w	80128b4 <uxr_write_framed_msg+0x1e0>
 8012776:	18a1      	adds	r1, r4, r2
 8012778:	3201      	adds	r2, #1
 801277a:	b2d2      	uxtb	r2, r2
 801277c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012780:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012784:	ea89 0303 	eor.w	r3, r9, r3
 8012788:	498c      	ldr	r1, [pc, #560]	@ (80129bc <uxr_write_framed_msg+0x2e8>)
 801278a:	b2db      	uxtb	r3, r3
 801278c:	f108 0801 	add.w	r8, r8, #1
 8012790:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012794:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012798:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801279a:	4543      	cmp	r3, r8
 801279c:	d8e1      	bhi.n	8012762 <uxr_write_framed_msg+0x8e>
 801279e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80127a2:	fa5f f889 	uxtb.w	r8, r9
 80127a6:	9301      	str	r3, [sp, #4]
 80127a8:	f04f 0900 	mov.w	r9, #0
 80127ac:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 80127b0:	fa5f f18a 	uxtb.w	r1, sl
 80127b4:	2901      	cmp	r1, #1
 80127b6:	d921      	bls.n	80127fc <uxr_write_framed_msg+0x128>
 80127b8:	2a29      	cmp	r2, #41	@ 0x29
 80127ba:	f240 80af 	bls.w	801291c <uxr_write_framed_msg+0x248>
 80127be:	2500      	movs	r5, #0
 80127c0:	e000      	b.n	80127c4 <uxr_write_framed_msg+0xf0>
 80127c2:	b160      	cbz	r0, 80127de <uxr_write_framed_msg+0x10a>
 80127c4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80127c8:	1b52      	subs	r2, r2, r5
 80127ca:	465b      	mov	r3, fp
 80127cc:	4421      	add	r1, r4
 80127ce:	4638      	mov	r0, r7
 80127d0:	47b0      	blx	r6
 80127d2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80127d6:	4405      	add	r5, r0
 80127d8:	4295      	cmp	r5, r2
 80127da:	d3f2      	bcc.n	80127c2 <uxr_write_framed_msg+0xee>
 80127dc:	d003      	beq.n	80127e6 <uxr_write_framed_msg+0x112>
 80127de:	2000      	movs	r0, #0
 80127e0:	b003      	add	sp, #12
 80127e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e6:	fa5f f18a 	uxtb.w	r1, sl
 80127ea:	f04f 0300 	mov.w	r3, #0
 80127ee:	2901      	cmp	r1, #1
 80127f0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80127f4:	f04f 0200 	mov.w	r2, #0
 80127f8:	f200 8090 	bhi.w	801291c <uxr_write_framed_msg+0x248>
 80127fc:	1c51      	adds	r1, r2, #1
 80127fe:	b2c9      	uxtb	r1, r1
 8012800:	2929      	cmp	r1, #41	@ 0x29
 8012802:	d8dc      	bhi.n	80127be <uxr_write_framed_msg+0xea>
 8012804:	18a5      	adds	r5, r4, r2
 8012806:	4421      	add	r1, r4
 8012808:	3202      	adds	r2, #2
 801280a:	f088 0820 	eor.w	r8, r8, #32
 801280e:	4648      	mov	r0, r9
 8012810:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8012814:	b2d2      	uxtb	r2, r2
 8012816:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801281a:	f04f 0901 	mov.w	r9, #1
 801281e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012822:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012826:	2800      	cmp	r0, #0
 8012828:	f040 8085 	bne.w	8012936 <uxr_write_framed_msg+0x262>
 801282c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012830:	e7bc      	b.n	80127ac <uxr_write_framed_msg+0xd8>
 8012832:	4611      	mov	r1, r2
 8012834:	f04f 0c03 	mov.w	ip, #3
 8012838:	2204      	movs	r2, #4
 801283a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801283c:	4421      	add	r1, r4
 801283e:	b2dd      	uxtb	r5, r3
 8012840:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8012844:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012848:	44a4      	add	ip, r4
 801284a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801284e:	f080 0020 	eor.w	r0, r0, #32
 8012852:	2901      	cmp	r1, #1
 8012854:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012858:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801285c:	f63f af66 	bhi.w	801272c <uxr_write_framed_msg+0x58>
 8012860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012862:	18a0      	adds	r0, r4, r2
 8012864:	f085 0520 	eor.w	r5, r5, #32
 8012868:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801286c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012870:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8012874:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012878:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801287c:	3202      	adds	r2, #2
 801287e:	2801      	cmp	r0, #1
 8012880:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012884:	f63f af60 	bhi.w	8012748 <uxr_write_framed_msg+0x74>
 8012888:	1c50      	adds	r0, r2, #1
 801288a:	18a5      	adds	r5, r4, r2
 801288c:	fa54 f080 	uxtab	r0, r4, r0
 8012890:	3202      	adds	r2, #2
 8012892:	f081 0120 	eor.w	r1, r1, #32
 8012896:	b2d2      	uxtb	r2, r2
 8012898:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801289c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 80128a0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80128a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	f47f af57 	bne.w	801275c <uxr_write_framed_msg+0x88>
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	4698      	mov	r8, r3
 80128b2:	e779      	b.n	80127a8 <uxr_write_framed_msg+0xd4>
 80128b4:	2500      	movs	r5, #0
 80128b6:	e001      	b.n	80128bc <uxr_write_framed_msg+0x1e8>
 80128b8:	2800      	cmp	r0, #0
 80128ba:	d090      	beq.n	80127de <uxr_write_framed_msg+0x10a>
 80128bc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80128c0:	1b52      	subs	r2, r2, r5
 80128c2:	465b      	mov	r3, fp
 80128c4:	4421      	add	r1, r4
 80128c6:	4638      	mov	r0, r7
 80128c8:	47b0      	blx	r6
 80128ca:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80128ce:	4405      	add	r5, r0
 80128d0:	4295      	cmp	r5, r2
 80128d2:	d3f1      	bcc.n	80128b8 <uxr_write_framed_msg+0x1e4>
 80128d4:	d183      	bne.n	80127de <uxr_write_framed_msg+0x10a>
 80128d6:	f04f 0300 	mov.w	r3, #0
 80128da:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80128de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80128e0:	4543      	cmp	r3, r8
 80128e2:	d964      	bls.n	80129ae <uxr_write_framed_msg+0x2da>
 80128e4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80128e8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80128ec:	2901      	cmp	r1, #1
 80128ee:	f04f 0200 	mov.w	r2, #0
 80128f2:	f63f af3d 	bhi.w	8012770 <uxr_write_framed_msg+0x9c>
 80128f6:	1c51      	adds	r1, r2, #1
 80128f8:	b2c9      	uxtb	r1, r1
 80128fa:	2929      	cmp	r1, #41	@ 0x29
 80128fc:	d8da      	bhi.n	80128b4 <uxr_write_framed_msg+0x1e0>
 80128fe:	18a0      	adds	r0, r4, r2
 8012900:	4421      	add	r1, r4
 8012902:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012906:	3202      	adds	r2, #2
 8012908:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801290c:	b2d2      	uxtb	r2, r2
 801290e:	f083 0020 	eor.w	r0, r3, #32
 8012912:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012916:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801291a:	e733      	b.n	8012784 <uxr_write_framed_msg+0xb0>
 801291c:	18a1      	adds	r1, r4, r2
 801291e:	3201      	adds	r2, #1
 8012920:	4648      	mov	r0, r9
 8012922:	b2d2      	uxtb	r2, r2
 8012924:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 8012928:	f04f 0901 	mov.w	r9, #1
 801292c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012930:	2800      	cmp	r0, #0
 8012932:	f43f af7b 	beq.w	801282c <uxr_write_framed_msg+0x158>
 8012936:	2500      	movs	r5, #0
 8012938:	e002      	b.n	8012940 <uxr_write_framed_msg+0x26c>
 801293a:	2800      	cmp	r0, #0
 801293c:	f43f af4f 	beq.w	80127de <uxr_write_framed_msg+0x10a>
 8012940:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012944:	1b52      	subs	r2, r2, r5
 8012946:	465b      	mov	r3, fp
 8012948:	4421      	add	r1, r4
 801294a:	4638      	mov	r0, r7
 801294c:	47b0      	blx	r6
 801294e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012952:	4405      	add	r5, r0
 8012954:	4295      	cmp	r5, r2
 8012956:	d3f0      	bcc.n	801293a <uxr_write_framed_msg+0x266>
 8012958:	f47f af41 	bne.w	80127de <uxr_write_framed_msg+0x10a>
 801295c:	2300      	movs	r3, #0
 801295e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012964:	b298      	uxth	r0, r3
 8012966:	b003      	add	sp, #12
 8012968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296c:	217d      	movs	r1, #125	@ 0x7d
 801296e:	f082 0220 	eor.w	r2, r2, #32
 8012972:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012976:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801297a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801297e:	2901      	cmp	r1, #1
 8012980:	f04f 0203 	mov.w	r2, #3
 8012984:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012988:	d804      	bhi.n	8012994 <uxr_write_framed_msg+0x2c0>
 801298a:	4611      	mov	r1, r2
 801298c:	f04f 0c04 	mov.w	ip, #4
 8012990:	2205      	movs	r2, #5
 8012992:	e752      	b.n	801283a <uxr_write_framed_msg+0x166>
 8012994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012996:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801299a:	b2dd      	uxtb	r5, r3
 801299c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80129a0:	2204      	movs	r2, #4
 80129a2:	2901      	cmp	r1, #1
 80129a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80129a8:	f63f aec0 	bhi.w	801272c <uxr_write_framed_msg+0x58>
 80129ac:	e758      	b.n	8012860 <uxr_write_framed_msg+0x18c>
 80129ae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80129b2:	fa5f f889 	uxtb.w	r8, r9
 80129b6:	9301      	str	r3, [sp, #4]
 80129b8:	2200      	movs	r2, #0
 80129ba:	e6f5      	b.n	80127a8 <uxr_write_framed_msg+0xd4>
 80129bc:	080161b8 	.word	0x080161b8

080129c0 <uxr_framing_read_transport>:
 80129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c4:	4604      	mov	r4, r0
 80129c6:	b083      	sub	sp, #12
 80129c8:	461f      	mov	r7, r3
 80129ca:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 80129ce:	4689      	mov	r9, r1
 80129d0:	4692      	mov	sl, r2
 80129d2:	f7fb fd61 	bl	800e498 <uxr_millis>
 80129d6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80129da:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80129de:	42b3      	cmp	r3, r6
 80129e0:	4680      	mov	r8, r0
 80129e2:	d061      	beq.n	8012aa8 <uxr_framing_read_transport+0xe8>
 80129e4:	d81c      	bhi.n	8012a20 <uxr_framing_read_transport+0x60>
 80129e6:	1e75      	subs	r5, r6, #1
 80129e8:	1aed      	subs	r5, r5, r3
 80129ea:	b2ed      	uxtb	r5, r5
 80129ec:	2600      	movs	r6, #0
 80129ee:	455d      	cmp	r5, fp
 80129f0:	d81f      	bhi.n	8012a32 <uxr_framing_read_transport+0x72>
 80129f2:	19ab      	adds	r3, r5, r6
 80129f4:	455b      	cmp	r3, fp
 80129f6:	bf84      	itt	hi
 80129f8:	ebab 0605 	subhi.w	r6, fp, r5
 80129fc:	b2f6      	uxtbhi	r6, r6
 80129fe:	b9ed      	cbnz	r5, 8012a3c <uxr_framing_read_transport+0x7c>
 8012a00:	f04f 0b00 	mov.w	fp, #0
 8012a04:	f7fb fd48 	bl	800e498 <uxr_millis>
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	eba0 0808 	sub.w	r8, r0, r8
 8012a0e:	eba3 0308 	sub.w	r3, r3, r8
 8012a12:	4658      	mov	r0, fp
 8012a14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012a18:	603b      	str	r3, [r7, #0]
 8012a1a:	b003      	add	sp, #12
 8012a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a20:	2e00      	cmp	r6, #0
 8012a22:	d049      	beq.n	8012ab8 <uxr_framing_read_transport+0xf8>
 8012a24:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 8012a28:	b2ed      	uxtb	r5, r5
 8012a2a:	3e01      	subs	r6, #1
 8012a2c:	455d      	cmp	r5, fp
 8012a2e:	b2f6      	uxtb	r6, r6
 8012a30:	d9df      	bls.n	80129f2 <uxr_framing_read_transport+0x32>
 8012a32:	fa5f f58b 	uxtb.w	r5, fp
 8012a36:	2600      	movs	r6, #0
 8012a38:	2d00      	cmp	r5, #0
 8012a3a:	d0e1      	beq.n	8012a00 <uxr_framing_read_transport+0x40>
 8012a3c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a40:	3102      	adds	r1, #2
 8012a42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a44:	9300      	str	r3, [sp, #0]
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	4421      	add	r1, r4
 8012a4a:	462a      	mov	r2, r5
 8012a4c:	4650      	mov	r0, sl
 8012a4e:	47c8      	blx	r9
 8012a50:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012a54:	4a1a      	ldr	r2, [pc, #104]	@ (8012ac0 <uxr_framing_read_transport+0x100>)
 8012a56:	4403      	add	r3, r0
 8012a58:	0859      	lsrs	r1, r3, #1
 8012a5a:	fba2 2101 	umull	r2, r1, r2, r1
 8012a5e:	0889      	lsrs	r1, r1, #2
 8012a60:	222a      	movs	r2, #42	@ 0x2a
 8012a62:	fb02 3111 	mls	r1, r2, r1, r3
 8012a66:	4683      	mov	fp, r0
 8012a68:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012a6c:	2800      	cmp	r0, #0
 8012a6e:	d0c7      	beq.n	8012a00 <uxr_framing_read_transport+0x40>
 8012a70:	42a8      	cmp	r0, r5
 8012a72:	d1c7      	bne.n	8012a04 <uxr_framing_read_transport+0x44>
 8012a74:	2e00      	cmp	r6, #0
 8012a76:	d0c5      	beq.n	8012a04 <uxr_framing_read_transport+0x44>
 8012a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	3102      	adds	r1, #2
 8012a7e:	4632      	mov	r2, r6
 8012a80:	4421      	add	r1, r4
 8012a82:	2300      	movs	r3, #0
 8012a84:	4650      	mov	r0, sl
 8012a86:	47c8      	blx	r9
 8012a88:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ac0 <uxr_framing_read_transport+0x100>)
 8012a8e:	180b      	adds	r3, r1, r0
 8012a90:	0859      	lsrs	r1, r3, #1
 8012a92:	fba2 1201 	umull	r1, r2, r2, r1
 8012a96:	0892      	lsrs	r2, r2, #2
 8012a98:	212a      	movs	r1, #42	@ 0x2a
 8012a9a:	fb01 3312 	mls	r3, r1, r2, r3
 8012a9e:	eb00 0b05 	add.w	fp, r0, r5
 8012aa2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012aa6:	e7ad      	b.n	8012a04 <uxr_framing_read_transport+0x44>
 8012aa8:	2600      	movs	r6, #0
 8012aaa:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012aae:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012ab0:	d9bf      	bls.n	8012a32 <uxr_framing_read_transport+0x72>
 8012ab2:	2102      	movs	r1, #2
 8012ab4:	2529      	movs	r5, #41	@ 0x29
 8012ab6:	e7c4      	b.n	8012a42 <uxr_framing_read_transport+0x82>
 8012ab8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012abc:	b2ed      	uxtb	r5, r5
 8012abe:	e796      	b.n	80129ee <uxr_framing_read_transport+0x2e>
 8012ac0:	30c30c31 	.word	0x30c30c31

08012ac4 <uxr_read_framed_msg>:
 8012ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ac8:	461e      	mov	r6, r3
 8012aca:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012ace:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8012ad2:	429d      	cmp	r5, r3
 8012ad4:	b083      	sub	sp, #12
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	4688      	mov	r8, r1
 8012ada:	4691      	mov	r9, r2
 8012adc:	f000 8188 	beq.w	8012df0 <uxr_read_framed_msg+0x32c>
 8012ae0:	7823      	ldrb	r3, [r4, #0]
 8012ae2:	4dc1      	ldr	r5, [pc, #772]	@ (8012de8 <uxr_read_framed_msg+0x324>)
 8012ae4:	4fc1      	ldr	r7, [pc, #772]	@ (8012dec <uxr_read_framed_msg+0x328>)
 8012ae6:	2b07      	cmp	r3, #7
 8012ae8:	d8fd      	bhi.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012aea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012aee:	0115      	.short	0x0115
 8012af0:	00d600f6 	.word	0x00d600f6
 8012af4:	009000b9 	.word	0x009000b9
 8012af8:	0030004d 	.word	0x0030004d
 8012afc:	0008      	.short	0x0008
 8012afe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012b02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012b06:	4299      	cmp	r1, r3
 8012b08:	f000 814a 	beq.w	8012da0 <uxr_read_framed_msg+0x2dc>
 8012b0c:	18e2      	adds	r2, r4, r3
 8012b0e:	7892      	ldrb	r2, [r2, #2]
 8012b10:	2a7d      	cmp	r2, #125	@ 0x7d
 8012b12:	f000 8199 	beq.w	8012e48 <uxr_read_framed_msg+0x384>
 8012b16:	3301      	adds	r3, #1
 8012b18:	0858      	lsrs	r0, r3, #1
 8012b1a:	fba5 1000 	umull	r1, r0, r5, r0
 8012b1e:	0880      	lsrs	r0, r0, #2
 8012b20:	212a      	movs	r1, #42	@ 0x2a
 8012b22:	fb01 3310 	mls	r3, r1, r0, r3
 8012b26:	2a7e      	cmp	r2, #126	@ 0x7e
 8012b28:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b2c:	f000 8252 	beq.w	8012fd4 <uxr_read_framed_msg+0x510>
 8012b30:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012b32:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8012b34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012b38:	b29b      	uxth	r3, r3
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	4299      	cmp	r1, r3
 8012b3e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012b40:	7022      	strb	r2, [r4, #0]
 8012b42:	f000 8179 	beq.w	8012e38 <uxr_read_framed_msg+0x374>
 8012b46:	2000      	movs	r0, #0
 8012b48:	b003      	add	sp, #12
 8012b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b4e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012b52:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012b56:	4299      	cmp	r1, r3
 8012b58:	f000 8131 	beq.w	8012dbe <uxr_read_framed_msg+0x2fa>
 8012b5c:	18e2      	adds	r2, r4, r3
 8012b5e:	7890      	ldrb	r0, [r2, #2]
 8012b60:	287d      	cmp	r0, #125	@ 0x7d
 8012b62:	f000 8190 	beq.w	8012e86 <uxr_read_framed_msg+0x3c2>
 8012b66:	3301      	adds	r3, #1
 8012b68:	085a      	lsrs	r2, r3, #1
 8012b6a:	fba5 1202 	umull	r1, r2, r5, r2
 8012b6e:	0892      	lsrs	r2, r2, #2
 8012b70:	212a      	movs	r1, #42	@ 0x2a
 8012b72:	fb01 3312 	mls	r3, r1, r2, r3
 8012b76:	287e      	cmp	r0, #126	@ 0x7e
 8012b78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b7c:	f000 821a 	beq.w	8012fb4 <uxr_read_framed_msg+0x4f0>
 8012b80:	2307      	movs	r3, #7
 8012b82:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012b84:	7023      	strb	r3, [r4, #0]
 8012b86:	e7ae      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012b88:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012b8a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012b8e:	459e      	cmp	lr, r3
 8012b90:	d938      	bls.n	8012c04 <uxr_read_framed_msg+0x140>
 8012b92:	ee07 8a90 	vmov	s15, r8
 8012b96:	212a      	movs	r1, #42	@ 0x2a
 8012b98:	e020      	b.n	8012bdc <uxr_read_framed_msg+0x118>
 8012b9a:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012b9e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012ba2:	f000 80d4 	beq.w	8012d4e <uxr_read_framed_msg+0x28a>
 8012ba6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012baa:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012bae:	f000 8219 	beq.w	8012fe4 <uxr_read_framed_msg+0x520>
 8012bb2:	f806 c003 	strb.w	ip, [r6, r3]
 8012bb6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012bba:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012bbc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012bc0:	ea8a 000c 	eor.w	r0, sl, ip
 8012bc4:	b2c0      	uxtb	r0, r0
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012bd2:	4573      	cmp	r3, lr
 8012bd4:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012bd6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012bd8:	f080 8120 	bcs.w	8012e1c <uxr_read_framed_msg+0x358>
 8012bdc:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012be0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012be4:	f100 0c01 	add.w	ip, r0, #1
 8012be8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012bec:	fba5 8202 	umull	r8, r2, r5, r2
 8012bf0:	0892      	lsrs	r2, r2, #2
 8012bf2:	4582      	cmp	sl, r0
 8012bf4:	eb04 0b00 	add.w	fp, r4, r0
 8012bf8:	fb01 c212 	mls	r2, r1, r2, ip
 8012bfc:	d1cd      	bne.n	8012b9a <uxr_read_framed_msg+0xd6>
 8012bfe:	ee17 8a90 	vmov	r8, s15
 8012c02:	459e      	cmp	lr, r3
 8012c04:	f040 8111 	bne.w	8012e2a <uxr_read_framed_msg+0x366>
 8012c08:	2306      	movs	r3, #6
 8012c0a:	7023      	strb	r3, [r4, #0]
 8012c0c:	e76b      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012c0e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012c12:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c16:	4298      	cmp	r0, r3
 8012c18:	f000 80c2 	beq.w	8012da0 <uxr_read_framed_msg+0x2dc>
 8012c1c:	18e2      	adds	r2, r4, r3
 8012c1e:	7891      	ldrb	r1, [r2, #2]
 8012c20:	297d      	cmp	r1, #125	@ 0x7d
 8012c22:	f000 814c 	beq.w	8012ebe <uxr_read_framed_msg+0x3fa>
 8012c26:	3301      	adds	r3, #1
 8012c28:	085a      	lsrs	r2, r3, #1
 8012c2a:	fba5 0202 	umull	r0, r2, r5, r2
 8012c2e:	0892      	lsrs	r2, r2, #2
 8012c30:	202a      	movs	r0, #42	@ 0x2a
 8012c32:	fb00 3312 	mls	r3, r0, r2, r3
 8012c36:	297e      	cmp	r1, #126	@ 0x7e
 8012c38:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c3c:	f000 81ca 	beq.w	8012fd4 <uxr_read_framed_msg+0x510>
 8012c40:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012c42:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012c46:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	2000      	movs	r0, #0
 8012c4c:	428b      	cmp	r3, r1
 8012c4e:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012c50:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012c52:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012c54:	f240 80df 	bls.w	8012e16 <uxr_read_framed_msg+0x352>
 8012c58:	7020      	strb	r0, [r4, #0]
 8012c5a:	b003      	add	sp, #12
 8012c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c60:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012c64:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012c68:	4299      	cmp	r1, r3
 8012c6a:	f000 80a8 	beq.w	8012dbe <uxr_read_framed_msg+0x2fa>
 8012c6e:	18e2      	adds	r2, r4, r3
 8012c70:	7890      	ldrb	r0, [r2, #2]
 8012c72:	287d      	cmp	r0, #125	@ 0x7d
 8012c74:	f000 8164 	beq.w	8012f40 <uxr_read_framed_msg+0x47c>
 8012c78:	3301      	adds	r3, #1
 8012c7a:	085a      	lsrs	r2, r3, #1
 8012c7c:	fba5 1202 	umull	r1, r2, r5, r2
 8012c80:	0892      	lsrs	r2, r2, #2
 8012c82:	212a      	movs	r1, #42	@ 0x2a
 8012c84:	fb01 3312 	mls	r3, r1, r2, r3
 8012c88:	287e      	cmp	r0, #126	@ 0x7e
 8012c8a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012c8e:	f000 8191 	beq.w	8012fb4 <uxr_read_framed_msg+0x4f0>
 8012c92:	2304      	movs	r3, #4
 8012c94:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012c96:	7023      	strb	r3, [r4, #0]
 8012c98:	e725      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012c9a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012c9e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012ca2:	4290      	cmp	r0, r2
 8012ca4:	f000 80b3 	beq.w	8012e0e <uxr_read_framed_msg+0x34a>
 8012ca8:	18a3      	adds	r3, r4, r2
 8012caa:	7899      	ldrb	r1, [r3, #2]
 8012cac:	297d      	cmp	r1, #125	@ 0x7d
 8012cae:	f000 8164 	beq.w	8012f7a <uxr_read_framed_msg+0x4b6>
 8012cb2:	3201      	adds	r2, #1
 8012cb4:	0850      	lsrs	r0, r2, #1
 8012cb6:	fba5 3000 	umull	r3, r0, r5, r0
 8012cba:	0880      	lsrs	r0, r0, #2
 8012cbc:	232a      	movs	r3, #42	@ 0x2a
 8012cbe:	fb03 2210 	mls	r2, r3, r0, r2
 8012cc2:	297e      	cmp	r1, #126	@ 0x7e
 8012cc4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012cc8:	f000 8188 	beq.w	8012fdc <uxr_read_framed_msg+0x518>
 8012ccc:	7863      	ldrb	r3, [r4, #1]
 8012cce:	428b      	cmp	r3, r1
 8012cd0:	bf0c      	ite	eq
 8012cd2:	2303      	moveq	r3, #3
 8012cd4:	2300      	movne	r3, #0
 8012cd6:	7023      	strb	r3, [r4, #0]
 8012cd8:	e705      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012cda:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012cde:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	4299      	cmp	r1, r3
 8012ce6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012cea:	d06c      	beq.n	8012dc6 <uxr_read_framed_msg+0x302>
 8012cec:	18e2      	adds	r2, r4, r3
 8012cee:	7890      	ldrb	r0, [r2, #2]
 8012cf0:	287d      	cmp	r0, #125	@ 0x7d
 8012cf2:	f000 8101 	beq.w	8012ef8 <uxr_read_framed_msg+0x434>
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	085a      	lsrs	r2, r3, #1
 8012cfa:	fba5 1202 	umull	r1, r2, r5, r2
 8012cfe:	0892      	lsrs	r2, r2, #2
 8012d00:	212a      	movs	r1, #42	@ 0x2a
 8012d02:	fb01 3312 	mls	r3, r1, r2, r3
 8012d06:	287e      	cmp	r0, #126	@ 0x7e
 8012d08:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012d0c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d10:	d059      	beq.n	8012dc6 <uxr_read_framed_msg+0x302>
 8012d12:	2302      	movs	r3, #2
 8012d14:	7023      	strb	r3, [r4, #0]
 8012d16:	e6e6      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012d18:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012d1c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012d20:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012d24:	1c51      	adds	r1, r2, #1
 8012d26:	084b      	lsrs	r3, r1, #1
 8012d28:	fba5 c303 	umull	ip, r3, r5, r3
 8012d2c:	089b      	lsrs	r3, r3, #2
 8012d2e:	fb0e 1313 	mls	r3, lr, r3, r1
 8012d32:	4592      	cmp	sl, r2
 8012d34:	eb04 0002 	add.w	r0, r4, r2
 8012d38:	b2da      	uxtb	r2, r3
 8012d3a:	f43f af04 	beq.w	8012b46 <uxr_read_framed_msg+0x82>
 8012d3e:	7883      	ldrb	r3, [r0, #2]
 8012d40:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012d44:	2b7e      	cmp	r3, #126	@ 0x7e
 8012d46:	d1ed      	bne.n	8012d24 <uxr_read_framed_msg+0x260>
 8012d48:	2301      	movs	r3, #1
 8012d4a:	7023      	strb	r3, [r4, #0]
 8012d4c:	e6cb      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012d4e:	f100 0c01 	add.w	ip, r0, #1
 8012d52:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012d56:	fba5 8202 	umull	r8, r2, r5, r2
 8012d5a:	0892      	lsrs	r2, r2, #2
 8012d5c:	fb01 c212 	mls	r2, r1, r2, ip
 8012d60:	eb04 0c02 	add.w	ip, r4, r2
 8012d64:	b2d2      	uxtb	r2, r2
 8012d66:	4592      	cmp	sl, r2
 8012d68:	f100 0002 	add.w	r0, r0, #2
 8012d6c:	f43f af47 	beq.w	8012bfe <uxr_read_framed_msg+0x13a>
 8012d70:	0842      	lsrs	r2, r0, #1
 8012d72:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012d76:	fba5 8202 	umull	r8, r2, r5, r2
 8012d7a:	0892      	lsrs	r2, r2, #2
 8012d7c:	fb01 0012 	mls	r0, r1, r2, r0
 8012d80:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012d84:	f08a 0c20 	eor.w	ip, sl, #32
 8012d88:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012d8c:	f47f af11 	bne.w	8012bb2 <uxr_read_framed_msg+0xee>
 8012d90:	459e      	cmp	lr, r3
 8012d92:	ee17 8a90 	vmov	r8, s15
 8012d96:	f43f af37 	beq.w	8012c08 <uxr_read_framed_msg+0x144>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	7023      	strb	r3, [r4, #0]
 8012d9e:	e6a2      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012da2:	9300      	str	r3, [sp, #0]
 8012da4:	2301      	movs	r3, #1
 8012da6:	9301      	str	r3, [sp, #4]
 8012da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012daa:	464a      	mov	r2, r9
 8012dac:	4641      	mov	r1, r8
 8012dae:	4620      	mov	r0, r4
 8012db0:	f7ff fe06 	bl	80129c0 <uxr_framing_read_transport>
 8012db4:	2800      	cmp	r0, #0
 8012db6:	f43f aec6 	beq.w	8012b46 <uxr_read_framed_msg+0x82>
 8012dba:	7823      	ldrb	r3, [r4, #0]
 8012dbc:	e693      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012dbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	2302      	movs	r3, #2
 8012dc4:	e7ef      	b.n	8012da6 <uxr_read_framed_msg+0x2e2>
 8012dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012dc8:	9300      	str	r3, [sp, #0]
 8012dca:	2304      	movs	r3, #4
 8012dcc:	9301      	str	r3, [sp, #4]
 8012dce:	464a      	mov	r2, r9
 8012dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dd2:	4641      	mov	r1, r8
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	f7ff fdf3 	bl	80129c0 <uxr_framing_read_transport>
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	d1ed      	bne.n	8012dba <uxr_read_framed_msg+0x2f6>
 8012dde:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012de2:	2b7e      	cmp	r3, #126	@ 0x7e
 8012de4:	d0e9      	beq.n	8012dba <uxr_read_framed_msg+0x2f6>
 8012de6:	e6ae      	b.n	8012b46 <uxr_read_framed_msg+0x82>
 8012de8:	30c30c31 	.word	0x30c30c31
 8012dec:	080161b8 	.word	0x080161b8
 8012df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	2305      	movs	r3, #5
 8012df6:	9301      	str	r3, [sp, #4]
 8012df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012dfa:	f7ff fde1 	bl	80129c0 <uxr_framing_read_transport>
 8012dfe:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012e02:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012e06:	429a      	cmp	r2, r3
 8012e08:	f43f ae9d 	beq.w	8012b46 <uxr_read_framed_msg+0x82>
 8012e0c:	e668      	b.n	8012ae0 <uxr_read_framed_msg+0x1c>
 8012e0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	2303      	movs	r3, #3
 8012e14:	e7c7      	b.n	8012da6 <uxr_read_framed_msg+0x2e2>
 8012e16:	2305      	movs	r3, #5
 8012e18:	7023      	strb	r3, [r4, #0]
 8012e1a:	e664      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012e1c:	ee17 8a90 	vmov	r8, s15
 8012e20:	f43f aef2 	beq.w	8012c08 <uxr_read_framed_msg+0x144>
 8012e24:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012e28:	d08e      	beq.n	8012d48 <uxr_read_framed_msg+0x284>
 8012e2a:	ebae 0303 	sub.w	r3, lr, r3
 8012e2e:	3302      	adds	r3, #2
 8012e30:	9301      	str	r3, [sp, #4]
 8012e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	e7b7      	b.n	8012da8 <uxr_read_framed_msg+0x2e4>
 8012e38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012e3a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012e3e:	7013      	strb	r3, [r2, #0]
 8012e40:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012e42:	b003      	add	sp, #12
 8012e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e48:	f103 0c01 	add.w	ip, r3, #1
 8012e4c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012e50:	fba5 0202 	umull	r0, r2, r5, r2
 8012e54:	0892      	lsrs	r2, r2, #2
 8012e56:	202a      	movs	r0, #42	@ 0x2a
 8012e58:	fb00 c212 	mls	r2, r0, r2, ip
 8012e5c:	fa5f fc82 	uxtb.w	ip, r2
 8012e60:	4561      	cmp	r1, ip
 8012e62:	d09d      	beq.n	8012da0 <uxr_read_framed_msg+0x2dc>
 8012e64:	3302      	adds	r3, #2
 8012e66:	4422      	add	r2, r4
 8012e68:	0859      	lsrs	r1, r3, #1
 8012e6a:	7892      	ldrb	r2, [r2, #2]
 8012e6c:	fba5 c101 	umull	ip, r1, r5, r1
 8012e70:	0889      	lsrs	r1, r1, #2
 8012e72:	fb00 3311 	mls	r3, r0, r1, r3
 8012e76:	2a7e      	cmp	r2, #126	@ 0x7e
 8012e78:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e7c:	f000 80aa 	beq.w	8012fd4 <uxr_read_framed_msg+0x510>
 8012e80:	f082 0220 	eor.w	r2, r2, #32
 8012e84:	e654      	b.n	8012b30 <uxr_read_framed_msg+0x6c>
 8012e86:	1c58      	adds	r0, r3, #1
 8012e88:	0842      	lsrs	r2, r0, #1
 8012e8a:	fba5 c202 	umull	ip, r2, r5, r2
 8012e8e:	0892      	lsrs	r2, r2, #2
 8012e90:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e94:	fb0c 0212 	mls	r2, ip, r2, r0
 8012e98:	b2d0      	uxtb	r0, r2
 8012e9a:	4281      	cmp	r1, r0
 8012e9c:	d08f      	beq.n	8012dbe <uxr_read_framed_msg+0x2fa>
 8012e9e:	4422      	add	r2, r4
 8012ea0:	3302      	adds	r3, #2
 8012ea2:	7890      	ldrb	r0, [r2, #2]
 8012ea4:	085a      	lsrs	r2, r3, #1
 8012ea6:	fba5 1202 	umull	r1, r2, r5, r2
 8012eaa:	0892      	lsrs	r2, r2, #2
 8012eac:	fb0c 3312 	mls	r3, ip, r2, r3
 8012eb0:	287e      	cmp	r0, #126	@ 0x7e
 8012eb2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012eb6:	d07d      	beq.n	8012fb4 <uxr_read_framed_msg+0x4f0>
 8012eb8:	f080 0020 	eor.w	r0, r0, #32
 8012ebc:	e660      	b.n	8012b80 <uxr_read_framed_msg+0xbc>
 8012ebe:	1c59      	adds	r1, r3, #1
 8012ec0:	084a      	lsrs	r2, r1, #1
 8012ec2:	fba5 c202 	umull	ip, r2, r5, r2
 8012ec6:	0892      	lsrs	r2, r2, #2
 8012ec8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012ecc:	fb0c 1212 	mls	r2, ip, r2, r1
 8012ed0:	b2d1      	uxtb	r1, r2
 8012ed2:	4288      	cmp	r0, r1
 8012ed4:	f43f af64 	beq.w	8012da0 <uxr_read_framed_msg+0x2dc>
 8012ed8:	4422      	add	r2, r4
 8012eda:	3302      	adds	r3, #2
 8012edc:	7891      	ldrb	r1, [r2, #2]
 8012ede:	085a      	lsrs	r2, r3, #1
 8012ee0:	fba5 0202 	umull	r0, r2, r5, r2
 8012ee4:	0892      	lsrs	r2, r2, #2
 8012ee6:	fb0c 3312 	mls	r3, ip, r2, r3
 8012eea:	297e      	cmp	r1, #126	@ 0x7e
 8012eec:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012ef0:	d070      	beq.n	8012fd4 <uxr_read_framed_msg+0x510>
 8012ef2:	f081 0120 	eor.w	r1, r1, #32
 8012ef6:	e6a3      	b.n	8012c40 <uxr_read_framed_msg+0x17c>
 8012ef8:	f103 0c01 	add.w	ip, r3, #1
 8012efc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012f00:	fba5 0202 	umull	r0, r2, r5, r2
 8012f04:	0892      	lsrs	r2, r2, #2
 8012f06:	202a      	movs	r0, #42	@ 0x2a
 8012f08:	fb00 c212 	mls	r2, r0, r2, ip
 8012f0c:	fa5f fc82 	uxtb.w	ip, r2
 8012f10:	4561      	cmp	r1, ip
 8012f12:	f43f af58 	beq.w	8012dc6 <uxr_read_framed_msg+0x302>
 8012f16:	4422      	add	r2, r4
 8012f18:	3302      	adds	r3, #2
 8012f1a:	7891      	ldrb	r1, [r2, #2]
 8012f1c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012f20:	085a      	lsrs	r2, r3, #1
 8012f22:	fba5 c202 	umull	ip, r2, r5, r2
 8012f26:	0892      	lsrs	r2, r2, #2
 8012f28:	fb00 3312 	mls	r3, r0, r2, r3
 8012f2c:	297e      	cmp	r1, #126	@ 0x7e
 8012f2e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f32:	f43f af48 	beq.w	8012dc6 <uxr_read_framed_msg+0x302>
 8012f36:	f081 0120 	eor.w	r1, r1, #32
 8012f3a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012f3e:	e6e8      	b.n	8012d12 <uxr_read_framed_msg+0x24e>
 8012f40:	1c58      	adds	r0, r3, #1
 8012f42:	0842      	lsrs	r2, r0, #1
 8012f44:	fba5 c202 	umull	ip, r2, r5, r2
 8012f48:	0892      	lsrs	r2, r2, #2
 8012f4a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f4e:	fb0c 0212 	mls	r2, ip, r2, r0
 8012f52:	b2d0      	uxtb	r0, r2
 8012f54:	4281      	cmp	r1, r0
 8012f56:	f43f af32 	beq.w	8012dbe <uxr_read_framed_msg+0x2fa>
 8012f5a:	4422      	add	r2, r4
 8012f5c:	3302      	adds	r3, #2
 8012f5e:	7890      	ldrb	r0, [r2, #2]
 8012f60:	085a      	lsrs	r2, r3, #1
 8012f62:	fba5 1202 	umull	r1, r2, r5, r2
 8012f66:	0892      	lsrs	r2, r2, #2
 8012f68:	fb0c 3312 	mls	r3, ip, r2, r3
 8012f6c:	287e      	cmp	r0, #126	@ 0x7e
 8012f6e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012f72:	d01f      	beq.n	8012fb4 <uxr_read_framed_msg+0x4f0>
 8012f74:	f080 0020 	eor.w	r0, r0, #32
 8012f78:	e68b      	b.n	8012c92 <uxr_read_framed_msg+0x1ce>
 8012f7a:	1c51      	adds	r1, r2, #1
 8012f7c:	084b      	lsrs	r3, r1, #1
 8012f7e:	fba5 c303 	umull	ip, r3, r5, r3
 8012f82:	089b      	lsrs	r3, r3, #2
 8012f84:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012f88:	fb0c 1313 	mls	r3, ip, r3, r1
 8012f8c:	b2d9      	uxtb	r1, r3
 8012f8e:	4288      	cmp	r0, r1
 8012f90:	f43f af3d 	beq.w	8012e0e <uxr_read_framed_msg+0x34a>
 8012f94:	3202      	adds	r2, #2
 8012f96:	4423      	add	r3, r4
 8012f98:	0850      	lsrs	r0, r2, #1
 8012f9a:	789b      	ldrb	r3, [r3, #2]
 8012f9c:	fba5 1000 	umull	r1, r0, r5, r0
 8012fa0:	0880      	lsrs	r0, r0, #2
 8012fa2:	fb0c 2210 	mls	r2, ip, r0, r2
 8012fa6:	2b7e      	cmp	r3, #126	@ 0x7e
 8012fa8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012fac:	d016      	beq.n	8012fdc <uxr_read_framed_msg+0x518>
 8012fae:	f083 0120 	eor.w	r1, r3, #32
 8012fb2:	e68b      	b.n	8012ccc <uxr_read_framed_msg+0x208>
 8012fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	2302      	movs	r3, #2
 8012fba:	9301      	str	r3, [sp, #4]
 8012fbc:	464a      	mov	r2, r9
 8012fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012fc0:	4641      	mov	r1, r8
 8012fc2:	4620      	mov	r0, r4
 8012fc4:	f7ff fcfc 	bl	80129c0 <uxr_framing_read_transport>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	f47f aef6 	bne.w	8012dba <uxr_read_framed_msg+0x2f6>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	7023      	strb	r3, [r4, #0]
 8012fd2:	e588      	b.n	8012ae6 <uxr_read_framed_msg+0x22>
 8012fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fd6:	9300      	str	r3, [sp, #0]
 8012fd8:	2301      	movs	r3, #1
 8012fda:	e7ee      	b.n	8012fba <uxr_read_framed_msg+0x4f6>
 8012fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fde:	9300      	str	r3, [sp, #0]
 8012fe0:	2303      	movs	r3, #3
 8012fe2:	e7ea      	b.n	8012fba <uxr_read_framed_msg+0x4f6>
 8012fe4:	ee17 8a90 	vmov	r8, s15
 8012fe8:	e6ae      	b.n	8012d48 <uxr_read_framed_msg+0x284>
 8012fea:	bf00      	nop

08012fec <rcl_get_default_domain_id>:
 8012fec:	b530      	push	{r4, r5, lr}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	9300      	str	r3, [sp, #0]
 8012ff4:	b1d0      	cbz	r0, 801302c <rcl_get_default_domain_id+0x40>
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	4669      	mov	r1, sp
 8012ffa:	4815      	ldr	r0, [pc, #84]	@ (8013050 <rcl_get_default_domain_id+0x64>)
 8012ffc:	f7fd f920 	bl	8010240 <rcutils_get_env>
 8013000:	4602      	mov	r2, r0
 8013002:	b110      	cbz	r0, 801300a <rcl_get_default_domain_id+0x1e>
 8013004:	2001      	movs	r0, #1
 8013006:	b003      	add	sp, #12
 8013008:	bd30      	pop	{r4, r5, pc}
 801300a:	9b00      	ldr	r3, [sp, #0]
 801300c:	b18b      	cbz	r3, 8013032 <rcl_get_default_domain_id+0x46>
 801300e:	7818      	ldrb	r0, [r3, #0]
 8013010:	2800      	cmp	r0, #0
 8013012:	d0f8      	beq.n	8013006 <rcl_get_default_domain_id+0x1a>
 8013014:	a901      	add	r1, sp, #4
 8013016:	4618      	mov	r0, r3
 8013018:	9201      	str	r2, [sp, #4]
 801301a:	f001 fc01 	bl	8014820 <strtoul>
 801301e:	4605      	mov	r5, r0
 8013020:	b150      	cbz	r0, 8013038 <rcl_get_default_domain_id+0x4c>
 8013022:	1c43      	adds	r3, r0, #1
 8013024:	d00d      	beq.n	8013042 <rcl_get_default_domain_id+0x56>
 8013026:	6025      	str	r5, [r4, #0]
 8013028:	2000      	movs	r0, #0
 801302a:	e7ec      	b.n	8013006 <rcl_get_default_domain_id+0x1a>
 801302c:	200b      	movs	r0, #11
 801302e:	b003      	add	sp, #12
 8013030:	bd30      	pop	{r4, r5, pc}
 8013032:	4618      	mov	r0, r3
 8013034:	b003      	add	sp, #12
 8013036:	bd30      	pop	{r4, r5, pc}
 8013038:	9b01      	ldr	r3, [sp, #4]
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d0f2      	beq.n	8013026 <rcl_get_default_domain_id+0x3a>
 8013040:	e7e0      	b.n	8013004 <rcl_get_default_domain_id+0x18>
 8013042:	f001 fe0f 	bl	8014c64 <__errno>
 8013046:	6803      	ldr	r3, [r0, #0]
 8013048:	2b22      	cmp	r3, #34	@ 0x22
 801304a:	d1ec      	bne.n	8013026 <rcl_get_default_domain_id+0x3a>
 801304c:	e7da      	b.n	8013004 <rcl_get_default_domain_id+0x18>
 801304e:	bf00      	nop
 8013050:	080163b8 	.word	0x080163b8

08013054 <rcl_expand_topic_name>:
 8013054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013058:	b08b      	sub	sp, #44	@ 0x2c
 801305a:	9306      	str	r3, [sp, #24]
 801305c:	2800      	cmp	r0, #0
 801305e:	f000 80ad 	beq.w	80131bc <rcl_expand_topic_name+0x168>
 8013062:	460e      	mov	r6, r1
 8013064:	2900      	cmp	r1, #0
 8013066:	f000 80a9 	beq.w	80131bc <rcl_expand_topic_name+0x168>
 801306a:	4617      	mov	r7, r2
 801306c:	2a00      	cmp	r2, #0
 801306e:	f000 80a5 	beq.w	80131bc <rcl_expand_topic_name+0x168>
 8013072:	2b00      	cmp	r3, #0
 8013074:	f000 80a2 	beq.w	80131bc <rcl_expand_topic_name+0x168>
 8013078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801307a:	2b00      	cmp	r3, #0
 801307c:	f000 809e 	beq.w	80131bc <rcl_expand_topic_name+0x168>
 8013080:	2200      	movs	r2, #0
 8013082:	a909      	add	r1, sp, #36	@ 0x24
 8013084:	4680      	mov	r8, r0
 8013086:	f000 f9f5 	bl	8013474 <rcl_validate_topic_name>
 801308a:	4604      	mov	r4, r0
 801308c:	2800      	cmp	r0, #0
 801308e:	f040 8096 	bne.w	80131be <rcl_expand_topic_name+0x16a>
 8013092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013094:	2b00      	cmp	r3, #0
 8013096:	f040 809a 	bne.w	80131ce <rcl_expand_topic_name+0x17a>
 801309a:	4602      	mov	r2, r0
 801309c:	a909      	add	r1, sp, #36	@ 0x24
 801309e:	4630      	mov	r0, r6
 80130a0:	f7fd fcc0 	bl	8010a24 <rmw_validate_node_name>
 80130a4:	2800      	cmp	r0, #0
 80130a6:	f040 808e 	bne.w	80131c6 <rcl_expand_topic_name+0x172>
 80130aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130ac:	2a00      	cmp	r2, #0
 80130ae:	f040 8093 	bne.w	80131d8 <rcl_expand_topic_name+0x184>
 80130b2:	a909      	add	r1, sp, #36	@ 0x24
 80130b4:	4638      	mov	r0, r7
 80130b6:	f7fd fc97 	bl	80109e8 <rmw_validate_namespace>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	f040 8083 	bne.w	80131c6 <rcl_expand_topic_name+0x172>
 80130c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80130c2:	2c00      	cmp	r4, #0
 80130c4:	f040 80ed 	bne.w	80132a2 <rcl_expand_topic_name+0x24e>
 80130c8:	217b      	movs	r1, #123	@ 0x7b
 80130ca:	4640      	mov	r0, r8
 80130cc:	f001 fd3e 	bl	8014b4c <strchr>
 80130d0:	f898 3000 	ldrb.w	r3, [r8]
 80130d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80130d6:	4605      	mov	r5, r0
 80130d8:	f000 809e 	beq.w	8013218 <rcl_expand_topic_name+0x1c4>
 80130dc:	2b7e      	cmp	r3, #126	@ 0x7e
 80130de:	f040 80a2 	bne.w	8013226 <rcl_expand_topic_name+0x1d2>
 80130e2:	4638      	mov	r0, r7
 80130e4:	f7ed f89e 	bl	8000224 <strlen>
 80130e8:	4a82      	ldr	r2, [pc, #520]	@ (80132f4 <rcl_expand_topic_name+0x2a0>)
 80130ea:	4b83      	ldr	r3, [pc, #524]	@ (80132f8 <rcl_expand_topic_name+0x2a4>)
 80130ec:	2801      	cmp	r0, #1
 80130ee:	bf18      	it	ne
 80130f0:	4613      	movne	r3, r2
 80130f2:	9302      	str	r3, [sp, #8]
 80130f4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80130f6:	9300      	str	r3, [sp, #0]
 80130f8:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80130fc:	f108 0301 	add.w	r3, r8, #1
 8013100:	9305      	str	r3, [sp, #20]
 8013102:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013106:	9301      	str	r3, [sp, #4]
 8013108:	ab14      	add	r3, sp, #80	@ 0x50
 801310a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801310c:	f7fd f8b0 	bl	8010270 <rcutils_format_string_limit>
 8013110:	4682      	mov	sl, r0
 8013112:	2800      	cmp	r0, #0
 8013114:	f000 80c7 	beq.w	80132a6 <rcl_expand_topic_name+0x252>
 8013118:	2d00      	cmp	r5, #0
 801311a:	f000 80a2 	beq.w	8013262 <rcl_expand_topic_name+0x20e>
 801311e:	217b      	movs	r1, #123	@ 0x7b
 8013120:	f001 fd14 	bl	8014b4c <strchr>
 8013124:	46d1      	mov	r9, sl
 8013126:	4605      	mov	r5, r0
 8013128:	9407      	str	r4, [sp, #28]
 801312a:	46d3      	mov	fp, sl
 801312c:	464c      	mov	r4, r9
 801312e:	2d00      	cmp	r5, #0
 8013130:	f000 80be 	beq.w	80132b0 <rcl_expand_topic_name+0x25c>
 8013134:	217d      	movs	r1, #125	@ 0x7d
 8013136:	4620      	mov	r0, r4
 8013138:	f001 fd08 	bl	8014b4c <strchr>
 801313c:	eba0 0905 	sub.w	r9, r0, r5
 8013140:	f109 0a01 	add.w	sl, r9, #1
 8013144:	486d      	ldr	r0, [pc, #436]	@ (80132fc <rcl_expand_topic_name+0x2a8>)
 8013146:	4652      	mov	r2, sl
 8013148:	4629      	mov	r1, r5
 801314a:	f001 fd0c 	bl	8014b66 <strncmp>
 801314e:	2800      	cmp	r0, #0
 8013150:	d067      	beq.n	8013222 <rcl_expand_topic_name+0x1ce>
 8013152:	486b      	ldr	r0, [pc, #428]	@ (8013300 <rcl_expand_topic_name+0x2ac>)
 8013154:	4652      	mov	r2, sl
 8013156:	4629      	mov	r1, r5
 8013158:	f001 fd05 	bl	8014b66 <strncmp>
 801315c:	b130      	cbz	r0, 801316c <rcl_expand_topic_name+0x118>
 801315e:	4869      	ldr	r0, [pc, #420]	@ (8013304 <rcl_expand_topic_name+0x2b0>)
 8013160:	4652      	mov	r2, sl
 8013162:	4629      	mov	r1, r5
 8013164:	f001 fcff 	bl	8014b66 <strncmp>
 8013168:	2800      	cmp	r0, #0
 801316a:	d137      	bne.n	80131dc <rcl_expand_topic_name+0x188>
 801316c:	46b9      	mov	r9, r7
 801316e:	ab16      	add	r3, sp, #88	@ 0x58
 8013170:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013174:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8013178:	ab14      	add	r3, sp, #80	@ 0x50
 801317a:	4628      	mov	r0, r5
 801317c:	cb0c      	ldmia	r3, {r2, r3}
 801317e:	4651      	mov	r1, sl
 8013180:	f7fd f9b2 	bl	80104e8 <rcutils_strndup>
 8013184:	4605      	mov	r5, r0
 8013186:	2800      	cmp	r0, #0
 8013188:	f000 809c 	beq.w	80132c4 <rcl_expand_topic_name+0x270>
 801318c:	464a      	mov	r2, r9
 801318e:	4620      	mov	r0, r4
 8013190:	ab14      	add	r3, sp, #80	@ 0x50
 8013192:	4629      	mov	r1, r5
 8013194:	f7fd f8a6 	bl	80102e4 <rcutils_repl_str>
 8013198:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801319a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801319c:	4604      	mov	r4, r0
 801319e:	4628      	mov	r0, r5
 80131a0:	4798      	blx	r3
 80131a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80131a4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80131a6:	4658      	mov	r0, fp
 80131a8:	4798      	blx	r3
 80131aa:	2c00      	cmp	r4, #0
 80131ac:	d07b      	beq.n	80132a6 <rcl_expand_topic_name+0x252>
 80131ae:	217b      	movs	r1, #123	@ 0x7b
 80131b0:	4620      	mov	r0, r4
 80131b2:	f001 fccb 	bl	8014b4c <strchr>
 80131b6:	46a3      	mov	fp, r4
 80131b8:	4605      	mov	r5, r0
 80131ba:	e7b8      	b.n	801312e <rcl_expand_topic_name+0xda>
 80131bc:	240b      	movs	r4, #11
 80131be:	4620      	mov	r0, r4
 80131c0:	b00b      	add	sp, #44	@ 0x2c
 80131c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131c6:	f7fc fa97 	bl	800f6f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80131ca:	4604      	mov	r4, r0
 80131cc:	e7f7      	b.n	80131be <rcl_expand_topic_name+0x16a>
 80131ce:	2467      	movs	r4, #103	@ 0x67
 80131d0:	4620      	mov	r0, r4
 80131d2:	b00b      	add	sp, #44	@ 0x2c
 80131d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d8:	24c9      	movs	r4, #201	@ 0xc9
 80131da:	e7f0      	b.n	80131be <rcl_expand_topic_name+0x16a>
 80131dc:	f109 32ff 	add.w	r2, r9, #4294967295
 80131e0:	9806      	ldr	r0, [sp, #24]
 80131e2:	1c69      	adds	r1, r5, #1
 80131e4:	f7fd fa9a 	bl	801071c <rcutils_string_map_getn>
 80131e8:	4681      	mov	r9, r0
 80131ea:	2800      	cmp	r0, #0
 80131ec:	d1bf      	bne.n	801316e <rcl_expand_topic_name+0x11a>
 80131ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131f0:	aa16      	add	r2, sp, #88	@ 0x58
 80131f2:	6018      	str	r0, [r3, #0]
 80131f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80131f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80131fa:	ab14      	add	r3, sp, #80	@ 0x50
 80131fc:	cb0c      	ldmia	r3, {r2, r3}
 80131fe:	4651      	mov	r1, sl
 8013200:	4628      	mov	r0, r5
 8013202:	f7fd f971 	bl	80104e8 <rcutils_strndup>
 8013206:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013208:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801320a:	4798      	blx	r3
 801320c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801320e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013210:	4658      	mov	r0, fp
 8013212:	2469      	movs	r4, #105	@ 0x69
 8013214:	4798      	blx	r3
 8013216:	e7d2      	b.n	80131be <rcl_expand_topic_name+0x16a>
 8013218:	2800      	cmp	r0, #0
 801321a:	d05b      	beq.n	80132d4 <rcl_expand_topic_name+0x280>
 801321c:	46c1      	mov	r9, r8
 801321e:	46a2      	mov	sl, r4
 8013220:	e782      	b.n	8013128 <rcl_expand_topic_name+0xd4>
 8013222:	46b1      	mov	r9, r6
 8013224:	e7a3      	b.n	801316e <rcl_expand_topic_name+0x11a>
 8013226:	2800      	cmp	r0, #0
 8013228:	d1f8      	bne.n	801321c <rcl_expand_topic_name+0x1c8>
 801322a:	4638      	mov	r0, r7
 801322c:	f7ec fffa 	bl	8000224 <strlen>
 8013230:	4a35      	ldr	r2, [pc, #212]	@ (8013308 <rcl_expand_topic_name+0x2b4>)
 8013232:	4b36      	ldr	r3, [pc, #216]	@ (801330c <rcl_expand_topic_name+0x2b8>)
 8013234:	f8cd 8010 	str.w	r8, [sp, #16]
 8013238:	2801      	cmp	r0, #1
 801323a:	bf18      	it	ne
 801323c:	4613      	movne	r3, r2
 801323e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013242:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013246:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013248:	9703      	str	r7, [sp, #12]
 801324a:	9200      	str	r2, [sp, #0]
 801324c:	ab14      	add	r3, sp, #80	@ 0x50
 801324e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013250:	f7fd f80e 	bl	8010270 <rcutils_format_string_limit>
 8013254:	4682      	mov	sl, r0
 8013256:	4653      	mov	r3, sl
 8013258:	b32b      	cbz	r3, 80132a6 <rcl_expand_topic_name+0x252>
 801325a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801325c:	f8c3 a000 	str.w	sl, [r3]
 8013260:	e7ad      	b.n	80131be <rcl_expand_topic_name+0x16a>
 8013262:	f89a 3000 	ldrb.w	r3, [sl]
 8013266:	2b2f      	cmp	r3, #47	@ 0x2f
 8013268:	d0f7      	beq.n	801325a <rcl_expand_topic_name+0x206>
 801326a:	4638      	mov	r0, r7
 801326c:	f7ec ffda 	bl	8000224 <strlen>
 8013270:	4a25      	ldr	r2, [pc, #148]	@ (8013308 <rcl_expand_topic_name+0x2b4>)
 8013272:	4b26      	ldr	r3, [pc, #152]	@ (801330c <rcl_expand_topic_name+0x2b8>)
 8013274:	f8cd a010 	str.w	sl, [sp, #16]
 8013278:	2801      	cmp	r0, #1
 801327a:	bf18      	it	ne
 801327c:	4613      	movne	r3, r2
 801327e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8013282:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8013286:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8013288:	9703      	str	r7, [sp, #12]
 801328a:	9200      	str	r2, [sp, #0]
 801328c:	ab14      	add	r3, sp, #80	@ 0x50
 801328e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013290:	f7fc ffee 	bl	8010270 <rcutils_format_string_limit>
 8013294:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8013296:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8013298:	4605      	mov	r5, r0
 801329a:	4650      	mov	r0, sl
 801329c:	4798      	blx	r3
 801329e:	46aa      	mov	sl, r5
 80132a0:	e7d9      	b.n	8013256 <rcl_expand_topic_name+0x202>
 80132a2:	24ca      	movs	r4, #202	@ 0xca
 80132a4:	e78b      	b.n	80131be <rcl_expand_topic_name+0x16a>
 80132a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132a8:	2300      	movs	r3, #0
 80132aa:	6013      	str	r3, [r2, #0]
 80132ac:	240a      	movs	r4, #10
 80132ae:	e786      	b.n	80131be <rcl_expand_topic_name+0x16a>
 80132b0:	465b      	mov	r3, fp
 80132b2:	9c07      	ldr	r4, [sp, #28]
 80132b4:	46da      	mov	sl, fp
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d1d3      	bne.n	8013262 <rcl_expand_topic_name+0x20e>
 80132ba:	f898 3000 	ldrb.w	r3, [r8]
 80132be:	2b2f      	cmp	r3, #47	@ 0x2f
 80132c0:	d0cb      	beq.n	801325a <rcl_expand_topic_name+0x206>
 80132c2:	e7b2      	b.n	801322a <rcl_expand_topic_name+0x1d6>
 80132c4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 80132c8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80132ca:	6015      	str	r5, [r2, #0]
 80132cc:	4658      	mov	r0, fp
 80132ce:	4798      	blx	r3
 80132d0:	240a      	movs	r4, #10
 80132d2:	e774      	b.n	80131be <rcl_expand_topic_name+0x16a>
 80132d4:	ab17      	add	r3, sp, #92	@ 0x5c
 80132d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80132da:	e88d 0003 	stmia.w	sp, {r0, r1}
 80132de:	ab14      	add	r3, sp, #80	@ 0x50
 80132e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80132e2:	4640      	mov	r0, r8
 80132e4:	f7fd f8de 	bl	80104a4 <rcutils_strdup>
 80132e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132ea:	2800      	cmp	r0, #0
 80132ec:	6018      	str	r0, [r3, #0]
 80132ee:	bf08      	it	eq
 80132f0:	240a      	moveq	r4, #10
 80132f2:	e764      	b.n	80131be <rcl_expand_topic_name+0x16a>
 80132f4:	080163c8 	.word	0x080163c8
 80132f8:	08015c90 	.word	0x08015c90
 80132fc:	080163d0 	.word	0x080163d0
 8013300:	080163d8 	.word	0x080163d8
 8013304:	080163e0 	.word	0x080163e0
 8013308:	08015e24 	.word	0x08015e24
 801330c:	08015ca0 	.word	0x08015ca0

08013310 <rcl_get_default_topic_name_substitutions>:
 8013310:	2800      	cmp	r0, #0
 8013312:	bf0c      	ite	eq
 8013314:	200b      	moveq	r0, #11
 8013316:	2000      	movne	r0, #0
 8013318:	4770      	bx	lr
 801331a:	bf00      	nop

0801331c <rcl_get_zero_initialized_guard_condition>:
 801331c:	4a03      	ldr	r2, [pc, #12]	@ (801332c <rcl_get_zero_initialized_guard_condition+0x10>)
 801331e:	4603      	mov	r3, r0
 8013320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013324:	e883 0003 	stmia.w	r3, {r0, r1}
 8013328:	4618      	mov	r0, r3
 801332a:	4770      	bx	lr
 801332c:	080163ec 	.word	0x080163ec

08013330 <rcl_guard_condition_init_from_rmw>:
 8013330:	b082      	sub	sp, #8
 8013332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013336:	b086      	sub	sp, #24
 8013338:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801333c:	4604      	mov	r4, r0
 801333e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8013342:	460e      	mov	r6, r1
 8013344:	4617      	mov	r7, r2
 8013346:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801334a:	f10d 0e04 	add.w	lr, sp, #4
 801334e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013352:	f8dc 3000 	ldr.w	r3, [ip]
 8013356:	f8ce 3000 	str.w	r3, [lr]
 801335a:	a801      	add	r0, sp, #4
 801335c:	f7f7 ffce 	bl	800b2fc <rcutils_allocator_is_valid>
 8013360:	b350      	cbz	r0, 80133b8 <rcl_guard_condition_init_from_rmw+0x88>
 8013362:	b34c      	cbz	r4, 80133b8 <rcl_guard_condition_init_from_rmw+0x88>
 8013364:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8013368:	f1b8 0f00 	cmp.w	r8, #0
 801336c:	d11e      	bne.n	80133ac <rcl_guard_condition_init_from_rmw+0x7c>
 801336e:	b31f      	cbz	r7, 80133b8 <rcl_guard_condition_init_from_rmw+0x88>
 8013370:	4638      	mov	r0, r7
 8013372:	f7fc f9df 	bl	800f734 <rcl_context_is_valid>
 8013376:	b328      	cbz	r0, 80133c4 <rcl_guard_condition_init_from_rmw+0x94>
 8013378:	9b01      	ldr	r3, [sp, #4]
 801337a:	9905      	ldr	r1, [sp, #20]
 801337c:	201c      	movs	r0, #28
 801337e:	4798      	blx	r3
 8013380:	4605      	mov	r5, r0
 8013382:	6060      	str	r0, [r4, #4]
 8013384:	b358      	cbz	r0, 80133de <rcl_guard_condition_init_from_rmw+0xae>
 8013386:	b1fe      	cbz	r6, 80133c8 <rcl_guard_condition_init_from_rmw+0x98>
 8013388:	6006      	str	r6, [r0, #0]
 801338a:	f880 8004 	strb.w	r8, [r0, #4]
 801338e:	ac01      	add	r4, sp, #4
 8013390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013392:	f105 0c08 	add.w	ip, r5, #8
 8013396:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801339a:	6823      	ldr	r3, [r4, #0]
 801339c:	f8cc 3000 	str.w	r3, [ip]
 80133a0:	2000      	movs	r0, #0
 80133a2:	b006      	add	sp, #24
 80133a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133a8:	b002      	add	sp, #8
 80133aa:	4770      	bx	lr
 80133ac:	2064      	movs	r0, #100	@ 0x64
 80133ae:	b006      	add	sp, #24
 80133b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133b4:	b002      	add	sp, #8
 80133b6:	4770      	bx	lr
 80133b8:	200b      	movs	r0, #11
 80133ba:	b006      	add	sp, #24
 80133bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133c0:	b002      	add	sp, #8
 80133c2:	4770      	bx	lr
 80133c4:	2065      	movs	r0, #101	@ 0x65
 80133c6:	e7f2      	b.n	80133ae <rcl_guard_condition_init_from_rmw+0x7e>
 80133c8:	6838      	ldr	r0, [r7, #0]
 80133ca:	3028      	adds	r0, #40	@ 0x28
 80133cc:	f000 fa50 	bl	8013870 <rmw_create_guard_condition>
 80133d0:	6028      	str	r0, [r5, #0]
 80133d2:	6865      	ldr	r5, [r4, #4]
 80133d4:	682e      	ldr	r6, [r5, #0]
 80133d6:	b126      	cbz	r6, 80133e2 <rcl_guard_condition_init_from_rmw+0xb2>
 80133d8:	2301      	movs	r3, #1
 80133da:	712b      	strb	r3, [r5, #4]
 80133dc:	e7d7      	b.n	801338e <rcl_guard_condition_init_from_rmw+0x5e>
 80133de:	200a      	movs	r0, #10
 80133e0:	e7e5      	b.n	80133ae <rcl_guard_condition_init_from_rmw+0x7e>
 80133e2:	4628      	mov	r0, r5
 80133e4:	9b02      	ldr	r3, [sp, #8]
 80133e6:	9905      	ldr	r1, [sp, #20]
 80133e8:	4798      	blx	r3
 80133ea:	6066      	str	r6, [r4, #4]
 80133ec:	2001      	movs	r0, #1
 80133ee:	e7de      	b.n	80133ae <rcl_guard_condition_init_from_rmw+0x7e>

080133f0 <rcl_guard_condition_fini>:
 80133f0:	b570      	push	{r4, r5, r6, lr}
 80133f2:	b082      	sub	sp, #8
 80133f4:	b1f0      	cbz	r0, 8013434 <rcl_guard_condition_fini+0x44>
 80133f6:	6843      	ldr	r3, [r0, #4]
 80133f8:	4604      	mov	r4, r0
 80133fa:	b163      	cbz	r3, 8013416 <rcl_guard_condition_fini+0x26>
 80133fc:	6818      	ldr	r0, [r3, #0]
 80133fe:	68de      	ldr	r6, [r3, #12]
 8013400:	6999      	ldr	r1, [r3, #24]
 8013402:	b160      	cbz	r0, 801341e <rcl_guard_condition_fini+0x2e>
 8013404:	791d      	ldrb	r5, [r3, #4]
 8013406:	b965      	cbnz	r5, 8013422 <rcl_guard_condition_fini+0x32>
 8013408:	4618      	mov	r0, r3
 801340a:	47b0      	blx	r6
 801340c:	2300      	movs	r3, #0
 801340e:	4628      	mov	r0, r5
 8013410:	6063      	str	r3, [r4, #4]
 8013412:	b002      	add	sp, #8
 8013414:	bd70      	pop	{r4, r5, r6, pc}
 8013416:	461d      	mov	r5, r3
 8013418:	4628      	mov	r0, r5
 801341a:	b002      	add	sp, #8
 801341c:	bd70      	pop	{r4, r5, r6, pc}
 801341e:	4605      	mov	r5, r0
 8013420:	e7f2      	b.n	8013408 <rcl_guard_condition_fini+0x18>
 8013422:	9101      	str	r1, [sp, #4]
 8013424:	f000 fa38 	bl	8013898 <rmw_destroy_guard_condition>
 8013428:	1e05      	subs	r5, r0, #0
 801342a:	6863      	ldr	r3, [r4, #4]
 801342c:	9901      	ldr	r1, [sp, #4]
 801342e:	bf18      	it	ne
 8013430:	2501      	movne	r5, #1
 8013432:	e7e9      	b.n	8013408 <rcl_guard_condition_fini+0x18>
 8013434:	250b      	movs	r5, #11
 8013436:	4628      	mov	r0, r5
 8013438:	b002      	add	sp, #8
 801343a:	bd70      	pop	{r4, r5, r6, pc}

0801343c <rcl_guard_condition_get_default_options>:
 801343c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801343e:	b087      	sub	sp, #28
 8013440:	4606      	mov	r6, r0
 8013442:	4668      	mov	r0, sp
 8013444:	f7f7 ff4c 	bl	800b2e0 <rcutils_get_default_allocator>
 8013448:	4b09      	ldr	r3, [pc, #36]	@ (8013470 <rcl_guard_condition_get_default_options+0x34>)
 801344a:	46ee      	mov	lr, sp
 801344c:	469c      	mov	ip, r3
 801344e:	461d      	mov	r5, r3
 8013450:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801345a:	4634      	mov	r4, r6
 801345c:	f8de 7000 	ldr.w	r7, [lr]
 8013460:	f8cc 7000 	str.w	r7, [ip]
 8013464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013466:	4630      	mov	r0, r6
 8013468:	6027      	str	r7, [r4, #0]
 801346a:	b007      	add	sp, #28
 801346c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801346e:	bf00      	nop
 8013470:	20010edc 	.word	0x20010edc

08013474 <rcl_validate_topic_name>:
 8013474:	2800      	cmp	r0, #0
 8013476:	d07a      	beq.n	801356e <rcl_validate_topic_name+0xfa>
 8013478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801347c:	460e      	mov	r6, r1
 801347e:	2900      	cmp	r1, #0
 8013480:	d07c      	beq.n	801357c <rcl_validate_topic_name+0x108>
 8013482:	4617      	mov	r7, r2
 8013484:	4605      	mov	r5, r0
 8013486:	f7ec fecd 	bl	8000224 <strlen>
 801348a:	b1b0      	cbz	r0, 80134ba <rcl_validate_topic_name+0x46>
 801348c:	f895 9000 	ldrb.w	r9, [r5]
 8013490:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8013614 <rcl_validate_topic_name+0x1a0>
 8013494:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8013498:	f013 0304 	ands.w	r3, r3, #4
 801349c:	d169      	bne.n	8013572 <rcl_validate_topic_name+0xfe>
 801349e:	f100 38ff 	add.w	r8, r0, #4294967295
 80134a2:	f815 2008 	ldrb.w	r2, [r5, r8]
 80134a6:	2a2f      	cmp	r2, #47	@ 0x2f
 80134a8:	d10e      	bne.n	80134c8 <rcl_validate_topic_name+0x54>
 80134aa:	2202      	movs	r2, #2
 80134ac:	6032      	str	r2, [r6, #0]
 80134ae:	b36f      	cbz	r7, 801350c <rcl_validate_topic_name+0x98>
 80134b0:	f8c7 8000 	str.w	r8, [r7]
 80134b4:	4618      	mov	r0, r3
 80134b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ba:	2301      	movs	r3, #1
 80134bc:	6033      	str	r3, [r6, #0]
 80134be:	b32f      	cbz	r7, 801350c <rcl_validate_topic_name+0x98>
 80134c0:	2000      	movs	r0, #0
 80134c2:	6038      	str	r0, [r7, #0]
 80134c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134c8:	f105 3aff 	add.w	sl, r5, #4294967295
 80134cc:	461c      	mov	r4, r3
 80134ce:	4619      	mov	r1, r3
 80134d0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80134d4:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80134d8:	f1be 0f09 	cmp.w	lr, #9
 80134dc:	d919      	bls.n	8013512 <rcl_validate_topic_name+0x9e>
 80134de:	f022 0e20 	bic.w	lr, r2, #32
 80134e2:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80134e6:	f1be 0f19 	cmp.w	lr, #25
 80134ea:	d912      	bls.n	8013512 <rcl_validate_topic_name+0x9e>
 80134ec:	2a5f      	cmp	r2, #95	@ 0x5f
 80134ee:	d019      	beq.n	8013524 <rcl_validate_topic_name+0xb0>
 80134f0:	2a2f      	cmp	r2, #47	@ 0x2f
 80134f2:	d051      	beq.n	8013598 <rcl_validate_topic_name+0x124>
 80134f4:	2a7e      	cmp	r2, #126	@ 0x7e
 80134f6:	d048      	beq.n	801358a <rcl_validate_topic_name+0x116>
 80134f8:	2a7b      	cmp	r2, #123	@ 0x7b
 80134fa:	d054      	beq.n	80135a6 <rcl_validate_topic_name+0x132>
 80134fc:	2a7d      	cmp	r2, #125	@ 0x7d
 80134fe:	d161      	bne.n	80135c4 <rcl_validate_topic_name+0x150>
 8013500:	2c00      	cmp	r4, #0
 8013502:	d155      	bne.n	80135b0 <rcl_validate_topic_name+0x13c>
 8013504:	2305      	movs	r3, #5
 8013506:	6033      	str	r3, [r6, #0]
 8013508:	b107      	cbz	r7, 801350c <rcl_validate_topic_name+0x98>
 801350a:	6039      	str	r1, [r7, #0]
 801350c:	2000      	movs	r0, #0
 801350e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013512:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013516:	0752      	lsls	r2, r2, #29
 8013518:	d504      	bpl.n	8013524 <rcl_validate_topic_name+0xb0>
 801351a:	b11c      	cbz	r4, 8013524 <rcl_validate_topic_name+0xb0>
 801351c:	b111      	cbz	r1, 8013524 <rcl_validate_topic_name+0xb0>
 801351e:	1e4a      	subs	r2, r1, #1
 8013520:	429a      	cmp	r2, r3
 8013522:	d02d      	beq.n	8013580 <rcl_validate_topic_name+0x10c>
 8013524:	3101      	adds	r1, #1
 8013526:	4288      	cmp	r0, r1
 8013528:	d1d2      	bne.n	80134d0 <rcl_validate_topic_name+0x5c>
 801352a:	2c00      	cmp	r4, #0
 801352c:	d145      	bne.n	80135ba <rcl_validate_topic_name+0x146>
 801352e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8013532:	d04f      	beq.n	80135d4 <rcl_validate_topic_name+0x160>
 8013534:	4620      	mov	r0, r4
 8013536:	2301      	movs	r3, #1
 8013538:	e006      	b.n	8013548 <rcl_validate_topic_name+0xd4>
 801353a:	428b      	cmp	r3, r1
 801353c:	f105 0501 	add.w	r5, r5, #1
 8013540:	f103 0201 	add.w	r2, r3, #1
 8013544:	d236      	bcs.n	80135b4 <rcl_validate_topic_name+0x140>
 8013546:	4613      	mov	r3, r2
 8013548:	4580      	cmp	r8, r0
 801354a:	f100 0001 	add.w	r0, r0, #1
 801354e:	d0f4      	beq.n	801353a <rcl_validate_topic_name+0xc6>
 8013550:	782a      	ldrb	r2, [r5, #0]
 8013552:	2a2f      	cmp	r2, #47	@ 0x2f
 8013554:	d1f1      	bne.n	801353a <rcl_validate_topic_name+0xc6>
 8013556:	786a      	ldrb	r2, [r5, #1]
 8013558:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801355c:	0754      	lsls	r4, r2, #29
 801355e:	d5ec      	bpl.n	801353a <rcl_validate_topic_name+0xc6>
 8013560:	2204      	movs	r2, #4
 8013562:	6032      	str	r2, [r6, #0]
 8013564:	2f00      	cmp	r7, #0
 8013566:	d0d1      	beq.n	801350c <rcl_validate_topic_name+0x98>
 8013568:	603b      	str	r3, [r7, #0]
 801356a:	2000      	movs	r0, #0
 801356c:	e7aa      	b.n	80134c4 <rcl_validate_topic_name+0x50>
 801356e:	200b      	movs	r0, #11
 8013570:	4770      	bx	lr
 8013572:	2304      	movs	r3, #4
 8013574:	6033      	str	r3, [r6, #0]
 8013576:	2f00      	cmp	r7, #0
 8013578:	d1a2      	bne.n	80134c0 <rcl_validate_topic_name+0x4c>
 801357a:	e7c7      	b.n	801350c <rcl_validate_topic_name+0x98>
 801357c:	200b      	movs	r0, #11
 801357e:	e7a1      	b.n	80134c4 <rcl_validate_topic_name+0x50>
 8013580:	2309      	movs	r3, #9
 8013582:	6033      	str	r3, [r6, #0]
 8013584:	2f00      	cmp	r7, #0
 8013586:	d1c0      	bne.n	801350a <rcl_validate_topic_name+0x96>
 8013588:	e7c0      	b.n	801350c <rcl_validate_topic_name+0x98>
 801358a:	2900      	cmp	r1, #0
 801358c:	d0ca      	beq.n	8013524 <rcl_validate_topic_name+0xb0>
 801358e:	2306      	movs	r3, #6
 8013590:	6033      	str	r3, [r6, #0]
 8013592:	2f00      	cmp	r7, #0
 8013594:	d1b9      	bne.n	801350a <rcl_validate_topic_name+0x96>
 8013596:	e7b9      	b.n	801350c <rcl_validate_topic_name+0x98>
 8013598:	2c00      	cmp	r4, #0
 801359a:	d0c3      	beq.n	8013524 <rcl_validate_topic_name+0xb0>
 801359c:	2308      	movs	r3, #8
 801359e:	6033      	str	r3, [r6, #0]
 80135a0:	2f00      	cmp	r7, #0
 80135a2:	d1b2      	bne.n	801350a <rcl_validate_topic_name+0x96>
 80135a4:	e7b2      	b.n	801350c <rcl_validate_topic_name+0x98>
 80135a6:	2c00      	cmp	r4, #0
 80135a8:	d1f8      	bne.n	801359c <rcl_validate_topic_name+0x128>
 80135aa:	460b      	mov	r3, r1
 80135ac:	2401      	movs	r4, #1
 80135ae:	e7b9      	b.n	8013524 <rcl_validate_topic_name+0xb0>
 80135b0:	2400      	movs	r4, #0
 80135b2:	e7b7      	b.n	8013524 <rcl_validate_topic_name+0xb0>
 80135b4:	2000      	movs	r0, #0
 80135b6:	6030      	str	r0, [r6, #0]
 80135b8:	e784      	b.n	80134c4 <rcl_validate_topic_name+0x50>
 80135ba:	2205      	movs	r2, #5
 80135bc:	6032      	str	r2, [r6, #0]
 80135be:	2f00      	cmp	r7, #0
 80135c0:	d1d2      	bne.n	8013568 <rcl_validate_topic_name+0xf4>
 80135c2:	e7a3      	b.n	801350c <rcl_validate_topic_name+0x98>
 80135c4:	2c00      	cmp	r4, #0
 80135c6:	bf14      	ite	ne
 80135c8:	2308      	movne	r3, #8
 80135ca:	2303      	moveq	r3, #3
 80135cc:	6033      	str	r3, [r6, #0]
 80135ce:	2f00      	cmp	r7, #0
 80135d0:	d19b      	bne.n	801350a <rcl_validate_topic_name+0x96>
 80135d2:	e79b      	b.n	801350c <rcl_validate_topic_name+0x98>
 80135d4:	2301      	movs	r3, #1
 80135d6:	e00a      	b.n	80135ee <rcl_validate_topic_name+0x17a>
 80135d8:	2c01      	cmp	r4, #1
 80135da:	d013      	beq.n	8013604 <rcl_validate_topic_name+0x190>
 80135dc:	4299      	cmp	r1, r3
 80135de:	f104 0401 	add.w	r4, r4, #1
 80135e2:	f105 0501 	add.w	r5, r5, #1
 80135e6:	f103 0201 	add.w	r2, r3, #1
 80135ea:	d9e3      	bls.n	80135b4 <rcl_validate_topic_name+0x140>
 80135ec:	4613      	mov	r3, r2
 80135ee:	45a0      	cmp	r8, r4
 80135f0:	d0f4      	beq.n	80135dc <rcl_validate_topic_name+0x168>
 80135f2:	782a      	ldrb	r2, [r5, #0]
 80135f4:	2a2f      	cmp	r2, #47	@ 0x2f
 80135f6:	d1ef      	bne.n	80135d8 <rcl_validate_topic_name+0x164>
 80135f8:	786a      	ldrb	r2, [r5, #1]
 80135fa:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80135fe:	0752      	lsls	r2, r2, #29
 8013600:	d5ec      	bpl.n	80135dc <rcl_validate_topic_name+0x168>
 8013602:	e7ad      	b.n	8013560 <rcl_validate_topic_name+0xec>
 8013604:	2307      	movs	r3, #7
 8013606:	6033      	str	r3, [r6, #0]
 8013608:	2f00      	cmp	r7, #0
 801360a:	f43f af7f 	beq.w	801350c <rcl_validate_topic_name+0x98>
 801360e:	603c      	str	r4, [r7, #0]
 8013610:	2000      	movs	r0, #0
 8013612:	e757      	b.n	80134c4 <rcl_validate_topic_name+0x50>
 8013614:	08016834 	.word	0x08016834

08013618 <on_status>:
 8013618:	b082      	sub	sp, #8
 801361a:	b002      	add	sp, #8
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop

08013620 <on_topic>:
 8013620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013624:	4a22      	ldr	r2, [pc, #136]	@ (80136b0 <on_topic+0x90>)
 8013626:	b094      	sub	sp, #80	@ 0x50
 8013628:	6812      	ldr	r2, [r2, #0]
 801362a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801362c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013630:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8013634:	b3c2      	cbz	r2, 80136a8 <on_topic+0x88>
 8013636:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801363a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801363e:	e001      	b.n	8013644 <on_topic+0x24>
 8013640:	6852      	ldr	r2, [r2, #4]
 8013642:	b38a      	cbz	r2, 80136a8 <on_topic+0x88>
 8013644:	6894      	ldr	r4, [r2, #8]
 8013646:	8aa3      	ldrh	r3, [r4, #20]
 8013648:	428b      	cmp	r3, r1
 801364a:	d1f9      	bne.n	8013640 <on_topic+0x20>
 801364c:	7da3      	ldrb	r3, [r4, #22]
 801364e:	4283      	cmp	r3, r0
 8013650:	d1f6      	bne.n	8013640 <on_topic+0x20>
 8013652:	2248      	movs	r2, #72	@ 0x48
 8013654:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013658:	4668      	mov	r0, sp
 801365a:	f001 fb38 	bl	8014cce <memcpy>
 801365e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8013662:	cb0c      	ldmia	r3, {r2, r3}
 8013664:	4620      	mov	r0, r4
 8013666:	f7f8 fa2b 	bl	800bac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801366a:	4607      	mov	r7, r0
 801366c:	b1e0      	cbz	r0, 80136a8 <on_topic+0x88>
 801366e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8013672:	4632      	mov	r2, r6
 8013674:	4628      	mov	r0, r5
 8013676:	f108 0110 	add.w	r1, r8, #16
 801367a:	f7fe f831 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 801367e:	b930      	cbnz	r0, 801368e <on_topic+0x6e>
 8013680:	480c      	ldr	r0, [pc, #48]	@ (80136b4 <on_topic+0x94>)
 8013682:	4639      	mov	r1, r7
 8013684:	b014      	add	sp, #80	@ 0x50
 8013686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801368a:	f7fd ba39 	b.w	8010b00 <put_memory>
 801368e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8013692:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8013696:	f7fd ff19 	bl	80114cc <rmw_uros_epoch_nanos>
 801369a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801369e:	2305      	movs	r3, #5
 80136a0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80136a4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80136a8:	b014      	add	sp, #80	@ 0x50
 80136aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136ae:	bf00      	nop
 80136b0:	20010dac 	.word	0x20010dac
 80136b4:	20010d9c 	.word	0x20010d9c

080136b8 <on_request>:
 80136b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136bc:	4823      	ldr	r0, [pc, #140]	@ (801374c <on_request+0x94>)
 80136be:	b094      	sub	sp, #80	@ 0x50
 80136c0:	6800      	ldr	r0, [r0, #0]
 80136c2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80136c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80136c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d03b      	beq.n	8013746 <on_request+0x8e>
 80136ce:	461d      	mov	r5, r3
 80136d0:	e001      	b.n	80136d6 <on_request+0x1e>
 80136d2:	6840      	ldr	r0, [r0, #4]
 80136d4:	b3b8      	cbz	r0, 8013746 <on_request+0x8e>
 80136d6:	6884      	ldr	r4, [r0, #8]
 80136d8:	8b21      	ldrh	r1, [r4, #24]
 80136da:	4291      	cmp	r1, r2
 80136dc:	d1f9      	bne.n	80136d2 <on_request+0x1a>
 80136de:	2248      	movs	r2, #72	@ 0x48
 80136e0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80136e4:	4668      	mov	r0, sp
 80136e6:	f001 faf2 	bl	8014cce <memcpy>
 80136ea:	f104 0320 	add.w	r3, r4, #32
 80136ee:	cb0c      	ldmia	r3, {r2, r3}
 80136f0:	4620      	mov	r0, r4
 80136f2:	f7f8 f9e5 	bl	800bac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80136f6:	4680      	mov	r8, r0
 80136f8:	b328      	cbz	r0, 8013746 <on_request+0x8e>
 80136fa:	4638      	mov	r0, r7
 80136fc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8013700:	4632      	mov	r2, r6
 8013702:	f107 0110 	add.w	r1, r7, #16
 8013706:	f7fd ffeb 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 801370a:	b930      	cbnz	r0, 801371a <on_request+0x62>
 801370c:	4810      	ldr	r0, [pc, #64]	@ (8013750 <on_request+0x98>)
 801370e:	4641      	mov	r1, r8
 8013710:	b014      	add	sp, #80	@ 0x50
 8013712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013716:	f7fd b9f3 	b.w	8010b00 <put_memory>
 801371a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801371c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8013720:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8013724:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8013728:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801372c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013730:	e88c 0003 	stmia.w	ip, {r0, r1}
 8013734:	f7fd feca 	bl	80114cc <rmw_uros_epoch_nanos>
 8013738:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801373c:	2303      	movs	r3, #3
 801373e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8013742:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8013746:	b014      	add	sp, #80	@ 0x50
 8013748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801374c:	20010d7c 	.word	0x20010d7c
 8013750:	20010d9c 	.word	0x20010d9c

08013754 <on_reply>:
 8013754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013758:	4821      	ldr	r0, [pc, #132]	@ (80137e0 <on_reply+0x8c>)
 801375a:	b094      	sub	sp, #80	@ 0x50
 801375c:	6800      	ldr	r0, [r0, #0]
 801375e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013760:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8013764:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013766:	b3b8      	cbz	r0, 80137d8 <on_reply+0x84>
 8013768:	461d      	mov	r5, r3
 801376a:	e001      	b.n	8013770 <on_reply+0x1c>
 801376c:	6840      	ldr	r0, [r0, #4]
 801376e:	b398      	cbz	r0, 80137d8 <on_reply+0x84>
 8013770:	6884      	ldr	r4, [r0, #8]
 8013772:	8b21      	ldrh	r1, [r4, #24]
 8013774:	4291      	cmp	r1, r2
 8013776:	d1f9      	bne.n	801376c <on_reply+0x18>
 8013778:	2248      	movs	r2, #72	@ 0x48
 801377a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801377e:	4668      	mov	r0, sp
 8013780:	f001 faa5 	bl	8014cce <memcpy>
 8013784:	f104 0320 	add.w	r3, r4, #32
 8013788:	cb0c      	ldmia	r3, {r2, r3}
 801378a:	4620      	mov	r0, r4
 801378c:	f7f8 f998 	bl	800bac0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8013790:	4680      	mov	r8, r0
 8013792:	b308      	cbz	r0, 80137d8 <on_reply+0x84>
 8013794:	4638      	mov	r0, r7
 8013796:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801379a:	4632      	mov	r2, r6
 801379c:	f107 0110 	add.w	r1, r7, #16
 80137a0:	f7fd ff9e 	bl	80116e0 <ucdr_deserialize_array_uint8_t>
 80137a4:	b930      	cbnz	r0, 80137b4 <on_reply+0x60>
 80137a6:	480f      	ldr	r0, [pc, #60]	@ (80137e4 <on_reply+0x90>)
 80137a8:	4641      	mov	r1, r8
 80137aa:	b014      	add	sp, #80	@ 0x50
 80137ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80137b0:	f7fd b9a6 	b.w	8010b00 <put_memory>
 80137b4:	2200      	movs	r2, #0
 80137b6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80137ba:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80137be:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80137c2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80137c6:	f7fd fe81 	bl	80114cc <rmw_uros_epoch_nanos>
 80137ca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80137ce:	2304      	movs	r3, #4
 80137d0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80137d4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80137d8:	b014      	add	sp, #80	@ 0x50
 80137da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137de:	bf00      	nop
 80137e0:	2000c490 	.word	0x2000c490
 80137e4:	20010d9c 	.word	0x20010d9c

080137e8 <rmw_destroy_client>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	b128      	cbz	r0, 80137f8 <rmw_destroy_client+0x10>
 80137ec:	4604      	mov	r4, r0
 80137ee:	6800      	ldr	r0, [r0, #0]
 80137f0:	460d      	mov	r5, r1
 80137f2:	f7f8 fa35 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 80137f6:	b910      	cbnz	r0, 80137fe <rmw_destroy_client+0x16>
 80137f8:	2401      	movs	r4, #1
 80137fa:	4620      	mov	r0, r4
 80137fc:	bd70      	pop	{r4, r5, r6, pc}
 80137fe:	6863      	ldr	r3, [r4, #4]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d0f9      	beq.n	80137f8 <rmw_destroy_client+0x10>
 8013804:	2d00      	cmp	r5, #0
 8013806:	d0f7      	beq.n	80137f8 <rmw_destroy_client+0x10>
 8013808:	6828      	ldr	r0, [r5, #0]
 801380a:	f7f8 fa29 	bl	800bc60 <is_uxrce_rmw_identifier_valid>
 801380e:	2800      	cmp	r0, #0
 8013810:	d0f2      	beq.n	80137f8 <rmw_destroy_client+0x10>
 8013812:	686e      	ldr	r6, [r5, #4]
 8013814:	2e00      	cmp	r6, #0
 8013816:	d0ef      	beq.n	80137f8 <rmw_destroy_client+0x10>
 8013818:	6864      	ldr	r4, [r4, #4]
 801381a:	6932      	ldr	r2, [r6, #16]
 801381c:	6920      	ldr	r0, [r4, #16]
 801381e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013822:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013826:	6819      	ldr	r1, [r3, #0]
 8013828:	f7fe fe38 	bl	801249c <uxr_buffer_cancel_data>
 801382c:	4602      	mov	r2, r0
 801382e:	6920      	ldr	r0, [r4, #16]
 8013830:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013834:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8013838:	f7f8 f992 	bl	800bb60 <run_xrce_session>
 801383c:	6920      	ldr	r0, [r4, #16]
 801383e:	6932      	ldr	r2, [r6, #16]
 8013840:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8013844:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8013848:	6819      	ldr	r1, [r3, #0]
 801384a:	f7f9 fac5 	bl	800cdd8 <uxr_buffer_delete_entity>
 801384e:	4602      	mov	r2, r0
 8013850:	6920      	ldr	r0, [r4, #16]
 8013852:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8013856:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801385a:	f7f8 f981 	bl	800bb60 <run_xrce_session>
 801385e:	2800      	cmp	r0, #0
 8013860:	4628      	mov	r0, r5
 8013862:	bf14      	ite	ne
 8013864:	2400      	movne	r4, #0
 8013866:	2402      	moveq	r4, #2
 8013868:	f7f8 f908 	bl	800ba7c <rmw_uxrce_fini_client_memory>
 801386c:	e7c5      	b.n	80137fa <rmw_destroy_client+0x12>
 801386e:	bf00      	nop

08013870 <rmw_create_guard_condition>:
 8013870:	b538      	push	{r3, r4, r5, lr}
 8013872:	4605      	mov	r5, r0
 8013874:	4807      	ldr	r0, [pc, #28]	@ (8013894 <rmw_create_guard_condition+0x24>)
 8013876:	f7fd f933 	bl	8010ae0 <get_memory>
 801387a:	b148      	cbz	r0, 8013890 <rmw_create_guard_condition+0x20>
 801387c:	6884      	ldr	r4, [r0, #8]
 801387e:	2300      	movs	r3, #0
 8013880:	7423      	strb	r3, [r4, #16]
 8013882:	61e5      	str	r5, [r4, #28]
 8013884:	f7fd f950 	bl	8010b28 <rmw_get_implementation_identifier>
 8013888:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801388c:	f104 0014 	add.w	r0, r4, #20
 8013890:	bd38      	pop	{r3, r4, r5, pc}
 8013892:	bf00      	nop
 8013894:	20010d3c 	.word	0x20010d3c

08013898 <rmw_destroy_guard_condition>:
 8013898:	b508      	push	{r3, lr}
 801389a:	4b08      	ldr	r3, [pc, #32]	@ (80138bc <rmw_destroy_guard_condition+0x24>)
 801389c:	6819      	ldr	r1, [r3, #0]
 801389e:	b911      	cbnz	r1, 80138a6 <rmw_destroy_guard_condition+0xe>
 80138a0:	e00a      	b.n	80138b8 <rmw_destroy_guard_condition+0x20>
 80138a2:	6849      	ldr	r1, [r1, #4]
 80138a4:	b141      	cbz	r1, 80138b8 <rmw_destroy_guard_condition+0x20>
 80138a6:	688b      	ldr	r3, [r1, #8]
 80138a8:	3314      	adds	r3, #20
 80138aa:	4298      	cmp	r0, r3
 80138ac:	d1f9      	bne.n	80138a2 <rmw_destroy_guard_condition+0xa>
 80138ae:	4803      	ldr	r0, [pc, #12]	@ (80138bc <rmw_destroy_guard_condition+0x24>)
 80138b0:	f7fd f926 	bl	8010b00 <put_memory>
 80138b4:	2000      	movs	r0, #0
 80138b6:	bd08      	pop	{r3, pc}
 80138b8:	2001      	movs	r0, #1
 80138ba:	bd08      	pop	{r3, pc}
 80138bc:	20010d3c 	.word	0x20010d3c

080138c0 <cosf>:
 80138c0:	ee10 3a10 	vmov	r3, s0
 80138c4:	b507      	push	{r0, r1, r2, lr}
 80138c6:	4a1e      	ldr	r2, [pc, #120]	@ (8013940 <cosf+0x80>)
 80138c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80138cc:	4293      	cmp	r3, r2
 80138ce:	d806      	bhi.n	80138de <cosf+0x1e>
 80138d0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8013944 <cosf+0x84>
 80138d4:	b003      	add	sp, #12
 80138d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80138da:	f000 b87b 	b.w	80139d4 <__kernel_cosf>
 80138de:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80138e2:	d304      	bcc.n	80138ee <cosf+0x2e>
 80138e4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80138e8:	b003      	add	sp, #12
 80138ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80138ee:	4668      	mov	r0, sp
 80138f0:	f000 f910 	bl	8013b14 <__ieee754_rem_pio2f>
 80138f4:	f000 0003 	and.w	r0, r0, #3
 80138f8:	2801      	cmp	r0, #1
 80138fa:	d009      	beq.n	8013910 <cosf+0x50>
 80138fc:	2802      	cmp	r0, #2
 80138fe:	d010      	beq.n	8013922 <cosf+0x62>
 8013900:	b9b0      	cbnz	r0, 8013930 <cosf+0x70>
 8013902:	eddd 0a01 	vldr	s1, [sp, #4]
 8013906:	ed9d 0a00 	vldr	s0, [sp]
 801390a:	f000 f863 	bl	80139d4 <__kernel_cosf>
 801390e:	e7eb      	b.n	80138e8 <cosf+0x28>
 8013910:	eddd 0a01 	vldr	s1, [sp, #4]
 8013914:	ed9d 0a00 	vldr	s0, [sp]
 8013918:	f000 f8b4 	bl	8013a84 <__kernel_sinf>
 801391c:	eeb1 0a40 	vneg.f32	s0, s0
 8013920:	e7e2      	b.n	80138e8 <cosf+0x28>
 8013922:	eddd 0a01 	vldr	s1, [sp, #4]
 8013926:	ed9d 0a00 	vldr	s0, [sp]
 801392a:	f000 f853 	bl	80139d4 <__kernel_cosf>
 801392e:	e7f5      	b.n	801391c <cosf+0x5c>
 8013930:	eddd 0a01 	vldr	s1, [sp, #4]
 8013934:	ed9d 0a00 	vldr	s0, [sp]
 8013938:	2001      	movs	r0, #1
 801393a:	f000 f8a3 	bl	8013a84 <__kernel_sinf>
 801393e:	e7d3      	b.n	80138e8 <cosf+0x28>
 8013940:	3f490fd8 	.word	0x3f490fd8
 8013944:	00000000 	.word	0x00000000

08013948 <sinf>:
 8013948:	ee10 3a10 	vmov	r3, s0
 801394c:	b507      	push	{r0, r1, r2, lr}
 801394e:	4a1f      	ldr	r2, [pc, #124]	@ (80139cc <sinf+0x84>)
 8013950:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013954:	4293      	cmp	r3, r2
 8013956:	d807      	bhi.n	8013968 <sinf+0x20>
 8013958:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80139d0 <sinf+0x88>
 801395c:	2000      	movs	r0, #0
 801395e:	b003      	add	sp, #12
 8013960:	f85d eb04 	ldr.w	lr, [sp], #4
 8013964:	f000 b88e 	b.w	8013a84 <__kernel_sinf>
 8013968:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801396c:	d304      	bcc.n	8013978 <sinf+0x30>
 801396e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013972:	b003      	add	sp, #12
 8013974:	f85d fb04 	ldr.w	pc, [sp], #4
 8013978:	4668      	mov	r0, sp
 801397a:	f000 f8cb 	bl	8013b14 <__ieee754_rem_pio2f>
 801397e:	f000 0003 	and.w	r0, r0, #3
 8013982:	2801      	cmp	r0, #1
 8013984:	d00a      	beq.n	801399c <sinf+0x54>
 8013986:	2802      	cmp	r0, #2
 8013988:	d00f      	beq.n	80139aa <sinf+0x62>
 801398a:	b9c0      	cbnz	r0, 80139be <sinf+0x76>
 801398c:	eddd 0a01 	vldr	s1, [sp, #4]
 8013990:	ed9d 0a00 	vldr	s0, [sp]
 8013994:	2001      	movs	r0, #1
 8013996:	f000 f875 	bl	8013a84 <__kernel_sinf>
 801399a:	e7ea      	b.n	8013972 <sinf+0x2a>
 801399c:	eddd 0a01 	vldr	s1, [sp, #4]
 80139a0:	ed9d 0a00 	vldr	s0, [sp]
 80139a4:	f000 f816 	bl	80139d4 <__kernel_cosf>
 80139a8:	e7e3      	b.n	8013972 <sinf+0x2a>
 80139aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80139ae:	ed9d 0a00 	vldr	s0, [sp]
 80139b2:	2001      	movs	r0, #1
 80139b4:	f000 f866 	bl	8013a84 <__kernel_sinf>
 80139b8:	eeb1 0a40 	vneg.f32	s0, s0
 80139bc:	e7d9      	b.n	8013972 <sinf+0x2a>
 80139be:	eddd 0a01 	vldr	s1, [sp, #4]
 80139c2:	ed9d 0a00 	vldr	s0, [sp]
 80139c6:	f000 f805 	bl	80139d4 <__kernel_cosf>
 80139ca:	e7f5      	b.n	80139b8 <sinf+0x70>
 80139cc:	3f490fd8 	.word	0x3f490fd8
 80139d0:	00000000 	.word	0x00000000

080139d4 <__kernel_cosf>:
 80139d4:	ee10 3a10 	vmov	r3, s0
 80139d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80139dc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80139e0:	eef0 6a40 	vmov.f32	s13, s0
 80139e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80139e8:	d204      	bcs.n	80139f4 <__kernel_cosf+0x20>
 80139ea:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80139ee:	ee17 2a90 	vmov	r2, s15
 80139f2:	b342      	cbz	r2, 8013a46 <__kernel_cosf+0x72>
 80139f4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80139f8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013a64 <__kernel_cosf+0x90>
 80139fc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013a68 <__kernel_cosf+0x94>
 8013a00:	4a1a      	ldr	r2, [pc, #104]	@ (8013a6c <__kernel_cosf+0x98>)
 8013a02:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013a06:	4293      	cmp	r3, r2
 8013a08:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013a70 <__kernel_cosf+0x9c>
 8013a0c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013a10:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013a74 <__kernel_cosf+0xa0>
 8013a14:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013a18:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013a78 <__kernel_cosf+0xa4>
 8013a1c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013a20:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013a7c <__kernel_cosf+0xa8>
 8013a24:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013a28:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013a2c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013a30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013a34:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013a3c:	d804      	bhi.n	8013a48 <__kernel_cosf+0x74>
 8013a3e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013a42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013a46:	4770      	bx	lr
 8013a48:	4a0d      	ldr	r2, [pc, #52]	@ (8013a80 <__kernel_cosf+0xac>)
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	bf9a      	itte	ls
 8013a4e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013a52:	ee07 3a10 	vmovls	s14, r3
 8013a56:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013a5a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a62:	e7ec      	b.n	8013a3e <__kernel_cosf+0x6a>
 8013a64:	ad47d74e 	.word	0xad47d74e
 8013a68:	310f74f6 	.word	0x310f74f6
 8013a6c:	3e999999 	.word	0x3e999999
 8013a70:	b493f27c 	.word	0xb493f27c
 8013a74:	37d00d01 	.word	0x37d00d01
 8013a78:	bab60b61 	.word	0xbab60b61
 8013a7c:	3d2aaaab 	.word	0x3d2aaaab
 8013a80:	3f480000 	.word	0x3f480000

08013a84 <__kernel_sinf>:
 8013a84:	ee10 3a10 	vmov	r3, s0
 8013a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013a8c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013a90:	d204      	bcs.n	8013a9c <__kernel_sinf+0x18>
 8013a92:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013a96:	ee17 3a90 	vmov	r3, s15
 8013a9a:	b35b      	cbz	r3, 8013af4 <__kernel_sinf+0x70>
 8013a9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013aa0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8013af8 <__kernel_sinf+0x74>
 8013aa4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013afc <__kernel_sinf+0x78>
 8013aa8:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013aac:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013b00 <__kernel_sinf+0x7c>
 8013ab0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013ab4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013b04 <__kernel_sinf+0x80>
 8013ab8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013abc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013b08 <__kernel_sinf+0x84>
 8013ac0:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013ac4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013ac8:	b930      	cbnz	r0, 8013ad8 <__kernel_sinf+0x54>
 8013aca:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013b0c <__kernel_sinf+0x88>
 8013ace:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013ad2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013ad6:	4770      	bx	lr
 8013ad8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013adc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013ae0:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013ae4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013ae8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013b10 <__kernel_sinf+0x8c>
 8013aec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013af0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013af4:	4770      	bx	lr
 8013af6:	bf00      	nop
 8013af8:	2f2ec9d3 	.word	0x2f2ec9d3
 8013afc:	b2d72f34 	.word	0xb2d72f34
 8013b00:	3638ef1b 	.word	0x3638ef1b
 8013b04:	b9500d01 	.word	0xb9500d01
 8013b08:	3c088889 	.word	0x3c088889
 8013b0c:	be2aaaab 	.word	0xbe2aaaab
 8013b10:	3e2aaaab 	.word	0x3e2aaaab

08013b14 <__ieee754_rem_pio2f>:
 8013b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b16:	ee10 6a10 	vmov	r6, s0
 8013b1a:	4b88      	ldr	r3, [pc, #544]	@ (8013d3c <__ieee754_rem_pio2f+0x228>)
 8013b1c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013b20:	429d      	cmp	r5, r3
 8013b22:	b087      	sub	sp, #28
 8013b24:	4604      	mov	r4, r0
 8013b26:	d805      	bhi.n	8013b34 <__ieee754_rem_pio2f+0x20>
 8013b28:	2300      	movs	r3, #0
 8013b2a:	ed80 0a00 	vstr	s0, [r0]
 8013b2e:	6043      	str	r3, [r0, #4]
 8013b30:	2000      	movs	r0, #0
 8013b32:	e022      	b.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013b34:	4b82      	ldr	r3, [pc, #520]	@ (8013d40 <__ieee754_rem_pio2f+0x22c>)
 8013b36:	429d      	cmp	r5, r3
 8013b38:	d83a      	bhi.n	8013bb0 <__ieee754_rem_pio2f+0x9c>
 8013b3a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013b3e:	2e00      	cmp	r6, #0
 8013b40:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013d44 <__ieee754_rem_pio2f+0x230>
 8013b44:	4a80      	ldr	r2, [pc, #512]	@ (8013d48 <__ieee754_rem_pio2f+0x234>)
 8013b46:	f023 030f 	bic.w	r3, r3, #15
 8013b4a:	dd18      	ble.n	8013b7e <__ieee754_rem_pio2f+0x6a>
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013b52:	bf09      	itett	eq
 8013b54:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013d4c <__ieee754_rem_pio2f+0x238>
 8013b58:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013d50 <__ieee754_rem_pio2f+0x23c>
 8013b5c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013d54 <__ieee754_rem_pio2f+0x240>
 8013b60:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013b64:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b6c:	ed80 7a00 	vstr	s14, [r0]
 8013b70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013b74:	edc0 7a01 	vstr	s15, [r0, #4]
 8013b78:	2001      	movs	r0, #1
 8013b7a:	b007      	add	sp, #28
 8013b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013b84:	bf09      	itett	eq
 8013b86:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013d4c <__ieee754_rem_pio2f+0x238>
 8013b8a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013d50 <__ieee754_rem_pio2f+0x23c>
 8013b8e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013d54 <__ieee754_rem_pio2f+0x240>
 8013b92:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013b96:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013b9e:	ed80 7a00 	vstr	s14, [r0]
 8013ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ba6:	edc0 7a01 	vstr	s15, [r0, #4]
 8013baa:	f04f 30ff 	mov.w	r0, #4294967295
 8013bae:	e7e4      	b.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013bb0:	4b69      	ldr	r3, [pc, #420]	@ (8013d58 <__ieee754_rem_pio2f+0x244>)
 8013bb2:	429d      	cmp	r5, r3
 8013bb4:	d873      	bhi.n	8013c9e <__ieee754_rem_pio2f+0x18a>
 8013bb6:	f000 f8dd 	bl	8013d74 <fabsf>
 8013bba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013d5c <__ieee754_rem_pio2f+0x248>
 8013bbe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013bc2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013bce:	ee17 0a90 	vmov	r0, s15
 8013bd2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013d44 <__ieee754_rem_pio2f+0x230>
 8013bd6:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013bda:	281f      	cmp	r0, #31
 8013bdc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013d50 <__ieee754_rem_pio2f+0x23c>
 8013be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013be4:	eeb1 6a47 	vneg.f32	s12, s14
 8013be8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013bec:	ee16 1a90 	vmov	r1, s13
 8013bf0:	dc09      	bgt.n	8013c06 <__ieee754_rem_pio2f+0xf2>
 8013bf2:	4a5b      	ldr	r2, [pc, #364]	@ (8013d60 <__ieee754_rem_pio2f+0x24c>)
 8013bf4:	1e47      	subs	r7, r0, #1
 8013bf6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013bfa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013bfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013c02:	4293      	cmp	r3, r2
 8013c04:	d107      	bne.n	8013c16 <__ieee754_rem_pio2f+0x102>
 8013c06:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013c0a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013c0e:	2a08      	cmp	r2, #8
 8013c10:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013c14:	dc14      	bgt.n	8013c40 <__ieee754_rem_pio2f+0x12c>
 8013c16:	6021      	str	r1, [r4, #0]
 8013c18:	ed94 7a00 	vldr	s14, [r4]
 8013c1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c20:	2e00      	cmp	r6, #0
 8013c22:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c26:	ed84 0a01 	vstr	s0, [r4, #4]
 8013c2a:	daa6      	bge.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013c2c:	eeb1 7a47 	vneg.f32	s14, s14
 8013c30:	eeb1 0a40 	vneg.f32	s0, s0
 8013c34:	ed84 7a00 	vstr	s14, [r4]
 8013c38:	ed84 0a01 	vstr	s0, [r4, #4]
 8013c3c:	4240      	negs	r0, r0
 8013c3e:	e79c      	b.n	8013b7a <__ieee754_rem_pio2f+0x66>
 8013c40:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013d4c <__ieee754_rem_pio2f+0x238>
 8013c44:	eef0 6a40 	vmov.f32	s13, s0
 8013c48:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013c4c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013c50:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013c54:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013d54 <__ieee754_rem_pio2f+0x240>
 8013c58:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013c5c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013c60:	ee15 2a90 	vmov	r2, s11
 8013c64:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013c68:	1a5b      	subs	r3, r3, r1
 8013c6a:	2b19      	cmp	r3, #25
 8013c6c:	dc04      	bgt.n	8013c78 <__ieee754_rem_pio2f+0x164>
 8013c6e:	edc4 5a00 	vstr	s11, [r4]
 8013c72:	eeb0 0a66 	vmov.f32	s0, s13
 8013c76:	e7cf      	b.n	8013c18 <__ieee754_rem_pio2f+0x104>
 8013c78:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013d64 <__ieee754_rem_pio2f+0x250>
 8013c7c:	eeb0 0a66 	vmov.f32	s0, s13
 8013c80:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013c84:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013c88:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013d68 <__ieee754_rem_pio2f+0x254>
 8013c8c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013c90:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013c94:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013c98:	ed84 7a00 	vstr	s14, [r4]
 8013c9c:	e7bc      	b.n	8013c18 <__ieee754_rem_pio2f+0x104>
 8013c9e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013ca2:	d306      	bcc.n	8013cb2 <__ieee754_rem_pio2f+0x19e>
 8013ca4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013ca8:	edc0 7a01 	vstr	s15, [r0, #4]
 8013cac:	edc0 7a00 	vstr	s15, [r0]
 8013cb0:	e73e      	b.n	8013b30 <__ieee754_rem_pio2f+0x1c>
 8013cb2:	15ea      	asrs	r2, r5, #23
 8013cb4:	3a86      	subs	r2, #134	@ 0x86
 8013cb6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013cba:	ee07 3a90 	vmov	s15, r3
 8013cbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013cc2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013d6c <__ieee754_rem_pio2f+0x258>
 8013cc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cce:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013cd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013cd6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013cda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ce2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013ce6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013cea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf2:	edcd 7a05 	vstr	s15, [sp, #20]
 8013cf6:	d11e      	bne.n	8013d36 <__ieee754_rem_pio2f+0x222>
 8013cf8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d00:	bf0c      	ite	eq
 8013d02:	2301      	moveq	r3, #1
 8013d04:	2302      	movne	r3, #2
 8013d06:	491a      	ldr	r1, [pc, #104]	@ (8013d70 <__ieee754_rem_pio2f+0x25c>)
 8013d08:	9101      	str	r1, [sp, #4]
 8013d0a:	2102      	movs	r1, #2
 8013d0c:	9100      	str	r1, [sp, #0]
 8013d0e:	a803      	add	r0, sp, #12
 8013d10:	4621      	mov	r1, r4
 8013d12:	f000 f837 	bl	8013d84 <__kernel_rem_pio2f>
 8013d16:	2e00      	cmp	r6, #0
 8013d18:	f6bf af2f 	bge.w	8013b7a <__ieee754_rem_pio2f+0x66>
 8013d1c:	edd4 7a00 	vldr	s15, [r4]
 8013d20:	eef1 7a67 	vneg.f32	s15, s15
 8013d24:	edc4 7a00 	vstr	s15, [r4]
 8013d28:	edd4 7a01 	vldr	s15, [r4, #4]
 8013d2c:	eef1 7a67 	vneg.f32	s15, s15
 8013d30:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d34:	e782      	b.n	8013c3c <__ieee754_rem_pio2f+0x128>
 8013d36:	2303      	movs	r3, #3
 8013d38:	e7e5      	b.n	8013d06 <__ieee754_rem_pio2f+0x1f2>
 8013d3a:	bf00      	nop
 8013d3c:	3f490fd8 	.word	0x3f490fd8
 8013d40:	4016cbe3 	.word	0x4016cbe3
 8013d44:	3fc90f80 	.word	0x3fc90f80
 8013d48:	3fc90fd0 	.word	0x3fc90fd0
 8013d4c:	37354400 	.word	0x37354400
 8013d50:	37354443 	.word	0x37354443
 8013d54:	2e85a308 	.word	0x2e85a308
 8013d58:	43490f80 	.word	0x43490f80
 8013d5c:	3f22f984 	.word	0x3f22f984
 8013d60:	080163f4 	.word	0x080163f4
 8013d64:	2e85a300 	.word	0x2e85a300
 8013d68:	248d3132 	.word	0x248d3132
 8013d6c:	43800000 	.word	0x43800000
 8013d70:	08016474 	.word	0x08016474

08013d74 <fabsf>:
 8013d74:	ee10 3a10 	vmov	r3, s0
 8013d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013d7c:	ee00 3a10 	vmov	s0, r3
 8013d80:	4770      	bx	lr
	...

08013d84 <__kernel_rem_pio2f>:
 8013d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d88:	ed2d 8b04 	vpush	{d8-d9}
 8013d8c:	b0d9      	sub	sp, #356	@ 0x164
 8013d8e:	4690      	mov	r8, r2
 8013d90:	9001      	str	r0, [sp, #4]
 8013d92:	4ab9      	ldr	r2, [pc, #740]	@ (8014078 <__kernel_rem_pio2f+0x2f4>)
 8013d94:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013d96:	f118 0f04 	cmn.w	r8, #4
 8013d9a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013d9e:	460f      	mov	r7, r1
 8013da0:	f103 3bff 	add.w	fp, r3, #4294967295
 8013da4:	db27      	blt.n	8013df6 <__kernel_rem_pio2f+0x72>
 8013da6:	f1b8 0203 	subs.w	r2, r8, #3
 8013daa:	bf48      	it	mi
 8013dac:	f108 0204 	addmi.w	r2, r8, #4
 8013db0:	10d2      	asrs	r2, r2, #3
 8013db2:	1c55      	adds	r5, r2, #1
 8013db4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013db6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8014088 <__kernel_rem_pio2f+0x304>
 8013dba:	00e8      	lsls	r0, r5, #3
 8013dbc:	eba2 060b 	sub.w	r6, r2, fp
 8013dc0:	9002      	str	r0, [sp, #8]
 8013dc2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013dc6:	eb0a 0c0b 	add.w	ip, sl, fp
 8013dca:	ac1c      	add	r4, sp, #112	@ 0x70
 8013dcc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013dd0:	2000      	movs	r0, #0
 8013dd2:	4560      	cmp	r0, ip
 8013dd4:	dd11      	ble.n	8013dfa <__kernel_rem_pio2f+0x76>
 8013dd6:	a91c      	add	r1, sp, #112	@ 0x70
 8013dd8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013ddc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013de0:	f04f 0c00 	mov.w	ip, #0
 8013de4:	45d4      	cmp	ip, sl
 8013de6:	dc27      	bgt.n	8013e38 <__kernel_rem_pio2f+0xb4>
 8013de8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013dec:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8014088 <__kernel_rem_pio2f+0x304>
 8013df0:	4606      	mov	r6, r0
 8013df2:	2400      	movs	r4, #0
 8013df4:	e016      	b.n	8013e24 <__kernel_rem_pio2f+0xa0>
 8013df6:	2200      	movs	r2, #0
 8013df8:	e7db      	b.n	8013db2 <__kernel_rem_pio2f+0x2e>
 8013dfa:	42c6      	cmn	r6, r0
 8013dfc:	bf5d      	ittte	pl
 8013dfe:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013e02:	ee07 1a90 	vmovpl	s15, r1
 8013e06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013e0a:	eef0 7a47 	vmovmi.f32	s15, s14
 8013e0e:	ece4 7a01 	vstmia	r4!, {s15}
 8013e12:	3001      	adds	r0, #1
 8013e14:	e7dd      	b.n	8013dd2 <__kernel_rem_pio2f+0x4e>
 8013e16:	ecfe 6a01 	vldmia	lr!, {s13}
 8013e1a:	ed96 7a00 	vldr	s14, [r6]
 8013e1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013e22:	3401      	adds	r4, #1
 8013e24:	455c      	cmp	r4, fp
 8013e26:	f1a6 0604 	sub.w	r6, r6, #4
 8013e2a:	ddf4      	ble.n	8013e16 <__kernel_rem_pio2f+0x92>
 8013e2c:	ece9 7a01 	vstmia	r9!, {s15}
 8013e30:	f10c 0c01 	add.w	ip, ip, #1
 8013e34:	3004      	adds	r0, #4
 8013e36:	e7d5      	b.n	8013de4 <__kernel_rem_pio2f+0x60>
 8013e38:	a908      	add	r1, sp, #32
 8013e3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e3e:	9104      	str	r1, [sp, #16]
 8013e40:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013e42:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8014084 <__kernel_rem_pio2f+0x300>
 8013e46:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8014080 <__kernel_rem_pio2f+0x2fc>
 8013e4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013e4e:	9203      	str	r2, [sp, #12]
 8013e50:	4654      	mov	r4, sl
 8013e52:	00a2      	lsls	r2, r4, #2
 8013e54:	9205      	str	r2, [sp, #20]
 8013e56:	aa58      	add	r2, sp, #352	@ 0x160
 8013e58:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013e5c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013e60:	a944      	add	r1, sp, #272	@ 0x110
 8013e62:	aa08      	add	r2, sp, #32
 8013e64:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013e68:	4694      	mov	ip, r2
 8013e6a:	4626      	mov	r6, r4
 8013e6c:	2e00      	cmp	r6, #0
 8013e6e:	f1a0 0004 	sub.w	r0, r0, #4
 8013e72:	dc4c      	bgt.n	8013f0e <__kernel_rem_pio2f+0x18a>
 8013e74:	4628      	mov	r0, r5
 8013e76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013e7a:	f000 f9f5 	bl	8014268 <scalbnf>
 8013e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8013e82:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013e86:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013e8a:	f000 fa53 	bl	8014334 <floorf>
 8013e8e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013e92:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013e96:	2d00      	cmp	r5, #0
 8013e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e9c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013ea0:	ee17 9a90 	vmov	r9, s15
 8013ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ea8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013eac:	dd41      	ble.n	8013f32 <__kernel_rem_pio2f+0x1ae>
 8013eae:	f104 3cff 	add.w	ip, r4, #4294967295
 8013eb2:	a908      	add	r1, sp, #32
 8013eb4:	f1c5 0e08 	rsb	lr, r5, #8
 8013eb8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013ebc:	fa46 f00e 	asr.w	r0, r6, lr
 8013ec0:	4481      	add	r9, r0
 8013ec2:	fa00 f00e 	lsl.w	r0, r0, lr
 8013ec6:	1a36      	subs	r6, r6, r0
 8013ec8:	f1c5 0007 	rsb	r0, r5, #7
 8013ecc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013ed0:	4106      	asrs	r6, r0
 8013ed2:	2e00      	cmp	r6, #0
 8013ed4:	dd3c      	ble.n	8013f50 <__kernel_rem_pio2f+0x1cc>
 8013ed6:	f04f 0e00 	mov.w	lr, #0
 8013eda:	f109 0901 	add.w	r9, r9, #1
 8013ede:	4670      	mov	r0, lr
 8013ee0:	4574      	cmp	r4, lr
 8013ee2:	dc68      	bgt.n	8013fb6 <__kernel_rem_pio2f+0x232>
 8013ee4:	2d00      	cmp	r5, #0
 8013ee6:	dd03      	ble.n	8013ef0 <__kernel_rem_pio2f+0x16c>
 8013ee8:	2d01      	cmp	r5, #1
 8013eea:	d074      	beq.n	8013fd6 <__kernel_rem_pio2f+0x252>
 8013eec:	2d02      	cmp	r5, #2
 8013eee:	d07d      	beq.n	8013fec <__kernel_rem_pio2f+0x268>
 8013ef0:	2e02      	cmp	r6, #2
 8013ef2:	d12d      	bne.n	8013f50 <__kernel_rem_pio2f+0x1cc>
 8013ef4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013ef8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013efc:	b340      	cbz	r0, 8013f50 <__kernel_rem_pio2f+0x1cc>
 8013efe:	4628      	mov	r0, r5
 8013f00:	9306      	str	r3, [sp, #24]
 8013f02:	f000 f9b1 	bl	8014268 <scalbnf>
 8013f06:	9b06      	ldr	r3, [sp, #24]
 8013f08:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013f0c:	e020      	b.n	8013f50 <__kernel_rem_pio2f+0x1cc>
 8013f0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013f12:	3e01      	subs	r6, #1
 8013f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013f20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013f24:	ecac 0a01 	vstmia	ip!, {s0}
 8013f28:	ed90 0a00 	vldr	s0, [r0]
 8013f2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013f30:	e79c      	b.n	8013e6c <__kernel_rem_pio2f+0xe8>
 8013f32:	d105      	bne.n	8013f40 <__kernel_rem_pio2f+0x1bc>
 8013f34:	1e60      	subs	r0, r4, #1
 8013f36:	a908      	add	r1, sp, #32
 8013f38:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013f3c:	11f6      	asrs	r6, r6, #7
 8013f3e:	e7c8      	b.n	8013ed2 <__kernel_rem_pio2f+0x14e>
 8013f40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013f44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4c:	da31      	bge.n	8013fb2 <__kernel_rem_pio2f+0x22e>
 8013f4e:	2600      	movs	r6, #0
 8013f50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f58:	f040 8098 	bne.w	801408c <__kernel_rem_pio2f+0x308>
 8013f5c:	1e60      	subs	r0, r4, #1
 8013f5e:	2200      	movs	r2, #0
 8013f60:	4550      	cmp	r0, sl
 8013f62:	da4b      	bge.n	8013ffc <__kernel_rem_pio2f+0x278>
 8013f64:	2a00      	cmp	r2, #0
 8013f66:	d065      	beq.n	8014034 <__kernel_rem_pio2f+0x2b0>
 8013f68:	3c01      	subs	r4, #1
 8013f6a:	ab08      	add	r3, sp, #32
 8013f6c:	3d08      	subs	r5, #8
 8013f6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d0f8      	beq.n	8013f68 <__kernel_rem_pio2f+0x1e4>
 8013f76:	4628      	mov	r0, r5
 8013f78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013f7c:	f000 f974 	bl	8014268 <scalbnf>
 8013f80:	1c63      	adds	r3, r4, #1
 8013f82:	aa44      	add	r2, sp, #272	@ 0x110
 8013f84:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014084 <__kernel_rem_pio2f+0x300>
 8013f88:	0099      	lsls	r1, r3, #2
 8013f8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f8e:	4623      	mov	r3, r4
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	f280 80a9 	bge.w	80140e8 <__kernel_rem_pio2f+0x364>
 8013f96:	4623      	mov	r3, r4
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f2c0 80c7 	blt.w	801412c <__kernel_rem_pio2f+0x3a8>
 8013f9e:	aa44      	add	r2, sp, #272	@ 0x110
 8013fa0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013fa4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801407c <__kernel_rem_pio2f+0x2f8>
 8013fa8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014088 <__kernel_rem_pio2f+0x304>
 8013fac:	2000      	movs	r0, #0
 8013fae:	1ae2      	subs	r2, r4, r3
 8013fb0:	e0b1      	b.n	8014116 <__kernel_rem_pio2f+0x392>
 8013fb2:	2602      	movs	r6, #2
 8013fb4:	e78f      	b.n	8013ed6 <__kernel_rem_pio2f+0x152>
 8013fb6:	f852 1b04 	ldr.w	r1, [r2], #4
 8013fba:	b948      	cbnz	r0, 8013fd0 <__kernel_rem_pio2f+0x24c>
 8013fbc:	b121      	cbz	r1, 8013fc8 <__kernel_rem_pio2f+0x244>
 8013fbe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013fc2:	f842 1c04 	str.w	r1, [r2, #-4]
 8013fc6:	2101      	movs	r1, #1
 8013fc8:	f10e 0e01 	add.w	lr, lr, #1
 8013fcc:	4608      	mov	r0, r1
 8013fce:	e787      	b.n	8013ee0 <__kernel_rem_pio2f+0x15c>
 8013fd0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013fd4:	e7f5      	b.n	8013fc2 <__kernel_rem_pio2f+0x23e>
 8013fd6:	f104 3cff 	add.w	ip, r4, #4294967295
 8013fda:	aa08      	add	r2, sp, #32
 8013fdc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013fe0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013fe4:	a908      	add	r1, sp, #32
 8013fe6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013fea:	e781      	b.n	8013ef0 <__kernel_rem_pio2f+0x16c>
 8013fec:	f104 3cff 	add.w	ip, r4, #4294967295
 8013ff0:	aa08      	add	r2, sp, #32
 8013ff2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013ff6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8013ffa:	e7f3      	b.n	8013fe4 <__kernel_rem_pio2f+0x260>
 8013ffc:	a908      	add	r1, sp, #32
 8013ffe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014002:	3801      	subs	r0, #1
 8014004:	430a      	orrs	r2, r1
 8014006:	e7ab      	b.n	8013f60 <__kernel_rem_pio2f+0x1dc>
 8014008:	3201      	adds	r2, #1
 801400a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801400e:	2e00      	cmp	r6, #0
 8014010:	d0fa      	beq.n	8014008 <__kernel_rem_pio2f+0x284>
 8014012:	9905      	ldr	r1, [sp, #20]
 8014014:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014018:	eb0d 0001 	add.w	r0, sp, r1
 801401c:	18e6      	adds	r6, r4, r3
 801401e:	a91c      	add	r1, sp, #112	@ 0x70
 8014020:	f104 0c01 	add.w	ip, r4, #1
 8014024:	384c      	subs	r0, #76	@ 0x4c
 8014026:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801402a:	4422      	add	r2, r4
 801402c:	4562      	cmp	r2, ip
 801402e:	da04      	bge.n	801403a <__kernel_rem_pio2f+0x2b6>
 8014030:	4614      	mov	r4, r2
 8014032:	e70e      	b.n	8013e52 <__kernel_rem_pio2f+0xce>
 8014034:	9804      	ldr	r0, [sp, #16]
 8014036:	2201      	movs	r2, #1
 8014038:	e7e7      	b.n	801400a <__kernel_rem_pio2f+0x286>
 801403a:	9903      	ldr	r1, [sp, #12]
 801403c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014040:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014044:	9105      	str	r1, [sp, #20]
 8014046:	ee07 1a90 	vmov	s15, r1
 801404a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801404e:	2400      	movs	r4, #0
 8014050:	ece6 7a01 	vstmia	r6!, {s15}
 8014054:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014088 <__kernel_rem_pio2f+0x304>
 8014058:	46b1      	mov	r9, r6
 801405a:	455c      	cmp	r4, fp
 801405c:	dd04      	ble.n	8014068 <__kernel_rem_pio2f+0x2e4>
 801405e:	ece0 7a01 	vstmia	r0!, {s15}
 8014062:	f10c 0c01 	add.w	ip, ip, #1
 8014066:	e7e1      	b.n	801402c <__kernel_rem_pio2f+0x2a8>
 8014068:	ecfe 6a01 	vldmia	lr!, {s13}
 801406c:	ed39 7a01 	vldmdb	r9!, {s14}
 8014070:	3401      	adds	r4, #1
 8014072:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014076:	e7f0      	b.n	801405a <__kernel_rem_pio2f+0x2d6>
 8014078:	080167b8 	.word	0x080167b8
 801407c:	0801678c 	.word	0x0801678c
 8014080:	43800000 	.word	0x43800000
 8014084:	3b800000 	.word	0x3b800000
 8014088:	00000000 	.word	0x00000000
 801408c:	9b02      	ldr	r3, [sp, #8]
 801408e:	eeb0 0a48 	vmov.f32	s0, s16
 8014092:	eba3 0008 	sub.w	r0, r3, r8
 8014096:	f000 f8e7 	bl	8014268 <scalbnf>
 801409a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014080 <__kernel_rem_pio2f+0x2fc>
 801409e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80140a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140a6:	db19      	blt.n	80140dc <__kernel_rem_pio2f+0x358>
 80140a8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014084 <__kernel_rem_pio2f+0x300>
 80140ac:	ee60 7a27 	vmul.f32	s15, s0, s15
 80140b0:	aa08      	add	r2, sp, #32
 80140b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140b6:	3508      	adds	r5, #8
 80140b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80140c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80140c8:	ee10 3a10 	vmov	r3, s0
 80140cc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80140d0:	ee17 3a90 	vmov	r3, s15
 80140d4:	3401      	adds	r4, #1
 80140d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80140da:	e74c      	b.n	8013f76 <__kernel_rem_pio2f+0x1f2>
 80140dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80140e0:	aa08      	add	r2, sp, #32
 80140e2:	ee10 3a10 	vmov	r3, s0
 80140e6:	e7f6      	b.n	80140d6 <__kernel_rem_pio2f+0x352>
 80140e8:	a808      	add	r0, sp, #32
 80140ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80140ee:	9001      	str	r0, [sp, #4]
 80140f0:	ee07 0a90 	vmov	s15, r0
 80140f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140f8:	3b01      	subs	r3, #1
 80140fa:	ee67 7a80 	vmul.f32	s15, s15, s0
 80140fe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014102:	ed62 7a01 	vstmdb	r2!, {s15}
 8014106:	e743      	b.n	8013f90 <__kernel_rem_pio2f+0x20c>
 8014108:	ecfc 6a01 	vldmia	ip!, {s13}
 801410c:	ecb5 7a01 	vldmia	r5!, {s14}
 8014110:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014114:	3001      	adds	r0, #1
 8014116:	4550      	cmp	r0, sl
 8014118:	dc01      	bgt.n	801411e <__kernel_rem_pio2f+0x39a>
 801411a:	4282      	cmp	r2, r0
 801411c:	daf4      	bge.n	8014108 <__kernel_rem_pio2f+0x384>
 801411e:	a858      	add	r0, sp, #352	@ 0x160
 8014120:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014124:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014128:	3b01      	subs	r3, #1
 801412a:	e735      	b.n	8013f98 <__kernel_rem_pio2f+0x214>
 801412c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801412e:	2b02      	cmp	r3, #2
 8014130:	dc09      	bgt.n	8014146 <__kernel_rem_pio2f+0x3c2>
 8014132:	2b00      	cmp	r3, #0
 8014134:	dc2b      	bgt.n	801418e <__kernel_rem_pio2f+0x40a>
 8014136:	d044      	beq.n	80141c2 <__kernel_rem_pio2f+0x43e>
 8014138:	f009 0007 	and.w	r0, r9, #7
 801413c:	b059      	add	sp, #356	@ 0x164
 801413e:	ecbd 8b04 	vpop	{d8-d9}
 8014142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014146:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014148:	2b03      	cmp	r3, #3
 801414a:	d1f5      	bne.n	8014138 <__kernel_rem_pio2f+0x3b4>
 801414c:	aa30      	add	r2, sp, #192	@ 0xc0
 801414e:	1f0b      	subs	r3, r1, #4
 8014150:	4413      	add	r3, r2
 8014152:	461a      	mov	r2, r3
 8014154:	4620      	mov	r0, r4
 8014156:	2800      	cmp	r0, #0
 8014158:	f1a2 0204 	sub.w	r2, r2, #4
 801415c:	dc52      	bgt.n	8014204 <__kernel_rem_pio2f+0x480>
 801415e:	4622      	mov	r2, r4
 8014160:	2a01      	cmp	r2, #1
 8014162:	f1a3 0304 	sub.w	r3, r3, #4
 8014166:	dc5d      	bgt.n	8014224 <__kernel_rem_pio2f+0x4a0>
 8014168:	ab30      	add	r3, sp, #192	@ 0xc0
 801416a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8014088 <__kernel_rem_pio2f+0x304>
 801416e:	440b      	add	r3, r1
 8014170:	2c01      	cmp	r4, #1
 8014172:	dc67      	bgt.n	8014244 <__kernel_rem_pio2f+0x4c0>
 8014174:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014178:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801417c:	2e00      	cmp	r6, #0
 801417e:	d167      	bne.n	8014250 <__kernel_rem_pio2f+0x4cc>
 8014180:	edc7 6a00 	vstr	s13, [r7]
 8014184:	ed87 7a01 	vstr	s14, [r7, #4]
 8014188:	edc7 7a02 	vstr	s15, [r7, #8]
 801418c:	e7d4      	b.n	8014138 <__kernel_rem_pio2f+0x3b4>
 801418e:	ab30      	add	r3, sp, #192	@ 0xc0
 8014190:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8014088 <__kernel_rem_pio2f+0x304>
 8014194:	440b      	add	r3, r1
 8014196:	4622      	mov	r2, r4
 8014198:	2a00      	cmp	r2, #0
 801419a:	da24      	bge.n	80141e6 <__kernel_rem_pio2f+0x462>
 801419c:	b34e      	cbz	r6, 80141f2 <__kernel_rem_pio2f+0x46e>
 801419e:	eef1 7a47 	vneg.f32	s15, s14
 80141a2:	edc7 7a00 	vstr	s15, [r7]
 80141a6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80141aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141ae:	aa31      	add	r2, sp, #196	@ 0xc4
 80141b0:	2301      	movs	r3, #1
 80141b2:	429c      	cmp	r4, r3
 80141b4:	da20      	bge.n	80141f8 <__kernel_rem_pio2f+0x474>
 80141b6:	b10e      	cbz	r6, 80141bc <__kernel_rem_pio2f+0x438>
 80141b8:	eef1 7a67 	vneg.f32	s15, s15
 80141bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80141c0:	e7ba      	b.n	8014138 <__kernel_rem_pio2f+0x3b4>
 80141c2:	ab30      	add	r3, sp, #192	@ 0xc0
 80141c4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8014088 <__kernel_rem_pio2f+0x304>
 80141c8:	440b      	add	r3, r1
 80141ca:	2c00      	cmp	r4, #0
 80141cc:	da05      	bge.n	80141da <__kernel_rem_pio2f+0x456>
 80141ce:	b10e      	cbz	r6, 80141d4 <__kernel_rem_pio2f+0x450>
 80141d0:	eef1 7a67 	vneg.f32	s15, s15
 80141d4:	edc7 7a00 	vstr	s15, [r7]
 80141d8:	e7ae      	b.n	8014138 <__kernel_rem_pio2f+0x3b4>
 80141da:	ed33 7a01 	vldmdb	r3!, {s14}
 80141de:	3c01      	subs	r4, #1
 80141e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141e4:	e7f1      	b.n	80141ca <__kernel_rem_pio2f+0x446>
 80141e6:	ed73 7a01 	vldmdb	r3!, {s15}
 80141ea:	3a01      	subs	r2, #1
 80141ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141f0:	e7d2      	b.n	8014198 <__kernel_rem_pio2f+0x414>
 80141f2:	eef0 7a47 	vmov.f32	s15, s14
 80141f6:	e7d4      	b.n	80141a2 <__kernel_rem_pio2f+0x41e>
 80141f8:	ecb2 7a01 	vldmia	r2!, {s14}
 80141fc:	3301      	adds	r3, #1
 80141fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014202:	e7d6      	b.n	80141b2 <__kernel_rem_pio2f+0x42e>
 8014204:	edd2 7a00 	vldr	s15, [r2]
 8014208:	edd2 6a01 	vldr	s13, [r2, #4]
 801420c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014210:	3801      	subs	r0, #1
 8014212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014216:	ed82 7a00 	vstr	s14, [r2]
 801421a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801421e:	edc2 7a01 	vstr	s15, [r2, #4]
 8014222:	e798      	b.n	8014156 <__kernel_rem_pio2f+0x3d2>
 8014224:	edd3 7a00 	vldr	s15, [r3]
 8014228:	edd3 6a01 	vldr	s13, [r3, #4]
 801422c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014230:	3a01      	subs	r2, #1
 8014232:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014236:	ed83 7a00 	vstr	s14, [r3]
 801423a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801423e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014242:	e78d      	b.n	8014160 <__kernel_rem_pio2f+0x3dc>
 8014244:	ed33 7a01 	vldmdb	r3!, {s14}
 8014248:	3c01      	subs	r4, #1
 801424a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801424e:	e78f      	b.n	8014170 <__kernel_rem_pio2f+0x3ec>
 8014250:	eef1 6a66 	vneg.f32	s13, s13
 8014254:	eeb1 7a47 	vneg.f32	s14, s14
 8014258:	edc7 6a00 	vstr	s13, [r7]
 801425c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014260:	eef1 7a67 	vneg.f32	s15, s15
 8014264:	e790      	b.n	8014188 <__kernel_rem_pio2f+0x404>
 8014266:	bf00      	nop

08014268 <scalbnf>:
 8014268:	ee10 3a10 	vmov	r3, s0
 801426c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014270:	d02b      	beq.n	80142ca <scalbnf+0x62>
 8014272:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8014276:	d302      	bcc.n	801427e <scalbnf+0x16>
 8014278:	ee30 0a00 	vadd.f32	s0, s0, s0
 801427c:	4770      	bx	lr
 801427e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8014282:	d123      	bne.n	80142cc <scalbnf+0x64>
 8014284:	4b24      	ldr	r3, [pc, #144]	@ (8014318 <scalbnf+0xb0>)
 8014286:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801431c <scalbnf+0xb4>
 801428a:	4298      	cmp	r0, r3
 801428c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014290:	db17      	blt.n	80142c2 <scalbnf+0x5a>
 8014292:	ee10 3a10 	vmov	r3, s0
 8014296:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801429a:	3a19      	subs	r2, #25
 801429c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80142a0:	4288      	cmp	r0, r1
 80142a2:	dd15      	ble.n	80142d0 <scalbnf+0x68>
 80142a4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8014320 <scalbnf+0xb8>
 80142a8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014324 <scalbnf+0xbc>
 80142ac:	ee10 3a10 	vmov	r3, s0
 80142b0:	eeb0 7a67 	vmov.f32	s14, s15
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	bfb8      	it	lt
 80142b8:	eef0 7a66 	vmovlt.f32	s15, s13
 80142bc:	ee27 0a87 	vmul.f32	s0, s15, s14
 80142c0:	4770      	bx	lr
 80142c2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014328 <scalbnf+0xc0>
 80142c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80142ca:	4770      	bx	lr
 80142cc:	0dd2      	lsrs	r2, r2, #23
 80142ce:	e7e5      	b.n	801429c <scalbnf+0x34>
 80142d0:	4410      	add	r0, r2
 80142d2:	28fe      	cmp	r0, #254	@ 0xfe
 80142d4:	dce6      	bgt.n	80142a4 <scalbnf+0x3c>
 80142d6:	2800      	cmp	r0, #0
 80142d8:	dd06      	ble.n	80142e8 <scalbnf+0x80>
 80142da:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80142de:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80142e2:	ee00 3a10 	vmov	s0, r3
 80142e6:	4770      	bx	lr
 80142e8:	f110 0f16 	cmn.w	r0, #22
 80142ec:	da09      	bge.n	8014302 <scalbnf+0x9a>
 80142ee:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8014328 <scalbnf+0xc0>
 80142f2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801432c <scalbnf+0xc4>
 80142f6:	ee10 3a10 	vmov	r3, s0
 80142fa:	eeb0 7a67 	vmov.f32	s14, s15
 80142fe:	2b00      	cmp	r3, #0
 8014300:	e7d9      	b.n	80142b6 <scalbnf+0x4e>
 8014302:	3019      	adds	r0, #25
 8014304:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014308:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801430c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8014330 <scalbnf+0xc8>
 8014310:	ee07 3a90 	vmov	s15, r3
 8014314:	e7d7      	b.n	80142c6 <scalbnf+0x5e>
 8014316:	bf00      	nop
 8014318:	ffff3cb0 	.word	0xffff3cb0
 801431c:	4c000000 	.word	0x4c000000
 8014320:	7149f2ca 	.word	0x7149f2ca
 8014324:	f149f2ca 	.word	0xf149f2ca
 8014328:	0da24260 	.word	0x0da24260
 801432c:	8da24260 	.word	0x8da24260
 8014330:	33000000 	.word	0x33000000

08014334 <floorf>:
 8014334:	ee10 3a10 	vmov	r3, s0
 8014338:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801433c:	3a7f      	subs	r2, #127	@ 0x7f
 801433e:	2a16      	cmp	r2, #22
 8014340:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014344:	dc2b      	bgt.n	801439e <floorf+0x6a>
 8014346:	2a00      	cmp	r2, #0
 8014348:	da12      	bge.n	8014370 <floorf+0x3c>
 801434a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80143b0 <floorf+0x7c>
 801434e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014352:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801435a:	dd06      	ble.n	801436a <floorf+0x36>
 801435c:	2b00      	cmp	r3, #0
 801435e:	da24      	bge.n	80143aa <floorf+0x76>
 8014360:	2900      	cmp	r1, #0
 8014362:	4b14      	ldr	r3, [pc, #80]	@ (80143b4 <floorf+0x80>)
 8014364:	bf08      	it	eq
 8014366:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801436a:	ee00 3a10 	vmov	s0, r3
 801436e:	4770      	bx	lr
 8014370:	4911      	ldr	r1, [pc, #68]	@ (80143b8 <floorf+0x84>)
 8014372:	4111      	asrs	r1, r2
 8014374:	420b      	tst	r3, r1
 8014376:	d0fa      	beq.n	801436e <floorf+0x3a>
 8014378:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80143b0 <floorf+0x7c>
 801437c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014380:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014388:	ddef      	ble.n	801436a <floorf+0x36>
 801438a:	2b00      	cmp	r3, #0
 801438c:	bfbe      	ittt	lt
 801438e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014392:	fa40 f202 	asrlt.w	r2, r0, r2
 8014396:	189b      	addlt	r3, r3, r2
 8014398:	ea23 0301 	bic.w	r3, r3, r1
 801439c:	e7e5      	b.n	801436a <floorf+0x36>
 801439e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80143a2:	d3e4      	bcc.n	801436e <floorf+0x3a>
 80143a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80143a8:	4770      	bx	lr
 80143aa:	2300      	movs	r3, #0
 80143ac:	e7dd      	b.n	801436a <floorf+0x36>
 80143ae:	bf00      	nop
 80143b0:	7149f2ca 	.word	0x7149f2ca
 80143b4:	bf800000 	.word	0xbf800000
 80143b8:	007fffff 	.word	0x007fffff

080143bc <calloc>:
 80143bc:	4b02      	ldr	r3, [pc, #8]	@ (80143c8 <calloc+0xc>)
 80143be:	460a      	mov	r2, r1
 80143c0:	4601      	mov	r1, r0
 80143c2:	6818      	ldr	r0, [r3, #0]
 80143c4:	f000 b802 	b.w	80143cc <_calloc_r>
 80143c8:	20000180 	.word	0x20000180

080143cc <_calloc_r>:
 80143cc:	b570      	push	{r4, r5, r6, lr}
 80143ce:	fba1 5402 	umull	r5, r4, r1, r2
 80143d2:	b93c      	cbnz	r4, 80143e4 <_calloc_r+0x18>
 80143d4:	4629      	mov	r1, r5
 80143d6:	f000 f887 	bl	80144e8 <_malloc_r>
 80143da:	4606      	mov	r6, r0
 80143dc:	b928      	cbnz	r0, 80143ea <_calloc_r+0x1e>
 80143de:	2600      	movs	r6, #0
 80143e0:	4630      	mov	r0, r6
 80143e2:	bd70      	pop	{r4, r5, r6, pc}
 80143e4:	220c      	movs	r2, #12
 80143e6:	6002      	str	r2, [r0, #0]
 80143e8:	e7f9      	b.n	80143de <_calloc_r+0x12>
 80143ea:	462a      	mov	r2, r5
 80143ec:	4621      	mov	r1, r4
 80143ee:	f000 fba5 	bl	8014b3c <memset>
 80143f2:	e7f5      	b.n	80143e0 <_calloc_r+0x14>

080143f4 <getenv>:
 80143f4:	b507      	push	{r0, r1, r2, lr}
 80143f6:	4b04      	ldr	r3, [pc, #16]	@ (8014408 <getenv+0x14>)
 80143f8:	4601      	mov	r1, r0
 80143fa:	aa01      	add	r2, sp, #4
 80143fc:	6818      	ldr	r0, [r3, #0]
 80143fe:	f000 f805 	bl	801440c <_findenv_r>
 8014402:	b003      	add	sp, #12
 8014404:	f85d fb04 	ldr.w	pc, [sp], #4
 8014408:	20000180 	.word	0x20000180

0801440c <_findenv_r>:
 801440c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014410:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8014480 <_findenv_r+0x74>
 8014414:	4606      	mov	r6, r0
 8014416:	4689      	mov	r9, r1
 8014418:	4617      	mov	r7, r2
 801441a:	f000 fc85 	bl	8014d28 <__env_lock>
 801441e:	f8da 4000 	ldr.w	r4, [sl]
 8014422:	b134      	cbz	r4, 8014432 <_findenv_r+0x26>
 8014424:	464b      	mov	r3, r9
 8014426:	4698      	mov	r8, r3
 8014428:	f813 2b01 	ldrb.w	r2, [r3], #1
 801442c:	b13a      	cbz	r2, 801443e <_findenv_r+0x32>
 801442e:	2a3d      	cmp	r2, #61	@ 0x3d
 8014430:	d1f9      	bne.n	8014426 <_findenv_r+0x1a>
 8014432:	4630      	mov	r0, r6
 8014434:	f000 fc7e 	bl	8014d34 <__env_unlock>
 8014438:	2000      	movs	r0, #0
 801443a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801443e:	eba8 0809 	sub.w	r8, r8, r9
 8014442:	46a3      	mov	fp, r4
 8014444:	f854 0b04 	ldr.w	r0, [r4], #4
 8014448:	2800      	cmp	r0, #0
 801444a:	d0f2      	beq.n	8014432 <_findenv_r+0x26>
 801444c:	4642      	mov	r2, r8
 801444e:	4649      	mov	r1, r9
 8014450:	f000 fb89 	bl	8014b66 <strncmp>
 8014454:	2800      	cmp	r0, #0
 8014456:	d1f4      	bne.n	8014442 <_findenv_r+0x36>
 8014458:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801445c:	eb03 0508 	add.w	r5, r3, r8
 8014460:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014464:	2b3d      	cmp	r3, #61	@ 0x3d
 8014466:	d1ec      	bne.n	8014442 <_findenv_r+0x36>
 8014468:	f8da 3000 	ldr.w	r3, [sl]
 801446c:	ebab 0303 	sub.w	r3, fp, r3
 8014470:	109b      	asrs	r3, r3, #2
 8014472:	4630      	mov	r0, r6
 8014474:	603b      	str	r3, [r7, #0]
 8014476:	f000 fc5d 	bl	8014d34 <__env_unlock>
 801447a:	1c68      	adds	r0, r5, #1
 801447c:	e7dd      	b.n	801443a <_findenv_r+0x2e>
 801447e:	bf00      	nop
 8014480:	200000c0 	.word	0x200000c0

08014484 <malloc>:
 8014484:	4b02      	ldr	r3, [pc, #8]	@ (8014490 <malloc+0xc>)
 8014486:	4601      	mov	r1, r0
 8014488:	6818      	ldr	r0, [r3, #0]
 801448a:	f000 b82d 	b.w	80144e8 <_malloc_r>
 801448e:	bf00      	nop
 8014490:	20000180 	.word	0x20000180

08014494 <free>:
 8014494:	4b02      	ldr	r3, [pc, #8]	@ (80144a0 <free+0xc>)
 8014496:	4601      	mov	r1, r0
 8014498:	6818      	ldr	r0, [r3, #0]
 801449a:	f000 bc51 	b.w	8014d40 <_free_r>
 801449e:	bf00      	nop
 80144a0:	20000180 	.word	0x20000180

080144a4 <sbrk_aligned>:
 80144a4:	b570      	push	{r4, r5, r6, lr}
 80144a6:	4e0f      	ldr	r6, [pc, #60]	@ (80144e4 <sbrk_aligned+0x40>)
 80144a8:	460c      	mov	r4, r1
 80144aa:	6831      	ldr	r1, [r6, #0]
 80144ac:	4605      	mov	r5, r0
 80144ae:	b911      	cbnz	r1, 80144b6 <sbrk_aligned+0x12>
 80144b0:	f000 fbb6 	bl	8014c20 <_sbrk_r>
 80144b4:	6030      	str	r0, [r6, #0]
 80144b6:	4621      	mov	r1, r4
 80144b8:	4628      	mov	r0, r5
 80144ba:	f000 fbb1 	bl	8014c20 <_sbrk_r>
 80144be:	1c43      	adds	r3, r0, #1
 80144c0:	d103      	bne.n	80144ca <sbrk_aligned+0x26>
 80144c2:	f04f 34ff 	mov.w	r4, #4294967295
 80144c6:	4620      	mov	r0, r4
 80144c8:	bd70      	pop	{r4, r5, r6, pc}
 80144ca:	1cc4      	adds	r4, r0, #3
 80144cc:	f024 0403 	bic.w	r4, r4, #3
 80144d0:	42a0      	cmp	r0, r4
 80144d2:	d0f8      	beq.n	80144c6 <sbrk_aligned+0x22>
 80144d4:	1a21      	subs	r1, r4, r0
 80144d6:	4628      	mov	r0, r5
 80144d8:	f000 fba2 	bl	8014c20 <_sbrk_r>
 80144dc:	3001      	adds	r0, #1
 80144de:	d1f2      	bne.n	80144c6 <sbrk_aligned+0x22>
 80144e0:	e7ef      	b.n	80144c2 <sbrk_aligned+0x1e>
 80144e2:	bf00      	nop
 80144e4:	20010ef0 	.word	0x20010ef0

080144e8 <_malloc_r>:
 80144e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144ec:	1ccd      	adds	r5, r1, #3
 80144ee:	f025 0503 	bic.w	r5, r5, #3
 80144f2:	3508      	adds	r5, #8
 80144f4:	2d0c      	cmp	r5, #12
 80144f6:	bf38      	it	cc
 80144f8:	250c      	movcc	r5, #12
 80144fa:	2d00      	cmp	r5, #0
 80144fc:	4606      	mov	r6, r0
 80144fe:	db01      	blt.n	8014504 <_malloc_r+0x1c>
 8014500:	42a9      	cmp	r1, r5
 8014502:	d904      	bls.n	801450e <_malloc_r+0x26>
 8014504:	230c      	movs	r3, #12
 8014506:	6033      	str	r3, [r6, #0]
 8014508:	2000      	movs	r0, #0
 801450a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801450e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80145e4 <_malloc_r+0xfc>
 8014512:	f000 f869 	bl	80145e8 <__malloc_lock>
 8014516:	f8d8 3000 	ldr.w	r3, [r8]
 801451a:	461c      	mov	r4, r3
 801451c:	bb44      	cbnz	r4, 8014570 <_malloc_r+0x88>
 801451e:	4629      	mov	r1, r5
 8014520:	4630      	mov	r0, r6
 8014522:	f7ff ffbf 	bl	80144a4 <sbrk_aligned>
 8014526:	1c43      	adds	r3, r0, #1
 8014528:	4604      	mov	r4, r0
 801452a:	d158      	bne.n	80145de <_malloc_r+0xf6>
 801452c:	f8d8 4000 	ldr.w	r4, [r8]
 8014530:	4627      	mov	r7, r4
 8014532:	2f00      	cmp	r7, #0
 8014534:	d143      	bne.n	80145be <_malloc_r+0xd6>
 8014536:	2c00      	cmp	r4, #0
 8014538:	d04b      	beq.n	80145d2 <_malloc_r+0xea>
 801453a:	6823      	ldr	r3, [r4, #0]
 801453c:	4639      	mov	r1, r7
 801453e:	4630      	mov	r0, r6
 8014540:	eb04 0903 	add.w	r9, r4, r3
 8014544:	f000 fb6c 	bl	8014c20 <_sbrk_r>
 8014548:	4581      	cmp	r9, r0
 801454a:	d142      	bne.n	80145d2 <_malloc_r+0xea>
 801454c:	6821      	ldr	r1, [r4, #0]
 801454e:	1a6d      	subs	r5, r5, r1
 8014550:	4629      	mov	r1, r5
 8014552:	4630      	mov	r0, r6
 8014554:	f7ff ffa6 	bl	80144a4 <sbrk_aligned>
 8014558:	3001      	adds	r0, #1
 801455a:	d03a      	beq.n	80145d2 <_malloc_r+0xea>
 801455c:	6823      	ldr	r3, [r4, #0]
 801455e:	442b      	add	r3, r5
 8014560:	6023      	str	r3, [r4, #0]
 8014562:	f8d8 3000 	ldr.w	r3, [r8]
 8014566:	685a      	ldr	r2, [r3, #4]
 8014568:	bb62      	cbnz	r2, 80145c4 <_malloc_r+0xdc>
 801456a:	f8c8 7000 	str.w	r7, [r8]
 801456e:	e00f      	b.n	8014590 <_malloc_r+0xa8>
 8014570:	6822      	ldr	r2, [r4, #0]
 8014572:	1b52      	subs	r2, r2, r5
 8014574:	d420      	bmi.n	80145b8 <_malloc_r+0xd0>
 8014576:	2a0b      	cmp	r2, #11
 8014578:	d917      	bls.n	80145aa <_malloc_r+0xc2>
 801457a:	1961      	adds	r1, r4, r5
 801457c:	42a3      	cmp	r3, r4
 801457e:	6025      	str	r5, [r4, #0]
 8014580:	bf18      	it	ne
 8014582:	6059      	strne	r1, [r3, #4]
 8014584:	6863      	ldr	r3, [r4, #4]
 8014586:	bf08      	it	eq
 8014588:	f8c8 1000 	streq.w	r1, [r8]
 801458c:	5162      	str	r2, [r4, r5]
 801458e:	604b      	str	r3, [r1, #4]
 8014590:	4630      	mov	r0, r6
 8014592:	f000 f82f 	bl	80145f4 <__malloc_unlock>
 8014596:	f104 000b 	add.w	r0, r4, #11
 801459a:	1d23      	adds	r3, r4, #4
 801459c:	f020 0007 	bic.w	r0, r0, #7
 80145a0:	1ac2      	subs	r2, r0, r3
 80145a2:	bf1c      	itt	ne
 80145a4:	1a1b      	subne	r3, r3, r0
 80145a6:	50a3      	strne	r3, [r4, r2]
 80145a8:	e7af      	b.n	801450a <_malloc_r+0x22>
 80145aa:	6862      	ldr	r2, [r4, #4]
 80145ac:	42a3      	cmp	r3, r4
 80145ae:	bf0c      	ite	eq
 80145b0:	f8c8 2000 	streq.w	r2, [r8]
 80145b4:	605a      	strne	r2, [r3, #4]
 80145b6:	e7eb      	b.n	8014590 <_malloc_r+0xa8>
 80145b8:	4623      	mov	r3, r4
 80145ba:	6864      	ldr	r4, [r4, #4]
 80145bc:	e7ae      	b.n	801451c <_malloc_r+0x34>
 80145be:	463c      	mov	r4, r7
 80145c0:	687f      	ldr	r7, [r7, #4]
 80145c2:	e7b6      	b.n	8014532 <_malloc_r+0x4a>
 80145c4:	461a      	mov	r2, r3
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	42a3      	cmp	r3, r4
 80145ca:	d1fb      	bne.n	80145c4 <_malloc_r+0xdc>
 80145cc:	2300      	movs	r3, #0
 80145ce:	6053      	str	r3, [r2, #4]
 80145d0:	e7de      	b.n	8014590 <_malloc_r+0xa8>
 80145d2:	230c      	movs	r3, #12
 80145d4:	6033      	str	r3, [r6, #0]
 80145d6:	4630      	mov	r0, r6
 80145d8:	f000 f80c 	bl	80145f4 <__malloc_unlock>
 80145dc:	e794      	b.n	8014508 <_malloc_r+0x20>
 80145de:	6005      	str	r5, [r0, #0]
 80145e0:	e7d6      	b.n	8014590 <_malloc_r+0xa8>
 80145e2:	bf00      	nop
 80145e4:	20010ef4 	.word	0x20010ef4

080145e8 <__malloc_lock>:
 80145e8:	4801      	ldr	r0, [pc, #4]	@ (80145f0 <__malloc_lock+0x8>)
 80145ea:	f000 bb66 	b.w	8014cba <__retarget_lock_acquire_recursive>
 80145ee:	bf00      	nop
 80145f0:	20011039 	.word	0x20011039

080145f4 <__malloc_unlock>:
 80145f4:	4801      	ldr	r0, [pc, #4]	@ (80145fc <__malloc_unlock+0x8>)
 80145f6:	f000 bb61 	b.w	8014cbc <__retarget_lock_release_recursive>
 80145fa:	bf00      	nop
 80145fc:	20011039 	.word	0x20011039

08014600 <srand>:
 8014600:	b538      	push	{r3, r4, r5, lr}
 8014602:	4b10      	ldr	r3, [pc, #64]	@ (8014644 <srand+0x44>)
 8014604:	681d      	ldr	r5, [r3, #0]
 8014606:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8014608:	4604      	mov	r4, r0
 801460a:	b9b3      	cbnz	r3, 801463a <srand+0x3a>
 801460c:	2018      	movs	r0, #24
 801460e:	f7ff ff39 	bl	8014484 <malloc>
 8014612:	4602      	mov	r2, r0
 8014614:	6328      	str	r0, [r5, #48]	@ 0x30
 8014616:	b920      	cbnz	r0, 8014622 <srand+0x22>
 8014618:	4b0b      	ldr	r3, [pc, #44]	@ (8014648 <srand+0x48>)
 801461a:	480c      	ldr	r0, [pc, #48]	@ (801464c <srand+0x4c>)
 801461c:	2146      	movs	r1, #70	@ 0x46
 801461e:	f000 fb65 	bl	8014cec <__assert_func>
 8014622:	490b      	ldr	r1, [pc, #44]	@ (8014650 <srand+0x50>)
 8014624:	4b0b      	ldr	r3, [pc, #44]	@ (8014654 <srand+0x54>)
 8014626:	e9c0 1300 	strd	r1, r3, [r0]
 801462a:	4b0b      	ldr	r3, [pc, #44]	@ (8014658 <srand+0x58>)
 801462c:	6083      	str	r3, [r0, #8]
 801462e:	230b      	movs	r3, #11
 8014630:	8183      	strh	r3, [r0, #12]
 8014632:	2100      	movs	r1, #0
 8014634:	2001      	movs	r0, #1
 8014636:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801463a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801463c:	2200      	movs	r2, #0
 801463e:	611c      	str	r4, [r3, #16]
 8014640:	615a      	str	r2, [r3, #20]
 8014642:	bd38      	pop	{r3, r4, r5, pc}
 8014644:	20000180 	.word	0x20000180
 8014648:	080167c4 	.word	0x080167c4
 801464c:	080167db 	.word	0x080167db
 8014650:	abcd330e 	.word	0xabcd330e
 8014654:	e66d1234 	.word	0xe66d1234
 8014658:	0005deec 	.word	0x0005deec

0801465c <rand>:
 801465c:	4b16      	ldr	r3, [pc, #88]	@ (80146b8 <rand+0x5c>)
 801465e:	b510      	push	{r4, lr}
 8014660:	681c      	ldr	r4, [r3, #0]
 8014662:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014664:	b9b3      	cbnz	r3, 8014694 <rand+0x38>
 8014666:	2018      	movs	r0, #24
 8014668:	f7ff ff0c 	bl	8014484 <malloc>
 801466c:	4602      	mov	r2, r0
 801466e:	6320      	str	r0, [r4, #48]	@ 0x30
 8014670:	b920      	cbnz	r0, 801467c <rand+0x20>
 8014672:	4b12      	ldr	r3, [pc, #72]	@ (80146bc <rand+0x60>)
 8014674:	4812      	ldr	r0, [pc, #72]	@ (80146c0 <rand+0x64>)
 8014676:	2152      	movs	r1, #82	@ 0x52
 8014678:	f000 fb38 	bl	8014cec <__assert_func>
 801467c:	4911      	ldr	r1, [pc, #68]	@ (80146c4 <rand+0x68>)
 801467e:	4b12      	ldr	r3, [pc, #72]	@ (80146c8 <rand+0x6c>)
 8014680:	e9c0 1300 	strd	r1, r3, [r0]
 8014684:	4b11      	ldr	r3, [pc, #68]	@ (80146cc <rand+0x70>)
 8014686:	6083      	str	r3, [r0, #8]
 8014688:	230b      	movs	r3, #11
 801468a:	8183      	strh	r3, [r0, #12]
 801468c:	2100      	movs	r1, #0
 801468e:	2001      	movs	r0, #1
 8014690:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014694:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014696:	480e      	ldr	r0, [pc, #56]	@ (80146d0 <rand+0x74>)
 8014698:	690b      	ldr	r3, [r1, #16]
 801469a:	694c      	ldr	r4, [r1, #20]
 801469c:	4a0d      	ldr	r2, [pc, #52]	@ (80146d4 <rand+0x78>)
 801469e:	4358      	muls	r0, r3
 80146a0:	fb02 0004 	mla	r0, r2, r4, r0
 80146a4:	fba3 3202 	umull	r3, r2, r3, r2
 80146a8:	3301      	adds	r3, #1
 80146aa:	eb40 0002 	adc.w	r0, r0, r2
 80146ae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80146b2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80146b6:	bd10      	pop	{r4, pc}
 80146b8:	20000180 	.word	0x20000180
 80146bc:	080167c4 	.word	0x080167c4
 80146c0:	080167db 	.word	0x080167db
 80146c4:	abcd330e 	.word	0xabcd330e
 80146c8:	e66d1234 	.word	0xe66d1234
 80146cc:	0005deec 	.word	0x0005deec
 80146d0:	5851f42d 	.word	0x5851f42d
 80146d4:	4c957f2d 	.word	0x4c957f2d

080146d8 <realloc>:
 80146d8:	4b02      	ldr	r3, [pc, #8]	@ (80146e4 <realloc+0xc>)
 80146da:	460a      	mov	r2, r1
 80146dc:	4601      	mov	r1, r0
 80146de:	6818      	ldr	r0, [r3, #0]
 80146e0:	f000 b802 	b.w	80146e8 <_realloc_r>
 80146e4:	20000180 	.word	0x20000180

080146e8 <_realloc_r>:
 80146e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146ec:	4680      	mov	r8, r0
 80146ee:	4615      	mov	r5, r2
 80146f0:	460c      	mov	r4, r1
 80146f2:	b921      	cbnz	r1, 80146fe <_realloc_r+0x16>
 80146f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146f8:	4611      	mov	r1, r2
 80146fa:	f7ff bef5 	b.w	80144e8 <_malloc_r>
 80146fe:	b92a      	cbnz	r2, 801470c <_realloc_r+0x24>
 8014700:	f000 fb1e 	bl	8014d40 <_free_r>
 8014704:	2400      	movs	r4, #0
 8014706:	4620      	mov	r0, r4
 8014708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801470c:	f000 fb62 	bl	8014dd4 <_malloc_usable_size_r>
 8014710:	4285      	cmp	r5, r0
 8014712:	4606      	mov	r6, r0
 8014714:	d802      	bhi.n	801471c <_realloc_r+0x34>
 8014716:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801471a:	d8f4      	bhi.n	8014706 <_realloc_r+0x1e>
 801471c:	4629      	mov	r1, r5
 801471e:	4640      	mov	r0, r8
 8014720:	f7ff fee2 	bl	80144e8 <_malloc_r>
 8014724:	4607      	mov	r7, r0
 8014726:	2800      	cmp	r0, #0
 8014728:	d0ec      	beq.n	8014704 <_realloc_r+0x1c>
 801472a:	42b5      	cmp	r5, r6
 801472c:	462a      	mov	r2, r5
 801472e:	4621      	mov	r1, r4
 8014730:	bf28      	it	cs
 8014732:	4632      	movcs	r2, r6
 8014734:	f000 facb 	bl	8014cce <memcpy>
 8014738:	4621      	mov	r1, r4
 801473a:	4640      	mov	r0, r8
 801473c:	f000 fb00 	bl	8014d40 <_free_r>
 8014740:	463c      	mov	r4, r7
 8014742:	e7e0      	b.n	8014706 <_realloc_r+0x1e>

08014744 <_strtoul_l.constprop.0>:
 8014744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014748:	4e34      	ldr	r6, [pc, #208]	@ (801481c <_strtoul_l.constprop.0+0xd8>)
 801474a:	4686      	mov	lr, r0
 801474c:	460d      	mov	r5, r1
 801474e:	4628      	mov	r0, r5
 8014750:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014754:	5d37      	ldrb	r7, [r6, r4]
 8014756:	f017 0708 	ands.w	r7, r7, #8
 801475a:	d1f8      	bne.n	801474e <_strtoul_l.constprop.0+0xa>
 801475c:	2c2d      	cmp	r4, #45	@ 0x2d
 801475e:	d12f      	bne.n	80147c0 <_strtoul_l.constprop.0+0x7c>
 8014760:	782c      	ldrb	r4, [r5, #0]
 8014762:	2701      	movs	r7, #1
 8014764:	1c85      	adds	r5, r0, #2
 8014766:	f033 0010 	bics.w	r0, r3, #16
 801476a:	d109      	bne.n	8014780 <_strtoul_l.constprop.0+0x3c>
 801476c:	2c30      	cmp	r4, #48	@ 0x30
 801476e:	d12c      	bne.n	80147ca <_strtoul_l.constprop.0+0x86>
 8014770:	7828      	ldrb	r0, [r5, #0]
 8014772:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014776:	2858      	cmp	r0, #88	@ 0x58
 8014778:	d127      	bne.n	80147ca <_strtoul_l.constprop.0+0x86>
 801477a:	786c      	ldrb	r4, [r5, #1]
 801477c:	2310      	movs	r3, #16
 801477e:	3502      	adds	r5, #2
 8014780:	f04f 38ff 	mov.w	r8, #4294967295
 8014784:	2600      	movs	r6, #0
 8014786:	fbb8 f8f3 	udiv	r8, r8, r3
 801478a:	fb03 f908 	mul.w	r9, r3, r8
 801478e:	ea6f 0909 	mvn.w	r9, r9
 8014792:	4630      	mov	r0, r6
 8014794:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014798:	f1bc 0f09 	cmp.w	ip, #9
 801479c:	d81c      	bhi.n	80147d8 <_strtoul_l.constprop.0+0x94>
 801479e:	4664      	mov	r4, ip
 80147a0:	42a3      	cmp	r3, r4
 80147a2:	dd2a      	ble.n	80147fa <_strtoul_l.constprop.0+0xb6>
 80147a4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80147a8:	d007      	beq.n	80147ba <_strtoul_l.constprop.0+0x76>
 80147aa:	4580      	cmp	r8, r0
 80147ac:	d322      	bcc.n	80147f4 <_strtoul_l.constprop.0+0xb0>
 80147ae:	d101      	bne.n	80147b4 <_strtoul_l.constprop.0+0x70>
 80147b0:	45a1      	cmp	r9, r4
 80147b2:	db1f      	blt.n	80147f4 <_strtoul_l.constprop.0+0xb0>
 80147b4:	fb00 4003 	mla	r0, r0, r3, r4
 80147b8:	2601      	movs	r6, #1
 80147ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147be:	e7e9      	b.n	8014794 <_strtoul_l.constprop.0+0x50>
 80147c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80147c2:	bf04      	itt	eq
 80147c4:	782c      	ldrbeq	r4, [r5, #0]
 80147c6:	1c85      	addeq	r5, r0, #2
 80147c8:	e7cd      	b.n	8014766 <_strtoul_l.constprop.0+0x22>
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d1d8      	bne.n	8014780 <_strtoul_l.constprop.0+0x3c>
 80147ce:	2c30      	cmp	r4, #48	@ 0x30
 80147d0:	bf0c      	ite	eq
 80147d2:	2308      	moveq	r3, #8
 80147d4:	230a      	movne	r3, #10
 80147d6:	e7d3      	b.n	8014780 <_strtoul_l.constprop.0+0x3c>
 80147d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80147dc:	f1bc 0f19 	cmp.w	ip, #25
 80147e0:	d801      	bhi.n	80147e6 <_strtoul_l.constprop.0+0xa2>
 80147e2:	3c37      	subs	r4, #55	@ 0x37
 80147e4:	e7dc      	b.n	80147a0 <_strtoul_l.constprop.0+0x5c>
 80147e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80147ea:	f1bc 0f19 	cmp.w	ip, #25
 80147ee:	d804      	bhi.n	80147fa <_strtoul_l.constprop.0+0xb6>
 80147f0:	3c57      	subs	r4, #87	@ 0x57
 80147f2:	e7d5      	b.n	80147a0 <_strtoul_l.constprop.0+0x5c>
 80147f4:	f04f 36ff 	mov.w	r6, #4294967295
 80147f8:	e7df      	b.n	80147ba <_strtoul_l.constprop.0+0x76>
 80147fa:	1c73      	adds	r3, r6, #1
 80147fc:	d106      	bne.n	801480c <_strtoul_l.constprop.0+0xc8>
 80147fe:	2322      	movs	r3, #34	@ 0x22
 8014800:	f8ce 3000 	str.w	r3, [lr]
 8014804:	4630      	mov	r0, r6
 8014806:	b932      	cbnz	r2, 8014816 <_strtoul_l.constprop.0+0xd2>
 8014808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801480c:	b107      	cbz	r7, 8014810 <_strtoul_l.constprop.0+0xcc>
 801480e:	4240      	negs	r0, r0
 8014810:	2a00      	cmp	r2, #0
 8014812:	d0f9      	beq.n	8014808 <_strtoul_l.constprop.0+0xc4>
 8014814:	b106      	cbz	r6, 8014818 <_strtoul_l.constprop.0+0xd4>
 8014816:	1e69      	subs	r1, r5, #1
 8014818:	6011      	str	r1, [r2, #0]
 801481a:	e7f5      	b.n	8014808 <_strtoul_l.constprop.0+0xc4>
 801481c:	08016834 	.word	0x08016834

08014820 <strtoul>:
 8014820:	4613      	mov	r3, r2
 8014822:	460a      	mov	r2, r1
 8014824:	4601      	mov	r1, r0
 8014826:	4802      	ldr	r0, [pc, #8]	@ (8014830 <strtoul+0x10>)
 8014828:	6800      	ldr	r0, [r0, #0]
 801482a:	f7ff bf8b 	b.w	8014744 <_strtoul_l.constprop.0>
 801482e:	bf00      	nop
 8014830:	20000180 	.word	0x20000180

08014834 <std>:
 8014834:	2300      	movs	r3, #0
 8014836:	b510      	push	{r4, lr}
 8014838:	4604      	mov	r4, r0
 801483a:	e9c0 3300 	strd	r3, r3, [r0]
 801483e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014842:	6083      	str	r3, [r0, #8]
 8014844:	8181      	strh	r1, [r0, #12]
 8014846:	6643      	str	r3, [r0, #100]	@ 0x64
 8014848:	81c2      	strh	r2, [r0, #14]
 801484a:	6183      	str	r3, [r0, #24]
 801484c:	4619      	mov	r1, r3
 801484e:	2208      	movs	r2, #8
 8014850:	305c      	adds	r0, #92	@ 0x5c
 8014852:	f000 f973 	bl	8014b3c <memset>
 8014856:	4b0d      	ldr	r3, [pc, #52]	@ (801488c <std+0x58>)
 8014858:	6263      	str	r3, [r4, #36]	@ 0x24
 801485a:	4b0d      	ldr	r3, [pc, #52]	@ (8014890 <std+0x5c>)
 801485c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801485e:	4b0d      	ldr	r3, [pc, #52]	@ (8014894 <std+0x60>)
 8014860:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014862:	4b0d      	ldr	r3, [pc, #52]	@ (8014898 <std+0x64>)
 8014864:	6323      	str	r3, [r4, #48]	@ 0x30
 8014866:	4b0d      	ldr	r3, [pc, #52]	@ (801489c <std+0x68>)
 8014868:	6224      	str	r4, [r4, #32]
 801486a:	429c      	cmp	r4, r3
 801486c:	d006      	beq.n	801487c <std+0x48>
 801486e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014872:	4294      	cmp	r4, r2
 8014874:	d002      	beq.n	801487c <std+0x48>
 8014876:	33d0      	adds	r3, #208	@ 0xd0
 8014878:	429c      	cmp	r4, r3
 801487a:	d105      	bne.n	8014888 <std+0x54>
 801487c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014884:	f000 ba18 	b.w	8014cb8 <__retarget_lock_init_recursive>
 8014888:	bd10      	pop	{r4, pc}
 801488a:	bf00      	nop
 801488c:	08014a45 	.word	0x08014a45
 8014890:	08014a67 	.word	0x08014a67
 8014894:	08014a9f 	.word	0x08014a9f
 8014898:	08014ac3 	.word	0x08014ac3
 801489c:	20010ef8 	.word	0x20010ef8

080148a0 <stdio_exit_handler>:
 80148a0:	4a02      	ldr	r2, [pc, #8]	@ (80148ac <stdio_exit_handler+0xc>)
 80148a2:	4903      	ldr	r1, [pc, #12]	@ (80148b0 <stdio_exit_handler+0x10>)
 80148a4:	4803      	ldr	r0, [pc, #12]	@ (80148b4 <stdio_exit_handler+0x14>)
 80148a6:	f000 b869 	b.w	801497c <_fwalk_sglue>
 80148aa:	bf00      	nop
 80148ac:	20000174 	.word	0x20000174
 80148b0:	0801573d 	.word	0x0801573d
 80148b4:	20000184 	.word	0x20000184

080148b8 <cleanup_stdio>:
 80148b8:	6841      	ldr	r1, [r0, #4]
 80148ba:	4b0c      	ldr	r3, [pc, #48]	@ (80148ec <cleanup_stdio+0x34>)
 80148bc:	4299      	cmp	r1, r3
 80148be:	b510      	push	{r4, lr}
 80148c0:	4604      	mov	r4, r0
 80148c2:	d001      	beq.n	80148c8 <cleanup_stdio+0x10>
 80148c4:	f000 ff3a 	bl	801573c <_fflush_r>
 80148c8:	68a1      	ldr	r1, [r4, #8]
 80148ca:	4b09      	ldr	r3, [pc, #36]	@ (80148f0 <cleanup_stdio+0x38>)
 80148cc:	4299      	cmp	r1, r3
 80148ce:	d002      	beq.n	80148d6 <cleanup_stdio+0x1e>
 80148d0:	4620      	mov	r0, r4
 80148d2:	f000 ff33 	bl	801573c <_fflush_r>
 80148d6:	68e1      	ldr	r1, [r4, #12]
 80148d8:	4b06      	ldr	r3, [pc, #24]	@ (80148f4 <cleanup_stdio+0x3c>)
 80148da:	4299      	cmp	r1, r3
 80148dc:	d004      	beq.n	80148e8 <cleanup_stdio+0x30>
 80148de:	4620      	mov	r0, r4
 80148e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148e4:	f000 bf2a 	b.w	801573c <_fflush_r>
 80148e8:	bd10      	pop	{r4, pc}
 80148ea:	bf00      	nop
 80148ec:	20010ef8 	.word	0x20010ef8
 80148f0:	20010f60 	.word	0x20010f60
 80148f4:	20010fc8 	.word	0x20010fc8

080148f8 <global_stdio_init.part.0>:
 80148f8:	b510      	push	{r4, lr}
 80148fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014928 <global_stdio_init.part.0+0x30>)
 80148fc:	4c0b      	ldr	r4, [pc, #44]	@ (801492c <global_stdio_init.part.0+0x34>)
 80148fe:	4a0c      	ldr	r2, [pc, #48]	@ (8014930 <global_stdio_init.part.0+0x38>)
 8014900:	601a      	str	r2, [r3, #0]
 8014902:	4620      	mov	r0, r4
 8014904:	2200      	movs	r2, #0
 8014906:	2104      	movs	r1, #4
 8014908:	f7ff ff94 	bl	8014834 <std>
 801490c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014910:	2201      	movs	r2, #1
 8014912:	2109      	movs	r1, #9
 8014914:	f7ff ff8e 	bl	8014834 <std>
 8014918:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801491c:	2202      	movs	r2, #2
 801491e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014922:	2112      	movs	r1, #18
 8014924:	f7ff bf86 	b.w	8014834 <std>
 8014928:	20011030 	.word	0x20011030
 801492c:	20010ef8 	.word	0x20010ef8
 8014930:	080148a1 	.word	0x080148a1

08014934 <__sfp_lock_acquire>:
 8014934:	4801      	ldr	r0, [pc, #4]	@ (801493c <__sfp_lock_acquire+0x8>)
 8014936:	f000 b9c0 	b.w	8014cba <__retarget_lock_acquire_recursive>
 801493a:	bf00      	nop
 801493c:	2001103a 	.word	0x2001103a

08014940 <__sfp_lock_release>:
 8014940:	4801      	ldr	r0, [pc, #4]	@ (8014948 <__sfp_lock_release+0x8>)
 8014942:	f000 b9bb 	b.w	8014cbc <__retarget_lock_release_recursive>
 8014946:	bf00      	nop
 8014948:	2001103a 	.word	0x2001103a

0801494c <__sinit>:
 801494c:	b510      	push	{r4, lr}
 801494e:	4604      	mov	r4, r0
 8014950:	f7ff fff0 	bl	8014934 <__sfp_lock_acquire>
 8014954:	6a23      	ldr	r3, [r4, #32]
 8014956:	b11b      	cbz	r3, 8014960 <__sinit+0x14>
 8014958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801495c:	f7ff bff0 	b.w	8014940 <__sfp_lock_release>
 8014960:	4b04      	ldr	r3, [pc, #16]	@ (8014974 <__sinit+0x28>)
 8014962:	6223      	str	r3, [r4, #32]
 8014964:	4b04      	ldr	r3, [pc, #16]	@ (8014978 <__sinit+0x2c>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b00      	cmp	r3, #0
 801496a:	d1f5      	bne.n	8014958 <__sinit+0xc>
 801496c:	f7ff ffc4 	bl	80148f8 <global_stdio_init.part.0>
 8014970:	e7f2      	b.n	8014958 <__sinit+0xc>
 8014972:	bf00      	nop
 8014974:	080148b9 	.word	0x080148b9
 8014978:	20011030 	.word	0x20011030

0801497c <_fwalk_sglue>:
 801497c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014980:	4607      	mov	r7, r0
 8014982:	4688      	mov	r8, r1
 8014984:	4614      	mov	r4, r2
 8014986:	2600      	movs	r6, #0
 8014988:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801498c:	f1b9 0901 	subs.w	r9, r9, #1
 8014990:	d505      	bpl.n	801499e <_fwalk_sglue+0x22>
 8014992:	6824      	ldr	r4, [r4, #0]
 8014994:	2c00      	cmp	r4, #0
 8014996:	d1f7      	bne.n	8014988 <_fwalk_sglue+0xc>
 8014998:	4630      	mov	r0, r6
 801499a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801499e:	89ab      	ldrh	r3, [r5, #12]
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d907      	bls.n	80149b4 <_fwalk_sglue+0x38>
 80149a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149a8:	3301      	adds	r3, #1
 80149aa:	d003      	beq.n	80149b4 <_fwalk_sglue+0x38>
 80149ac:	4629      	mov	r1, r5
 80149ae:	4638      	mov	r0, r7
 80149b0:	47c0      	blx	r8
 80149b2:	4306      	orrs	r6, r0
 80149b4:	3568      	adds	r5, #104	@ 0x68
 80149b6:	e7e9      	b.n	801498c <_fwalk_sglue+0x10>

080149b8 <iprintf>:
 80149b8:	b40f      	push	{r0, r1, r2, r3}
 80149ba:	b507      	push	{r0, r1, r2, lr}
 80149bc:	4906      	ldr	r1, [pc, #24]	@ (80149d8 <iprintf+0x20>)
 80149be:	ab04      	add	r3, sp, #16
 80149c0:	6808      	ldr	r0, [r1, #0]
 80149c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80149c6:	6881      	ldr	r1, [r0, #8]
 80149c8:	9301      	str	r3, [sp, #4]
 80149ca:	f000 fb8d 	bl	80150e8 <_vfiprintf_r>
 80149ce:	b003      	add	sp, #12
 80149d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80149d4:	b004      	add	sp, #16
 80149d6:	4770      	bx	lr
 80149d8:	20000180 	.word	0x20000180

080149dc <sniprintf>:
 80149dc:	b40c      	push	{r2, r3}
 80149de:	b530      	push	{r4, r5, lr}
 80149e0:	4b17      	ldr	r3, [pc, #92]	@ (8014a40 <sniprintf+0x64>)
 80149e2:	1e0c      	subs	r4, r1, #0
 80149e4:	681d      	ldr	r5, [r3, #0]
 80149e6:	b09d      	sub	sp, #116	@ 0x74
 80149e8:	da08      	bge.n	80149fc <sniprintf+0x20>
 80149ea:	238b      	movs	r3, #139	@ 0x8b
 80149ec:	602b      	str	r3, [r5, #0]
 80149ee:	f04f 30ff 	mov.w	r0, #4294967295
 80149f2:	b01d      	add	sp, #116	@ 0x74
 80149f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149f8:	b002      	add	sp, #8
 80149fa:	4770      	bx	lr
 80149fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014a00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a04:	bf14      	ite	ne
 8014a06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a0a:	4623      	moveq	r3, r4
 8014a0c:	9304      	str	r3, [sp, #16]
 8014a0e:	9307      	str	r3, [sp, #28]
 8014a10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a14:	9002      	str	r0, [sp, #8]
 8014a16:	9006      	str	r0, [sp, #24]
 8014a18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014a1e:	ab21      	add	r3, sp, #132	@ 0x84
 8014a20:	a902      	add	r1, sp, #8
 8014a22:	4628      	mov	r0, r5
 8014a24:	9301      	str	r3, [sp, #4]
 8014a26:	f000 fa39 	bl	8014e9c <_svfiprintf_r>
 8014a2a:	1c43      	adds	r3, r0, #1
 8014a2c:	bfbc      	itt	lt
 8014a2e:	238b      	movlt	r3, #139	@ 0x8b
 8014a30:	602b      	strlt	r3, [r5, #0]
 8014a32:	2c00      	cmp	r4, #0
 8014a34:	d0dd      	beq.n	80149f2 <sniprintf+0x16>
 8014a36:	9b02      	ldr	r3, [sp, #8]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	701a      	strb	r2, [r3, #0]
 8014a3c:	e7d9      	b.n	80149f2 <sniprintf+0x16>
 8014a3e:	bf00      	nop
 8014a40:	20000180 	.word	0x20000180

08014a44 <__sread>:
 8014a44:	b510      	push	{r4, lr}
 8014a46:	460c      	mov	r4, r1
 8014a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a4c:	f000 f8d6 	bl	8014bfc <_read_r>
 8014a50:	2800      	cmp	r0, #0
 8014a52:	bfab      	itete	ge
 8014a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a56:	89a3      	ldrhlt	r3, [r4, #12]
 8014a58:	181b      	addge	r3, r3, r0
 8014a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a5e:	bfac      	ite	ge
 8014a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a62:	81a3      	strhlt	r3, [r4, #12]
 8014a64:	bd10      	pop	{r4, pc}

08014a66 <__swrite>:
 8014a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6a:	461f      	mov	r7, r3
 8014a6c:	898b      	ldrh	r3, [r1, #12]
 8014a6e:	05db      	lsls	r3, r3, #23
 8014a70:	4605      	mov	r5, r0
 8014a72:	460c      	mov	r4, r1
 8014a74:	4616      	mov	r6, r2
 8014a76:	d505      	bpl.n	8014a84 <__swrite+0x1e>
 8014a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a7c:	2302      	movs	r3, #2
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f000 f8aa 	bl	8014bd8 <_lseek_r>
 8014a84:	89a3      	ldrh	r3, [r4, #12]
 8014a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a8e:	81a3      	strh	r3, [r4, #12]
 8014a90:	4632      	mov	r2, r6
 8014a92:	463b      	mov	r3, r7
 8014a94:	4628      	mov	r0, r5
 8014a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a9a:	f000 b8d1 	b.w	8014c40 <_write_r>

08014a9e <__sseek>:
 8014a9e:	b510      	push	{r4, lr}
 8014aa0:	460c      	mov	r4, r1
 8014aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014aa6:	f000 f897 	bl	8014bd8 <_lseek_r>
 8014aaa:	1c43      	adds	r3, r0, #1
 8014aac:	89a3      	ldrh	r3, [r4, #12]
 8014aae:	bf15      	itete	ne
 8014ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014aba:	81a3      	strheq	r3, [r4, #12]
 8014abc:	bf18      	it	ne
 8014abe:	81a3      	strhne	r3, [r4, #12]
 8014ac0:	bd10      	pop	{r4, pc}

08014ac2 <__sclose>:
 8014ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ac6:	f000 b877 	b.w	8014bb8 <_close_r>

08014aca <_vsniprintf_r>:
 8014aca:	b530      	push	{r4, r5, lr}
 8014acc:	4614      	mov	r4, r2
 8014ace:	2c00      	cmp	r4, #0
 8014ad0:	b09b      	sub	sp, #108	@ 0x6c
 8014ad2:	4605      	mov	r5, r0
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	da05      	bge.n	8014ae4 <_vsniprintf_r+0x1a>
 8014ad8:	238b      	movs	r3, #139	@ 0x8b
 8014ada:	6003      	str	r3, [r0, #0]
 8014adc:	f04f 30ff 	mov.w	r0, #4294967295
 8014ae0:	b01b      	add	sp, #108	@ 0x6c
 8014ae2:	bd30      	pop	{r4, r5, pc}
 8014ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014ae8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014aec:	bf14      	ite	ne
 8014aee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014af2:	4623      	moveq	r3, r4
 8014af4:	9302      	str	r3, [sp, #8]
 8014af6:	9305      	str	r3, [sp, #20]
 8014af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014afc:	9100      	str	r1, [sp, #0]
 8014afe:	9104      	str	r1, [sp, #16]
 8014b00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014b04:	4669      	mov	r1, sp
 8014b06:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8014b08:	f000 f9c8 	bl	8014e9c <_svfiprintf_r>
 8014b0c:	1c43      	adds	r3, r0, #1
 8014b0e:	bfbc      	itt	lt
 8014b10:	238b      	movlt	r3, #139	@ 0x8b
 8014b12:	602b      	strlt	r3, [r5, #0]
 8014b14:	2c00      	cmp	r4, #0
 8014b16:	d0e3      	beq.n	8014ae0 <_vsniprintf_r+0x16>
 8014b18:	9b00      	ldr	r3, [sp, #0]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	701a      	strb	r2, [r3, #0]
 8014b1e:	e7df      	b.n	8014ae0 <_vsniprintf_r+0x16>

08014b20 <vsniprintf>:
 8014b20:	b507      	push	{r0, r1, r2, lr}
 8014b22:	9300      	str	r3, [sp, #0]
 8014b24:	4613      	mov	r3, r2
 8014b26:	460a      	mov	r2, r1
 8014b28:	4601      	mov	r1, r0
 8014b2a:	4803      	ldr	r0, [pc, #12]	@ (8014b38 <vsniprintf+0x18>)
 8014b2c:	6800      	ldr	r0, [r0, #0]
 8014b2e:	f7ff ffcc 	bl	8014aca <_vsniprintf_r>
 8014b32:	b003      	add	sp, #12
 8014b34:	f85d fb04 	ldr.w	pc, [sp], #4
 8014b38:	20000180 	.word	0x20000180

08014b3c <memset>:
 8014b3c:	4402      	add	r2, r0
 8014b3e:	4603      	mov	r3, r0
 8014b40:	4293      	cmp	r3, r2
 8014b42:	d100      	bne.n	8014b46 <memset+0xa>
 8014b44:	4770      	bx	lr
 8014b46:	f803 1b01 	strb.w	r1, [r3], #1
 8014b4a:	e7f9      	b.n	8014b40 <memset+0x4>

08014b4c <strchr>:
 8014b4c:	b2c9      	uxtb	r1, r1
 8014b4e:	4603      	mov	r3, r0
 8014b50:	4618      	mov	r0, r3
 8014b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b56:	b112      	cbz	r2, 8014b5e <strchr+0x12>
 8014b58:	428a      	cmp	r2, r1
 8014b5a:	d1f9      	bne.n	8014b50 <strchr+0x4>
 8014b5c:	4770      	bx	lr
 8014b5e:	2900      	cmp	r1, #0
 8014b60:	bf18      	it	ne
 8014b62:	2000      	movne	r0, #0
 8014b64:	4770      	bx	lr

08014b66 <strncmp>:
 8014b66:	b510      	push	{r4, lr}
 8014b68:	b16a      	cbz	r2, 8014b86 <strncmp+0x20>
 8014b6a:	3901      	subs	r1, #1
 8014b6c:	1884      	adds	r4, r0, r2
 8014b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d103      	bne.n	8014b82 <strncmp+0x1c>
 8014b7a:	42a0      	cmp	r0, r4
 8014b7c:	d001      	beq.n	8014b82 <strncmp+0x1c>
 8014b7e:	2a00      	cmp	r2, #0
 8014b80:	d1f5      	bne.n	8014b6e <strncmp+0x8>
 8014b82:	1ad0      	subs	r0, r2, r3
 8014b84:	bd10      	pop	{r4, pc}
 8014b86:	4610      	mov	r0, r2
 8014b88:	e7fc      	b.n	8014b84 <strncmp+0x1e>

08014b8a <strstr>:
 8014b8a:	780a      	ldrb	r2, [r1, #0]
 8014b8c:	b570      	push	{r4, r5, r6, lr}
 8014b8e:	b96a      	cbnz	r2, 8014bac <strstr+0x22>
 8014b90:	bd70      	pop	{r4, r5, r6, pc}
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d109      	bne.n	8014baa <strstr+0x20>
 8014b96:	460c      	mov	r4, r1
 8014b98:	4605      	mov	r5, r0
 8014b9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d0f6      	beq.n	8014b90 <strstr+0x6>
 8014ba2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014ba6:	429e      	cmp	r6, r3
 8014ba8:	d0f7      	beq.n	8014b9a <strstr+0x10>
 8014baa:	3001      	adds	r0, #1
 8014bac:	7803      	ldrb	r3, [r0, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d1ef      	bne.n	8014b92 <strstr+0x8>
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	e7ec      	b.n	8014b90 <strstr+0x6>
	...

08014bb8 <_close_r>:
 8014bb8:	b538      	push	{r3, r4, r5, lr}
 8014bba:	4d06      	ldr	r5, [pc, #24]	@ (8014bd4 <_close_r+0x1c>)
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	4608      	mov	r0, r1
 8014bc2:	602b      	str	r3, [r5, #0]
 8014bc4:	f7ee fe40 	bl	8003848 <_close>
 8014bc8:	1c43      	adds	r3, r0, #1
 8014bca:	d102      	bne.n	8014bd2 <_close_r+0x1a>
 8014bcc:	682b      	ldr	r3, [r5, #0]
 8014bce:	b103      	cbz	r3, 8014bd2 <_close_r+0x1a>
 8014bd0:	6023      	str	r3, [r4, #0]
 8014bd2:	bd38      	pop	{r3, r4, r5, pc}
 8014bd4:	20011034 	.word	0x20011034

08014bd8 <_lseek_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4d07      	ldr	r5, [pc, #28]	@ (8014bf8 <_lseek_r+0x20>)
 8014bdc:	4604      	mov	r4, r0
 8014bde:	4608      	mov	r0, r1
 8014be0:	4611      	mov	r1, r2
 8014be2:	2200      	movs	r2, #0
 8014be4:	602a      	str	r2, [r5, #0]
 8014be6:	461a      	mov	r2, r3
 8014be8:	f7ee fe55 	bl	8003896 <_lseek>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d102      	bne.n	8014bf6 <_lseek_r+0x1e>
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	b103      	cbz	r3, 8014bf6 <_lseek_r+0x1e>
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}
 8014bf8:	20011034 	.word	0x20011034

08014bfc <_read_r>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	4d07      	ldr	r5, [pc, #28]	@ (8014c1c <_read_r+0x20>)
 8014c00:	4604      	mov	r4, r0
 8014c02:	4608      	mov	r0, r1
 8014c04:	4611      	mov	r1, r2
 8014c06:	2200      	movs	r2, #0
 8014c08:	602a      	str	r2, [r5, #0]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	f7ee fde3 	bl	80037d6 <_read>
 8014c10:	1c43      	adds	r3, r0, #1
 8014c12:	d102      	bne.n	8014c1a <_read_r+0x1e>
 8014c14:	682b      	ldr	r3, [r5, #0]
 8014c16:	b103      	cbz	r3, 8014c1a <_read_r+0x1e>
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	bd38      	pop	{r3, r4, r5, pc}
 8014c1c:	20011034 	.word	0x20011034

08014c20 <_sbrk_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4d06      	ldr	r5, [pc, #24]	@ (8014c3c <_sbrk_r+0x1c>)
 8014c24:	2300      	movs	r3, #0
 8014c26:	4604      	mov	r4, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	602b      	str	r3, [r5, #0]
 8014c2c:	f7ee fe40 	bl	80038b0 <_sbrk>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_sbrk_r+0x1a>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_sbrk_r+0x1a>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	20011034 	.word	0x20011034

08014c40 <_write_r>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	4d07      	ldr	r5, [pc, #28]	@ (8014c60 <_write_r+0x20>)
 8014c44:	4604      	mov	r4, r0
 8014c46:	4608      	mov	r0, r1
 8014c48:	4611      	mov	r1, r2
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	602a      	str	r2, [r5, #0]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	f7ee fdde 	bl	8003810 <_write>
 8014c54:	1c43      	adds	r3, r0, #1
 8014c56:	d102      	bne.n	8014c5e <_write_r+0x1e>
 8014c58:	682b      	ldr	r3, [r5, #0]
 8014c5a:	b103      	cbz	r3, 8014c5e <_write_r+0x1e>
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	bd38      	pop	{r3, r4, r5, pc}
 8014c60:	20011034 	.word	0x20011034

08014c64 <__errno>:
 8014c64:	4b01      	ldr	r3, [pc, #4]	@ (8014c6c <__errno+0x8>)
 8014c66:	6818      	ldr	r0, [r3, #0]
 8014c68:	4770      	bx	lr
 8014c6a:	bf00      	nop
 8014c6c:	20000180 	.word	0x20000180

08014c70 <__libc_init_array>:
 8014c70:	b570      	push	{r4, r5, r6, lr}
 8014c72:	4d0d      	ldr	r5, [pc, #52]	@ (8014ca8 <__libc_init_array+0x38>)
 8014c74:	4c0d      	ldr	r4, [pc, #52]	@ (8014cac <__libc_init_array+0x3c>)
 8014c76:	1b64      	subs	r4, r4, r5
 8014c78:	10a4      	asrs	r4, r4, #2
 8014c7a:	2600      	movs	r6, #0
 8014c7c:	42a6      	cmp	r6, r4
 8014c7e:	d109      	bne.n	8014c94 <__libc_init_array+0x24>
 8014c80:	4d0b      	ldr	r5, [pc, #44]	@ (8014cb0 <__libc_init_array+0x40>)
 8014c82:	4c0c      	ldr	r4, [pc, #48]	@ (8014cb4 <__libc_init_array+0x44>)
 8014c84:	f000 ff12 	bl	8015aac <_init>
 8014c88:	1b64      	subs	r4, r4, r5
 8014c8a:	10a4      	asrs	r4, r4, #2
 8014c8c:	2600      	movs	r6, #0
 8014c8e:	42a6      	cmp	r6, r4
 8014c90:	d105      	bne.n	8014c9e <__libc_init_array+0x2e>
 8014c92:	bd70      	pop	{r4, r5, r6, pc}
 8014c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c98:	4798      	blx	r3
 8014c9a:	3601      	adds	r6, #1
 8014c9c:	e7ee      	b.n	8014c7c <__libc_init_array+0xc>
 8014c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ca2:	4798      	blx	r3
 8014ca4:	3601      	adds	r6, #1
 8014ca6:	e7f2      	b.n	8014c8e <__libc_init_array+0x1e>
 8014ca8:	080169ac 	.word	0x080169ac
 8014cac:	080169ac 	.word	0x080169ac
 8014cb0:	080169ac 	.word	0x080169ac
 8014cb4:	080169b8 	.word	0x080169b8

08014cb8 <__retarget_lock_init_recursive>:
 8014cb8:	4770      	bx	lr

08014cba <__retarget_lock_acquire_recursive>:
 8014cba:	4770      	bx	lr

08014cbc <__retarget_lock_release_recursive>:
 8014cbc:	4770      	bx	lr

08014cbe <strcpy>:
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cc4:	f803 2b01 	strb.w	r2, [r3], #1
 8014cc8:	2a00      	cmp	r2, #0
 8014cca:	d1f9      	bne.n	8014cc0 <strcpy+0x2>
 8014ccc:	4770      	bx	lr

08014cce <memcpy>:
 8014cce:	440a      	add	r2, r1
 8014cd0:	4291      	cmp	r1, r2
 8014cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8014cd6:	d100      	bne.n	8014cda <memcpy+0xc>
 8014cd8:	4770      	bx	lr
 8014cda:	b510      	push	{r4, lr}
 8014cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014ce4:	4291      	cmp	r1, r2
 8014ce6:	d1f9      	bne.n	8014cdc <memcpy+0xe>
 8014ce8:	bd10      	pop	{r4, pc}
	...

08014cec <__assert_func>:
 8014cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014cee:	4614      	mov	r4, r2
 8014cf0:	461a      	mov	r2, r3
 8014cf2:	4b09      	ldr	r3, [pc, #36]	@ (8014d18 <__assert_func+0x2c>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	4605      	mov	r5, r0
 8014cf8:	68d8      	ldr	r0, [r3, #12]
 8014cfa:	b954      	cbnz	r4, 8014d12 <__assert_func+0x26>
 8014cfc:	4b07      	ldr	r3, [pc, #28]	@ (8014d1c <__assert_func+0x30>)
 8014cfe:	461c      	mov	r4, r3
 8014d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d04:	9100      	str	r1, [sp, #0]
 8014d06:	462b      	mov	r3, r5
 8014d08:	4905      	ldr	r1, [pc, #20]	@ (8014d20 <__assert_func+0x34>)
 8014d0a:	f000 fd3f 	bl	801578c <fiprintf>
 8014d0e:	f000 fdfd 	bl	801590c <abort>
 8014d12:	4b04      	ldr	r3, [pc, #16]	@ (8014d24 <__assert_func+0x38>)
 8014d14:	e7f4      	b.n	8014d00 <__assert_func+0x14>
 8014d16:	bf00      	nop
 8014d18:	20000180 	.word	0x20000180
 8014d1c:	0801696f 	.word	0x0801696f
 8014d20:	08016941 	.word	0x08016941
 8014d24:	08016934 	.word	0x08016934

08014d28 <__env_lock>:
 8014d28:	4801      	ldr	r0, [pc, #4]	@ (8014d30 <__env_lock+0x8>)
 8014d2a:	f7ff bfc6 	b.w	8014cba <__retarget_lock_acquire_recursive>
 8014d2e:	bf00      	nop
 8014d30:	20011038 	.word	0x20011038

08014d34 <__env_unlock>:
 8014d34:	4801      	ldr	r0, [pc, #4]	@ (8014d3c <__env_unlock+0x8>)
 8014d36:	f7ff bfc1 	b.w	8014cbc <__retarget_lock_release_recursive>
 8014d3a:	bf00      	nop
 8014d3c:	20011038 	.word	0x20011038

08014d40 <_free_r>:
 8014d40:	b538      	push	{r3, r4, r5, lr}
 8014d42:	4605      	mov	r5, r0
 8014d44:	2900      	cmp	r1, #0
 8014d46:	d041      	beq.n	8014dcc <_free_r+0x8c>
 8014d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014d4c:	1f0c      	subs	r4, r1, #4
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	bfb8      	it	lt
 8014d52:	18e4      	addlt	r4, r4, r3
 8014d54:	f7ff fc48 	bl	80145e8 <__malloc_lock>
 8014d58:	4a1d      	ldr	r2, [pc, #116]	@ (8014dd0 <_free_r+0x90>)
 8014d5a:	6813      	ldr	r3, [r2, #0]
 8014d5c:	b933      	cbnz	r3, 8014d6c <_free_r+0x2c>
 8014d5e:	6063      	str	r3, [r4, #4]
 8014d60:	6014      	str	r4, [r2, #0]
 8014d62:	4628      	mov	r0, r5
 8014d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d68:	f7ff bc44 	b.w	80145f4 <__malloc_unlock>
 8014d6c:	42a3      	cmp	r3, r4
 8014d6e:	d908      	bls.n	8014d82 <_free_r+0x42>
 8014d70:	6820      	ldr	r0, [r4, #0]
 8014d72:	1821      	adds	r1, r4, r0
 8014d74:	428b      	cmp	r3, r1
 8014d76:	bf01      	itttt	eq
 8014d78:	6819      	ldreq	r1, [r3, #0]
 8014d7a:	685b      	ldreq	r3, [r3, #4]
 8014d7c:	1809      	addeq	r1, r1, r0
 8014d7e:	6021      	streq	r1, [r4, #0]
 8014d80:	e7ed      	b.n	8014d5e <_free_r+0x1e>
 8014d82:	461a      	mov	r2, r3
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	b10b      	cbz	r3, 8014d8c <_free_r+0x4c>
 8014d88:	42a3      	cmp	r3, r4
 8014d8a:	d9fa      	bls.n	8014d82 <_free_r+0x42>
 8014d8c:	6811      	ldr	r1, [r2, #0]
 8014d8e:	1850      	adds	r0, r2, r1
 8014d90:	42a0      	cmp	r0, r4
 8014d92:	d10b      	bne.n	8014dac <_free_r+0x6c>
 8014d94:	6820      	ldr	r0, [r4, #0]
 8014d96:	4401      	add	r1, r0
 8014d98:	1850      	adds	r0, r2, r1
 8014d9a:	4283      	cmp	r3, r0
 8014d9c:	6011      	str	r1, [r2, #0]
 8014d9e:	d1e0      	bne.n	8014d62 <_free_r+0x22>
 8014da0:	6818      	ldr	r0, [r3, #0]
 8014da2:	685b      	ldr	r3, [r3, #4]
 8014da4:	6053      	str	r3, [r2, #4]
 8014da6:	4408      	add	r0, r1
 8014da8:	6010      	str	r0, [r2, #0]
 8014daa:	e7da      	b.n	8014d62 <_free_r+0x22>
 8014dac:	d902      	bls.n	8014db4 <_free_r+0x74>
 8014dae:	230c      	movs	r3, #12
 8014db0:	602b      	str	r3, [r5, #0]
 8014db2:	e7d6      	b.n	8014d62 <_free_r+0x22>
 8014db4:	6820      	ldr	r0, [r4, #0]
 8014db6:	1821      	adds	r1, r4, r0
 8014db8:	428b      	cmp	r3, r1
 8014dba:	bf04      	itt	eq
 8014dbc:	6819      	ldreq	r1, [r3, #0]
 8014dbe:	685b      	ldreq	r3, [r3, #4]
 8014dc0:	6063      	str	r3, [r4, #4]
 8014dc2:	bf04      	itt	eq
 8014dc4:	1809      	addeq	r1, r1, r0
 8014dc6:	6021      	streq	r1, [r4, #0]
 8014dc8:	6054      	str	r4, [r2, #4]
 8014dca:	e7ca      	b.n	8014d62 <_free_r+0x22>
 8014dcc:	bd38      	pop	{r3, r4, r5, pc}
 8014dce:	bf00      	nop
 8014dd0:	20010ef4 	.word	0x20010ef4

08014dd4 <_malloc_usable_size_r>:
 8014dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014dd8:	1f18      	subs	r0, r3, #4
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	bfbc      	itt	lt
 8014dde:	580b      	ldrlt	r3, [r1, r0]
 8014de0:	18c0      	addlt	r0, r0, r3
 8014de2:	4770      	bx	lr

08014de4 <__ssputs_r>:
 8014de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014de8:	688e      	ldr	r6, [r1, #8]
 8014dea:	461f      	mov	r7, r3
 8014dec:	42be      	cmp	r6, r7
 8014dee:	680b      	ldr	r3, [r1, #0]
 8014df0:	4682      	mov	sl, r0
 8014df2:	460c      	mov	r4, r1
 8014df4:	4690      	mov	r8, r2
 8014df6:	d82d      	bhi.n	8014e54 <__ssputs_r+0x70>
 8014df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014dfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014e00:	d026      	beq.n	8014e50 <__ssputs_r+0x6c>
 8014e02:	6965      	ldr	r5, [r4, #20]
 8014e04:	6909      	ldr	r1, [r1, #16]
 8014e06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e0a:	eba3 0901 	sub.w	r9, r3, r1
 8014e0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014e12:	1c7b      	adds	r3, r7, #1
 8014e14:	444b      	add	r3, r9
 8014e16:	106d      	asrs	r5, r5, #1
 8014e18:	429d      	cmp	r5, r3
 8014e1a:	bf38      	it	cc
 8014e1c:	461d      	movcc	r5, r3
 8014e1e:	0553      	lsls	r3, r2, #21
 8014e20:	d527      	bpl.n	8014e72 <__ssputs_r+0x8e>
 8014e22:	4629      	mov	r1, r5
 8014e24:	f7ff fb60 	bl	80144e8 <_malloc_r>
 8014e28:	4606      	mov	r6, r0
 8014e2a:	b360      	cbz	r0, 8014e86 <__ssputs_r+0xa2>
 8014e2c:	6921      	ldr	r1, [r4, #16]
 8014e2e:	464a      	mov	r2, r9
 8014e30:	f7ff ff4d 	bl	8014cce <memcpy>
 8014e34:	89a3      	ldrh	r3, [r4, #12]
 8014e36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e3e:	81a3      	strh	r3, [r4, #12]
 8014e40:	6126      	str	r6, [r4, #16]
 8014e42:	6165      	str	r5, [r4, #20]
 8014e44:	444e      	add	r6, r9
 8014e46:	eba5 0509 	sub.w	r5, r5, r9
 8014e4a:	6026      	str	r6, [r4, #0]
 8014e4c:	60a5      	str	r5, [r4, #8]
 8014e4e:	463e      	mov	r6, r7
 8014e50:	42be      	cmp	r6, r7
 8014e52:	d900      	bls.n	8014e56 <__ssputs_r+0x72>
 8014e54:	463e      	mov	r6, r7
 8014e56:	6820      	ldr	r0, [r4, #0]
 8014e58:	4632      	mov	r2, r6
 8014e5a:	4641      	mov	r1, r8
 8014e5c:	f000 fd3c 	bl	80158d8 <memmove>
 8014e60:	68a3      	ldr	r3, [r4, #8]
 8014e62:	1b9b      	subs	r3, r3, r6
 8014e64:	60a3      	str	r3, [r4, #8]
 8014e66:	6823      	ldr	r3, [r4, #0]
 8014e68:	4433      	add	r3, r6
 8014e6a:	6023      	str	r3, [r4, #0]
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e72:	462a      	mov	r2, r5
 8014e74:	f7ff fc38 	bl	80146e8 <_realloc_r>
 8014e78:	4606      	mov	r6, r0
 8014e7a:	2800      	cmp	r0, #0
 8014e7c:	d1e0      	bne.n	8014e40 <__ssputs_r+0x5c>
 8014e7e:	6921      	ldr	r1, [r4, #16]
 8014e80:	4650      	mov	r0, sl
 8014e82:	f7ff ff5d 	bl	8014d40 <_free_r>
 8014e86:	230c      	movs	r3, #12
 8014e88:	f8ca 3000 	str.w	r3, [sl]
 8014e8c:	89a3      	ldrh	r3, [r4, #12]
 8014e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e92:	81a3      	strh	r3, [r4, #12]
 8014e94:	f04f 30ff 	mov.w	r0, #4294967295
 8014e98:	e7e9      	b.n	8014e6e <__ssputs_r+0x8a>
	...

08014e9c <_svfiprintf_r>:
 8014e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ea0:	4698      	mov	r8, r3
 8014ea2:	898b      	ldrh	r3, [r1, #12]
 8014ea4:	061b      	lsls	r3, r3, #24
 8014ea6:	b09d      	sub	sp, #116	@ 0x74
 8014ea8:	4607      	mov	r7, r0
 8014eaa:	460d      	mov	r5, r1
 8014eac:	4614      	mov	r4, r2
 8014eae:	d510      	bpl.n	8014ed2 <_svfiprintf_r+0x36>
 8014eb0:	690b      	ldr	r3, [r1, #16]
 8014eb2:	b973      	cbnz	r3, 8014ed2 <_svfiprintf_r+0x36>
 8014eb4:	2140      	movs	r1, #64	@ 0x40
 8014eb6:	f7ff fb17 	bl	80144e8 <_malloc_r>
 8014eba:	6028      	str	r0, [r5, #0]
 8014ebc:	6128      	str	r0, [r5, #16]
 8014ebe:	b930      	cbnz	r0, 8014ece <_svfiprintf_r+0x32>
 8014ec0:	230c      	movs	r3, #12
 8014ec2:	603b      	str	r3, [r7, #0]
 8014ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ec8:	b01d      	add	sp, #116	@ 0x74
 8014eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ece:	2340      	movs	r3, #64	@ 0x40
 8014ed0:	616b      	str	r3, [r5, #20]
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ed6:	2320      	movs	r3, #32
 8014ed8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ee0:	2330      	movs	r3, #48	@ 0x30
 8014ee2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015080 <_svfiprintf_r+0x1e4>
 8014ee6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014eea:	f04f 0901 	mov.w	r9, #1
 8014eee:	4623      	mov	r3, r4
 8014ef0:	469a      	mov	sl, r3
 8014ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ef6:	b10a      	cbz	r2, 8014efc <_svfiprintf_r+0x60>
 8014ef8:	2a25      	cmp	r2, #37	@ 0x25
 8014efa:	d1f9      	bne.n	8014ef0 <_svfiprintf_r+0x54>
 8014efc:	ebba 0b04 	subs.w	fp, sl, r4
 8014f00:	d00b      	beq.n	8014f1a <_svfiprintf_r+0x7e>
 8014f02:	465b      	mov	r3, fp
 8014f04:	4622      	mov	r2, r4
 8014f06:	4629      	mov	r1, r5
 8014f08:	4638      	mov	r0, r7
 8014f0a:	f7ff ff6b 	bl	8014de4 <__ssputs_r>
 8014f0e:	3001      	adds	r0, #1
 8014f10:	f000 80a7 	beq.w	8015062 <_svfiprintf_r+0x1c6>
 8014f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f16:	445a      	add	r2, fp
 8014f18:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	f000 809f 	beq.w	8015062 <_svfiprintf_r+0x1c6>
 8014f24:	2300      	movs	r3, #0
 8014f26:	f04f 32ff 	mov.w	r2, #4294967295
 8014f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f2e:	f10a 0a01 	add.w	sl, sl, #1
 8014f32:	9304      	str	r3, [sp, #16]
 8014f34:	9307      	str	r3, [sp, #28]
 8014f36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014f3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8014f3c:	4654      	mov	r4, sl
 8014f3e:	2205      	movs	r2, #5
 8014f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f44:	484e      	ldr	r0, [pc, #312]	@ (8015080 <_svfiprintf_r+0x1e4>)
 8014f46:	f7eb f97b 	bl	8000240 <memchr>
 8014f4a:	9a04      	ldr	r2, [sp, #16]
 8014f4c:	b9d8      	cbnz	r0, 8014f86 <_svfiprintf_r+0xea>
 8014f4e:	06d0      	lsls	r0, r2, #27
 8014f50:	bf44      	itt	mi
 8014f52:	2320      	movmi	r3, #32
 8014f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014f58:	0711      	lsls	r1, r2, #28
 8014f5a:	bf44      	itt	mi
 8014f5c:	232b      	movmi	r3, #43	@ 0x2b
 8014f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014f62:	f89a 3000 	ldrb.w	r3, [sl]
 8014f66:	2b2a      	cmp	r3, #42	@ 0x2a
 8014f68:	d015      	beq.n	8014f96 <_svfiprintf_r+0xfa>
 8014f6a:	9a07      	ldr	r2, [sp, #28]
 8014f6c:	4654      	mov	r4, sl
 8014f6e:	2000      	movs	r0, #0
 8014f70:	f04f 0c0a 	mov.w	ip, #10
 8014f74:	4621      	mov	r1, r4
 8014f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f7a:	3b30      	subs	r3, #48	@ 0x30
 8014f7c:	2b09      	cmp	r3, #9
 8014f7e:	d94b      	bls.n	8015018 <_svfiprintf_r+0x17c>
 8014f80:	b1b0      	cbz	r0, 8014fb0 <_svfiprintf_r+0x114>
 8014f82:	9207      	str	r2, [sp, #28]
 8014f84:	e014      	b.n	8014fb0 <_svfiprintf_r+0x114>
 8014f86:	eba0 0308 	sub.w	r3, r0, r8
 8014f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8014f8e:	4313      	orrs	r3, r2
 8014f90:	9304      	str	r3, [sp, #16]
 8014f92:	46a2      	mov	sl, r4
 8014f94:	e7d2      	b.n	8014f3c <_svfiprintf_r+0xa0>
 8014f96:	9b03      	ldr	r3, [sp, #12]
 8014f98:	1d19      	adds	r1, r3, #4
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	9103      	str	r1, [sp, #12]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	bfbb      	ittet	lt
 8014fa2:	425b      	neglt	r3, r3
 8014fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8014fa8:	9307      	strge	r3, [sp, #28]
 8014faa:	9307      	strlt	r3, [sp, #28]
 8014fac:	bfb8      	it	lt
 8014fae:	9204      	strlt	r2, [sp, #16]
 8014fb0:	7823      	ldrb	r3, [r4, #0]
 8014fb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8014fb4:	d10a      	bne.n	8014fcc <_svfiprintf_r+0x130>
 8014fb6:	7863      	ldrb	r3, [r4, #1]
 8014fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fba:	d132      	bne.n	8015022 <_svfiprintf_r+0x186>
 8014fbc:	9b03      	ldr	r3, [sp, #12]
 8014fbe:	1d1a      	adds	r2, r3, #4
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	9203      	str	r2, [sp, #12]
 8014fc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014fc8:	3402      	adds	r4, #2
 8014fca:	9305      	str	r3, [sp, #20]
 8014fcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015090 <_svfiprintf_r+0x1f4>
 8014fd0:	7821      	ldrb	r1, [r4, #0]
 8014fd2:	2203      	movs	r2, #3
 8014fd4:	4650      	mov	r0, sl
 8014fd6:	f7eb f933 	bl	8000240 <memchr>
 8014fda:	b138      	cbz	r0, 8014fec <_svfiprintf_r+0x150>
 8014fdc:	9b04      	ldr	r3, [sp, #16]
 8014fde:	eba0 000a 	sub.w	r0, r0, sl
 8014fe2:	2240      	movs	r2, #64	@ 0x40
 8014fe4:	4082      	lsls	r2, r0
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	3401      	adds	r4, #1
 8014fea:	9304      	str	r3, [sp, #16]
 8014fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ff0:	4824      	ldr	r0, [pc, #144]	@ (8015084 <_svfiprintf_r+0x1e8>)
 8014ff2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014ff6:	2206      	movs	r2, #6
 8014ff8:	f7eb f922 	bl	8000240 <memchr>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d036      	beq.n	801506e <_svfiprintf_r+0x1d2>
 8015000:	4b21      	ldr	r3, [pc, #132]	@ (8015088 <_svfiprintf_r+0x1ec>)
 8015002:	bb1b      	cbnz	r3, 801504c <_svfiprintf_r+0x1b0>
 8015004:	9b03      	ldr	r3, [sp, #12]
 8015006:	3307      	adds	r3, #7
 8015008:	f023 0307 	bic.w	r3, r3, #7
 801500c:	3308      	adds	r3, #8
 801500e:	9303      	str	r3, [sp, #12]
 8015010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015012:	4433      	add	r3, r6
 8015014:	9309      	str	r3, [sp, #36]	@ 0x24
 8015016:	e76a      	b.n	8014eee <_svfiprintf_r+0x52>
 8015018:	fb0c 3202 	mla	r2, ip, r2, r3
 801501c:	460c      	mov	r4, r1
 801501e:	2001      	movs	r0, #1
 8015020:	e7a8      	b.n	8014f74 <_svfiprintf_r+0xd8>
 8015022:	2300      	movs	r3, #0
 8015024:	3401      	adds	r4, #1
 8015026:	9305      	str	r3, [sp, #20]
 8015028:	4619      	mov	r1, r3
 801502a:	f04f 0c0a 	mov.w	ip, #10
 801502e:	4620      	mov	r0, r4
 8015030:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015034:	3a30      	subs	r2, #48	@ 0x30
 8015036:	2a09      	cmp	r2, #9
 8015038:	d903      	bls.n	8015042 <_svfiprintf_r+0x1a6>
 801503a:	2b00      	cmp	r3, #0
 801503c:	d0c6      	beq.n	8014fcc <_svfiprintf_r+0x130>
 801503e:	9105      	str	r1, [sp, #20]
 8015040:	e7c4      	b.n	8014fcc <_svfiprintf_r+0x130>
 8015042:	fb0c 2101 	mla	r1, ip, r1, r2
 8015046:	4604      	mov	r4, r0
 8015048:	2301      	movs	r3, #1
 801504a:	e7f0      	b.n	801502e <_svfiprintf_r+0x192>
 801504c:	ab03      	add	r3, sp, #12
 801504e:	9300      	str	r3, [sp, #0]
 8015050:	462a      	mov	r2, r5
 8015052:	4b0e      	ldr	r3, [pc, #56]	@ (801508c <_svfiprintf_r+0x1f0>)
 8015054:	a904      	add	r1, sp, #16
 8015056:	4638      	mov	r0, r7
 8015058:	f3af 8000 	nop.w
 801505c:	1c42      	adds	r2, r0, #1
 801505e:	4606      	mov	r6, r0
 8015060:	d1d6      	bne.n	8015010 <_svfiprintf_r+0x174>
 8015062:	89ab      	ldrh	r3, [r5, #12]
 8015064:	065b      	lsls	r3, r3, #25
 8015066:	f53f af2d 	bmi.w	8014ec4 <_svfiprintf_r+0x28>
 801506a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801506c:	e72c      	b.n	8014ec8 <_svfiprintf_r+0x2c>
 801506e:	ab03      	add	r3, sp, #12
 8015070:	9300      	str	r3, [sp, #0]
 8015072:	462a      	mov	r2, r5
 8015074:	4b05      	ldr	r3, [pc, #20]	@ (801508c <_svfiprintf_r+0x1f0>)
 8015076:	a904      	add	r1, sp, #16
 8015078:	4638      	mov	r0, r7
 801507a:	f000 f9bb 	bl	80153f4 <_printf_i>
 801507e:	e7ed      	b.n	801505c <_svfiprintf_r+0x1c0>
 8015080:	08016970 	.word	0x08016970
 8015084:	0801697a 	.word	0x0801697a
 8015088:	00000000 	.word	0x00000000
 801508c:	08014de5 	.word	0x08014de5
 8015090:	08016976 	.word	0x08016976

08015094 <__sfputc_r>:
 8015094:	6893      	ldr	r3, [r2, #8]
 8015096:	3b01      	subs	r3, #1
 8015098:	2b00      	cmp	r3, #0
 801509a:	b410      	push	{r4}
 801509c:	6093      	str	r3, [r2, #8]
 801509e:	da08      	bge.n	80150b2 <__sfputc_r+0x1e>
 80150a0:	6994      	ldr	r4, [r2, #24]
 80150a2:	42a3      	cmp	r3, r4
 80150a4:	db01      	blt.n	80150aa <__sfputc_r+0x16>
 80150a6:	290a      	cmp	r1, #10
 80150a8:	d103      	bne.n	80150b2 <__sfputc_r+0x1e>
 80150aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150ae:	f000 bb7f 	b.w	80157b0 <__swbuf_r>
 80150b2:	6813      	ldr	r3, [r2, #0]
 80150b4:	1c58      	adds	r0, r3, #1
 80150b6:	6010      	str	r0, [r2, #0]
 80150b8:	7019      	strb	r1, [r3, #0]
 80150ba:	4608      	mov	r0, r1
 80150bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150c0:	4770      	bx	lr

080150c2 <__sfputs_r>:
 80150c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150c4:	4606      	mov	r6, r0
 80150c6:	460f      	mov	r7, r1
 80150c8:	4614      	mov	r4, r2
 80150ca:	18d5      	adds	r5, r2, r3
 80150cc:	42ac      	cmp	r4, r5
 80150ce:	d101      	bne.n	80150d4 <__sfputs_r+0x12>
 80150d0:	2000      	movs	r0, #0
 80150d2:	e007      	b.n	80150e4 <__sfputs_r+0x22>
 80150d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150d8:	463a      	mov	r2, r7
 80150da:	4630      	mov	r0, r6
 80150dc:	f7ff ffda 	bl	8015094 <__sfputc_r>
 80150e0:	1c43      	adds	r3, r0, #1
 80150e2:	d1f3      	bne.n	80150cc <__sfputs_r+0xa>
 80150e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080150e8 <_vfiprintf_r>:
 80150e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150ec:	460d      	mov	r5, r1
 80150ee:	b09d      	sub	sp, #116	@ 0x74
 80150f0:	4614      	mov	r4, r2
 80150f2:	4698      	mov	r8, r3
 80150f4:	4606      	mov	r6, r0
 80150f6:	b118      	cbz	r0, 8015100 <_vfiprintf_r+0x18>
 80150f8:	6a03      	ldr	r3, [r0, #32]
 80150fa:	b90b      	cbnz	r3, 8015100 <_vfiprintf_r+0x18>
 80150fc:	f7ff fc26 	bl	801494c <__sinit>
 8015100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015102:	07d9      	lsls	r1, r3, #31
 8015104:	d405      	bmi.n	8015112 <_vfiprintf_r+0x2a>
 8015106:	89ab      	ldrh	r3, [r5, #12]
 8015108:	059a      	lsls	r2, r3, #22
 801510a:	d402      	bmi.n	8015112 <_vfiprintf_r+0x2a>
 801510c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801510e:	f7ff fdd4 	bl	8014cba <__retarget_lock_acquire_recursive>
 8015112:	89ab      	ldrh	r3, [r5, #12]
 8015114:	071b      	lsls	r3, r3, #28
 8015116:	d501      	bpl.n	801511c <_vfiprintf_r+0x34>
 8015118:	692b      	ldr	r3, [r5, #16]
 801511a:	b99b      	cbnz	r3, 8015144 <_vfiprintf_r+0x5c>
 801511c:	4629      	mov	r1, r5
 801511e:	4630      	mov	r0, r6
 8015120:	f000 fb84 	bl	801582c <__swsetup_r>
 8015124:	b170      	cbz	r0, 8015144 <_vfiprintf_r+0x5c>
 8015126:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015128:	07dc      	lsls	r4, r3, #31
 801512a:	d504      	bpl.n	8015136 <_vfiprintf_r+0x4e>
 801512c:	f04f 30ff 	mov.w	r0, #4294967295
 8015130:	b01d      	add	sp, #116	@ 0x74
 8015132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015136:	89ab      	ldrh	r3, [r5, #12]
 8015138:	0598      	lsls	r0, r3, #22
 801513a:	d4f7      	bmi.n	801512c <_vfiprintf_r+0x44>
 801513c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801513e:	f7ff fdbd 	bl	8014cbc <__retarget_lock_release_recursive>
 8015142:	e7f3      	b.n	801512c <_vfiprintf_r+0x44>
 8015144:	2300      	movs	r3, #0
 8015146:	9309      	str	r3, [sp, #36]	@ 0x24
 8015148:	2320      	movs	r3, #32
 801514a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801514e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015152:	2330      	movs	r3, #48	@ 0x30
 8015154:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015304 <_vfiprintf_r+0x21c>
 8015158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801515c:	f04f 0901 	mov.w	r9, #1
 8015160:	4623      	mov	r3, r4
 8015162:	469a      	mov	sl, r3
 8015164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015168:	b10a      	cbz	r2, 801516e <_vfiprintf_r+0x86>
 801516a:	2a25      	cmp	r2, #37	@ 0x25
 801516c:	d1f9      	bne.n	8015162 <_vfiprintf_r+0x7a>
 801516e:	ebba 0b04 	subs.w	fp, sl, r4
 8015172:	d00b      	beq.n	801518c <_vfiprintf_r+0xa4>
 8015174:	465b      	mov	r3, fp
 8015176:	4622      	mov	r2, r4
 8015178:	4629      	mov	r1, r5
 801517a:	4630      	mov	r0, r6
 801517c:	f7ff ffa1 	bl	80150c2 <__sfputs_r>
 8015180:	3001      	adds	r0, #1
 8015182:	f000 80a7 	beq.w	80152d4 <_vfiprintf_r+0x1ec>
 8015186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015188:	445a      	add	r2, fp
 801518a:	9209      	str	r2, [sp, #36]	@ 0x24
 801518c:	f89a 3000 	ldrb.w	r3, [sl]
 8015190:	2b00      	cmp	r3, #0
 8015192:	f000 809f 	beq.w	80152d4 <_vfiprintf_r+0x1ec>
 8015196:	2300      	movs	r3, #0
 8015198:	f04f 32ff 	mov.w	r2, #4294967295
 801519c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151a0:	f10a 0a01 	add.w	sl, sl, #1
 80151a4:	9304      	str	r3, [sp, #16]
 80151a6:	9307      	str	r3, [sp, #28]
 80151a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80151ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80151ae:	4654      	mov	r4, sl
 80151b0:	2205      	movs	r2, #5
 80151b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151b6:	4853      	ldr	r0, [pc, #332]	@ (8015304 <_vfiprintf_r+0x21c>)
 80151b8:	f7eb f842 	bl	8000240 <memchr>
 80151bc:	9a04      	ldr	r2, [sp, #16]
 80151be:	b9d8      	cbnz	r0, 80151f8 <_vfiprintf_r+0x110>
 80151c0:	06d1      	lsls	r1, r2, #27
 80151c2:	bf44      	itt	mi
 80151c4:	2320      	movmi	r3, #32
 80151c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80151ca:	0713      	lsls	r3, r2, #28
 80151cc:	bf44      	itt	mi
 80151ce:	232b      	movmi	r3, #43	@ 0x2b
 80151d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80151d4:	f89a 3000 	ldrb.w	r3, [sl]
 80151d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80151da:	d015      	beq.n	8015208 <_vfiprintf_r+0x120>
 80151dc:	9a07      	ldr	r2, [sp, #28]
 80151de:	4654      	mov	r4, sl
 80151e0:	2000      	movs	r0, #0
 80151e2:	f04f 0c0a 	mov.w	ip, #10
 80151e6:	4621      	mov	r1, r4
 80151e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151ec:	3b30      	subs	r3, #48	@ 0x30
 80151ee:	2b09      	cmp	r3, #9
 80151f0:	d94b      	bls.n	801528a <_vfiprintf_r+0x1a2>
 80151f2:	b1b0      	cbz	r0, 8015222 <_vfiprintf_r+0x13a>
 80151f4:	9207      	str	r2, [sp, #28]
 80151f6:	e014      	b.n	8015222 <_vfiprintf_r+0x13a>
 80151f8:	eba0 0308 	sub.w	r3, r0, r8
 80151fc:	fa09 f303 	lsl.w	r3, r9, r3
 8015200:	4313      	orrs	r3, r2
 8015202:	9304      	str	r3, [sp, #16]
 8015204:	46a2      	mov	sl, r4
 8015206:	e7d2      	b.n	80151ae <_vfiprintf_r+0xc6>
 8015208:	9b03      	ldr	r3, [sp, #12]
 801520a:	1d19      	adds	r1, r3, #4
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	9103      	str	r1, [sp, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	bfbb      	ittet	lt
 8015214:	425b      	neglt	r3, r3
 8015216:	f042 0202 	orrlt.w	r2, r2, #2
 801521a:	9307      	strge	r3, [sp, #28]
 801521c:	9307      	strlt	r3, [sp, #28]
 801521e:	bfb8      	it	lt
 8015220:	9204      	strlt	r2, [sp, #16]
 8015222:	7823      	ldrb	r3, [r4, #0]
 8015224:	2b2e      	cmp	r3, #46	@ 0x2e
 8015226:	d10a      	bne.n	801523e <_vfiprintf_r+0x156>
 8015228:	7863      	ldrb	r3, [r4, #1]
 801522a:	2b2a      	cmp	r3, #42	@ 0x2a
 801522c:	d132      	bne.n	8015294 <_vfiprintf_r+0x1ac>
 801522e:	9b03      	ldr	r3, [sp, #12]
 8015230:	1d1a      	adds	r2, r3, #4
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	9203      	str	r2, [sp, #12]
 8015236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801523a:	3402      	adds	r4, #2
 801523c:	9305      	str	r3, [sp, #20]
 801523e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015314 <_vfiprintf_r+0x22c>
 8015242:	7821      	ldrb	r1, [r4, #0]
 8015244:	2203      	movs	r2, #3
 8015246:	4650      	mov	r0, sl
 8015248:	f7ea fffa 	bl	8000240 <memchr>
 801524c:	b138      	cbz	r0, 801525e <_vfiprintf_r+0x176>
 801524e:	9b04      	ldr	r3, [sp, #16]
 8015250:	eba0 000a 	sub.w	r0, r0, sl
 8015254:	2240      	movs	r2, #64	@ 0x40
 8015256:	4082      	lsls	r2, r0
 8015258:	4313      	orrs	r3, r2
 801525a:	3401      	adds	r4, #1
 801525c:	9304      	str	r3, [sp, #16]
 801525e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015262:	4829      	ldr	r0, [pc, #164]	@ (8015308 <_vfiprintf_r+0x220>)
 8015264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015268:	2206      	movs	r2, #6
 801526a:	f7ea ffe9 	bl	8000240 <memchr>
 801526e:	2800      	cmp	r0, #0
 8015270:	d03f      	beq.n	80152f2 <_vfiprintf_r+0x20a>
 8015272:	4b26      	ldr	r3, [pc, #152]	@ (801530c <_vfiprintf_r+0x224>)
 8015274:	bb1b      	cbnz	r3, 80152be <_vfiprintf_r+0x1d6>
 8015276:	9b03      	ldr	r3, [sp, #12]
 8015278:	3307      	adds	r3, #7
 801527a:	f023 0307 	bic.w	r3, r3, #7
 801527e:	3308      	adds	r3, #8
 8015280:	9303      	str	r3, [sp, #12]
 8015282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015284:	443b      	add	r3, r7
 8015286:	9309      	str	r3, [sp, #36]	@ 0x24
 8015288:	e76a      	b.n	8015160 <_vfiprintf_r+0x78>
 801528a:	fb0c 3202 	mla	r2, ip, r2, r3
 801528e:	460c      	mov	r4, r1
 8015290:	2001      	movs	r0, #1
 8015292:	e7a8      	b.n	80151e6 <_vfiprintf_r+0xfe>
 8015294:	2300      	movs	r3, #0
 8015296:	3401      	adds	r4, #1
 8015298:	9305      	str	r3, [sp, #20]
 801529a:	4619      	mov	r1, r3
 801529c:	f04f 0c0a 	mov.w	ip, #10
 80152a0:	4620      	mov	r0, r4
 80152a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152a6:	3a30      	subs	r2, #48	@ 0x30
 80152a8:	2a09      	cmp	r2, #9
 80152aa:	d903      	bls.n	80152b4 <_vfiprintf_r+0x1cc>
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d0c6      	beq.n	801523e <_vfiprintf_r+0x156>
 80152b0:	9105      	str	r1, [sp, #20]
 80152b2:	e7c4      	b.n	801523e <_vfiprintf_r+0x156>
 80152b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80152b8:	4604      	mov	r4, r0
 80152ba:	2301      	movs	r3, #1
 80152bc:	e7f0      	b.n	80152a0 <_vfiprintf_r+0x1b8>
 80152be:	ab03      	add	r3, sp, #12
 80152c0:	9300      	str	r3, [sp, #0]
 80152c2:	462a      	mov	r2, r5
 80152c4:	4b12      	ldr	r3, [pc, #72]	@ (8015310 <_vfiprintf_r+0x228>)
 80152c6:	a904      	add	r1, sp, #16
 80152c8:	4630      	mov	r0, r6
 80152ca:	f3af 8000 	nop.w
 80152ce:	4607      	mov	r7, r0
 80152d0:	1c78      	adds	r0, r7, #1
 80152d2:	d1d6      	bne.n	8015282 <_vfiprintf_r+0x19a>
 80152d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80152d6:	07d9      	lsls	r1, r3, #31
 80152d8:	d405      	bmi.n	80152e6 <_vfiprintf_r+0x1fe>
 80152da:	89ab      	ldrh	r3, [r5, #12]
 80152dc:	059a      	lsls	r2, r3, #22
 80152de:	d402      	bmi.n	80152e6 <_vfiprintf_r+0x1fe>
 80152e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80152e2:	f7ff fceb 	bl	8014cbc <__retarget_lock_release_recursive>
 80152e6:	89ab      	ldrh	r3, [r5, #12]
 80152e8:	065b      	lsls	r3, r3, #25
 80152ea:	f53f af1f 	bmi.w	801512c <_vfiprintf_r+0x44>
 80152ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80152f0:	e71e      	b.n	8015130 <_vfiprintf_r+0x48>
 80152f2:	ab03      	add	r3, sp, #12
 80152f4:	9300      	str	r3, [sp, #0]
 80152f6:	462a      	mov	r2, r5
 80152f8:	4b05      	ldr	r3, [pc, #20]	@ (8015310 <_vfiprintf_r+0x228>)
 80152fa:	a904      	add	r1, sp, #16
 80152fc:	4630      	mov	r0, r6
 80152fe:	f000 f879 	bl	80153f4 <_printf_i>
 8015302:	e7e4      	b.n	80152ce <_vfiprintf_r+0x1e6>
 8015304:	08016970 	.word	0x08016970
 8015308:	0801697a 	.word	0x0801697a
 801530c:	00000000 	.word	0x00000000
 8015310:	080150c3 	.word	0x080150c3
 8015314:	08016976 	.word	0x08016976

08015318 <_printf_common>:
 8015318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801531c:	4616      	mov	r6, r2
 801531e:	4698      	mov	r8, r3
 8015320:	688a      	ldr	r2, [r1, #8]
 8015322:	690b      	ldr	r3, [r1, #16]
 8015324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015328:	4293      	cmp	r3, r2
 801532a:	bfb8      	it	lt
 801532c:	4613      	movlt	r3, r2
 801532e:	6033      	str	r3, [r6, #0]
 8015330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015334:	4607      	mov	r7, r0
 8015336:	460c      	mov	r4, r1
 8015338:	b10a      	cbz	r2, 801533e <_printf_common+0x26>
 801533a:	3301      	adds	r3, #1
 801533c:	6033      	str	r3, [r6, #0]
 801533e:	6823      	ldr	r3, [r4, #0]
 8015340:	0699      	lsls	r1, r3, #26
 8015342:	bf42      	ittt	mi
 8015344:	6833      	ldrmi	r3, [r6, #0]
 8015346:	3302      	addmi	r3, #2
 8015348:	6033      	strmi	r3, [r6, #0]
 801534a:	6825      	ldr	r5, [r4, #0]
 801534c:	f015 0506 	ands.w	r5, r5, #6
 8015350:	d106      	bne.n	8015360 <_printf_common+0x48>
 8015352:	f104 0a19 	add.w	sl, r4, #25
 8015356:	68e3      	ldr	r3, [r4, #12]
 8015358:	6832      	ldr	r2, [r6, #0]
 801535a:	1a9b      	subs	r3, r3, r2
 801535c:	42ab      	cmp	r3, r5
 801535e:	dc26      	bgt.n	80153ae <_printf_common+0x96>
 8015360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015364:	6822      	ldr	r2, [r4, #0]
 8015366:	3b00      	subs	r3, #0
 8015368:	bf18      	it	ne
 801536a:	2301      	movne	r3, #1
 801536c:	0692      	lsls	r2, r2, #26
 801536e:	d42b      	bmi.n	80153c8 <_printf_common+0xb0>
 8015370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015374:	4641      	mov	r1, r8
 8015376:	4638      	mov	r0, r7
 8015378:	47c8      	blx	r9
 801537a:	3001      	adds	r0, #1
 801537c:	d01e      	beq.n	80153bc <_printf_common+0xa4>
 801537e:	6823      	ldr	r3, [r4, #0]
 8015380:	6922      	ldr	r2, [r4, #16]
 8015382:	f003 0306 	and.w	r3, r3, #6
 8015386:	2b04      	cmp	r3, #4
 8015388:	bf02      	ittt	eq
 801538a:	68e5      	ldreq	r5, [r4, #12]
 801538c:	6833      	ldreq	r3, [r6, #0]
 801538e:	1aed      	subeq	r5, r5, r3
 8015390:	68a3      	ldr	r3, [r4, #8]
 8015392:	bf0c      	ite	eq
 8015394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015398:	2500      	movne	r5, #0
 801539a:	4293      	cmp	r3, r2
 801539c:	bfc4      	itt	gt
 801539e:	1a9b      	subgt	r3, r3, r2
 80153a0:	18ed      	addgt	r5, r5, r3
 80153a2:	2600      	movs	r6, #0
 80153a4:	341a      	adds	r4, #26
 80153a6:	42b5      	cmp	r5, r6
 80153a8:	d11a      	bne.n	80153e0 <_printf_common+0xc8>
 80153aa:	2000      	movs	r0, #0
 80153ac:	e008      	b.n	80153c0 <_printf_common+0xa8>
 80153ae:	2301      	movs	r3, #1
 80153b0:	4652      	mov	r2, sl
 80153b2:	4641      	mov	r1, r8
 80153b4:	4638      	mov	r0, r7
 80153b6:	47c8      	blx	r9
 80153b8:	3001      	adds	r0, #1
 80153ba:	d103      	bne.n	80153c4 <_printf_common+0xac>
 80153bc:	f04f 30ff 	mov.w	r0, #4294967295
 80153c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153c4:	3501      	adds	r5, #1
 80153c6:	e7c6      	b.n	8015356 <_printf_common+0x3e>
 80153c8:	18e1      	adds	r1, r4, r3
 80153ca:	1c5a      	adds	r2, r3, #1
 80153cc:	2030      	movs	r0, #48	@ 0x30
 80153ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80153d2:	4422      	add	r2, r4
 80153d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80153d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80153dc:	3302      	adds	r3, #2
 80153de:	e7c7      	b.n	8015370 <_printf_common+0x58>
 80153e0:	2301      	movs	r3, #1
 80153e2:	4622      	mov	r2, r4
 80153e4:	4641      	mov	r1, r8
 80153e6:	4638      	mov	r0, r7
 80153e8:	47c8      	blx	r9
 80153ea:	3001      	adds	r0, #1
 80153ec:	d0e6      	beq.n	80153bc <_printf_common+0xa4>
 80153ee:	3601      	adds	r6, #1
 80153f0:	e7d9      	b.n	80153a6 <_printf_common+0x8e>
	...

080153f4 <_printf_i>:
 80153f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80153f8:	7e0f      	ldrb	r7, [r1, #24]
 80153fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80153fc:	2f78      	cmp	r7, #120	@ 0x78
 80153fe:	4691      	mov	r9, r2
 8015400:	4680      	mov	r8, r0
 8015402:	460c      	mov	r4, r1
 8015404:	469a      	mov	sl, r3
 8015406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801540a:	d807      	bhi.n	801541c <_printf_i+0x28>
 801540c:	2f62      	cmp	r7, #98	@ 0x62
 801540e:	d80a      	bhi.n	8015426 <_printf_i+0x32>
 8015410:	2f00      	cmp	r7, #0
 8015412:	f000 80d2 	beq.w	80155ba <_printf_i+0x1c6>
 8015416:	2f58      	cmp	r7, #88	@ 0x58
 8015418:	f000 80b9 	beq.w	801558e <_printf_i+0x19a>
 801541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015424:	e03a      	b.n	801549c <_printf_i+0xa8>
 8015426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801542a:	2b15      	cmp	r3, #21
 801542c:	d8f6      	bhi.n	801541c <_printf_i+0x28>
 801542e:	a101      	add	r1, pc, #4	@ (adr r1, 8015434 <_printf_i+0x40>)
 8015430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015434:	0801548d 	.word	0x0801548d
 8015438:	080154a1 	.word	0x080154a1
 801543c:	0801541d 	.word	0x0801541d
 8015440:	0801541d 	.word	0x0801541d
 8015444:	0801541d 	.word	0x0801541d
 8015448:	0801541d 	.word	0x0801541d
 801544c:	080154a1 	.word	0x080154a1
 8015450:	0801541d 	.word	0x0801541d
 8015454:	0801541d 	.word	0x0801541d
 8015458:	0801541d 	.word	0x0801541d
 801545c:	0801541d 	.word	0x0801541d
 8015460:	080155a1 	.word	0x080155a1
 8015464:	080154cb 	.word	0x080154cb
 8015468:	0801555b 	.word	0x0801555b
 801546c:	0801541d 	.word	0x0801541d
 8015470:	0801541d 	.word	0x0801541d
 8015474:	080155c3 	.word	0x080155c3
 8015478:	0801541d 	.word	0x0801541d
 801547c:	080154cb 	.word	0x080154cb
 8015480:	0801541d 	.word	0x0801541d
 8015484:	0801541d 	.word	0x0801541d
 8015488:	08015563 	.word	0x08015563
 801548c:	6833      	ldr	r3, [r6, #0]
 801548e:	1d1a      	adds	r2, r3, #4
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	6032      	str	r2, [r6, #0]
 8015494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801549c:	2301      	movs	r3, #1
 801549e:	e09d      	b.n	80155dc <_printf_i+0x1e8>
 80154a0:	6833      	ldr	r3, [r6, #0]
 80154a2:	6820      	ldr	r0, [r4, #0]
 80154a4:	1d19      	adds	r1, r3, #4
 80154a6:	6031      	str	r1, [r6, #0]
 80154a8:	0606      	lsls	r6, r0, #24
 80154aa:	d501      	bpl.n	80154b0 <_printf_i+0xbc>
 80154ac:	681d      	ldr	r5, [r3, #0]
 80154ae:	e003      	b.n	80154b8 <_printf_i+0xc4>
 80154b0:	0645      	lsls	r5, r0, #25
 80154b2:	d5fb      	bpl.n	80154ac <_printf_i+0xb8>
 80154b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80154b8:	2d00      	cmp	r5, #0
 80154ba:	da03      	bge.n	80154c4 <_printf_i+0xd0>
 80154bc:	232d      	movs	r3, #45	@ 0x2d
 80154be:	426d      	negs	r5, r5
 80154c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80154c4:	4859      	ldr	r0, [pc, #356]	@ (801562c <_printf_i+0x238>)
 80154c6:	230a      	movs	r3, #10
 80154c8:	e011      	b.n	80154ee <_printf_i+0xfa>
 80154ca:	6821      	ldr	r1, [r4, #0]
 80154cc:	6833      	ldr	r3, [r6, #0]
 80154ce:	0608      	lsls	r0, r1, #24
 80154d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80154d4:	d402      	bmi.n	80154dc <_printf_i+0xe8>
 80154d6:	0649      	lsls	r1, r1, #25
 80154d8:	bf48      	it	mi
 80154da:	b2ad      	uxthmi	r5, r5
 80154dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80154de:	4853      	ldr	r0, [pc, #332]	@ (801562c <_printf_i+0x238>)
 80154e0:	6033      	str	r3, [r6, #0]
 80154e2:	bf14      	ite	ne
 80154e4:	230a      	movne	r3, #10
 80154e6:	2308      	moveq	r3, #8
 80154e8:	2100      	movs	r1, #0
 80154ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80154ee:	6866      	ldr	r6, [r4, #4]
 80154f0:	60a6      	str	r6, [r4, #8]
 80154f2:	2e00      	cmp	r6, #0
 80154f4:	bfa2      	ittt	ge
 80154f6:	6821      	ldrge	r1, [r4, #0]
 80154f8:	f021 0104 	bicge.w	r1, r1, #4
 80154fc:	6021      	strge	r1, [r4, #0]
 80154fe:	b90d      	cbnz	r5, 8015504 <_printf_i+0x110>
 8015500:	2e00      	cmp	r6, #0
 8015502:	d04b      	beq.n	801559c <_printf_i+0x1a8>
 8015504:	4616      	mov	r6, r2
 8015506:	fbb5 f1f3 	udiv	r1, r5, r3
 801550a:	fb03 5711 	mls	r7, r3, r1, r5
 801550e:	5dc7      	ldrb	r7, [r0, r7]
 8015510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015514:	462f      	mov	r7, r5
 8015516:	42bb      	cmp	r3, r7
 8015518:	460d      	mov	r5, r1
 801551a:	d9f4      	bls.n	8015506 <_printf_i+0x112>
 801551c:	2b08      	cmp	r3, #8
 801551e:	d10b      	bne.n	8015538 <_printf_i+0x144>
 8015520:	6823      	ldr	r3, [r4, #0]
 8015522:	07df      	lsls	r7, r3, #31
 8015524:	d508      	bpl.n	8015538 <_printf_i+0x144>
 8015526:	6923      	ldr	r3, [r4, #16]
 8015528:	6861      	ldr	r1, [r4, #4]
 801552a:	4299      	cmp	r1, r3
 801552c:	bfde      	ittt	le
 801552e:	2330      	movle	r3, #48	@ 0x30
 8015530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015534:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015538:	1b92      	subs	r2, r2, r6
 801553a:	6122      	str	r2, [r4, #16]
 801553c:	f8cd a000 	str.w	sl, [sp]
 8015540:	464b      	mov	r3, r9
 8015542:	aa03      	add	r2, sp, #12
 8015544:	4621      	mov	r1, r4
 8015546:	4640      	mov	r0, r8
 8015548:	f7ff fee6 	bl	8015318 <_printf_common>
 801554c:	3001      	adds	r0, #1
 801554e:	d14a      	bne.n	80155e6 <_printf_i+0x1f2>
 8015550:	f04f 30ff 	mov.w	r0, #4294967295
 8015554:	b004      	add	sp, #16
 8015556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555a:	6823      	ldr	r3, [r4, #0]
 801555c:	f043 0320 	orr.w	r3, r3, #32
 8015560:	6023      	str	r3, [r4, #0]
 8015562:	4833      	ldr	r0, [pc, #204]	@ (8015630 <_printf_i+0x23c>)
 8015564:	2778      	movs	r7, #120	@ 0x78
 8015566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801556a:	6823      	ldr	r3, [r4, #0]
 801556c:	6831      	ldr	r1, [r6, #0]
 801556e:	061f      	lsls	r7, r3, #24
 8015570:	f851 5b04 	ldr.w	r5, [r1], #4
 8015574:	d402      	bmi.n	801557c <_printf_i+0x188>
 8015576:	065f      	lsls	r7, r3, #25
 8015578:	bf48      	it	mi
 801557a:	b2ad      	uxthmi	r5, r5
 801557c:	6031      	str	r1, [r6, #0]
 801557e:	07d9      	lsls	r1, r3, #31
 8015580:	bf44      	itt	mi
 8015582:	f043 0320 	orrmi.w	r3, r3, #32
 8015586:	6023      	strmi	r3, [r4, #0]
 8015588:	b11d      	cbz	r5, 8015592 <_printf_i+0x19e>
 801558a:	2310      	movs	r3, #16
 801558c:	e7ac      	b.n	80154e8 <_printf_i+0xf4>
 801558e:	4827      	ldr	r0, [pc, #156]	@ (801562c <_printf_i+0x238>)
 8015590:	e7e9      	b.n	8015566 <_printf_i+0x172>
 8015592:	6823      	ldr	r3, [r4, #0]
 8015594:	f023 0320 	bic.w	r3, r3, #32
 8015598:	6023      	str	r3, [r4, #0]
 801559a:	e7f6      	b.n	801558a <_printf_i+0x196>
 801559c:	4616      	mov	r6, r2
 801559e:	e7bd      	b.n	801551c <_printf_i+0x128>
 80155a0:	6833      	ldr	r3, [r6, #0]
 80155a2:	6825      	ldr	r5, [r4, #0]
 80155a4:	6961      	ldr	r1, [r4, #20]
 80155a6:	1d18      	adds	r0, r3, #4
 80155a8:	6030      	str	r0, [r6, #0]
 80155aa:	062e      	lsls	r6, r5, #24
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	d501      	bpl.n	80155b4 <_printf_i+0x1c0>
 80155b0:	6019      	str	r1, [r3, #0]
 80155b2:	e002      	b.n	80155ba <_printf_i+0x1c6>
 80155b4:	0668      	lsls	r0, r5, #25
 80155b6:	d5fb      	bpl.n	80155b0 <_printf_i+0x1bc>
 80155b8:	8019      	strh	r1, [r3, #0]
 80155ba:	2300      	movs	r3, #0
 80155bc:	6123      	str	r3, [r4, #16]
 80155be:	4616      	mov	r6, r2
 80155c0:	e7bc      	b.n	801553c <_printf_i+0x148>
 80155c2:	6833      	ldr	r3, [r6, #0]
 80155c4:	1d1a      	adds	r2, r3, #4
 80155c6:	6032      	str	r2, [r6, #0]
 80155c8:	681e      	ldr	r6, [r3, #0]
 80155ca:	6862      	ldr	r2, [r4, #4]
 80155cc:	2100      	movs	r1, #0
 80155ce:	4630      	mov	r0, r6
 80155d0:	f7ea fe36 	bl	8000240 <memchr>
 80155d4:	b108      	cbz	r0, 80155da <_printf_i+0x1e6>
 80155d6:	1b80      	subs	r0, r0, r6
 80155d8:	6060      	str	r0, [r4, #4]
 80155da:	6863      	ldr	r3, [r4, #4]
 80155dc:	6123      	str	r3, [r4, #16]
 80155de:	2300      	movs	r3, #0
 80155e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80155e4:	e7aa      	b.n	801553c <_printf_i+0x148>
 80155e6:	6923      	ldr	r3, [r4, #16]
 80155e8:	4632      	mov	r2, r6
 80155ea:	4649      	mov	r1, r9
 80155ec:	4640      	mov	r0, r8
 80155ee:	47d0      	blx	sl
 80155f0:	3001      	adds	r0, #1
 80155f2:	d0ad      	beq.n	8015550 <_printf_i+0x15c>
 80155f4:	6823      	ldr	r3, [r4, #0]
 80155f6:	079b      	lsls	r3, r3, #30
 80155f8:	d413      	bmi.n	8015622 <_printf_i+0x22e>
 80155fa:	68e0      	ldr	r0, [r4, #12]
 80155fc:	9b03      	ldr	r3, [sp, #12]
 80155fe:	4298      	cmp	r0, r3
 8015600:	bfb8      	it	lt
 8015602:	4618      	movlt	r0, r3
 8015604:	e7a6      	b.n	8015554 <_printf_i+0x160>
 8015606:	2301      	movs	r3, #1
 8015608:	4632      	mov	r2, r6
 801560a:	4649      	mov	r1, r9
 801560c:	4640      	mov	r0, r8
 801560e:	47d0      	blx	sl
 8015610:	3001      	adds	r0, #1
 8015612:	d09d      	beq.n	8015550 <_printf_i+0x15c>
 8015614:	3501      	adds	r5, #1
 8015616:	68e3      	ldr	r3, [r4, #12]
 8015618:	9903      	ldr	r1, [sp, #12]
 801561a:	1a5b      	subs	r3, r3, r1
 801561c:	42ab      	cmp	r3, r5
 801561e:	dcf2      	bgt.n	8015606 <_printf_i+0x212>
 8015620:	e7eb      	b.n	80155fa <_printf_i+0x206>
 8015622:	2500      	movs	r5, #0
 8015624:	f104 0619 	add.w	r6, r4, #25
 8015628:	e7f5      	b.n	8015616 <_printf_i+0x222>
 801562a:	bf00      	nop
 801562c:	08016981 	.word	0x08016981
 8015630:	08016992 	.word	0x08016992

08015634 <__sflush_r>:
 8015634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801563c:	0716      	lsls	r6, r2, #28
 801563e:	4605      	mov	r5, r0
 8015640:	460c      	mov	r4, r1
 8015642:	d454      	bmi.n	80156ee <__sflush_r+0xba>
 8015644:	684b      	ldr	r3, [r1, #4]
 8015646:	2b00      	cmp	r3, #0
 8015648:	dc02      	bgt.n	8015650 <__sflush_r+0x1c>
 801564a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801564c:	2b00      	cmp	r3, #0
 801564e:	dd48      	ble.n	80156e2 <__sflush_r+0xae>
 8015650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015652:	2e00      	cmp	r6, #0
 8015654:	d045      	beq.n	80156e2 <__sflush_r+0xae>
 8015656:	2300      	movs	r3, #0
 8015658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801565c:	682f      	ldr	r7, [r5, #0]
 801565e:	6a21      	ldr	r1, [r4, #32]
 8015660:	602b      	str	r3, [r5, #0]
 8015662:	d030      	beq.n	80156c6 <__sflush_r+0x92>
 8015664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015666:	89a3      	ldrh	r3, [r4, #12]
 8015668:	0759      	lsls	r1, r3, #29
 801566a:	d505      	bpl.n	8015678 <__sflush_r+0x44>
 801566c:	6863      	ldr	r3, [r4, #4]
 801566e:	1ad2      	subs	r2, r2, r3
 8015670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015672:	b10b      	cbz	r3, 8015678 <__sflush_r+0x44>
 8015674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015676:	1ad2      	subs	r2, r2, r3
 8015678:	2300      	movs	r3, #0
 801567a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801567c:	6a21      	ldr	r1, [r4, #32]
 801567e:	4628      	mov	r0, r5
 8015680:	47b0      	blx	r6
 8015682:	1c43      	adds	r3, r0, #1
 8015684:	89a3      	ldrh	r3, [r4, #12]
 8015686:	d106      	bne.n	8015696 <__sflush_r+0x62>
 8015688:	6829      	ldr	r1, [r5, #0]
 801568a:	291d      	cmp	r1, #29
 801568c:	d82b      	bhi.n	80156e6 <__sflush_r+0xb2>
 801568e:	4a2a      	ldr	r2, [pc, #168]	@ (8015738 <__sflush_r+0x104>)
 8015690:	410a      	asrs	r2, r1
 8015692:	07d6      	lsls	r6, r2, #31
 8015694:	d427      	bmi.n	80156e6 <__sflush_r+0xb2>
 8015696:	2200      	movs	r2, #0
 8015698:	6062      	str	r2, [r4, #4]
 801569a:	04d9      	lsls	r1, r3, #19
 801569c:	6922      	ldr	r2, [r4, #16]
 801569e:	6022      	str	r2, [r4, #0]
 80156a0:	d504      	bpl.n	80156ac <__sflush_r+0x78>
 80156a2:	1c42      	adds	r2, r0, #1
 80156a4:	d101      	bne.n	80156aa <__sflush_r+0x76>
 80156a6:	682b      	ldr	r3, [r5, #0]
 80156a8:	b903      	cbnz	r3, 80156ac <__sflush_r+0x78>
 80156aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80156ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80156ae:	602f      	str	r7, [r5, #0]
 80156b0:	b1b9      	cbz	r1, 80156e2 <__sflush_r+0xae>
 80156b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80156b6:	4299      	cmp	r1, r3
 80156b8:	d002      	beq.n	80156c0 <__sflush_r+0x8c>
 80156ba:	4628      	mov	r0, r5
 80156bc:	f7ff fb40 	bl	8014d40 <_free_r>
 80156c0:	2300      	movs	r3, #0
 80156c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80156c4:	e00d      	b.n	80156e2 <__sflush_r+0xae>
 80156c6:	2301      	movs	r3, #1
 80156c8:	4628      	mov	r0, r5
 80156ca:	47b0      	blx	r6
 80156cc:	4602      	mov	r2, r0
 80156ce:	1c50      	adds	r0, r2, #1
 80156d0:	d1c9      	bne.n	8015666 <__sflush_r+0x32>
 80156d2:	682b      	ldr	r3, [r5, #0]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d0c6      	beq.n	8015666 <__sflush_r+0x32>
 80156d8:	2b1d      	cmp	r3, #29
 80156da:	d001      	beq.n	80156e0 <__sflush_r+0xac>
 80156dc:	2b16      	cmp	r3, #22
 80156de:	d11e      	bne.n	801571e <__sflush_r+0xea>
 80156e0:	602f      	str	r7, [r5, #0]
 80156e2:	2000      	movs	r0, #0
 80156e4:	e022      	b.n	801572c <__sflush_r+0xf8>
 80156e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80156ea:	b21b      	sxth	r3, r3
 80156ec:	e01b      	b.n	8015726 <__sflush_r+0xf2>
 80156ee:	690f      	ldr	r7, [r1, #16]
 80156f0:	2f00      	cmp	r7, #0
 80156f2:	d0f6      	beq.n	80156e2 <__sflush_r+0xae>
 80156f4:	0793      	lsls	r3, r2, #30
 80156f6:	680e      	ldr	r6, [r1, #0]
 80156f8:	bf08      	it	eq
 80156fa:	694b      	ldreq	r3, [r1, #20]
 80156fc:	600f      	str	r7, [r1, #0]
 80156fe:	bf18      	it	ne
 8015700:	2300      	movne	r3, #0
 8015702:	eba6 0807 	sub.w	r8, r6, r7
 8015706:	608b      	str	r3, [r1, #8]
 8015708:	f1b8 0f00 	cmp.w	r8, #0
 801570c:	dde9      	ble.n	80156e2 <__sflush_r+0xae>
 801570e:	6a21      	ldr	r1, [r4, #32]
 8015710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015712:	4643      	mov	r3, r8
 8015714:	463a      	mov	r2, r7
 8015716:	4628      	mov	r0, r5
 8015718:	47b0      	blx	r6
 801571a:	2800      	cmp	r0, #0
 801571c:	dc08      	bgt.n	8015730 <__sflush_r+0xfc>
 801571e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015726:	81a3      	strh	r3, [r4, #12]
 8015728:	f04f 30ff 	mov.w	r0, #4294967295
 801572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015730:	4407      	add	r7, r0
 8015732:	eba8 0800 	sub.w	r8, r8, r0
 8015736:	e7e7      	b.n	8015708 <__sflush_r+0xd4>
 8015738:	dfbffffe 	.word	0xdfbffffe

0801573c <_fflush_r>:
 801573c:	b538      	push	{r3, r4, r5, lr}
 801573e:	690b      	ldr	r3, [r1, #16]
 8015740:	4605      	mov	r5, r0
 8015742:	460c      	mov	r4, r1
 8015744:	b913      	cbnz	r3, 801574c <_fflush_r+0x10>
 8015746:	2500      	movs	r5, #0
 8015748:	4628      	mov	r0, r5
 801574a:	bd38      	pop	{r3, r4, r5, pc}
 801574c:	b118      	cbz	r0, 8015756 <_fflush_r+0x1a>
 801574e:	6a03      	ldr	r3, [r0, #32]
 8015750:	b90b      	cbnz	r3, 8015756 <_fflush_r+0x1a>
 8015752:	f7ff f8fb 	bl	801494c <__sinit>
 8015756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d0f3      	beq.n	8015746 <_fflush_r+0xa>
 801575e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015760:	07d0      	lsls	r0, r2, #31
 8015762:	d404      	bmi.n	801576e <_fflush_r+0x32>
 8015764:	0599      	lsls	r1, r3, #22
 8015766:	d402      	bmi.n	801576e <_fflush_r+0x32>
 8015768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801576a:	f7ff faa6 	bl	8014cba <__retarget_lock_acquire_recursive>
 801576e:	4628      	mov	r0, r5
 8015770:	4621      	mov	r1, r4
 8015772:	f7ff ff5f 	bl	8015634 <__sflush_r>
 8015776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015778:	07da      	lsls	r2, r3, #31
 801577a:	4605      	mov	r5, r0
 801577c:	d4e4      	bmi.n	8015748 <_fflush_r+0xc>
 801577e:	89a3      	ldrh	r3, [r4, #12]
 8015780:	059b      	lsls	r3, r3, #22
 8015782:	d4e1      	bmi.n	8015748 <_fflush_r+0xc>
 8015784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015786:	f7ff fa99 	bl	8014cbc <__retarget_lock_release_recursive>
 801578a:	e7dd      	b.n	8015748 <_fflush_r+0xc>

0801578c <fiprintf>:
 801578c:	b40e      	push	{r1, r2, r3}
 801578e:	b503      	push	{r0, r1, lr}
 8015790:	4601      	mov	r1, r0
 8015792:	ab03      	add	r3, sp, #12
 8015794:	4805      	ldr	r0, [pc, #20]	@ (80157ac <fiprintf+0x20>)
 8015796:	f853 2b04 	ldr.w	r2, [r3], #4
 801579a:	6800      	ldr	r0, [r0, #0]
 801579c:	9301      	str	r3, [sp, #4]
 801579e:	f7ff fca3 	bl	80150e8 <_vfiprintf_r>
 80157a2:	b002      	add	sp, #8
 80157a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80157a8:	b003      	add	sp, #12
 80157aa:	4770      	bx	lr
 80157ac:	20000180 	.word	0x20000180

080157b0 <__swbuf_r>:
 80157b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157b2:	460e      	mov	r6, r1
 80157b4:	4614      	mov	r4, r2
 80157b6:	4605      	mov	r5, r0
 80157b8:	b118      	cbz	r0, 80157c2 <__swbuf_r+0x12>
 80157ba:	6a03      	ldr	r3, [r0, #32]
 80157bc:	b90b      	cbnz	r3, 80157c2 <__swbuf_r+0x12>
 80157be:	f7ff f8c5 	bl	801494c <__sinit>
 80157c2:	69a3      	ldr	r3, [r4, #24]
 80157c4:	60a3      	str	r3, [r4, #8]
 80157c6:	89a3      	ldrh	r3, [r4, #12]
 80157c8:	071a      	lsls	r2, r3, #28
 80157ca:	d501      	bpl.n	80157d0 <__swbuf_r+0x20>
 80157cc:	6923      	ldr	r3, [r4, #16]
 80157ce:	b943      	cbnz	r3, 80157e2 <__swbuf_r+0x32>
 80157d0:	4621      	mov	r1, r4
 80157d2:	4628      	mov	r0, r5
 80157d4:	f000 f82a 	bl	801582c <__swsetup_r>
 80157d8:	b118      	cbz	r0, 80157e2 <__swbuf_r+0x32>
 80157da:	f04f 37ff 	mov.w	r7, #4294967295
 80157de:	4638      	mov	r0, r7
 80157e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157e2:	6823      	ldr	r3, [r4, #0]
 80157e4:	6922      	ldr	r2, [r4, #16]
 80157e6:	1a98      	subs	r0, r3, r2
 80157e8:	6963      	ldr	r3, [r4, #20]
 80157ea:	b2f6      	uxtb	r6, r6
 80157ec:	4283      	cmp	r3, r0
 80157ee:	4637      	mov	r7, r6
 80157f0:	dc05      	bgt.n	80157fe <__swbuf_r+0x4e>
 80157f2:	4621      	mov	r1, r4
 80157f4:	4628      	mov	r0, r5
 80157f6:	f7ff ffa1 	bl	801573c <_fflush_r>
 80157fa:	2800      	cmp	r0, #0
 80157fc:	d1ed      	bne.n	80157da <__swbuf_r+0x2a>
 80157fe:	68a3      	ldr	r3, [r4, #8]
 8015800:	3b01      	subs	r3, #1
 8015802:	60a3      	str	r3, [r4, #8]
 8015804:	6823      	ldr	r3, [r4, #0]
 8015806:	1c5a      	adds	r2, r3, #1
 8015808:	6022      	str	r2, [r4, #0]
 801580a:	701e      	strb	r6, [r3, #0]
 801580c:	6962      	ldr	r2, [r4, #20]
 801580e:	1c43      	adds	r3, r0, #1
 8015810:	429a      	cmp	r2, r3
 8015812:	d004      	beq.n	801581e <__swbuf_r+0x6e>
 8015814:	89a3      	ldrh	r3, [r4, #12]
 8015816:	07db      	lsls	r3, r3, #31
 8015818:	d5e1      	bpl.n	80157de <__swbuf_r+0x2e>
 801581a:	2e0a      	cmp	r6, #10
 801581c:	d1df      	bne.n	80157de <__swbuf_r+0x2e>
 801581e:	4621      	mov	r1, r4
 8015820:	4628      	mov	r0, r5
 8015822:	f7ff ff8b 	bl	801573c <_fflush_r>
 8015826:	2800      	cmp	r0, #0
 8015828:	d0d9      	beq.n	80157de <__swbuf_r+0x2e>
 801582a:	e7d6      	b.n	80157da <__swbuf_r+0x2a>

0801582c <__swsetup_r>:
 801582c:	b538      	push	{r3, r4, r5, lr}
 801582e:	4b29      	ldr	r3, [pc, #164]	@ (80158d4 <__swsetup_r+0xa8>)
 8015830:	4605      	mov	r5, r0
 8015832:	6818      	ldr	r0, [r3, #0]
 8015834:	460c      	mov	r4, r1
 8015836:	b118      	cbz	r0, 8015840 <__swsetup_r+0x14>
 8015838:	6a03      	ldr	r3, [r0, #32]
 801583a:	b90b      	cbnz	r3, 8015840 <__swsetup_r+0x14>
 801583c:	f7ff f886 	bl	801494c <__sinit>
 8015840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015844:	0719      	lsls	r1, r3, #28
 8015846:	d422      	bmi.n	801588e <__swsetup_r+0x62>
 8015848:	06da      	lsls	r2, r3, #27
 801584a:	d407      	bmi.n	801585c <__swsetup_r+0x30>
 801584c:	2209      	movs	r2, #9
 801584e:	602a      	str	r2, [r5, #0]
 8015850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015854:	81a3      	strh	r3, [r4, #12]
 8015856:	f04f 30ff 	mov.w	r0, #4294967295
 801585a:	e033      	b.n	80158c4 <__swsetup_r+0x98>
 801585c:	0758      	lsls	r0, r3, #29
 801585e:	d512      	bpl.n	8015886 <__swsetup_r+0x5a>
 8015860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015862:	b141      	cbz	r1, 8015876 <__swsetup_r+0x4a>
 8015864:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015868:	4299      	cmp	r1, r3
 801586a:	d002      	beq.n	8015872 <__swsetup_r+0x46>
 801586c:	4628      	mov	r0, r5
 801586e:	f7ff fa67 	bl	8014d40 <_free_r>
 8015872:	2300      	movs	r3, #0
 8015874:	6363      	str	r3, [r4, #52]	@ 0x34
 8015876:	89a3      	ldrh	r3, [r4, #12]
 8015878:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801587c:	81a3      	strh	r3, [r4, #12]
 801587e:	2300      	movs	r3, #0
 8015880:	6063      	str	r3, [r4, #4]
 8015882:	6923      	ldr	r3, [r4, #16]
 8015884:	6023      	str	r3, [r4, #0]
 8015886:	89a3      	ldrh	r3, [r4, #12]
 8015888:	f043 0308 	orr.w	r3, r3, #8
 801588c:	81a3      	strh	r3, [r4, #12]
 801588e:	6923      	ldr	r3, [r4, #16]
 8015890:	b94b      	cbnz	r3, 80158a6 <__swsetup_r+0x7a>
 8015892:	89a3      	ldrh	r3, [r4, #12]
 8015894:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801589c:	d003      	beq.n	80158a6 <__swsetup_r+0x7a>
 801589e:	4621      	mov	r1, r4
 80158a0:	4628      	mov	r0, r5
 80158a2:	f000 f860 	bl	8015966 <__smakebuf_r>
 80158a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158aa:	f013 0201 	ands.w	r2, r3, #1
 80158ae:	d00a      	beq.n	80158c6 <__swsetup_r+0x9a>
 80158b0:	2200      	movs	r2, #0
 80158b2:	60a2      	str	r2, [r4, #8]
 80158b4:	6962      	ldr	r2, [r4, #20]
 80158b6:	4252      	negs	r2, r2
 80158b8:	61a2      	str	r2, [r4, #24]
 80158ba:	6922      	ldr	r2, [r4, #16]
 80158bc:	b942      	cbnz	r2, 80158d0 <__swsetup_r+0xa4>
 80158be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80158c2:	d1c5      	bne.n	8015850 <__swsetup_r+0x24>
 80158c4:	bd38      	pop	{r3, r4, r5, pc}
 80158c6:	0799      	lsls	r1, r3, #30
 80158c8:	bf58      	it	pl
 80158ca:	6962      	ldrpl	r2, [r4, #20]
 80158cc:	60a2      	str	r2, [r4, #8]
 80158ce:	e7f4      	b.n	80158ba <__swsetup_r+0x8e>
 80158d0:	2000      	movs	r0, #0
 80158d2:	e7f7      	b.n	80158c4 <__swsetup_r+0x98>
 80158d4:	20000180 	.word	0x20000180

080158d8 <memmove>:
 80158d8:	4288      	cmp	r0, r1
 80158da:	b510      	push	{r4, lr}
 80158dc:	eb01 0402 	add.w	r4, r1, r2
 80158e0:	d902      	bls.n	80158e8 <memmove+0x10>
 80158e2:	4284      	cmp	r4, r0
 80158e4:	4623      	mov	r3, r4
 80158e6:	d807      	bhi.n	80158f8 <memmove+0x20>
 80158e8:	1e43      	subs	r3, r0, #1
 80158ea:	42a1      	cmp	r1, r4
 80158ec:	d008      	beq.n	8015900 <memmove+0x28>
 80158ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158f6:	e7f8      	b.n	80158ea <memmove+0x12>
 80158f8:	4402      	add	r2, r0
 80158fa:	4601      	mov	r1, r0
 80158fc:	428a      	cmp	r2, r1
 80158fe:	d100      	bne.n	8015902 <memmove+0x2a>
 8015900:	bd10      	pop	{r4, pc}
 8015902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801590a:	e7f7      	b.n	80158fc <memmove+0x24>

0801590c <abort>:
 801590c:	b508      	push	{r3, lr}
 801590e:	2006      	movs	r0, #6
 8015910:	f000 f88e 	bl	8015a30 <raise>
 8015914:	2001      	movs	r0, #1
 8015916:	f7ed ff53 	bl	80037c0 <_exit>

0801591a <__swhatbuf_r>:
 801591a:	b570      	push	{r4, r5, r6, lr}
 801591c:	460c      	mov	r4, r1
 801591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015922:	2900      	cmp	r1, #0
 8015924:	b096      	sub	sp, #88	@ 0x58
 8015926:	4615      	mov	r5, r2
 8015928:	461e      	mov	r6, r3
 801592a:	da0d      	bge.n	8015948 <__swhatbuf_r+0x2e>
 801592c:	89a3      	ldrh	r3, [r4, #12]
 801592e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015932:	f04f 0100 	mov.w	r1, #0
 8015936:	bf14      	ite	ne
 8015938:	2340      	movne	r3, #64	@ 0x40
 801593a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801593e:	2000      	movs	r0, #0
 8015940:	6031      	str	r1, [r6, #0]
 8015942:	602b      	str	r3, [r5, #0]
 8015944:	b016      	add	sp, #88	@ 0x58
 8015946:	bd70      	pop	{r4, r5, r6, pc}
 8015948:	466a      	mov	r2, sp
 801594a:	f000 f879 	bl	8015a40 <_fstat_r>
 801594e:	2800      	cmp	r0, #0
 8015950:	dbec      	blt.n	801592c <__swhatbuf_r+0x12>
 8015952:	9901      	ldr	r1, [sp, #4]
 8015954:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015958:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801595c:	4259      	negs	r1, r3
 801595e:	4159      	adcs	r1, r3
 8015960:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015964:	e7eb      	b.n	801593e <__swhatbuf_r+0x24>

08015966 <__smakebuf_r>:
 8015966:	898b      	ldrh	r3, [r1, #12]
 8015968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801596a:	079d      	lsls	r5, r3, #30
 801596c:	4606      	mov	r6, r0
 801596e:	460c      	mov	r4, r1
 8015970:	d507      	bpl.n	8015982 <__smakebuf_r+0x1c>
 8015972:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015976:	6023      	str	r3, [r4, #0]
 8015978:	6123      	str	r3, [r4, #16]
 801597a:	2301      	movs	r3, #1
 801597c:	6163      	str	r3, [r4, #20]
 801597e:	b003      	add	sp, #12
 8015980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015982:	ab01      	add	r3, sp, #4
 8015984:	466a      	mov	r2, sp
 8015986:	f7ff ffc8 	bl	801591a <__swhatbuf_r>
 801598a:	9f00      	ldr	r7, [sp, #0]
 801598c:	4605      	mov	r5, r0
 801598e:	4639      	mov	r1, r7
 8015990:	4630      	mov	r0, r6
 8015992:	f7fe fda9 	bl	80144e8 <_malloc_r>
 8015996:	b948      	cbnz	r0, 80159ac <__smakebuf_r+0x46>
 8015998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801599c:	059a      	lsls	r2, r3, #22
 801599e:	d4ee      	bmi.n	801597e <__smakebuf_r+0x18>
 80159a0:	f023 0303 	bic.w	r3, r3, #3
 80159a4:	f043 0302 	orr.w	r3, r3, #2
 80159a8:	81a3      	strh	r3, [r4, #12]
 80159aa:	e7e2      	b.n	8015972 <__smakebuf_r+0xc>
 80159ac:	89a3      	ldrh	r3, [r4, #12]
 80159ae:	6020      	str	r0, [r4, #0]
 80159b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80159b4:	81a3      	strh	r3, [r4, #12]
 80159b6:	9b01      	ldr	r3, [sp, #4]
 80159b8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80159bc:	b15b      	cbz	r3, 80159d6 <__smakebuf_r+0x70>
 80159be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159c2:	4630      	mov	r0, r6
 80159c4:	f000 f84e 	bl	8015a64 <_isatty_r>
 80159c8:	b128      	cbz	r0, 80159d6 <__smakebuf_r+0x70>
 80159ca:	89a3      	ldrh	r3, [r4, #12]
 80159cc:	f023 0303 	bic.w	r3, r3, #3
 80159d0:	f043 0301 	orr.w	r3, r3, #1
 80159d4:	81a3      	strh	r3, [r4, #12]
 80159d6:	89a3      	ldrh	r3, [r4, #12]
 80159d8:	431d      	orrs	r5, r3
 80159da:	81a5      	strh	r5, [r4, #12]
 80159dc:	e7cf      	b.n	801597e <__smakebuf_r+0x18>

080159de <_raise_r>:
 80159de:	291f      	cmp	r1, #31
 80159e0:	b538      	push	{r3, r4, r5, lr}
 80159e2:	4605      	mov	r5, r0
 80159e4:	460c      	mov	r4, r1
 80159e6:	d904      	bls.n	80159f2 <_raise_r+0x14>
 80159e8:	2316      	movs	r3, #22
 80159ea:	6003      	str	r3, [r0, #0]
 80159ec:	f04f 30ff 	mov.w	r0, #4294967295
 80159f0:	bd38      	pop	{r3, r4, r5, pc}
 80159f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80159f4:	b112      	cbz	r2, 80159fc <_raise_r+0x1e>
 80159f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80159fa:	b94b      	cbnz	r3, 8015a10 <_raise_r+0x32>
 80159fc:	4628      	mov	r0, r5
 80159fe:	f000 f853 	bl	8015aa8 <_getpid_r>
 8015a02:	4622      	mov	r2, r4
 8015a04:	4601      	mov	r1, r0
 8015a06:	4628      	mov	r0, r5
 8015a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a0c:	f000 b83a 	b.w	8015a84 <_kill_r>
 8015a10:	2b01      	cmp	r3, #1
 8015a12:	d00a      	beq.n	8015a2a <_raise_r+0x4c>
 8015a14:	1c59      	adds	r1, r3, #1
 8015a16:	d103      	bne.n	8015a20 <_raise_r+0x42>
 8015a18:	2316      	movs	r3, #22
 8015a1a:	6003      	str	r3, [r0, #0]
 8015a1c:	2001      	movs	r0, #1
 8015a1e:	e7e7      	b.n	80159f0 <_raise_r+0x12>
 8015a20:	2100      	movs	r1, #0
 8015a22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015a26:	4620      	mov	r0, r4
 8015a28:	4798      	blx	r3
 8015a2a:	2000      	movs	r0, #0
 8015a2c:	e7e0      	b.n	80159f0 <_raise_r+0x12>
	...

08015a30 <raise>:
 8015a30:	4b02      	ldr	r3, [pc, #8]	@ (8015a3c <raise+0xc>)
 8015a32:	4601      	mov	r1, r0
 8015a34:	6818      	ldr	r0, [r3, #0]
 8015a36:	f7ff bfd2 	b.w	80159de <_raise_r>
 8015a3a:	bf00      	nop
 8015a3c:	20000180 	.word	0x20000180

08015a40 <_fstat_r>:
 8015a40:	b538      	push	{r3, r4, r5, lr}
 8015a42:	4d07      	ldr	r5, [pc, #28]	@ (8015a60 <_fstat_r+0x20>)
 8015a44:	2300      	movs	r3, #0
 8015a46:	4604      	mov	r4, r0
 8015a48:	4608      	mov	r0, r1
 8015a4a:	4611      	mov	r1, r2
 8015a4c:	602b      	str	r3, [r5, #0]
 8015a4e:	f7ed ff07 	bl	8003860 <_fstat>
 8015a52:	1c43      	adds	r3, r0, #1
 8015a54:	d102      	bne.n	8015a5c <_fstat_r+0x1c>
 8015a56:	682b      	ldr	r3, [r5, #0]
 8015a58:	b103      	cbz	r3, 8015a5c <_fstat_r+0x1c>
 8015a5a:	6023      	str	r3, [r4, #0]
 8015a5c:	bd38      	pop	{r3, r4, r5, pc}
 8015a5e:	bf00      	nop
 8015a60:	20011034 	.word	0x20011034

08015a64 <_isatty_r>:
 8015a64:	b538      	push	{r3, r4, r5, lr}
 8015a66:	4d06      	ldr	r5, [pc, #24]	@ (8015a80 <_isatty_r+0x1c>)
 8015a68:	2300      	movs	r3, #0
 8015a6a:	4604      	mov	r4, r0
 8015a6c:	4608      	mov	r0, r1
 8015a6e:	602b      	str	r3, [r5, #0]
 8015a70:	f7ed ff06 	bl	8003880 <_isatty>
 8015a74:	1c43      	adds	r3, r0, #1
 8015a76:	d102      	bne.n	8015a7e <_isatty_r+0x1a>
 8015a78:	682b      	ldr	r3, [r5, #0]
 8015a7a:	b103      	cbz	r3, 8015a7e <_isatty_r+0x1a>
 8015a7c:	6023      	str	r3, [r4, #0]
 8015a7e:	bd38      	pop	{r3, r4, r5, pc}
 8015a80:	20011034 	.word	0x20011034

08015a84 <_kill_r>:
 8015a84:	b538      	push	{r3, r4, r5, lr}
 8015a86:	4d07      	ldr	r5, [pc, #28]	@ (8015aa4 <_kill_r+0x20>)
 8015a88:	2300      	movs	r3, #0
 8015a8a:	4604      	mov	r4, r0
 8015a8c:	4608      	mov	r0, r1
 8015a8e:	4611      	mov	r1, r2
 8015a90:	602b      	str	r3, [r5, #0]
 8015a92:	f7ed fe85 	bl	80037a0 <_kill>
 8015a96:	1c43      	adds	r3, r0, #1
 8015a98:	d102      	bne.n	8015aa0 <_kill_r+0x1c>
 8015a9a:	682b      	ldr	r3, [r5, #0]
 8015a9c:	b103      	cbz	r3, 8015aa0 <_kill_r+0x1c>
 8015a9e:	6023      	str	r3, [r4, #0]
 8015aa0:	bd38      	pop	{r3, r4, r5, pc}
 8015aa2:	bf00      	nop
 8015aa4:	20011034 	.word	0x20011034

08015aa8 <_getpid_r>:
 8015aa8:	f7ed be72 	b.w	8003790 <_getpid>

08015aac <_init>:
 8015aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aae:	bf00      	nop
 8015ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ab2:	bc08      	pop	{r3}
 8015ab4:	469e      	mov	lr, r3
 8015ab6:	4770      	bx	lr

08015ab8 <_fini>:
 8015ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015aba:	bf00      	nop
 8015abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015abe:	bc08      	pop	{r3}
 8015ac0:	469e      	mov	lr, r3
 8015ac2:	4770      	bx	lr
